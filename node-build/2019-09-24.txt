{"nick":"node-slack-bot","date":"2019-09-24T02:17:59.801Z","type":"part"}
{"nick":"node-slack-bot","date":"2019-09-24T02:18:11.432Z","type":"join"}
{"nick":"lucalanziani","reason":"Quit: ZNC 1.7.0 - https://znc.in","date":"2019-09-24T08:42:38.807Z","type":"quit"}
{"nick":"lucalanziani","date":"2019-09-24T08:42:47.652Z","type":"join"}
{"nick":"sxa","date":"2019-09-24T10:20:29.600Z","type":"join"}
{"nick":"node-slack-bot","date":"2019-09-24T10:39:07.134Z","type":"part"}
{"nick":"node-slack-bot","date":"2019-09-24T10:39:30.785Z","type":"join"}
{"nick":"Piraty","date":"2019-09-24T12:57:02.271Z","type":"join"}
{"nick":"Piraty","message":"ah i guess this is the right channel then","date":"2019-09-24T12:57:23.315Z","type":"message"}
{"nick":"Piraty","message":"hi all.","date":"2019-09-24T12:57:25.274Z","type":"message"}
{"nick":"Piraty","message":"did it ever occur to anyone that the cflags that are defined in the gyp files are applied to both the host compiler invocations as well as the target compiler invocations? This is not good, as one may wish to apply either different sets of flags, or (in my case) has to use flags for the target compiler that don't even exist for the host compiler.","date":"2019-09-24T12:59:38.361Z","type":"message"}
{"nick":"Piraty","message":"(latter is rare obviously, but i hit it)","date":"2019-09-24T12:59:47.885Z","type":"message"}
{"nick":"Piraty","message":"since i know 0 about gyp i'm kinda list here where to debug this","date":"2019-09-24T13:00:05.644Z","type":"message"}
{"nick":"Piraty","message":"i'm willing to test and eventually contribute patches if anyone could throw me a hint about how to handle host/target distiction correctly","date":"2019-09-24T13:00:56.400Z","type":"message"}
{"nick":"Piraty","message":"since the gyp files already check on {CC,CXX,CPP}_host, they could as well to this for the associated flags","date":"2019-09-24T13:01:37.473Z","type":"message"}
{"nick":"refack","message":"Piraty: to implement host/target specific cflags, node uses conditionals like https://github.com/nodejs/node/blob/master/tools/v8_gypfiles/toolchain.gypi#L212","date":"2019-09-24T13:37:29.957Z","type":"message"}
{"nick":"Piraty","message":"then i assume at some point a concatenation happens, because cross flags are used with host gcc and that won't work in some situations","date":"2019-09-24T13:39:13.900Z","type":"message"}
{"nick":"refack","message":"Yeah, gyp variable lists are usually concatenated - http://gyp3.org/docs/InputFormatReference.html#merging","date":"2019-09-24T13:42:32.402Z","type":"message"}
{"nick":"refack","message":"the challenge in implementing host/target special variables is that it is tricky to test, and also the current implementation isn't well enough aware of this use case","date":"2019-09-24T13:44:31.202Z","type":"message"}
{"nick":"refack","message":"https://github.com/refack/GYP3/blob/master/gyp/input.py#L1129 is the main pain point","date":"2019-09-24T13:46:12.083Z","type":"message"}
{"nick":"Piraty","message":"i wonder how you provide ppc64 builds, when this https://github.com/nodejs/node/blob/master/common.gypi#L388 flag is set, because in my local builds it appends this flag to host gcc calls which fail","date":"2019-09-24T13:53:28.312Z","type":"message"}
{"nick":"Piraty","message":"else i have misconfigured my configure","date":"2019-09-24T13:53:44.161Z","type":"message"}
{"nick":"Piraty","message":"i didn't find the release build scripts yet, can you hint me refack ?","date":"2019-09-24T13:54:08.317Z","type":"message"}
{"nick":"Piraty","message":"(assuming ppc64 gets crosscompiled and is not built natively)","date":"2019-09-24T13:54:25.768Z","type":"message"}
{"nick":"refack","message":"We don't cross-compile for ppc64. We only cross-compile for ARM7 and ARM8","date":"2019-09-24T13:54:59.749Z","type":"message"}
{"nick":"refack","message":"The \"really\" platform specific stuff is partly embedded in the Jenkins scripts - https://ci.nodejs.org/job/node-test-commit-plinux/configure (You should have read-only view of that)","date":"2019-09-24T13:57:41.044Z","type":"message"}
{"nick":"refack","message":"and some is in https://github.com/nodejs/build/blob/master/jenkins/scripts/select-compiler.sh","date":"2019-09-24T13:58:03.164Z","type":"message"}
{"nick":"sxa","reason":"Ping timeout: 268 seconds","date":"2019-09-24T14:33:46.604Z","type":"quit"}
{"nick":"sxa","date":"2019-09-24T14:38:14.124Z","type":"join"}
{"nick":"sxa","reason":"Ping timeout: 240 seconds","date":"2019-09-24T14:42:57.219Z","type":"quit"}
{"nick":"sxa","date":"2019-09-24T14:49:37.200Z","type":"join"}
{"nick":"node-slack-bot","date":"2019-09-24T18:55:29.068Z","type":"part"}
{"nick":"node-slack-bot","date":"2019-09-24T18:55:53.415Z","type":"join"}
{"nick":"sxa","reason":"Ping timeout: 245 seconds","date":"2019-09-24T19:07:09.704Z","type":"quit"}
{"nick":"octetcloud","date":"2019-09-24T20:15:18.750Z","type":"join"}
{"nick":"sxa","date":"2019-09-24T21:42:13.009Z","type":"join"}
