{"nick":"Guest72457","new_nick":"indutny","date":"2018-02-21T00:29:25.380Z","type":"nick"}
{"nick":"cm_","date":"2018-02-21T01:02:49.961Z","type":"join"}
{"nick":"cm_","message":"Hi. Is it a good place to ask technical questions about libuv?","date":"2018-02-21T01:03:45.032Z","type":"message"}
{"nick":"cm_","message":"it seems that internal new_socket() function can return positive error code -- it seems like a bug, but I'd like to confirm it before submitting it to issues list","date":"2018-02-21T01:07:08.735Z","type":"message"}
{"nick":"indutny","message":"hi","date":"2018-02-21T01:12:43.670Z","type":"message"}
{"nick":"indutny","message":"this is a good place, indeed","date":"2018-02-21T01:12:50.571Z","type":"message"}
{"nick":"indutny","message":"can it, though?","date":"2018-02-21T01:13:35.621Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-02-21T01:40:58.364Z","type":"quit"}
{"nick":"qard","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-21T01:49:28.948Z","type":"quit"}
{"nick":"qard","date":"2018-02-21T02:17:31.602Z","type":"join"}
{"nick":"qard","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-21T05:05:50.206Z","type":"quit"}
{"nick":"qard","date":"2018-02-21T05:51:12.696Z","type":"join"}
{"nick":"qard","reason":"Quit: qard","date":"2018-02-21T07:55:58.285Z","type":"quit"}
{"nick":"paolof","reason":"Ping timeout: 276 seconds","date":"2018-02-21T09:49:47.863Z","type":"quit"}
{"nick":"paolof_","date":"2018-02-21T09:49:48.785Z","type":"join"}
{"nick":"abhishek","date":"2018-02-21T11:08:04.449Z","type":"join"}
{"nick":"abhishek","message":"Hi, trying to debug one case where uv_write isn't invoking uv_write_cb callback - running on libuv v1.13.1 debian9","date":"2018-02-21T11:11:11.950Z","type":"message"}
{"nick":"abhishek","message":"any suggestion(s) to debug it? Weird thing is this only seems to happen under load i.e. works fine when app does 1K or so uv_write call/s but with 10K such calls triggering of uv_write_cb stalls","date":"2018-02-21T11:12:33.078Z","type":"message"}
{"nick":"AtumT","date":"2018-02-21T11:17:00.889Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-02-21T11:25:11.437Z","type":"quit"}
{"nick":"mylesborins","date":"2018-02-21T11:25:47.411Z","type":"join"}
{"nick":"sgimeno","message":"abhishek, that version is quite old, you could update to the latest 1.19.1","date":"2018-02-21T12:13:45.987Z","type":"message"}
{"nick":"sgimeno","message":"abhishek, can you reproduce the issue when running the program with strace? that can help trying to figure out what's going on","date":"2018-02-21T12:14:29.413Z","type":"message"}
{"nick":"abhishek","reason":"Ping timeout: 240 seconds","date":"2018-02-21T12:16:05.447Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-02-21T15:36:34.408Z","type":"join"}
{"nick":"qard","date":"2018-02-21T15:59:11.486Z","type":"join"}
{"nick":"qard_","date":"2018-02-21T16:08:08.514Z","type":"join"}
{"nick":"abhishek1","date":"2018-02-21T16:30:07.982Z","type":"join"}
{"nick":"abhishek1","reason":"Quit: Leaving.","date":"2018-02-21T16:59:15.177Z","type":"quit"}
{"nick":"abhishek1","date":"2018-02-21T17:10:55.778Z","type":"join"}
{"nick":"qard_","reason":"Quit: qard_","date":"2018-02-21T17:18:06.484Z","type":"quit"}
{"nick":"abhishek1","reason":"Quit: Leaving.","date":"2018-02-21T17:38:53.689Z","type":"quit"}
{"nick":"cm_","message":"indutny: yes, lines 55 and 61 (in src/unix/tcp.c) can return positive error codes that may bubble up to client","date":"2018-02-21T18:10:55.878Z","type":"message"}
{"nick":"indutny","message":"cm_: which version are you referring too?","date":"2018-02-21T18:11:59.917Z","type":"message"}
{"nick":"cm_","message":"huh... am I looking at the wrong branch (v1.x)? (https://github.com/libuv/libuv/blob/v1.x/src/unix/tcp.c)","date":"2018-02-21T18:15:21.136Z","type":"message"}
{"nick":"cm_","message":"I switched to 1.19.1 tag and tcp.c content is the same","date":"2018-02-21T18:16:41.288Z","type":"message"}
{"nick":"cm_","message":"indutny: v1.19.1","date":"2018-02-21T18:24:17.181Z","type":"message"}
{"nick":"indutny","message":"cm_: `getsockname` returns non-positive value","date":"2018-02-21T18:25:12.221Z","type":"message"}
{"nick":"indutny","message":"that's by spec","date":"2018-02-21T18:25:14.653Z","type":"message"}
{"nick":"indutny","message":"same for `bind`","date":"2018-02-21T18:25:29.651Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-02-21T18:25:39.321Z","type":"quit"}
{"nick":"indutny","message":"they both practically return either 0 or -1","date":"2018-02-21T18:25:52.751Z","type":"message"}
{"nick":"indutny","message":"I'd bet that it is part of POSIX standard","date":"2018-02-21T18:26:00.906Z","type":"message"}
{"nick":"cm_","message":"my bad... I didn't read man page carefully enough, thought ERRORS section is for return value","date":"2018-02-21T18:27:11.163Z","type":"message"}
{"nick":"cm_","message":"but this also means that original error code will be lost -- is it ok? (that was my question #2 -- I noticed the loss of error code in places like event loop creation, etc)","date":"2018-02-21T18:28:42.916Z","type":"message"}
{"nick":"cm_","message":"some background: I am trying to \"wrap\" libuv to be used with libcoro in C++ code and trying to figure out how error handling will look like. Having generic \"libuv error\" isn't ideal","date":"2018-02-21T18:31:52.563Z","type":"message"}
{"nick":"Fishrock123","date":"2018-02-21T18:32:06.420Z","type":"join"}
{"nick":"cm_","message":"question #3: if uv_listen() callback doesn't call uv_accept() (for example because there is no memory to allocate uv_tcp_t) -- will it be triggered again ad infinitum? Is there a way to discard currently pending connection from the backlog without doing memory allocation?","date":"2018-02-21T18:40:56.468Z","type":"message"}
{"nick":"indutny","message":"cm_: original return value is either 0 on success","date":"2018-02-21T18:40:57.113Z","type":"message"}
{"nick":"indutny","message":"or -1 on error","date":"2018-02-21T18:40:59.844Z","type":"message"}
{"nick":"indutny","message":"I don't think it will","date":"2018-02-21T18:41:25.719Z","type":"message"}
{"nick":"indutny","message":"also, I missed question #2 :D","date":"2018-02-21T18:41:30.165Z","type":"message"}
{"nick":"cm_","message":"indutny: question #2: I noticed the loss of error code in places like event loop creation -- is it ok?","date":"2018-02-21T18:42:41.088Z","type":"message"}
{"nick":"indutny","message":"cm_: examples?","date":"2018-02-21T18:43:45.787Z","type":"message"}
{"nick":"cm_","message":"indutny: question #1: in the rest of tcp.c we always return (-errno) on error. why new_socket() is special?","date":"2018-02-21T18:43:50.244Z","type":"message"}
{"nick":"cm_","message":"indutny: q#2: uv_default_loop() returns NULL on error -- original error is lost.","date":"2018-02-21T18:45:12.253Z","type":"message"}
{"nick":"indutny","message":"q#2: historical reasons","date":"2018-02-21T18:46:00.796Z","type":"message"}
{"nick":"indutny","message":"you can always use `uv_loop_init`","date":"2018-02-21T18:46:04.020Z","type":"message"}
{"nick":"indutny","message":"and handle the errors manually","date":"2018-02-21T18:46:09.633Z","type":"message"}
{"nick":"cm_","message":"well, it isn't about handling them -- it is about getting them, wrapping them and presenting them to user. But I see your point","date":"2018-02-21T18:46:51.431Z","type":"message"}
{"nick":"cm_","message":"about q#3 -- are you sure? I thought connection stays in backlog until accept() -- i.e. in next loop iteration it should detect that connection is pending and invoke callback again","date":"2018-02-21T18:48:35.814Z","type":"message"}
{"nick":"cm_","message":"indutny: I need to step out for 1 hour. If you have anything to say -- please do. Thank you for your help (past and future) :)","date":"2018-02-21T18:52:26.901Z","type":"message"}
{"nick":"indutny","message":"cm_: you can always test it :)","date":"2018-02-21T18:54:25.949Z","type":"message"}
{"nick":"awakecoding","reason":"Remote host closed the connection","date":"2018-02-21T20:00:31.428Z","type":"quit"}
{"nick":"cm_","message":"indutny: well, I am kind of sure it will go bananas, so I was leading into \"is there a way to discard pending connection in a no-fail manner\". But I'll surely test it in any case","date":"2018-02-21T20:00:50.772Z","type":"message"}
{"nick":"indutny","message":"`      /* The user hasn't yet accepted called uv_accept() */`","date":"2018-02-21T20:03:33.855Z","type":"message"}
{"nick":"indutny","message":"there is such comment in unix/stream.c","date":"2018-02-21T20:03:41.458Z","type":"message"}
{"nick":"indutny","message":"also, I wrote some parts of that code","date":"2018-02-21T20:03:48.175Z","type":"message"}
{"nick":"indutny","message":"I'd appreciate if you could quantify \"kind of sure\" with documentation or source code reference next time ;)","date":"2018-02-21T20:04:12.174Z","type":"message"}
{"nick":"indutny","message":"or your test case","date":"2018-02-21T20:04:26.251Z","type":"message"}
{"nick":"cm_","message":"indutny: sigh... hard to quantify this without spending long time digging in the code -- that is why I am asking questions here :). In any case -- I see in unix/stream.c that in this case (accepted_fd != -1) we stop watching for POLLIN events -- i.e. there will be no endless spinning. But does it mean we are going to get stuck? (since we aren't going to get any \"new connection pending\" events)","date":"2018-02-21T20:29:46.886Z","type":"message"}
{"nick":"joocain2_","date":"2018-02-21T20:30:36.100Z","type":"join"}
{"nick":"indutny","message":"you'll get one event for pending connection","date":"2018-02-21T20:33:31.417Z","type":"message"}
{"nick":"cm_","message":"indutny: Is there a way to recover from this situation if I can't call uv_accept() due to malloc failure? I see only two ways to reset 'accepted_fd': uv_close() or uv_accept(). ","date":"2018-02-21T20:33:36.379Z","type":"message"}
{"nick":"indutny","message":"Just to clarify my earlier comment","date":"2018-02-21T20:33:41.226Z","type":"message"}
{"nick":"indutny","message":"I wasn't expressing frustration over receiving questions","date":"2018-02-21T20:33:54.197Z","type":"message"}
{"nick":"indutny","message":"It was rather over not taking answers seriously","date":"2018-02-21T20:34:11.086Z","type":"message"}
{"nick":"cm_","message":"that is ok -- after that snafu with man, you could call me anything you want :)","date":"2018-02-21T20:34:33.450Z","type":"message"}
{"nick":"joocain2","reason":"Ping timeout: 255 seconds","date":"2018-02-21T20:35:20.954Z","type":"quit"}
{"nick":"indutny","message":"you can have a spare uv_tcp_t object allocated ahead of time, just in case","date":"2018-02-21T20:36:08.021Z","type":"message"}
{"nick":"indutny","message":"uv_accept into it and close it","date":"2018-02-21T20:36:18.335Z","type":"message"}
{"nick":"cm_","message":"huh... this should work","date":"2018-02-21T20:36:46.907Z","type":"message"}
{"nick":"cm_","message":"in fact, I think I saw similar discussion in libev mailing list. I spent last 2 weeks reading everything I could find on async programming, event loops and coroutines. Trying to connect everything together and imagine what api to present to end-user. Total brain overload... ","date":"2018-02-21T20:39:44.611Z","type":"message"}
{"nick":"cm_","message":"Thanks for help","date":"2018-02-21T20:39:59.048Z","type":"message"}
{"nick":"cm_","message":"wait a second... I thought you can't use handle until after uv_close() callback is invoked. Which means I wouldn't be able to handle two simultaneously pending connections. Am I?","date":"2018-02-21T20:42:13.090Z","type":"message"}
{"nick":"cm_","message":"*reuse","date":"2018-02-21T20:42:26.107Z","type":"message"}
{"nick":"indutny","message":"You could call read_stop on a server","date":"2018-02-21T20:43:45.494Z","type":"message"}
{"nick":"indutny","message":"To prevent further connections from popping up","date":"2018-02-21T20:43:53.970Z","type":"message"}
{"nick":"indutny","message":"Although, this won't help in IPC case","date":"2018-02-21T20:44:02.737Z","type":"message"}
{"nick":"indutny","message":"yeah, there's probably no way to do it","date":"2018-02-21T20:45:35.066Z","type":"message"}
{"nick":"indutny","message":"to handle it gracefully","date":"2018-02-21T20:45:41.036Z","type":"message"}
{"nick":"indutny","message":"feel free to open an issue on our tracker","date":"2018-02-21T20:45:46.460Z","type":"message"}
{"nick":"cm_","message":"maybe it makes sense to be able to pass NULL into uv_accept() with associated \"just discard it\" semantics?","date":"2018-02-21T20:45:59.341Z","type":"message"}
{"nick":"cm_","message":"(NULL for cb)","date":"2018-02-21T20:46:11.795Z","type":"message"}
{"nick":"cm_","message":"ok, I'll open a case","date":"2018-02-21T20:46:44.057Z","type":"message"}
{"nick":"cm_","message":"indutny: q#4 -- on x64 box 'make install' puts libraries into /usr/local/lib (instead of /usr/local/lib64, as I would expect). It can be addressed with ./configure --libdir=/usr/local/lib64, but then you get a warning from libtool during install. Is it supposed to work this way?","date":"2018-02-21T20:51:18.653Z","type":"message"}
{"nick":"cm_","message":"I noticed that many libs have the same behavior -- is it a convention of some sort? or /usr/local/lib64 is not a right place?","date":"2018-02-21T20:52:30.029Z","type":"message"}
{"nick":"indutny","message":"I'm afraid this is not something that I'm expert in","date":"2018-02-21T20:58:38.898Z","type":"message"}
{"nick":"indutny","message":"Isn't it an autotools stuff?","date":"2018-02-21T20:58:53.110Z","type":"message"}
{"nick":"cm_","message":"I guess... I am very vaguely familiar with autotools","date":"2018-02-21T21:03:17.821Z","type":"message"}
{"nick":"qard_","date":"2018-02-21T21:23:17.350Z","type":"join"}
{"nick":"qard_","reason":"Quit: qard_","date":"2018-02-21T22:45:23.843Z","type":"quit"}
{"nick":"qard","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-02-21T22:57:49.407Z","type":"quit"}
{"nick":"qard","date":"2018-02-21T23:06:07.266Z","type":"join"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2018-02-21T23:49:21.678Z","type":"quit"}
