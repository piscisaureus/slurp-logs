{"nick":"qard","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-22T00:21:32.962Z","type":"quit"}
{"nick":"qard","date":"2018-02-22T00:22:04.240Z","type":"join"}
{"nick":"qard","reason":"Client Quit","date":"2018-02-22T00:22:44.835Z","type":"quit"}
{"nick":"cm_","reason":"Quit: Page closed","date":"2018-02-22T00:35:32.231Z","type":"quit"}
{"nick":"qard","date":"2018-02-22T00:42:10.577Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-02-22T00:46:40.248Z","type":"quit"}
{"nick":"qard","reason":"Quit: qard","date":"2018-02-22T01:26:51.463Z","type":"quit"}
{"nick":"joocain2_","reason":"Ping timeout: 255 seconds","date":"2018-02-22T05:00:14.964Z","type":"quit"}
{"nick":"joocain2","date":"2018-02-22T05:00:53.615Z","type":"join"}
{"nick":"AtumT","date":"2018-02-22T10:29:33.474Z","type":"join"}
{"nick":"lennartc-","date":"2018-02-22T10:57:36.740Z","type":"join"}
{"nick":"lennartcl","reason":"Ping timeout: 264 seconds","date":"2018-02-22T10:59:12.530Z","type":"quit"}
{"nick":"lennartc-","new_nick":"lennartcl","date":"2018-02-22T10:59:31.352Z","type":"nick"}
{"nick":"lennartcl","reason":"Changing host","date":"2018-02-22T10:59:32.256Z","type":"quit"}
{"nick":"lennartcl","date":"2018-02-22T10:59:32.325Z","type":"join"}
{"nick":"listenmore","reason":"Remote host closed the connection","date":"2018-02-22T11:03:05.387Z","type":"quit"}
{"nick":"listenmore","date":"2018-02-22T11:03:35.494Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-02-22T11:25:12.079Z","type":"quit"}
{"nick":"mylesborins","date":"2018-02-22T11:25:42.571Z","type":"join"}
{"nick":"listenmore","reason":"Remote host closed the connection","date":"2018-02-22T11:27:40.949Z","type":"quit"}
{"nick":"listenmore","date":"2018-02-22T11:28:12.837Z","type":"join"}
{"nick":"listenmore","reason":"Remote host closed the connection","date":"2018-02-22T11:38:14.984Z","type":"quit"}
{"nick":"listenmore","date":"2018-02-22T11:39:11.589Z","type":"join"}
{"nick":"indexzero","reason":"Ping timeout: 255 seconds","date":"2018-02-22T12:52:11.312Z","type":"quit"}
{"nick":"zkat","reason":"Ping timeout: 255 seconds","date":"2018-02-22T12:52:38.323Z","type":"quit"}
{"nick":"KennethWilke","reason":"Ping timeout: 255 seconds","date":"2018-02-22T12:52:48.025Z","type":"quit"}
{"nick":"tolmasky","reason":"Ping timeout: 255 seconds","date":"2018-02-22T12:53:41.882Z","type":"quit"}
{"nick":"KennethWilke","date":"2018-02-22T12:54:00.136Z","type":"join"}
{"nick":"zkat","date":"2018-02-22T12:54:14.737Z","type":"join"}
{"nick":"indexzero","date":"2018-02-22T12:54:51.781Z","type":"join"}
{"nick":"tolmasky","date":"2018-02-22T12:55:07.590Z","type":"join"}
{"nick":"listenmore","reason":"Remote host closed the connection","date":"2018-02-22T12:55:43.813Z","type":"quit"}
{"nick":"listenmore","date":"2018-02-22T12:56:13.935Z","type":"join"}
{"nick":"joocain2_","date":"2018-02-22T12:57:42.085Z","type":"join"}
{"nick":"joocain2","reason":"Ping timeout: 255 seconds","date":"2018-02-22T13:01:17.974Z","type":"quit"}
{"nick":"othiym23","reason":"Ping timeout: 255 seconds","date":"2018-02-22T13:57:26.307Z","type":"quit"}
{"nick":"othiym23","date":"2018-02-22T13:59:31.628Z","type":"join"}
{"nick":"qard","date":"2018-02-22T15:53:35.384Z","type":"join"}
{"nick":"AtumT_","date":"2018-02-22T16:13:52.474Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 256 seconds","date":"2018-02-22T16:17:03.405Z","type":"quit"}
{"nick":"AtumT","date":"2018-02-22T16:27:41.198Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 248 seconds","date":"2018-02-22T16:28:17.415Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-02-22T16:57:24.443Z","type":"join"}
{"nick":"sgimeno","reason":"Ping timeout: 276 seconds","date":"2018-02-22T17:14:09.342Z","type":"quit"}
{"nick":"sgimeno","date":"2018-02-22T17:15:47.361Z","type":"join"}
{"nick":"cm_","date":"2018-02-22T17:20:47.974Z","type":"join"}
{"nick":"cm_","message":"hi. I have a question about certain idiom used in libuv code -- namely using unprotected static variables to detect if given feature is present. For example see this: https://github.com/libuv/libuv/blob/89cbbc895bb459c6ab5319fa86a32a9fecbf8744/src/unix/core.c#L968","date":"2018-02-22T17:30:20.469Z","type":"message"}
{"nick":"cm_","message":"there is a race condition here and in C++ world this is undefined behavior (UB), which allows compiler to makes assumptions about your code that could break your program. Not sure about C, tbh -- that is why I am asking here","date":"2018-02-22T17:31:51.384Z","type":"message"}
{"nick":"cm_","message":"another consideration is \"false negative\"","date":"2018-02-22T17:32:18.583Z","type":"message"}
{"nick":"cm_","message":"that open() can fail because bad flags were passed in -- it will cause no_cloexec to be set to 1 for the rest of process lifetime","date":"2018-02-22T17:33:13.033Z","type":"message"}
{"nick":"cm_","message":"... or if `path` was wrong","date":"2018-02-22T17:34:11.068Z","type":"message"}
{"nick":"cm_","message":"uhm... scratch last part -- I didn't notice 'EINVAL' check","date":"2018-02-22T17:35:01.432Z","type":"message"}
{"nick":"listenmore","reason":"Remote host closed the connection","date":"2018-02-22T17:35:56.476Z","type":"quit"}
{"nick":"listenmore","date":"2018-02-22T17:36:23.507Z","type":"join"}
{"nick":"cm_","message":"question #2: libuv tries to deal with EMFILE errors in accept(), but it isn't guaranteed to work in multithreaded env. What is the recommendation for client's code to deal with EMFILE error that may bubble up?","date":"2018-02-22T17:50:18.327Z","type":"message"}
{"nick":"cm_","message":"question #3: EMFILE handling trick employs \"reserve\" loop->emfile_fd which is populated by uv__open_cloexec(\"/\", O_RDONLY) or uv__open_cloexec(\"/dev/null\", O_RDONLY). Isn't it a blocking operation? Why not dup(STDOUT) instead?","date":"2018-02-22T17:53:48.221Z","type":"message"}
{"nick":"joocain2_","reason":"Remote host closed the connection","date":"2018-02-22T18:42:54.902Z","type":"quit"}
{"nick":"joocain2","date":"2018-02-22T18:48:02.011Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-02-22T19:07:49.226Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-02-22T19:16:49.067Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-02-22T19:17:02.645Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-02-22T19:33:47.302Z","type":"join"}
{"nick":"listenmore","reason":"Read error: Connection reset by peer","date":"2018-02-22T19:52:59.557Z","type":"quit"}
{"nick":"listenmore","date":"2018-02-22T19:53:31.289Z","type":"join"}
{"nick":"cjihrig_","reason":"Quit: bye","date":"2018-02-22T20:06:13.454Z","type":"quit"}
{"nick":"qard","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-22T20:27:02.911Z","type":"quit"}
{"nick":"qard","date":"2018-02-22T20:29:05.566Z","type":"join"}
{"nick":"joocain2","reason":"Remote host closed the connection","date":"2018-02-22T20:39:42.669Z","type":"quit"}
{"nick":"joocain2","date":"2018-02-22T20:40:12.071Z","type":"join"}
{"nick":"listenmore","reason":"Remote host closed the connection","date":"2018-02-22T21:48:41.189Z","type":"quit"}
{"nick":"listenmore","date":"2018-02-22T21:49:08.556Z","type":"join"}
{"nick":"cm_","reason":"Quit: Page closed","date":"2018-02-22T23:36:02.534Z","type":"quit"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2018-02-22T23:51:54.362Z","type":"quit"}
