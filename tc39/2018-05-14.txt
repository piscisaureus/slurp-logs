{"nick":"devsnek","message":"i didn't really understand why his proposal specifies that primordial builtins share a function though","date":"2018-05-14T00:03:52.927Z","type":"message"}
{"nick":"devsnek","message":"that makes you have to do that awkward fn.call(x) instead of just fn(x)","date":"2018-05-14T00:04:58.763Z","type":"message"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2018-05-14T00:05:29.783Z","type":"quit"}
{"nick":"arai","date":"2018-05-14T00:21:16.429Z","type":"join"}
{"nick":"howdoi","date":"2018-05-14T02:20:04.483Z","type":"join"}
{"nick":"ljharb","message":" devsnek it didn’t get stopped. He was asked to come back with more use cases and he never came back, and then withdrew it.","date":"2018-05-14T02:32:14.022Z","type":"message"}
{"nick":"devsnek","message":"ljharb: is there a reason the term \"builtin\" was chosen","date":"2018-05-14T03:08:13.953Z","type":"message"}
{"nick":"devsnek","message":"for the symbol","date":"2018-05-14T03:08:30.648Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i dunno, that’s actually the main thing i dislike about it :-) that name doesn’t work because nay object can participate.","date":"2018-05-14T03:15:43.267Z","type":"message"}
{"nick":"devsnek","message":"ye that's what confused me","date":"2018-05-14T03:16:14.787Z","type":"message"}
{"nick":"devsnek","message":"but I'm rewriting it a bit anyway","date":"2018-05-14T03:16:23.543Z","type":"message"}
{"nick":"devsnek","message":"name bikeshedding galore","date":"2018-05-14T03:16:30.410Z","type":"message"}
{"nick":"IgnoredAmbience","reason":"Ping timeout: 240 seconds","date":"2018-05-14T03:50:05.515Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T04:22:52.607Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-14T04:26:09.394Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-05-14T04:41:02.138Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T04:48:41.371Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-14T04:51:30.425Z","type":"join"}
{"nick":"annevk","message":"ljharb: I think it needs to be a list, to support subclassing","date":"2018-05-14T08:01:11.607Z","type":"message"}
{"nick":"annevk","message":"ljharb: e.g., you want an easy answer to is this HTMLAnchorElement object an Element","date":"2018-05-14T08:01:46.190Z","type":"message"}
{"nick":"annevk","message":"ljharb: without a registry of all things that are subclasses of Element","date":"2018-05-14T08:02:24.739Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T08:24:05.668Z","type":"quit"}
{"nick":"IgnoredAmbience","date":"2018-05-14T08:24:53.975Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-14T08:41:16.460Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-05-14T08:56:15.719Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T09:45:11.935Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-14T10:25:08.687Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-14T10:25:39.057Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-14T11:22:36.728Z","type":"join"}
{"nick":"jmdyck","date":"2018-05-14T12:18:18.448Z","type":"join"}
{"nick":"AtumT","date":"2018-05-14T12:41:42.722Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T13:15:19.083Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-05-14T13:28:30.691Z","type":"quit"}
{"nick":"devsnek","message":"thats what i meant with like walking up prototype chains","date":"2018-05-14T13:33:18.650Z","type":"message"}
{"nick":"devsnek","message":"it gets really messy though cuz eventually everything is an object or `undefined`","date":"2018-05-14T13:33:58.170Z","type":"message"}
{"nick":"annevk","message":"devsnek: you cannot walk up prototype chains","date":"2018-05-14T13:34:59.396Z","type":"message"}
{"nick":"annevk","message":"devsnek: if I do instance.__proto__ = null this brand check should still work for the instance","date":"2018-05-14T13:35:22.795Z","type":"message"}
{"nick":"annevk","message":"(assuming you want to expose the underlying primitive, that is)","date":"2018-05-14T13:35:39.798Z","type":"message"}
{"nick":"devsnek","message":"so there needs to be magic secret sauce","date":"2018-05-14T13:35:54.394Z","type":"message"}
{"nick":"annevk","message":"internal slots are pretty common","date":"2018-05-14T13:39:33.620Z","type":"message"}
{"nick":"isHavvy","reason":"Read error: Connection reset by peer","date":"2018-05-14T13:39:58.500Z","type":"quit"}
{"nick":"devsnek","message":"how would someone fake it then","date":"2018-05-14T13:40:28.669Z","type":"message"}
{"nick":"devsnek","message":"i think pretending to be a Date or a Map or something is an important feature to have","date":"2018-05-14T13:40:42.128Z","type":"message"}
{"nick":"arai","date":"2018-05-14T13:42:35.943Z","type":"join"}
{"nick":"Havvy","date":"2018-05-14T13:42:54.789Z","type":"join"}
{"nick":"devsnek","message":"also now that i think about it, if you kill the prototype of something its not really that thing anymore","date":"2018-05-14T13:48:08.467Z","type":"message"}
{"nick":"annevk","message":"sure it is","date":"2018-05-14T13:57:34.103Z","type":"message"}
{"nick":"annevk","message":"being able to pretend certain objects would be bad for security","date":"2018-05-14T13:58:05.533Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: you can see an example here https://codepen.io/anon/pen/dejMdJ?editors=0012 , internal slots are like private access things that hosts/spec can use but JS itself cannot","date":"2018-05-14T14:04:23.382Z","type":"message"}
{"nick":"devsnek","message":"oh i know what internal slots are","date":"2018-05-14T14:07:04.593Z","type":"message"}
{"nick":"devsnek","message":"i'm just trying to also balance in userland","date":"2018-05-14T14:08:04.950Z","type":"message"}
{"nick":"devsnek","message":"userland doesn't have internal slots","date":"2018-05-14T14:08:13.768Z","type":"message"}
{"nick":"bradleymeck","message":"private fields can act like them","date":"2018-05-14T14:14:10.158Z","type":"message"}
{"nick":"bradleymeck","message":"sharing them gets wonky though for now","date":"2018-05-14T14:14:29.283Z","type":"message"}
{"nick":"bradleymeck","message":"you could also emulate them with weakmaps if you wanted to really; it looks different at a glance, can act the same though.","date":"2018-05-14T14:15:15.896Z","type":"message"}
{"nick":"devsnek","message":"https://gist.github.com/devsnek/7e8d4a37c774819639088648ee9d1180","date":"2018-05-14T14:20:36.503Z","type":"message"}
{"nick":"devsnek","message":"now ljharb's point about being able to save <something> that will always tell you if `x` is a Map or Array or something","date":"2018-05-14T14:21:47.575Z","type":"message"}
{"nick":"devsnek","message":"without that safety i came up with this: https://gist.github.com/devsnek/dd77b256d50a80570541dd4ab74bfc27","date":"2018-05-14T14:32:00.906Z","type":"message"}
{"nick":"keith_miller","date":"2018-05-14T14:32:04.415Z","type":"join"}
{"nick":"caitp","message":"can we have a new rule that `function factory(v) { return new class { #private = v; value() { return this.#private; } } }; factory(\"x\").value.call(factory(\"y\"));`  returns \"y\" instead of throwing?","date":"2018-05-14T14:34:16.894Z","type":"message"}
{"nick":"devsnek","message":"well its two separate classes","date":"2018-05-14T14:35:40.278Z","type":"message"}
{"nick":"devsnek","message":"no connection whatsoever beyond the shape","date":"2018-05-14T14:35:58.241Z","type":"message"}
{"nick":"caitp","message":"that's besides the point, the point is that it will let me get away with treating the names as constant without breaking that edge case that I don't really care about","date":"2018-05-14T14:36:34.075Z","type":"message"}
{"nick":"bradleymeck","message":"which edge case?","date":"2018-05-14T14:36:58.858Z","type":"message"}
{"nick":"caitp","message":"the case where 2 distinct classes come from the same source code, sharing private symbols instead of having different versions of the same symbols","date":"2018-05-14T14:37:42.795Z","type":"message"}
{"nick":"devsnek","message":"but its explicitly two separate classes","date":"2018-05-14T14:38:03.328Z","type":"message"}
{"nick":"bradleymeck","message":"if they are different wouldn't it mean that it wouldn't return \"y\"?","date":"2018-05-14T14:38:11.744Z","type":"message"}
{"nick":"bradleymeck","message":"it sounds like they would need to be the same to have it return \"y\" not different","date":"2018-05-14T14:38:34.090Z","type":"message"}
{"nick":"caitp","message":"the spec says it's not allowed","date":"2018-05-14T14:38:35.067Z","type":"message"}
{"nick":"caitp","message":"but, I'd rather it is allowed because it lets me get away with some simpler stuff","date":"2018-05-14T14:38:49.210Z","type":"message"}
{"nick":"devsnek","message":"if you're producing different classes the symbols should be different","date":"2018-05-14T14:39:18.161Z","type":"message"}
{"nick":"devsnek","message":"the symbols are within the scope of the new class","date":"2018-05-14T14:39:37.370Z","type":"message"}
{"nick":"devsnek","message":"if you wanted to share something between them you should create some sort of key or cache outside the individual scope","date":"2018-05-14T14:40:14.001Z","type":"message"}
{"nick":"caitp","message":"they should be per the spec, but I don't think they should be really","date":"2018-05-14T14:40:41.620Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: that would make private fields friendly in the same source location, which seems odd when the classes are different instances / means you need to have new source locations or tracking fields for comparing identity for non-friendly classes","date":"2018-05-14T14:40:51.391Z","type":"message"}
{"nick":"caitp","message":"it doesn't really give us anything special","date":"2018-05-14T14:40:51.568Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: it lets you avoid doing identity checks for non-friendly classes generated using the same utility functions etc.","date":"2018-05-14T14:41:17.399Z","type":"message"}
{"nick":"devsnek","message":"wasn't someone going to propose private symbols that could be used on any object","date":"2018-05-14T14:42:37.867Z","type":"message"}
{"nick":"bradleymeck","message":"there is an email going around with ideas about `private #foo;` declarations","date":"2018-05-14T14:45:24.529Z","type":"message"}
{"nick":"bradleymeck","message":"no proposal yet","date":"2018-05-14T14:45:31.495Z","type":"message"}
{"nick":"gibson042","date":"2018-05-14T14:46:33.461Z","type":"join"}
{"nick":"bradleymeck","message":"that might get a big confusing with the source location is identity idea","date":"2018-05-14T14:46:37.637Z","type":"message"}
{"nick":"devsnek","message":"i think a weakmap or `private #foo` would be more obvious approaches","date":"2018-05-14T14:48:04.657Z","type":"message"}
{"nick":"devsnek","message":"source location as identity isn't obvious unless you explicitly know about that behaviour","date":"2018-05-14T14:48:50.737Z","type":"message"}
{"nick":"bradleymeck","message":"source location as identity doesn't seem insane, just not how other things work (except kind of template string objects...)","date":"2018-05-14T14:52:03.635Z","type":"message"}
{"nick":"caitp","message":"bradleymeck: what exactly is \"unfriendly\" about another class declared in the same source location?","date":"2018-05-14T14:56:27.633Z","type":"message"}
{"nick":"bradleymeck","message":"two classes generated by a utility function may not be intended to have access to each other's private data","date":"2018-05-14T14:57:09.900Z","type":"message"}
{"nick":"caitp","message":"it seems like that wouldn't be the common case","date":"2018-05-14T14:57:13.050Z","type":"message"}
{"nick":"caitp","message":"but then, they could just not access each other's private data","date":"2018-05-14T14:57:23.711Z","type":"message"}
{"nick":"caitp","message":"because whoever wrote that utility function owns that code and can decide to read or not read it","date":"2018-05-14T14:57:39.936Z","type":"message"}
{"nick":"devsnek","message":"thats how underscore properties work today","date":"2018-05-14T14:57:41.214Z","type":"message"}
{"nick":"bradleymeck","message":"i think it not matching how classes etc. work is more concerning since it makes differences in how people need to think about allocation/identity","date":"2018-05-14T14:57:43.828Z","type":"message"}
{"nick":"caitp","message":"maybe that would involve a brand check, but who cares?","date":"2018-05-14T14:57:48.559Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: mostly concerned about how it seems to go against other language design choices, not so much edge casey nature of your argument","date":"2018-05-14T14:58:42.992Z","type":"message"}
{"nick":"bradleymeck","message":"JS is already hard enough to learn, making more mental models needed seems something we should avoid","date":"2018-05-14T14:59:03.572Z","type":"message"}
{"nick":"caitp","message":"I dunno, maybe it's weird to people who come from haskell or something","date":"2018-05-14T14:59:34.215Z","type":"message"}
{"nick":"caitp","message":"but that particular \"weird\" seems more natural","date":"2018-05-14T15:00:30.174Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not coming from haskell?","date":"2018-05-14T15:02:48.919Z","type":"message"}
{"nick":"caitp","message":"what I want to do is have the private field names embedded in the baseline code itself (and definitely embedded in jit code), without needing cache invalidation if the outer lexical scope is different from an earlier invocation of the same function","date":"2018-05-14T15:02:59.950Z","type":"message"}
{"nick":"caitp","message":"or anything in the scope chain","date":"2018-05-14T15:03:24.616Z","type":"message"}
{"nick":"caitp","message":"so making source location == identity gives us that","date":"2018-05-14T15:03:46.693Z","type":"message"}
{"nick":"caitp","message":"makes life better","date":"2018-05-14T15:04:04.636Z","type":"message"}
{"nick":"bradleymeck","message":"that seems to be in conflict with functions/classes getting a new instance per time declaration is reached, and how variable bindings aren't shared between inner functions","date":"2018-05-14T15:04:09.111Z","type":"message"}
{"nick":"srl295","date":"2018-05-14T15:04:12.069Z","type":"join"}
{"nick":"caitp","message":"private is still private for real-world intents and purposes in that scenario,","date":"2018-05-14T15:04:22.401Z","type":"message"}
{"nick":"bradleymeck","message":"it seems very much a CSS like idea of designing the language rather than JS to have these shared slots","date":"2018-05-14T15:04:39.972Z","type":"message"}
{"nick":"caitp","message":"and for cases where a little \"extra\" private is needed (which I think are rare/nonexistent), you can add a brand check","date":"2018-05-14T15:04:51.817Z","type":"message"}
{"nick":"caitp","message":"not making the weird/complex behaviour the default just makes sense","date":"2018-05-14T15:05:02.137Z","type":"message"}
{"nick":"bradleymeck","message":"how is the behavior of getting new slots like all the other JS contructs weird?","date":"2018-05-14T15:05:17.556Z","type":"message"}
{"nick":"bradleymeck","message":"constructs*","date":"2018-05-14T15:05:20.913Z","type":"message"}
{"nick":"bradleymeck","message":"should have said instance instead of slot probably","date":"2018-05-14T15:05:40.339Z","type":"message"}
{"nick":"bradleymeck","message":"we don't return the same function for nested ones","date":"2018-05-14T15:05:53.540Z","type":"message"}
{"nick":"bradleymeck","message":"why do that for private fields?","date":"2018-05-14T15:06:00.460Z","type":"message"}
{"nick":"bradleymeck","message":"same for Symbol creation","date":"2018-05-14T15:06:09.457Z","type":"message"}
{"nick":"caitp","message":"the use case for making `factory(\"x\").value.call(factory(\"y\"))` throw, is weird","date":"2018-05-14T15:07:14.028Z","type":"message"}
{"nick":"caitp","message":"I don't think that's something people really care about in practice","date":"2018-05-14T15:07:18.656Z","type":"message"}
{"nick":"caitp","message":"and for the few cases where people do want that, they can get it other ways","date":"2018-05-14T15:07:31.245Z","type":"message"}
{"nick":"caitp","message":"language design is about how people use the language, not about consistency with how it's modelled on the inside, which has been crazy from the get-go","date":"2018-05-14T15:08:15.948Z","type":"message"}
{"nick":"devsnek","message":"when i saw your example","date":"2018-05-14T15:08:20.146Z","type":"message"}
{"nick":"devsnek","message":"i immediately assumed that `factory(\"x\").value.call(factory(\"y\"))` should throw","date":"2018-05-14T15:08:29.876Z","type":"message"}
{"nick":"caitp","message":"why would you think that","date":"2018-05-14T15:08:44.068Z","type":"message"}
{"nick":"devsnek","message":"because its two completely separate classes","date":"2018-05-14T15:09:00.450Z","type":"message"}
{"nick":"devsnek","message":"that happen to have the same shape","date":"2018-05-14T15:09:09.952Z","type":"message"}
{"nick":"caitp","message":"yes, but so what","date":"2018-05-14T15:09:12.685Z","type":"message"}
{"nick":"caitp","message":"it doesn't really matter","date":"2018-05-14T15:09:15.074Z","type":"message"}
{"nick":"caitp","message":"none of that really takes away the private-ness of those fields","date":"2018-05-14T15:09:26.669Z","type":"message"}
{"nick":"caitp","message":"if you care about them being distinct, and you probably don't, but if you do, you should make it explicit that they're distinct","date":"2018-05-14T15:10:20.354Z","type":"message"}
{"nick":"caitp","message":"imo","date":"2018-05-14T15:10:38.901Z","type":"message"}
{"nick":"bradleymeck","message":"i disagree but idk, different language backgrounds","date":"2018-05-14T15:11:33.564Z","type":"message"}
{"nick":"caitp","message":"do you agree that if you are maintaining factory() and the class instance returned from it, you have full control over whether it accesses private fields from the same instance or different ones, and if it throws or not?","date":"2018-05-14T15:13:58.379Z","type":"message"}
{"nick":"caitp","message":"and then you can do whatever you want with it, while still letting your friendly neighborhood implementer get away with a simple way to do it that depends less on lexical nonsense?","date":"2018-05-14T15:14:35.014Z","type":"message"}
{"nick":"caitp","message":"and outside stuff that it actually needs to be protected from still can't get at it?","date":"2018-05-14T15:15:12.563Z","type":"message"}
{"nick":"devsnek","message":"`you should make it explicit that they're distinct`","date":"2018-05-14T15:15:36.998Z","type":"message"}
{"nick":"devsnek","message":"how would you explicitly make the private symbols distinct if they cache by source position","date":"2018-05-14T15:15:49.850Z","type":"message"}
{"nick":"caitp","message":"by doing a manual brandcheck","date":"2018-05-14T15:15:59.177Z","type":"message"}
{"nick":"devsnek","message":"but then they aren't private anymore","date":"2018-05-14T15:16:23.453Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T15:16:39.942Z","type":"quit"}
{"nick":"devsnek","message":"they're just things with special names that are private by convention","date":"2018-05-14T15:16:43.266Z","type":"message"}
{"nick":"devsnek","message":"like underscore properties","date":"2018-05-14T15:16:54.441Z","type":"message"}
{"nick":"caitp","message":"`factory(v) { const MYBRAND = Symbol(\"derp\"); class { #myBRAND = MYBRAND; ... }` << you always know your private fields actually belong to you if this.#myBRAND === MYBRAND","date":"2018-05-14T15:17:28.841Z","type":"message"}
{"nick":"jwalden","date":"2018-05-14T15:17:31.064Z","type":"join"}
{"nick":"caitp","message":"so you have an easy way to check if access is valid or not, _if_ you care, which you don't","date":"2018-05-14T15:17:53.277Z","type":"message"}
{"nick":"caitp","message":"because why would you","date":"2018-05-14T15:17:57.540Z","type":"message"}
{"nick":"devsnek","message":"MYBRAND is a new symbol in this context","date":"2018-05-14T15:18:44.217Z","type":"message"}
{"nick":"devsnek","message":"that falls back on bradley's point about what you expect from existing language features","date":"2018-05-14T15:19:14.076Z","type":"message"}
{"nick":"caitp","message":"...","date":"2018-05-14T15:19:49.865Z","type":"message"}
{"nick":"caitp","message":"what","date":"2018-05-14T15:19:50.864Z","type":"message"}
{"nick":"caitp","message":"`if (this.#myBRAND !== MYBRAND) throw new BadAccess(\"You can't call this method with this receiver, sorry!\");` and using a constant shared by all instances of the same code for the private symbol, instead of requiring dynamic scope lookups","date":"2018-05-14T15:21:03.343Z","type":"message"}
{"nick":"caitp","message":"for the really small number of users who care about that behaviour, it's easy to get","date":"2018-05-14T15:21:22.434Z","type":"message"}
{"nick":"caitp","message":"for everyone else, simpler is better","date":"2018-05-14T15:21:32.293Z","type":"message"}
{"nick":"devsnek","message":"ok wow that just","date":"2018-05-14T15:21:37.548Z","type":"message"}
{"nick":"devsnek","message":"ties my brain in knots","date":"2018-05-14T15:21:44.264Z","type":"message"}
{"nick":"devsnek","message":"why not `const sharedData = new WeakMap(); function factory(v) { return new class { constructor() {sharedData.set(this, 'x')} value() { return sharedData.get(this); } } }`","date":"2018-05-14T15:23:05.878Z","type":"message"}
{"nick":"devsnek","message":"s/'x'/v","date":"2018-05-14T15:23:24.686Z","type":"message"}
{"nick":"devsnek","message":"i think you're trying too hard to use private symbols","date":"2018-05-14T15:24:34.428Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: can do that, but I think it doesn't make sense from the existing language constructs","date":"2018-05-14T15:24:46.982Z","type":"message"}
{"nick":"caitp","message":"uh","date":"2018-05-14T15:24:48.007Z","type":"message"}
{"nick":"bradleymeck","message":"it is confusing to me given all my time coding JS","date":"2018-05-14T15:25:16.362Z","type":"message"}
{"nick":"caitp","message":"use them for what? I'm implementing the feature, and I'd rather implement it in a way that lets me use constants embedded in code instead of doing dynamic lookups","date":"2018-05-14T15:25:31.373Z","type":"message"}
{"nick":"devsnek","message":"it took me a solid 15 seconds of just staring at that brand check to understand it","date":"2018-05-14T15:25:40.754Z","type":"message"}
{"nick":"caitp","message":"so lets change the proposal to let me do that","date":"2018-05-14T15:25:41.907Z","type":"message"}
{"nick":"caitp","message":"everybody is happier that way","date":"2018-05-14T15:25:55.846Z","type":"message"}
{"nick":"ljharb","message":"i think what you’re suggesting would break bundling use cases","date":"2018-05-14T15:26:01.006Z","type":"message"}
{"nick":"ljharb","message":"that two classes are in the same scope absolutely can’t mean they can share private data implicitly","date":"2018-05-14T15:26:18.408Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: I would not be happier since it doesn't match how other language constructs work","date":"2018-05-14T15:26:23.547Z","type":"message"}
{"nick":"caitp","message":"how did it take you 15 seconds to understand \"if this is not my brand, throw\"?","date":"2018-05-14T15:26:28.985Z","type":"message"}
{"nick":"caitp","message":"are you using a monospace font in your IRC client?","date":"2018-05-14T15:26:49.091Z","type":"message"}
{"nick":"ljharb","message":"the brand is per-class tho, not per-scope.","date":"2018-05-14T15:26:51.075Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: i think that is the question you need to solve, why it doesn't appear to match and takes time to recognize what/why you need that check","date":"2018-05-14T15:27:14.054Z","type":"message"}
{"nick":"caitp","message":"ljharb: if you declare 2 classes in the same space, they can't access each others #myBrand field, so isn't that kind of a moot point/","date":"2018-05-14T15:27:34.690Z","type":"message"}
{"nick":"ljharb","message":"hm, maybe I’m misunderstanding what you’re suggesting then","date":"2018-05-14T15:28:00.989Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: wait... doesn't that go against your examples?","date":"2018-05-14T15:28:00.989Z","type":"message"}
{"nick":"caitp","message":"if you can read #myBrand, you know the class is the the same one (in terms of where it appears in source), so you can use the SYMBOL to check if shares the same lexical scope or not","date":"2018-05-14T15:28:32.412Z","type":"message"}
{"nick":"caitp","message":"which gives you the complete identity","date":"2018-05-14T15:28:41.280Z","type":"message"}
{"nick":"ljharb","message":"a class defined in a factory method is a different class every time","date":"2018-05-14T15:28:41.533Z","type":"message"}
{"nick":"ljharb","message":"this was discussed in committee and we explicitly went with the current state, iirc","date":"2018-05-14T15:28:56.401Z","type":"message"}
{"nick":"caitp","message":"...yes, and you can use the symbol to do a brandcheck there","date":"2018-05-14T15:28:58.808Z","type":"message"}
{"nick":"caitp","message":"if you really want that, which you probably don't","date":"2018-05-14T15:29:05.885Z","type":"message"}
{"nick":"ljharb","message":"iow, we explicitly chose that source location didn’t give you sharing across factory calls","date":"2018-05-14T15:29:17.938Z","type":"message"}
{"nick":"caitp","message":"99/100 you won't care about that, and won't even be declaring classes in a closure","date":"2018-05-14T15:29:28.362Z","type":"message"}
{"nick":"caitp","message":"yeah we explicitly chose it, but lets go back and rewrite that history so that I can get away with embedding constants in the code instead of the dynamic lookup","date":"2018-05-14T15:29:58.007Z","type":"message"}
{"nick":"ljharb","message":"there’s a hazard if two react components created by the same HOC, and that’s not 1/100 - it’s much more commo\t/100","date":"2018-05-14T15:30:03.601Z","type":"message"}
{"nick":"ljharb","message":"no. That would break react HOC patterns and i would not allow that change to go in.","date":"2018-05-14T15:30:18.276Z","type":"message"}
{"nick":"caitp","message":"if they want the brand check, they can do it themselves","date":"2018-05-14T15:30:32.261Z","type":"message"}
{"nick":"caitp","message":"no harm no foul","date":"2018-05-14T15:30:34.483Z","type":"message"}
{"nick":"caitp","message":"most of the time people won't care","date":"2018-05-14T15:30:38.147Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: the harm is that you need to figure out how to make it match all the other design choices about allocating new things when they are encountered rather than sharing static instances across invocations","date":"2018-05-14T15:31:16.026Z","type":"message"}
{"nick":"ljharb","message":"but when they do care it would silently break encapsulation. That’s not an edge case, that’s a failure of the security model.","date":"2018-05-14T15:31:17.258Z","type":"message"}
{"nick":"caitp","message":"I don't think matching the other design choices is that important","date":"2018-05-14T15:31:32.462Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: i do~ and that would be a big deal for me","date":"2018-05-14T15:31:50.230Z","type":"message"}
{"nick":"caitp","message":"it makes them more like strings that can only occur within a particular area in source code","date":"2018-05-14T15:32:14.950Z","type":"message"}
{"nick":"bradleymeck","message":"so use strings for those things?","date":"2018-05-14T15:32:45.773Z","type":"message"}
{"nick":"ljharb","message":"these aren’t meant to be like strings.","date":"2018-05-14T15:32:57.117Z","type":"message"}
{"nick":"caitp","message":"\"more like\" strings, but not strings","date":"2018-05-14T15:33:00.270Z","type":"message"}
{"nick":"bradleymeck","message":"idk, this all seems to be making language decisions that don't match the rest of the language and have concerns about sharing private data just for a specific compiler optimization","date":"2018-05-14T15:34:34.996Z","type":"message"}
{"nick":"caitp","message":"you can always statically resolve the symbol to use, but you can't embed the right symbol in code unless the symbol stays the same even if it's used on an instance of the same class source declared in a different closure invocation","date":"2018-05-14T15:34:55.228Z","type":"message"}
{"nick":"bradleymeck","message":"if there was an argument that the current model makes everything slow it seems it might be a more persuasive angle","date":"2018-05-14T15:34:59.917Z","type":"message"}
{"nick":"caitp","message":"embedding the symbol in code is good and simple, ergo we should do that","date":"2018-05-14T15:35:14.549Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: that point is not simple or obvious to me","date":"2018-05-14T15:35:27.801Z","type":"message"}
{"nick":"bradleymeck","message":"it carries a lot of other arguments so I don't naively see that we should do that","date":"2018-05-14T15:35:45.035Z","type":"message"}
{"nick":"caitp","message":"the alternative is walking the scope chain every time it's used, which is doable, but I'd rather not :D and we don't lose anything of substance by not doing that","date":"2018-05-14T15:36:46.204Z","type":"message"}
{"nick":"bradleymeck","message":"i see substance lost","date":"2018-05-14T15:37:16.444Z","type":"message"}
{"nick":"bradleymeck","message":"consistency and learnability are increasingly bigger concerns as JS gets more complex","date":"2018-05-14T15:37:40.831Z","type":"message"}
{"nick":"caitp","message":"the _only_ difference is that in the rare cases where you care about the 2 classes not being able to access each others private fields, you have to add that rule yourself","date":"2018-05-14T15:37:51.437Z","type":"message"}
{"nick":"caitp","message":"which is really not that big of a deal","date":"2018-05-14T15:38:00.724Z","type":"message"}
{"nick":"ljharb","message":"as do i. just because i call an HOC twice doesn’t mean one component should be able to steal the private data of another made in the same factory","date":"2018-05-14T15:38:10.155Z","type":"message"}
{"nick":"ljharb","message":"it’s not rare","date":"2018-05-14T15:38:17.224Z","type":"message"}
{"nick":"ljharb","message":"class factories are common, especially with HOCs in react","date":"2018-05-14T15:38:27.828Z","type":"message"}
{"nick":"caitp","message":"if you don't want the component to steal its own private data that it defined itself, from itself, then the component should just not do that","date":"2018-05-14T15:38:56.856Z","type":"message"}
{"nick":"ljharb","message":"and “you have to add that rule yourself” is a foot gun, and goes against the idea that private fields are private by default. You should have to do extra work to expose, not to keep secret","date":"2018-05-14T15:39:01.794Z","type":"message"}
{"nick":"devsnek","message":"\"should just not do that\" you might as well just use known property names then","date":"2018-05-14T15:39:19.235Z","type":"message"}
{"nick":"caitp","message":"it's not the same as a property name","date":"2018-05-14T15:39:30.752Z","type":"message"}
{"nick":"devsnek","message":"it invalidates privates as private","date":"2018-05-14T15:39:33.609Z","type":"message"}
{"nick":"caitp","message":"property names are exposed to the world","date":"2018-05-14T15:39:37.584Z","type":"message"}
{"nick":"caitp","message":"privates are exposed to not-the-whole-world","date":"2018-05-14T15:39:44.483Z","type":"message"}
{"nick":"caitp","message":"but making them different in each closure invocation really doesn't add anything important","date":"2018-05-14T15:40:02.697Z","type":"message"}
{"nick":"caitp","message":"like, it really doesn't","date":"2018-05-14T15:40:14.237Z","type":"message"}
{"nick":"ljharb","message":"Privates are exposed only to that class - each time you call a factory it’s a distinct class.","date":"2018-05-14T15:40:20.783Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: there is problems beyond how common something is, I think you are making claims of how common this use case is, but need more data on it to show it as uncommon and that the mental model mismatch is worth it","date":"2018-05-14T15:40:30.459Z","type":"message"}
{"nick":"ljharb","message":"it does add something important, and enough of us in the committee we’re convinced it does to make that decision.","date":"2018-05-14T15:40:45.341Z","type":"message"}
{"nick":"caitp","message":"does React _really_ care if SomeFancyMenu can read #menuName from a different copy of the same component","date":"2018-05-14T15:41:22.134Z","type":"message"}
{"nick":"ljharb","message":"not react. The user of the HOC","date":"2018-05-14T15:41:42.916Z","type":"message"}
{"nick":"ljharb","message":"like imagine react-redux’s connect","date":"2018-05-14T15:41:50.318Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: you could gather data, but not sharing by default seems a reasonable encapsulation choice","date":"2018-05-14T15:41:56.752Z","type":"message"}
{"nick":"bradleymeck","message":"for private at least","date":"2018-05-14T15:42:08.825Z","type":"message"}
{"nick":"ljharb","message":"It would really really break a lot of things if any two connected components could access private state defined in the Connect HOC","date":"2018-05-14T15:42:24.957Z","type":"message"}
{"nick":"ljharb","message":"each other’s state, i mean.","date":"2018-05-14T15:42:36.061Z","type":"message"}
{"nick":"caitp","message":"bradleymeck: I don't consider \"sharing with yourself\" to really be \"sharing\" or \"leaking\" anything","date":"2018-05-14T15:42:40.701Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: when I write utilities / mixins it is more than myself","date":"2018-05-14T15:43:03.650Z","type":"message"}
{"nick":"ljharb","message":"You can say “just don’t do that” but that means that factories/HOCs can’t ergonomically use private state without also using a WeakMap","date":"2018-05-14T15:43:15.042Z","type":"message"}
{"nick":"caitp","message":"if you declare a private field in the mixin, your mixin is still the only thing that can access it","date":"2018-05-14T15:43:24.981Z","type":"message"}
{"nick":"caitp","message":"because it doesn't mean the same thing to anybody else","date":"2018-05-14T15:43:34.100Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: yes, but now you need to protect from leaking your well known constants for checking, and check on every access","date":"2018-05-14T15:44:01.141Z","type":"message"}
{"nick":"ljharb","message":"the mixin or any instance methods on the newly created class that have access, sure","date":"2018-05-14T15:44:06.014Z","type":"message"}
{"nick":"caitp","message":"so, you can read the same data from other versions of the same mixin, but it's the same mixin, so it's sharing with yourself","date":"2018-05-14T15:44:09.700Z","type":"message"}
{"nick":"caitp","message":"that's not a leak","date":"2018-05-14T15:44:11.216Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: I'm not entirely convinced that it isn't for when other people are creating classes through your utility","date":"2018-05-14T15:44:45.718Z","type":"message"}
{"nick":"ljharb","message":"it’s a leak in the sense that they’re distinct classes that only happen to share the same source location","date":"2018-05-14T15:44:50.956Z","type":"message"}
{"nick":"caitp","message":"conceptually no information is shared","date":"2018-05-14T15:44:52.217Z","type":"message"}
{"nick":"ljharb","message":"it’s class-private, not lexically-private. That’s part of the design.","date":"2018-05-14T15:45:09.275Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: it puts burden on not-sharing private data to people using private fields","date":"2018-05-14T15:45:17.645Z","type":"message"}
{"nick":"bradleymeck","message":"which seems... unusual","date":"2018-05-14T15:45:26.132Z","type":"message"}
{"nick":"caitp","message":"it doesn't really","date":"2018-05-14T15:45:30.741Z","type":"message"}
{"nick":"caitp","message":"I mean it does in the sense that they have to watch out if they don't want to share with themselves","date":"2018-05-14T15:45:42.527Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: i will disagree harshly on that point given that you have to custom code brand checks etc","date":"2018-05-14T15:45:49.381Z","type":"message"}
{"nick":"caitp","message":"but in every other way, and the more common and important ways, they get the free privacy","date":"2018-05-14T15:46:09.670Z","type":"message"}
{"nick":"bradleymeck","message":"i don't agree on free","date":"2018-05-14T15:46:21.959Z","type":"message"}
{"nick":"bradleymeck","message":"you get a form of privacy that is shared between all classes in the same location and all classes of the same location need to add extra code in order to not share","date":"2018-05-14T15:46:51.849Z","type":"message"}
{"nick":"caitp","message":"class C { #x = 1; } let secret = new C; C.#x = 2; << still illegal","date":"2018-05-14T15:46:52.563Z","type":"message"}
{"nick":"bradleymeck","message":"it is closer to a friendly model than what i would expect of a private model","date":"2018-05-14T15:47:03.736Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: sure but my points remain about it not being private, but closer to friendly","date":"2018-05-14T15:47:28.267Z","type":"message"}
{"nick":"caitp","message":"so what is a case where this information is shared between 2 classes in the same location, that is actually a problem?","date":"2018-05-14T15:47:56.456Z","type":"message"}
{"nick":"bradleymeck","message":"anywho gtg for a bit, you can open issues in other places on github maybe","date":"2018-05-14T15:48:03.968Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: defining what you mean by \"actually\" would be hard without claims of how the existing model has invalid use cases","date":"2018-05-14T15:48:43.792Z","type":"message"}
{"nick":"bradleymeck","message":"maybe make issues that such use cases are invalid on github?","date":"2018-05-14T15:48:55.653Z","type":"message"}
{"nick":"ljharb","message":"anything where my factoried class has a brand checking method","date":"2018-05-14T15:50:12.289Z","type":"message"}
{"nick":"ljharb","message":"i should never have to put forth effort to maintain privacy, the effort should be required to share. It’s not “myself” I’d be sharing with, it’s the two distinct classes that would easily be sharing with each other","date":"2018-05-14T15:50:58.521Z","type":"message"}
{"nick":"ljharb","message":"if i *want* them to share, i should use what JS has for that: lexical scope","date":"2018-05-14T15:51:12.922Z","type":"message"}
{"nick":"ljharb","message":"the functions returned from a HOF shouldn’t share variables defined within the new function’s body, either.","date":"2018-05-14T15:52:10.369Z","type":"message"}
