{"nick":"devsnek","message":"i didn't really understand why his proposal specifies that primordial builtins share a function though","date":"2018-05-14T00:03:52.927Z","type":"message"}
{"nick":"devsnek","message":"that makes you have to do that awkward fn.call(x) instead of just fn(x)","date":"2018-05-14T00:04:58.763Z","type":"message"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2018-05-14T00:05:29.783Z","type":"quit"}
{"nick":"arai","date":"2018-05-14T00:21:16.429Z","type":"join"}
{"nick":"howdoi","date":"2018-05-14T02:20:04.483Z","type":"join"}
{"nick":"ljharb","message":" devsnek it didn’t get stopped. He was asked to come back with more use cases and he never came back, and then withdrew it.","date":"2018-05-14T02:32:14.022Z","type":"message"}
{"nick":"devsnek","message":"ljharb: is there a reason the term \"builtin\" was chosen","date":"2018-05-14T03:08:13.953Z","type":"message"}
{"nick":"devsnek","message":"for the symbol","date":"2018-05-14T03:08:30.648Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i dunno, that’s actually the main thing i dislike about it :-) that name doesn’t work because nay object can participate.","date":"2018-05-14T03:15:43.267Z","type":"message"}
{"nick":"devsnek","message":"ye that's what confused me","date":"2018-05-14T03:16:14.787Z","type":"message"}
{"nick":"devsnek","message":"but I'm rewriting it a bit anyway","date":"2018-05-14T03:16:23.543Z","type":"message"}
{"nick":"devsnek","message":"name bikeshedding galore","date":"2018-05-14T03:16:30.410Z","type":"message"}
{"nick":"IgnoredAmbience","reason":"Ping timeout: 240 seconds","date":"2018-05-14T03:50:05.515Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T04:22:52.607Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-14T04:26:09.394Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-05-14T04:41:02.138Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T04:48:41.371Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-14T04:51:30.425Z","type":"join"}
{"nick":"annevk","message":"ljharb: I think it needs to be a list, to support subclassing","date":"2018-05-14T08:01:11.607Z","type":"message"}
{"nick":"annevk","message":"ljharb: e.g., you want an easy answer to is this HTMLAnchorElement object an Element","date":"2018-05-14T08:01:46.190Z","type":"message"}
{"nick":"annevk","message":"ljharb: without a registry of all things that are subclasses of Element","date":"2018-05-14T08:02:24.739Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T08:24:05.668Z","type":"quit"}
{"nick":"IgnoredAmbience","date":"2018-05-14T08:24:53.975Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-14T08:41:16.460Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-05-14T08:56:15.719Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T09:45:11.935Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-14T10:25:08.687Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-14T10:25:39.057Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-14T11:22:36.728Z","type":"join"}
{"nick":"jmdyck","date":"2018-05-14T12:18:18.448Z","type":"join"}
{"nick":"AtumT","date":"2018-05-14T12:41:42.722Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T13:15:19.083Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-05-14T13:28:30.691Z","type":"quit"}
{"nick":"devsnek","message":"thats what i meant with like walking up prototype chains","date":"2018-05-14T13:33:18.650Z","type":"message"}
{"nick":"devsnek","message":"it gets really messy though cuz eventually everything is an object or `undefined`","date":"2018-05-14T13:33:58.170Z","type":"message"}
{"nick":"annevk","message":"devsnek: you cannot walk up prototype chains","date":"2018-05-14T13:34:59.396Z","type":"message"}
{"nick":"annevk","message":"devsnek: if I do instance.__proto__ = null this brand check should still work for the instance","date":"2018-05-14T13:35:22.795Z","type":"message"}
{"nick":"annevk","message":"(assuming you want to expose the underlying primitive, that is)","date":"2018-05-14T13:35:39.798Z","type":"message"}
{"nick":"devsnek","message":"so there needs to be magic secret sauce","date":"2018-05-14T13:35:54.394Z","type":"message"}
{"nick":"annevk","message":"internal slots are pretty common","date":"2018-05-14T13:39:33.620Z","type":"message"}
{"nick":"isHavvy","reason":"Read error: Connection reset by peer","date":"2018-05-14T13:39:58.500Z","type":"quit"}
{"nick":"devsnek","message":"how would someone fake it then","date":"2018-05-14T13:40:28.669Z","type":"message"}
{"nick":"devsnek","message":"i think pretending to be a Date or a Map or something is an important feature to have","date":"2018-05-14T13:40:42.128Z","type":"message"}
{"nick":"arai","date":"2018-05-14T13:42:35.943Z","type":"join"}
{"nick":"Havvy","date":"2018-05-14T13:42:54.789Z","type":"join"}
{"nick":"devsnek","message":"also now that i think about it, if you kill the prototype of something its not really that thing anymore","date":"2018-05-14T13:48:08.467Z","type":"message"}
{"nick":"annevk","message":"sure it is","date":"2018-05-14T13:57:34.103Z","type":"message"}
{"nick":"annevk","message":"being able to pretend certain objects would be bad for security","date":"2018-05-14T13:58:05.533Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: you can see an example here https://codepen.io/anon/pen/dejMdJ?editors=0012 , internal slots are like private access things that hosts/spec can use but JS itself cannot","date":"2018-05-14T14:04:23.382Z","type":"message"}
{"nick":"devsnek","message":"oh i know what internal slots are","date":"2018-05-14T14:07:04.593Z","type":"message"}
{"nick":"devsnek","message":"i'm just trying to also balance in userland","date":"2018-05-14T14:08:04.950Z","type":"message"}
{"nick":"devsnek","message":"userland doesn't have internal slots","date":"2018-05-14T14:08:13.768Z","type":"message"}
{"nick":"bradleymeck","message":"private fields can act like them","date":"2018-05-14T14:14:10.158Z","type":"message"}
{"nick":"bradleymeck","message":"sharing them gets wonky though for now","date":"2018-05-14T14:14:29.283Z","type":"message"}
{"nick":"bradleymeck","message":"you could also emulate them with weakmaps if you wanted to really; it looks different at a glance, can act the same though.","date":"2018-05-14T14:15:15.896Z","type":"message"}
{"nick":"devsnek","message":"https://gist.github.com/devsnek/7e8d4a37c774819639088648ee9d1180","date":"2018-05-14T14:20:36.503Z","type":"message"}
{"nick":"devsnek","message":"now ljharb's point about being able to save <something> that will always tell you if `x` is a Map or Array or something","date":"2018-05-14T14:21:47.575Z","type":"message"}
{"nick":"devsnek","message":"without that safety i came up with this: https://gist.github.com/devsnek/dd77b256d50a80570541dd4ab74bfc27","date":"2018-05-14T14:32:00.906Z","type":"message"}
{"nick":"keith_miller","date":"2018-05-14T14:32:04.415Z","type":"join"}
{"nick":"caitp","message":"can we have a new rule that `function factory(v) { return new class { #private = v; value() { return this.#private; } } }; factory(\"x\").value.call(factory(\"y\"));`  returns \"y\" instead of throwing?","date":"2018-05-14T14:34:16.894Z","type":"message"}
{"nick":"devsnek","message":"well its two separate classes","date":"2018-05-14T14:35:40.278Z","type":"message"}
{"nick":"devsnek","message":"no connection whatsoever beyond the shape","date":"2018-05-14T14:35:58.241Z","type":"message"}
{"nick":"caitp","message":"that's besides the point, the point is that it will let me get away with treating the names as constant without breaking that edge case that I don't really care about","date":"2018-05-14T14:36:34.075Z","type":"message"}
{"nick":"bradleymeck","message":"which edge case?","date":"2018-05-14T14:36:58.858Z","type":"message"}
{"nick":"caitp","message":"the case where 2 distinct classes come from the same source code, sharing private symbols instead of having different versions of the same symbols","date":"2018-05-14T14:37:42.795Z","type":"message"}
{"nick":"devsnek","message":"but its explicitly two separate classes","date":"2018-05-14T14:38:03.328Z","type":"message"}
{"nick":"bradleymeck","message":"if they are different wouldn't it mean that it wouldn't return \"y\"?","date":"2018-05-14T14:38:11.744Z","type":"message"}
{"nick":"bradleymeck","message":"it sounds like they would need to be the same to have it return \"y\" not different","date":"2018-05-14T14:38:34.090Z","type":"message"}
{"nick":"caitp","message":"the spec says it's not allowed","date":"2018-05-14T14:38:35.067Z","type":"message"}
{"nick":"caitp","message":"but, I'd rather it is allowed because it lets me get away with some simpler stuff","date":"2018-05-14T14:38:49.210Z","type":"message"}
{"nick":"devsnek","message":"if you're producing different classes the symbols should be different","date":"2018-05-14T14:39:18.161Z","type":"message"}
{"nick":"devsnek","message":"the symbols are within the scope of the new class","date":"2018-05-14T14:39:37.370Z","type":"message"}
{"nick":"devsnek","message":"if you wanted to share something between them you should create some sort of key or cache outside the individual scope","date":"2018-05-14T14:40:14.001Z","type":"message"}
{"nick":"caitp","message":"they should be per the spec, but I don't think they should be really","date":"2018-05-14T14:40:41.620Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: that would make private fields friendly in the same source location, which seems odd when the classes are different instances / means you need to have new source locations or tracking fields for comparing identity for non-friendly classes","date":"2018-05-14T14:40:51.391Z","type":"message"}
{"nick":"caitp","message":"it doesn't really give us anything special","date":"2018-05-14T14:40:51.568Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: it lets you avoid doing identity checks for non-friendly classes generated using the same utility functions etc.","date":"2018-05-14T14:41:17.399Z","type":"message"}
{"nick":"devsnek","message":"wasn't someone going to propose private symbols that could be used on any object","date":"2018-05-14T14:42:37.867Z","type":"message"}
{"nick":"bradleymeck","message":"there is an email going around with ideas about `private #foo;` declarations","date":"2018-05-14T14:45:24.529Z","type":"message"}
{"nick":"bradleymeck","message":"no proposal yet","date":"2018-05-14T14:45:31.495Z","type":"message"}
{"nick":"gibson042","date":"2018-05-14T14:46:33.461Z","type":"join"}
{"nick":"bradleymeck","message":"that might get a big confusing with the source location is identity idea","date":"2018-05-14T14:46:37.637Z","type":"message"}
{"nick":"devsnek","message":"i think a weakmap or `private #foo` would be more obvious approaches","date":"2018-05-14T14:48:04.657Z","type":"message"}
{"nick":"devsnek","message":"source location as identity isn't obvious unless you explicitly know about that behaviour","date":"2018-05-14T14:48:50.737Z","type":"message"}
{"nick":"bradleymeck","message":"source location as identity doesn't seem insane, just not how other things work (except kind of template string objects...)","date":"2018-05-14T14:52:03.635Z","type":"message"}
{"nick":"caitp","message":"bradleymeck: what exactly is \"unfriendly\" about another class declared in the same source location?","date":"2018-05-14T14:56:27.633Z","type":"message"}
{"nick":"bradleymeck","message":"two classes generated by a utility function may not be intended to have access to each other's private data","date":"2018-05-14T14:57:09.900Z","type":"message"}
{"nick":"caitp","message":"it seems like that wouldn't be the common case","date":"2018-05-14T14:57:13.050Z","type":"message"}
{"nick":"caitp","message":"but then, they could just not access each other's private data","date":"2018-05-14T14:57:23.711Z","type":"message"}
{"nick":"caitp","message":"because whoever wrote that utility function owns that code and can decide to read or not read it","date":"2018-05-14T14:57:39.936Z","type":"message"}
{"nick":"devsnek","message":"thats how underscore properties work today","date":"2018-05-14T14:57:41.214Z","type":"message"}
{"nick":"bradleymeck","message":"i think it not matching how classes etc. work is more concerning since it makes differences in how people need to think about allocation/identity","date":"2018-05-14T14:57:43.828Z","type":"message"}
{"nick":"caitp","message":"maybe that would involve a brand check, but who cares?","date":"2018-05-14T14:57:48.559Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: mostly concerned about how it seems to go against other language design choices, not so much edge casey nature of your argument","date":"2018-05-14T14:58:42.992Z","type":"message"}
{"nick":"bradleymeck","message":"JS is already hard enough to learn, making more mental models needed seems something we should avoid","date":"2018-05-14T14:59:03.572Z","type":"message"}
{"nick":"caitp","message":"I dunno, maybe it's weird to people who come from haskell or something","date":"2018-05-14T14:59:34.215Z","type":"message"}
{"nick":"caitp","message":"but that particular \"weird\" seems more natural","date":"2018-05-14T15:00:30.174Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not coming from haskell?","date":"2018-05-14T15:02:48.919Z","type":"message"}
{"nick":"caitp","message":"what I want to do is have the private field names embedded in the baseline code itself (and definitely embedded in jit code), without needing cache invalidation if the outer lexical scope is different from an earlier invocation of the same function","date":"2018-05-14T15:02:59.950Z","type":"message"}
{"nick":"caitp","message":"or anything in the scope chain","date":"2018-05-14T15:03:24.616Z","type":"message"}
{"nick":"caitp","message":"so making source location == identity gives us that","date":"2018-05-14T15:03:46.693Z","type":"message"}
{"nick":"caitp","message":"makes life better","date":"2018-05-14T15:04:04.636Z","type":"message"}
{"nick":"bradleymeck","message":"that seems to be in conflict with functions/classes getting a new instance per time declaration is reached, and how variable bindings aren't shared between inner functions","date":"2018-05-14T15:04:09.111Z","type":"message"}
{"nick":"srl295","date":"2018-05-14T15:04:12.069Z","type":"join"}
{"nick":"caitp","message":"private is still private for real-world intents and purposes in that scenario,","date":"2018-05-14T15:04:22.401Z","type":"message"}
{"nick":"bradleymeck","message":"it seems very much a CSS like idea of designing the language rather than JS to have these shared slots","date":"2018-05-14T15:04:39.972Z","type":"message"}
{"nick":"caitp","message":"and for cases where a little \"extra\" private is needed (which I think are rare/nonexistent), you can add a brand check","date":"2018-05-14T15:04:51.817Z","type":"message"}
{"nick":"caitp","message":"not making the weird/complex behaviour the default just makes sense","date":"2018-05-14T15:05:02.137Z","type":"message"}
{"nick":"bradleymeck","message":"how is the behavior of getting new slots like all the other JS contructs weird?","date":"2018-05-14T15:05:17.556Z","type":"message"}
{"nick":"bradleymeck","message":"constructs*","date":"2018-05-14T15:05:20.913Z","type":"message"}
{"nick":"bradleymeck","message":"should have said instance instead of slot probably","date":"2018-05-14T15:05:40.339Z","type":"message"}
{"nick":"bradleymeck","message":"we don't return the same function for nested ones","date":"2018-05-14T15:05:53.540Z","type":"message"}
{"nick":"bradleymeck","message":"why do that for private fields?","date":"2018-05-14T15:06:00.460Z","type":"message"}
{"nick":"bradleymeck","message":"same for Symbol creation","date":"2018-05-14T15:06:09.457Z","type":"message"}
{"nick":"caitp","message":"the use case for making `factory(\"x\").value.call(factory(\"y\"))` throw, is weird","date":"2018-05-14T15:07:14.028Z","type":"message"}
{"nick":"caitp","message":"I don't think that's something people really care about in practice","date":"2018-05-14T15:07:18.656Z","type":"message"}
{"nick":"caitp","message":"and for the few cases where people do want that, they can get it other ways","date":"2018-05-14T15:07:31.245Z","type":"message"}
{"nick":"caitp","message":"language design is about how people use the language, not about consistency with how it's modelled on the inside, which has been crazy from the get-go","date":"2018-05-14T15:08:15.948Z","type":"message"}
{"nick":"devsnek","message":"when i saw your example","date":"2018-05-14T15:08:20.146Z","type":"message"}
{"nick":"devsnek","message":"i immediately assumed that `factory(\"x\").value.call(factory(\"y\"))` should throw","date":"2018-05-14T15:08:29.876Z","type":"message"}
{"nick":"caitp","message":"why would you think that","date":"2018-05-14T15:08:44.068Z","type":"message"}
{"nick":"devsnek","message":"because its two completely separate classes","date":"2018-05-14T15:09:00.450Z","type":"message"}
{"nick":"devsnek","message":"that happen to have the same shape","date":"2018-05-14T15:09:09.952Z","type":"message"}
{"nick":"caitp","message":"yes, but so what","date":"2018-05-14T15:09:12.685Z","type":"message"}
{"nick":"caitp","message":"it doesn't really matter","date":"2018-05-14T15:09:15.074Z","type":"message"}
{"nick":"caitp","message":"none of that really takes away the private-ness of those fields","date":"2018-05-14T15:09:26.669Z","type":"message"}
{"nick":"caitp","message":"if you care about them being distinct, and you probably don't, but if you do, you should make it explicit that they're distinct","date":"2018-05-14T15:10:20.354Z","type":"message"}
{"nick":"caitp","message":"imo","date":"2018-05-14T15:10:38.901Z","type":"message"}
{"nick":"bradleymeck","message":"i disagree but idk, different language backgrounds","date":"2018-05-14T15:11:33.564Z","type":"message"}
{"nick":"caitp","message":"do you agree that if you are maintaining factory() and the class instance returned from it, you have full control over whether it accesses private fields from the same instance or different ones, and if it throws or not?","date":"2018-05-14T15:13:58.379Z","type":"message"}
{"nick":"caitp","message":"and then you can do whatever you want with it, while still letting your friendly neighborhood implementer get away with a simple way to do it that depends less on lexical nonsense?","date":"2018-05-14T15:14:35.014Z","type":"message"}
{"nick":"caitp","message":"and outside stuff that it actually needs to be protected from still can't get at it?","date":"2018-05-14T15:15:12.563Z","type":"message"}
{"nick":"devsnek","message":"`you should make it explicit that they're distinct`","date":"2018-05-14T15:15:36.998Z","type":"message"}
{"nick":"devsnek","message":"how would you explicitly make the private symbols distinct if they cache by source position","date":"2018-05-14T15:15:49.850Z","type":"message"}
{"nick":"caitp","message":"by doing a manual brandcheck","date":"2018-05-14T15:15:59.177Z","type":"message"}
{"nick":"devsnek","message":"but then they aren't private anymore","date":"2018-05-14T15:16:23.453Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T15:16:39.942Z","type":"quit"}
{"nick":"devsnek","message":"they're just things with special names that are private by convention","date":"2018-05-14T15:16:43.266Z","type":"message"}
{"nick":"devsnek","message":"like underscore properties","date":"2018-05-14T15:16:54.441Z","type":"message"}
{"nick":"caitp","message":"`factory(v) { const MYBRAND = Symbol(\"derp\"); class { #myBRAND = MYBRAND; ... }` << you always know your private fields actually belong to you if this.#myBRAND === MYBRAND","date":"2018-05-14T15:17:28.841Z","type":"message"}
{"nick":"jwalden","date":"2018-05-14T15:17:31.064Z","type":"join"}
{"nick":"caitp","message":"so you have an easy way to check if access is valid or not, _if_ you care, which you don't","date":"2018-05-14T15:17:53.277Z","type":"message"}
{"nick":"caitp","message":"because why would you","date":"2018-05-14T15:17:57.540Z","type":"message"}
{"nick":"devsnek","message":"MYBRAND is a new symbol in this context","date":"2018-05-14T15:18:44.217Z","type":"message"}
{"nick":"devsnek","message":"that falls back on bradley's point about what you expect from existing language features","date":"2018-05-14T15:19:14.076Z","type":"message"}
{"nick":"caitp","message":"...","date":"2018-05-14T15:19:49.865Z","type":"message"}
{"nick":"caitp","message":"what","date":"2018-05-14T15:19:50.864Z","type":"message"}
{"nick":"caitp","message":"`if (this.#myBRAND !== MYBRAND) throw new BadAccess(\"You can't call this method with this receiver, sorry!\");` and using a constant shared by all instances of the same code for the private symbol, instead of requiring dynamic scope lookups","date":"2018-05-14T15:21:03.343Z","type":"message"}
{"nick":"caitp","message":"for the really small number of users who care about that behaviour, it's easy to get","date":"2018-05-14T15:21:22.434Z","type":"message"}
{"nick":"caitp","message":"for everyone else, simpler is better","date":"2018-05-14T15:21:32.293Z","type":"message"}
{"nick":"devsnek","message":"ok wow that just","date":"2018-05-14T15:21:37.548Z","type":"message"}
{"nick":"devsnek","message":"ties my brain in knots","date":"2018-05-14T15:21:44.264Z","type":"message"}
{"nick":"devsnek","message":"why not `const sharedData = new WeakMap(); function factory(v) { return new class { constructor() {sharedData.set(this, 'x')} value() { return sharedData.get(this); } } }`","date":"2018-05-14T15:23:05.878Z","type":"message"}
{"nick":"devsnek","message":"s/'x'/v","date":"2018-05-14T15:23:24.686Z","type":"message"}
{"nick":"devsnek","message":"i think you're trying too hard to use private symbols","date":"2018-05-14T15:24:34.428Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: can do that, but I think it doesn't make sense from the existing language constructs","date":"2018-05-14T15:24:46.982Z","type":"message"}
{"nick":"caitp","message":"uh","date":"2018-05-14T15:24:48.007Z","type":"message"}
{"nick":"bradleymeck","message":"it is confusing to me given all my time coding JS","date":"2018-05-14T15:25:16.362Z","type":"message"}
{"nick":"caitp","message":"use them for what? I'm implementing the feature, and I'd rather implement it in a way that lets me use constants embedded in code instead of doing dynamic lookups","date":"2018-05-14T15:25:31.373Z","type":"message"}
{"nick":"devsnek","message":"it took me a solid 15 seconds of just staring at that brand check to understand it","date":"2018-05-14T15:25:40.754Z","type":"message"}
{"nick":"caitp","message":"so lets change the proposal to let me do that","date":"2018-05-14T15:25:41.907Z","type":"message"}
{"nick":"caitp","message":"everybody is happier that way","date":"2018-05-14T15:25:55.846Z","type":"message"}
{"nick":"ljharb","message":"i think what you’re suggesting would break bundling use cases","date":"2018-05-14T15:26:01.006Z","type":"message"}
{"nick":"ljharb","message":"that two classes are in the same scope absolutely can’t mean they can share private data implicitly","date":"2018-05-14T15:26:18.408Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: I would not be happier since it doesn't match how other language constructs work","date":"2018-05-14T15:26:23.547Z","type":"message"}
{"nick":"caitp","message":"how did it take you 15 seconds to understand \"if this is not my brand, throw\"?","date":"2018-05-14T15:26:28.985Z","type":"message"}
{"nick":"caitp","message":"are you using a monospace font in your IRC client?","date":"2018-05-14T15:26:49.091Z","type":"message"}
{"nick":"ljharb","message":"the brand is per-class tho, not per-scope.","date":"2018-05-14T15:26:51.075Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: i think that is the question you need to solve, why it doesn't appear to match and takes time to recognize what/why you need that check","date":"2018-05-14T15:27:14.054Z","type":"message"}
{"nick":"caitp","message":"ljharb: if you declare 2 classes in the same space, they can't access each others #myBrand field, so isn't that kind of a moot point/","date":"2018-05-14T15:27:34.690Z","type":"message"}
{"nick":"ljharb","message":"hm, maybe I’m misunderstanding what you’re suggesting then","date":"2018-05-14T15:28:00.989Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: wait... doesn't that go against your examples?","date":"2018-05-14T15:28:00.989Z","type":"message"}
{"nick":"caitp","message":"if you can read #myBrand, you know the class is the the same one (in terms of where it appears in source), so you can use the SYMBOL to check if shares the same lexical scope or not","date":"2018-05-14T15:28:32.412Z","type":"message"}
{"nick":"caitp","message":"which gives you the complete identity","date":"2018-05-14T15:28:41.280Z","type":"message"}
{"nick":"ljharb","message":"a class defined in a factory method is a different class every time","date":"2018-05-14T15:28:41.533Z","type":"message"}
{"nick":"ljharb","message":"this was discussed in committee and we explicitly went with the current state, iirc","date":"2018-05-14T15:28:56.401Z","type":"message"}
{"nick":"caitp","message":"...yes, and you can use the symbol to do a brandcheck there","date":"2018-05-14T15:28:58.808Z","type":"message"}
{"nick":"caitp","message":"if you really want that, which you probably don't","date":"2018-05-14T15:29:05.885Z","type":"message"}
{"nick":"ljharb","message":"iow, we explicitly chose that source location didn’t give you sharing across factory calls","date":"2018-05-14T15:29:17.938Z","type":"message"}
{"nick":"caitp","message":"99/100 you won't care about that, and won't even be declaring classes in a closure","date":"2018-05-14T15:29:28.362Z","type":"message"}
{"nick":"caitp","message":"yeah we explicitly chose it, but lets go back and rewrite that history so that I can get away with embedding constants in the code instead of the dynamic lookup","date":"2018-05-14T15:29:58.007Z","type":"message"}
{"nick":"ljharb","message":"there’s a hazard if two react components created by the same HOC, and that’s not 1/100 - it’s much more commo\t/100","date":"2018-05-14T15:30:03.601Z","type":"message"}
{"nick":"ljharb","message":"no. That would break react HOC patterns and i would not allow that change to go in.","date":"2018-05-14T15:30:18.276Z","type":"message"}
{"nick":"caitp","message":"if they want the brand check, they can do it themselves","date":"2018-05-14T15:30:32.261Z","type":"message"}
{"nick":"caitp","message":"no harm no foul","date":"2018-05-14T15:30:34.483Z","type":"message"}
{"nick":"caitp","message":"most of the time people won't care","date":"2018-05-14T15:30:38.147Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: the harm is that you need to figure out how to make it match all the other design choices about allocating new things when they are encountered rather than sharing static instances across invocations","date":"2018-05-14T15:31:16.026Z","type":"message"}
{"nick":"ljharb","message":"but when they do care it would silently break encapsulation. That’s not an edge case, that’s a failure of the security model.","date":"2018-05-14T15:31:17.258Z","type":"message"}
{"nick":"caitp","message":"I don't think matching the other design choices is that important","date":"2018-05-14T15:31:32.462Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: i do~ and that would be a big deal for me","date":"2018-05-14T15:31:50.230Z","type":"message"}
{"nick":"caitp","message":"it makes them more like strings that can only occur within a particular area in source code","date":"2018-05-14T15:32:14.950Z","type":"message"}
{"nick":"bradleymeck","message":"so use strings for those things?","date":"2018-05-14T15:32:45.773Z","type":"message"}
{"nick":"ljharb","message":"these aren’t meant to be like strings.","date":"2018-05-14T15:32:57.117Z","type":"message"}
{"nick":"caitp","message":"\"more like\" strings, but not strings","date":"2018-05-14T15:33:00.270Z","type":"message"}
{"nick":"bradleymeck","message":"idk, this all seems to be making language decisions that don't match the rest of the language and have concerns about sharing private data just for a specific compiler optimization","date":"2018-05-14T15:34:34.996Z","type":"message"}
{"nick":"caitp","message":"you can always statically resolve the symbol to use, but you can't embed the right symbol in code unless the symbol stays the same even if it's used on an instance of the same class source declared in a different closure invocation","date":"2018-05-14T15:34:55.228Z","type":"message"}
{"nick":"bradleymeck","message":"if there was an argument that the current model makes everything slow it seems it might be a more persuasive angle","date":"2018-05-14T15:34:59.917Z","type":"message"}
{"nick":"caitp","message":"embedding the symbol in code is good and simple, ergo we should do that","date":"2018-05-14T15:35:14.549Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: that point is not simple or obvious to me","date":"2018-05-14T15:35:27.801Z","type":"message"}
{"nick":"bradleymeck","message":"it carries a lot of other arguments so I don't naively see that we should do that","date":"2018-05-14T15:35:45.035Z","type":"message"}
{"nick":"caitp","message":"the alternative is walking the scope chain every time it's used, which is doable, but I'd rather not :D and we don't lose anything of substance by not doing that","date":"2018-05-14T15:36:46.204Z","type":"message"}
{"nick":"bradleymeck","message":"i see substance lost","date":"2018-05-14T15:37:16.444Z","type":"message"}
{"nick":"bradleymeck","message":"consistency and learnability are increasingly bigger concerns as JS gets more complex","date":"2018-05-14T15:37:40.831Z","type":"message"}
{"nick":"caitp","message":"the _only_ difference is that in the rare cases where you care about the 2 classes not being able to access each others private fields, you have to add that rule yourself","date":"2018-05-14T15:37:51.437Z","type":"message"}
{"nick":"caitp","message":"which is really not that big of a deal","date":"2018-05-14T15:38:00.724Z","type":"message"}
{"nick":"ljharb","message":"as do i. just because i call an HOC twice doesn’t mean one component should be able to steal the private data of another made in the same factory","date":"2018-05-14T15:38:10.155Z","type":"message"}
{"nick":"ljharb","message":"it’s not rare","date":"2018-05-14T15:38:17.224Z","type":"message"}
{"nick":"ljharb","message":"class factories are common, especially with HOCs in react","date":"2018-05-14T15:38:27.828Z","type":"message"}
{"nick":"caitp","message":"if you don't want the component to steal its own private data that it defined itself, from itself, then the component should just not do that","date":"2018-05-14T15:38:56.856Z","type":"message"}
{"nick":"ljharb","message":"and “you have to add that rule yourself” is a foot gun, and goes against the idea that private fields are private by default. You should have to do extra work to expose, not to keep secret","date":"2018-05-14T15:39:01.794Z","type":"message"}
{"nick":"devsnek","message":"\"should just not do that\" you might as well just use known property names then","date":"2018-05-14T15:39:19.235Z","type":"message"}
{"nick":"caitp","message":"it's not the same as a property name","date":"2018-05-14T15:39:30.752Z","type":"message"}
{"nick":"devsnek","message":"it invalidates privates as private","date":"2018-05-14T15:39:33.609Z","type":"message"}
{"nick":"caitp","message":"property names are exposed to the world","date":"2018-05-14T15:39:37.584Z","type":"message"}
{"nick":"caitp","message":"privates are exposed to not-the-whole-world","date":"2018-05-14T15:39:44.483Z","type":"message"}
{"nick":"caitp","message":"but making them different in each closure invocation really doesn't add anything important","date":"2018-05-14T15:40:02.697Z","type":"message"}
{"nick":"caitp","message":"like, it really doesn't","date":"2018-05-14T15:40:14.237Z","type":"message"}
{"nick":"ljharb","message":"Privates are exposed only to that class - each time you call a factory it’s a distinct class.","date":"2018-05-14T15:40:20.783Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: there is problems beyond how common something is, I think you are making claims of how common this use case is, but need more data on it to show it as uncommon and that the mental model mismatch is worth it","date":"2018-05-14T15:40:30.459Z","type":"message"}
{"nick":"ljharb","message":"it does add something important, and enough of us in the committee we’re convinced it does to make that decision.","date":"2018-05-14T15:40:45.341Z","type":"message"}
{"nick":"caitp","message":"does React _really_ care if SomeFancyMenu can read #menuName from a different copy of the same component","date":"2018-05-14T15:41:22.134Z","type":"message"}
{"nick":"ljharb","message":"not react. The user of the HOC","date":"2018-05-14T15:41:42.916Z","type":"message"}
{"nick":"ljharb","message":"like imagine react-redux’s connect","date":"2018-05-14T15:41:50.318Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: you could gather data, but not sharing by default seems a reasonable encapsulation choice","date":"2018-05-14T15:41:56.752Z","type":"message"}
{"nick":"bradleymeck","message":"for private at least","date":"2018-05-14T15:42:08.825Z","type":"message"}
{"nick":"ljharb","message":"It would really really break a lot of things if any two connected components could access private state defined in the Connect HOC","date":"2018-05-14T15:42:24.957Z","type":"message"}
{"nick":"ljharb","message":"each other’s state, i mean.","date":"2018-05-14T15:42:36.061Z","type":"message"}
{"nick":"caitp","message":"bradleymeck: I don't consider \"sharing with yourself\" to really be \"sharing\" or \"leaking\" anything","date":"2018-05-14T15:42:40.701Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: when I write utilities / mixins it is more than myself","date":"2018-05-14T15:43:03.650Z","type":"message"}
{"nick":"ljharb","message":"You can say “just don’t do that” but that means that factories/HOCs can’t ergonomically use private state without also using a WeakMap","date":"2018-05-14T15:43:15.042Z","type":"message"}
{"nick":"caitp","message":"if you declare a private field in the mixin, your mixin is still the only thing that can access it","date":"2018-05-14T15:43:24.981Z","type":"message"}
{"nick":"caitp","message":"because it doesn't mean the same thing to anybody else","date":"2018-05-14T15:43:34.100Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: yes, but now you need to protect from leaking your well known constants for checking, and check on every access","date":"2018-05-14T15:44:01.141Z","type":"message"}
{"nick":"ljharb","message":"the mixin or any instance methods on the newly created class that have access, sure","date":"2018-05-14T15:44:06.014Z","type":"message"}
{"nick":"caitp","message":"so, you can read the same data from other versions of the same mixin, but it's the same mixin, so it's sharing with yourself","date":"2018-05-14T15:44:09.700Z","type":"message"}
{"nick":"caitp","message":"that's not a leak","date":"2018-05-14T15:44:11.216Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: I'm not entirely convinced that it isn't for when other people are creating classes through your utility","date":"2018-05-14T15:44:45.718Z","type":"message"}
{"nick":"ljharb","message":"it’s a leak in the sense that they’re distinct classes that only happen to share the same source location","date":"2018-05-14T15:44:50.956Z","type":"message"}
{"nick":"caitp","message":"conceptually no information is shared","date":"2018-05-14T15:44:52.217Z","type":"message"}
{"nick":"ljharb","message":"it’s class-private, not lexically-private. That’s part of the design.","date":"2018-05-14T15:45:09.275Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: it puts burden on not-sharing private data to people using private fields","date":"2018-05-14T15:45:17.645Z","type":"message"}
{"nick":"bradleymeck","message":"which seems... unusual","date":"2018-05-14T15:45:26.132Z","type":"message"}
{"nick":"caitp","message":"it doesn't really","date":"2018-05-14T15:45:30.741Z","type":"message"}
{"nick":"caitp","message":"I mean it does in the sense that they have to watch out if they don't want to share with themselves","date":"2018-05-14T15:45:42.527Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: i will disagree harshly on that point given that you have to custom code brand checks etc","date":"2018-05-14T15:45:49.381Z","type":"message"}
{"nick":"caitp","message":"but in every other way, and the more common and important ways, they get the free privacy","date":"2018-05-14T15:46:09.670Z","type":"message"}
{"nick":"bradleymeck","message":"i don't agree on free","date":"2018-05-14T15:46:21.959Z","type":"message"}
{"nick":"bradleymeck","message":"you get a form of privacy that is shared between all classes in the same location and all classes of the same location need to add extra code in order to not share","date":"2018-05-14T15:46:51.849Z","type":"message"}
{"nick":"caitp","message":"class C { #x = 1; } let secret = new C; C.#x = 2; << still illegal","date":"2018-05-14T15:46:52.563Z","type":"message"}
{"nick":"bradleymeck","message":"it is closer to a friendly model than what i would expect of a private model","date":"2018-05-14T15:47:03.736Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: sure but my points remain about it not being private, but closer to friendly","date":"2018-05-14T15:47:28.267Z","type":"message"}
{"nick":"caitp","message":"so what is a case where this information is shared between 2 classes in the same location, that is actually a problem?","date":"2018-05-14T15:47:56.456Z","type":"message"}
{"nick":"bradleymeck","message":"anywho gtg for a bit, you can open issues in other places on github maybe","date":"2018-05-14T15:48:03.968Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: defining what you mean by \"actually\" would be hard without claims of how the existing model has invalid use cases","date":"2018-05-14T15:48:43.792Z","type":"message"}
{"nick":"bradleymeck","message":"maybe make issues that such use cases are invalid on github?","date":"2018-05-14T15:48:55.653Z","type":"message"}
{"nick":"ljharb","message":"anything where my factoried class has a brand checking method","date":"2018-05-14T15:50:12.289Z","type":"message"}
{"nick":"ljharb","message":"i should never have to put forth effort to maintain privacy, the effort should be required to share. It’s not “myself” I’d be sharing with, it’s the two distinct classes that would easily be sharing with each other","date":"2018-05-14T15:50:58.521Z","type":"message"}
{"nick":"ljharb","message":"if i *want* them to share, i should use what JS has for that: lexical scope","date":"2018-05-14T15:51:12.922Z","type":"message"}
{"nick":"ljharb","message":"the functions returned from a HOF shouldn’t share variables defined within the new function’s body, either.","date":"2018-05-14T15:52:10.369Z","type":"message"}
{"nick":"keith_miller","date":"2018-05-14T16:25:09.668Z","type":"join"}
{"nick":"caitp","message":"ljharb: I mean, you can add all the brand checks you want, the question is are they really needed --- is your private data (or some use or mutation of it) able to escape outside the class, in such a way that leaks sensitive information, for ex.","date":"2018-05-14T16:34:06.926Z","type":"message"}
{"nick":"caitp","message":"leaking to another \"version\" of the same class is fine, because you wrote that class, you're still in control of it and anything that happens to it","date":"2018-05-14T16:35:17.706Z","type":"message"}
{"nick":"caitp","message":"so that's kind of a non-issue","date":"2018-05-14T16:35:21.273Z","type":"message"}
{"nick":"caitp","message":"anyway, I don't think I care that much if I can get the spec changed, but implementor-wise it would be a nice change.","date":"2018-05-14T16:38:19.777Z","type":"message"}
{"nick":"Bakkot","message":"caitp: this was discussed in https://github.com/tc39/proposal-class-fields/issues/60","date":"2018-05-14T16:41:17.176Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T16:44:39.411Z","type":"quit"}
{"nick":"caitp","message":"I've read that thread, and I think the arguments from miller & allen are not as compelling as they think they are","date":"2018-05-14T16:47:38.825Z","type":"message"}
{"nick":"keith_miller","date":"2018-05-14T16:47:54.811Z","type":"join"}
{"nick":"caitp","message":"the Mint/Purse thing is a perfect example of \"make an explicit brand check in a case where it actually matters\"","date":"2018-05-14T16:49:04.185Z","type":"message"}
{"nick":"Bakkot","message":"You can argue that the author of that code ought to have written different code, but I don't think you can fault them for expecting it to work the way they intended. Principle of least surprise and all that.","date":"2018-05-14T16:50:18.138Z","type":"message"}
{"nick":"caitp","message":"I don't think anyone has any reason to expect property names to behave like captured variables","date":"2018-05-14T16:50:53.493Z","type":"message"}
{"nick":"devsnek","message":"\"whoops I forgot to manually enforce these private symbols being private\"","date":"2018-05-14T16:50:58.486Z","type":"message"}
{"nick":"devsnek","message":"they aren't property names","date":"2018-05-14T16:51:18.170Z","type":"message"}
{"nick":"Bakkot","message":"caitp: the privacy model is based on lexical scope","date":"2018-05-14T16:51:18.757Z","type":"message"}
{"nick":"Bakkot","message":"which seems like a very good reason to expect them to behave like captured variables","date":"2018-05-14T16:51:27.391Z","type":"message"}
{"nick":"devsnek","message":"they're symbols","date":"2018-05-14T16:51:28.967Z","type":"message"}
{"nick":"caitp","message":"symbols are property names","date":"2018-05-14T16:51:36.928Z","type":"message"}
{"nick":"devsnek","message":"property keys maybe","date":"2018-05-14T16:51:50.434Z","type":"message"}
{"nick":"caitp","message":"ToName(v) will return v when v is a Symbol","date":"2018-05-14T16:52:04.929Z","type":"message"}
{"nick":"caitp","message":"it's a property name, for all intents and purposes --- it has meaning tied to a specific lexical context, but it's not a variable or binding","date":"2018-05-14T16:52:30.760Z","type":"message"}
{"nick":"devsnek","message":"right but they aren't strings is my point","date":"2018-05-14T16:53:26.565Z","type":"message"}
{"nick":"caitp","message":"yes, but that's... not important","date":"2018-05-14T16:53:35.083Z","type":"message"}
{"nick":"caitp","message":"really, that doesn't matter at all to this discussion","date":"2018-05-14T16:53:46.145Z","type":"message"}
{"nick":"devsnek","message":"two symbols from different lexical scoped are two different symbols","date":"2018-05-14T16:53:59.130Z","type":"message"}
{"nick":"caitp","message":"they don't have to be.","date":"2018-05-14T16:54:11.027Z","type":"message"}
{"nick":"caitp","message":"there is no analogue in the language to compare it to","date":"2018-05-14T16:54:16.159Z","type":"message"}
{"nick":"devsnek","message":"yes there is","date":"2018-05-14T16:54:22.396Z","type":"message"}
{"nick":"caitp","message":"no, there isn't","date":"2018-05-14T16:54:25.385Z","type":"message"}
{"nick":"devsnek","message":"Symbol()","date":"2018-05-14T16:54:29.239Z","type":"message"}
{"nick":"caitp","message":"a private name is not a Symbol()","date":"2018-05-14T16:54:41.121Z","type":"message"}
{"nick":"devsnek","message":"no but they behave and are used similarly","date":"2018-05-14T16:54:59.241Z","type":"message"}
{"nick":"caitp","message":"they don't behave similarly","date":"2018-05-14T16:55:06.624Z","type":"message"}
{"nick":"caitp","message":"they aren't used similarly","date":"2018-05-14T16:55:15.601Z","type":"message"}
{"nick":"devsnek","message":"I think there's some huge difference in viewpoint here that arguing this won't fix","date":"2018-05-14T16:56:05.649Z","type":"message"}
{"nick":"caitp","message":"lets talk about the differences","date":"2018-05-14T16:56:21.896Z","type":"message"}
{"nick":"caitp","message":"if instead of a private field I use a lexically declared Symbol, will that symbol leak if I do Object.getOwnPropertyDescriptors()?","date":"2018-05-14T16:56:48.374Z","type":"message"}
{"nick":"Bakkot","message":"caitp: in your issue you say that the current design requires you to walk up the scope chain","date":"2018-05-14T16:56:49.234Z","type":"message"}
{"nick":"Bakkot","message":"why this?","date":"2018-05-14T16:56:50.603Z","type":"message"}
{"nick":"caitp","message":"will it leak if I use a private field?","date":"2018-05-14T16:57:15.693Z","type":"message"}
{"nick":"caitp","message":"is it possible for me to alias the Symbol / bind it to a different location, like `let x = symbol;`? is that possible with private fields?","date":"2018-05-14T16:58:01.613Z","type":"message"}
{"nick":"caitp","message":"can the bound Symbol change at different times? can the PrivateField be bound in the first place?","date":"2018-05-14T16:58:27.836Z","type":"message"}
{"nick":"caitp","message":"they're different in the most important ways","date":"2018-05-14T16:58:50.069Z","type":"message"}
{"nick":"caitp","message":"having a private field behave like a captured variable isn't really any less surprising than the alternative, because there is no analog for them","date":"2018-05-14T16:59:29.663Z","type":"message"}
{"nick":"caitp","message":"they aren't variables, so why would they be captured?","date":"2018-05-14T16:59:51.005Z","type":"message"}
{"nick":"Bakkot","message":"caitp: because they're private to the class. if there's two classes, I expect theres","date":"2018-05-14T17:06:20.388Z","type":"message"}
{"nick":"Bakkot","message":"two variables.","date":"2018-05-14T17:06:23.707Z","type":"message"}
{"nick":"Bakkot","message":"\"private to the source text of the class\" is... not a concept I have in my head.","date":"2018-05-14T17:06:36.138Z","type":"message"}
{"nick":"Bakkot","message":"er, two *names, rather","date":"2018-05-14T17:06:50.998Z","type":"message"}
{"nick":"caitp","message":"why do you expect theres variables?","date":"2018-05-14T17:06:52.157Z","type":"message"}
{"nick":"caitp","message":"you didn't declare any variables did you?","date":"2018-05-14T17:06:58.493Z","type":"message"}
{"nick":"caitp","message":"you can't access those variables directly?","date":"2018-05-14T17:07:03.186Z","type":"message"}
{"nick":"Bakkot","message":"sorry, \"variables\" was a typo, I meant \"names\".","date":"2018-05-14T17:07:12.161Z","type":"message"}
{"nick":"caitp","message":"implementation-wise we're treating them as variables, but in the language sense, they aren't that","date":"2018-05-14T17:07:26.921Z","type":"message"}
{"nick":"caitp","message":"there's no good reason we need to make them behave like that, it's not more or less surprising","date":"2018-05-14T17:07:41.737Z","type":"message"}
{"nick":"caitp","message":"so what it comes down to is ease of use","date":"2018-05-14T17:07:51.462Z","type":"message"}
{"nick":"caitp","message":"and implementation sense","date":"2018-05-14T17:07:57.584Z","type":"message"}
{"nick":"Bakkot","message":"I very much do not share your intuitions about which of these is more surprising","date":"2018-05-14T17:08:00.622Z","type":"message"}
{"nick":"caitp","message":"I didn't say one is more surprising, I said they're both equal, because there's no analog in the language","date":"2018-05-14T17:08:25.029Z","type":"message"}
{"nick":"caitp","message":"there's no good reason why a property name should be captured","date":"2018-05-14T17:08:40.572Z","type":"message"}
{"nick":"devsnek","message":"i think the language enforcing that private things are private is like the bare minimum","date":"2018-05-14T17:08:42.090Z","type":"message"}
{"nick":"caitp","message":"or have dynamic scope","date":"2018-05-14T17:08:50.432Z","type":"message"}
{"nick":"Bakkot","message":"right, and my position is that the proposed change would be much more surprising than the current behavior, at least to me","date":"2018-05-14T17:09:14.185Z","type":"message"}
{"nick":"caitp","message":"in terms of the historic features of the language, I mean","date":"2018-05-14T17:09:15.144Z","type":"message"}
{"nick":"caitp","message":"so what's surprising about it?","date":"2018-05-14T17:09:31.316Z","type":"message"}
{"nick":"Bakkot","message":"caitp: still want to understand what you mean by \"dynamic scope\" here, or why scope would have to participate at all at runtime","date":"2018-05-14T17:09:48.694Z","type":"message"}
{"nick":"devsnek","message":"i would be surprised if private names leaked between separate classes","date":"2018-05-14T17:10:00.595Z","type":"message"}
{"nick":"devsnek","message":"especially when they're wrapped in the class's closure","date":"2018-05-14T17:10:10.116Z","type":"message"}
{"nick":"caitp","message":"in the case we were talking about earlier, where you return a class or instance of a class from a factory function, and private names declared in that class have to be different for each evaluation of the class, the dynamic scope is one class evaluation vs the next","date":"2018-05-14T17:10:57.201Z","type":"message"}
{"nick":"caitp","message":"devsnek: they aren't separate classes, they're separate evaluations of the same class --- it's like a closure in a js implementation, it'll have the same class will share a lot of stuff when it's evaluated multiple times, so implementations create data structures to allow for that sharing","date":"2018-05-14T17:13:14.193Z","type":"message"}
{"nick":"Bakkot","message":"caitp: at a very high level, because I expect private names to be per-class, not per-class-source-text; I never expect the language to have a concept of \"per-*-source-text\". for example, I do not expect the language to distinguish between `let cs = [class{}, class{}]` and `let cs = []; for(let i = 0; i < 2; ++i) cs.push(class{})`, and would be surprised if it did. at a lower level, because my mental model for how privacy of private","date":"2018-05-14T17:13:17.503Z","type":"message"}
{"nick":"Bakkot","message":"fields works is that it works by lexical closure, which it does currently, rather than some new concept of private-to-field.","date":"2018-05-14T17:13:18.102Z","type":"message"}
{"nick":"caitp","message":"yes, different evaluations of the same class have different identity, sure","date":"2018-05-14T17:13:27.074Z","type":"message"}
{"nick":"caitp","message":"but, given that it's the same class, it's really not that big of a deal if it leaks its private names to other evaluations of itself","date":"2018-05-14T17:14:05.955Z","type":"message"}
{"nick":"Bakkot","message":"caitp: I think it's misleading to reason from \"implementations create data structures to allow for that sharing\". I don't think that does or really should participate in how people think about the semantics of the language.","date":"2018-05-14T17:14:09.001Z","type":"message"}
{"nick":"devsnek","message":"it's not the same class","date":"2018-05-14T17:14:14.821Z","type":"message"}
{"nick":"caitp","message":"it is the same class, just a different evaluation of the same class","date":"2018-05-14T17:14:32.396Z","type":"message"}
{"nick":"devsnek","message":"no it's not","date":"2018-05-14T17:14:38.797Z","type":"message"}
{"nick":"devsnek","message":"it's not the same class","date":"2018-05-14T17:14:46.017Z","type":"message"}
{"nick":"caitp","message":"if you put your dynamic language hat on, then it stops being the same class because you're thinking about what's happening at runtime versus what's happening statically","date":"2018-05-14T17:14:58.788Z","type":"message"}
{"nick":"devsnek","message":"we can't just ignore what happens at runtime","date":"2018-05-14T17:15:29.786Z","type":"message"}
{"nick":"caitp","message":"sure we can","date":"2018-05-14T17:15:33.933Z","type":"message"}
{"nick":"caitp","message":"it's totally up to us to ignore what happens at runtime in this case","date":"2018-05-14T17:15:41.562Z","type":"message"}
{"nick":"caitp","message":"and we'd be better off if we did","date":"2018-05-14T17:15:44.949Z","type":"message"}
{"nick":"caitp","message":"marginally","date":"2018-05-14T17:16:09.733Z","type":"message"}
{"nick":"caitp","message":"and why, because for the common cases we should see a 5-10% boost","date":"2018-05-14T17:16:36.725Z","type":"message"}
{"nick":"caitp","message":"and for uncommon cases, who cares","date":"2018-05-14T17:16:41.313Z","type":"message"}
{"nick":"devsnek","message":"boost of what","date":"2018-05-14T17:17:11.700Z","type":"message"}
{"nick":"devsnek","message":"confusion?","date":"2018-05-14T17:17:16.021Z","type":"message"}
{"nick":"caitp","message":"that runtime speed","date":"2018-05-14T17:17:18.316Z","type":"message"}
{"nick":"caitp","message":"go fast","date":"2018-05-14T17:17:21.777Z","type":"message"}
{"nick":"caitp","message":"paint your js engine red","date":"2018-05-14T17:17:28.107Z","type":"message"}
{"nick":"devsnek","message":"you want to speed up engines by caching the creation of private symbols by source position","date":"2018-05-14T17:18:11.124Z","type":"message"}
{"nick":"caitp","message":"no, I want to speed up the engine by embedding the symbol in code that uses that symbol","date":"2018-05-14T17:18:36.172Z","type":"message"}
{"nick":"caitp","message":"so that, instead of doing a dynamic lookup for that symbol, I just say \"here's a pointer to the symbol I want, use it\"","date":"2018-05-14T17:18:57.227Z","type":"message"}
{"nick":"devsnek","message":"that philosophy applies to literally any created thing","date":"2018-05-14T17:18:57.282Z","type":"message"}
{"nick":"Bakkot","message":"caitp: still would like to understand what you mean by \"dynamic lookup\" here","date":"2018-05-14T17:19:44.444Z","type":"message"}
{"nick":"caitp","message":"Bakkot: you're only generating one code for all evaluations of that method that uses the private field","date":"2018-05-14T17:20:30.859Z","type":"message"}
{"nick":"caitp","message":"if the private field is a different name in each of those evaluations, you have to look it up, it's not constant","date":"2018-05-14T17:20:51.480Z","type":"message"}
{"nick":"caitp","message":"if we make it constant, we avoid that","date":"2018-05-14T17:21:01.910Z","type":"message"}
{"nick":"devsnek","message":"you're designing this backward","date":"2018-05-14T17:21:03.133Z","type":"message"}
{"nick":"Bakkot","message":"caitp: suppose I have `function f(){ let x = Math.random(); return class { m(){ return x; } }; }`","date":"2018-05-14T17:21:14.528Z","type":"message"}
{"nick":"devsnek","message":"make a good interface and then optimise it","date":"2018-05-14T17:21:14.705Z","type":"message"}
{"nick":"devsnek","message":"not the other way around","date":"2018-05-14T17:21:18.771Z","type":"message"}
{"nick":"Bakkot","message":"is the lookup of `x` dynamic in the sense you mean?","date":"2018-05-14T17:21:28.352Z","type":"message"}
{"nick":"caitp","message":"I don't think this is any better of an interface","date":"2018-05-14T17:21:33.613Z","type":"message"}
{"nick":"caitp","message":"as awb said, there are pros/cons to both","date":"2018-05-14T17:21:45.623Z","type":"message"}
{"nick":"devsnek","message":"the tiny perf boost doesn't seem worth the confusion and lack of privates bring private","date":"2018-05-14T17:22:11.108Z","type":"message"}
{"nick":"caitp","message":"where are you getting confused though my dude","date":"2018-05-14T17:22:22.377Z","type":"message"}
{"nick":"caitp","message":"like, what is the confusion","date":"2018-05-14T17:22:32.071Z","type":"message"}
{"nick":"caitp","message":"it's either one way or the other, one is a little bit faster, less memory used, etc, but a little bit less dynamic","date":"2018-05-14T17:23:15.506Z","type":"message"}
{"nick":"devsnek","message":"that something would be determined from source position","date":"2018-05-14T17:23:17.670Z","type":"message"}
{"nick":"devsnek","message":"is like","date":"2018-05-14T17:23:20.075Z","type":"message"}
{"nick":"devsnek","message":"weird for js","date":"2018-05-14T17:23:42.781Z","type":"message"}
{"nick":"devsnek","message":"add on top of that that privates aren't private anymore","date":"2018-05-14T17:23:54.016Z","type":"message"}
{"nick":"caitp","message":"weird for js, totally natural for the humans writing the js","date":"2018-05-14T17:24:06.980Z","type":"message"}
{"nick":"caitp","message":"no, they're still very private","date":"2018-05-14T17:24:15.520Z","type":"message"}
{"nick":"devsnek","message":"it's not natural for the humans either","date":"2018-05-14T17:24:38.998Z","type":"message"}
{"nick":"caitp","message":"yes it is","date":"2018-05-14T17:24:44.942Z","type":"message"}
{"nick":"caitp","message":"it's more declarative","date":"2018-05-14T17:25:04.800Z","type":"message"}
{"nick":"caitp","message":"\"this is a field that can be accessed by code between these squiggly lines, and nothing else\"","date":"2018-05-14T17:25:18.334Z","type":"message"}
{"nick":"caitp","message":"versus \"this is a field that can be accessed by code in this particular instance of execution of code between these squiggly lines, and nothing else\"","date":"2018-05-14T17:25:40.202Z","type":"message"}
{"nick":"caitp","message":"humans have an easier time with the former","date":"2018-05-14T17:26:07.974Z","type":"message"}
{"nick":"caitp","message":"and i you think they don't, you're wrong","date":"2018-05-14T17:26:12.514Z","type":"message"}
{"nick":"devsnek","message":"well I think you're wrong so there's clearly some misunderstanding","date":"2018-05-14T17:26:56.557Z","type":"message"}
{"nick":"devsnek","message":"for someone","date":"2018-05-14T17:27:08.832Z","type":"message"}
{"nick":"devsnek","message":"why don't you open an issue on the repo and get more opinions","date":"2018-05-14T17:27:20.763Z","type":"message"}
{"nick":"caitp","message":"I did","date":"2018-05-14T17:27:31.973Z","type":"message"}
{"nick":"devsnek","message":"what did the opinions say","date":"2018-05-14T17:27:47.501Z","type":"message"}
{"nick":"caitp","message":"nobody has looked at it yet","date":"2018-05-14T17:27:55.787Z","type":"message"}
{"nick":"devsnek","message":"I guess we wait then","date":"2018-05-14T17:28:13.205Z","type":"message"}
{"nick":"TabAtkins","message":"I'm definitely on the side of Bakkot's \"I wouldn't expect these two examples to work differently\".","date":"2018-05-14T17:31:48.241Z","type":"message"}
{"nick":"caitp","message":"this is similar to some of the discussion about tagged template callsite caching","date":"2018-05-14T17:34:28.361Z","type":"message"}
{"nick":"Bakkot","message":"the tagged template callsite caching thing is also surprising, but at least there it's a language feature which is actually *about* source text, so the language distinguishing between two identical source texts in different locations is at least not totally insane","date":"2018-05-14T17:36:24.775Z","type":"message"}
{"nick":"caitp","message":"where \"let cache = [cacheMyTag`1`, cacheMyTag`1`]\" produces different results from \"let cache = []; for (var i = 0; i < 2; ++i) cache.push(cacheMyTag`1`);\" now","date":"2018-05-14T17:36:38.002Z","type":"message"}
{"nick":"caitp","message":"(but historically didn't)","date":"2018-05-14T17:36:50.933Z","type":"message"}
{"nick":"caitp","message":"well hey, why shouldn't it be about source text? why shouldn't we use statically resolvable private names, instead of runtime-resolvable ones?","date":"2018-05-14T17:38:03.021Z","type":"message"}
{"nick":"caitp","message":"you get all sorts of benefits from doing it statically","date":"2018-05-14T17:38:19.861Z","type":"message"}
{"nick":"TabAtkins","message":"I'm sure, but it goes against everything we've ever learned about how properties work.","date":"2018-05-14T17:38:48.004Z","type":"message"}
{"nick":"caitp","message":"you get a few benefits from doing it at runtime too, sure, but not as many, imo?","date":"2018-05-14T17:38:48.443Z","type":"message"}
{"nick":"Bakkot","message":"I claim \"private fields\" is a concept which already exists in the world, and is already not about source text","date":"2018-05-14T17:38:51.454Z","type":"message"}
{"nick":"Bakkot","message":"we are not in a position to change that","date":"2018-05-14T17:39:00.100Z","type":"message"}
{"nick":"caitp","message":"in which world?","date":"2018-05-14T17:39:13.979Z","type":"message"}
{"nick":"caitp","message":"js world?","date":"2018-05-14T17:39:17.218Z","type":"message"}
{"nick":"Bakkot","message":"the whole world","date":"2018-05-14T17:39:25.106Z","type":"message"}
{"nick":"caitp","message":"the same concept exists both ways, in the whole world, in different contexts","date":"2018-05-14T17:39:56.564Z","type":"message"}
{"nick":"caitp","message":"so some people will find one version more appealing, some won't","date":"2018-05-14T17:40:52.032Z","type":"message"}
{"nick":"caitp","message":"that's ok","date":"2018-05-14T17:40:55.601Z","type":"message"}
{"nick":"caitp","message":"but if we did go with the \"source text caching\" thing, is it not true that you could get back the per-class-evaluation semantics in userspace with a 2 line if-throw?","date":"2018-05-14T17:43:22.466Z","type":"message"}
{"nick":"TabAtkins","message":"The current notion of \"private fields\" that JS can have (closure variables) will provide the same behavior for Bakkot's two examples if the closure is tightly-wrapped (distinct for each instance); you'll only get a shared variable if you explicitly put the closure at a higher point in the tree.","date":"2018-05-14T17:44:21.137Z","type":"message"}
{"nick":"TabAtkins","message":"(And I find any analogy with tagged template source-text caching unconvincing, because that's generally a corner feature that very few authors ever need to worry about; if it's confusing (and I don't know if it is), it'll be encountered rarely, so optimizing for perf of *all* template strings over usability can make sense. The calculus is flipped for private fields, I think - particularly when classes are produced by a","date":"2018-05-14T17:49:16.291Z","type":"message"}
{"nick":"TabAtkins","message":"function, having all of them share the same private state would be *very* confusing.)","date":"2018-05-14T17:49:16.505Z","type":"message"}
{"nick":"devsnek","message":"what is this confusing behaviour about tagged template literals that people keep mentioning","date":"2018-05-14T17:51:00.894Z","type":"message"}
{"nick":"caitp","message":"the caching behaviour of the tagged template callsite changed a while ago","date":"2018-05-14T17:51:23.028Z","type":"message"}
{"nick":"devsnek","message":"i've never encountered anything surprising while using them","date":"2018-05-14T17:51:56.530Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: one sec","date":"2018-05-14T17:52:02.599Z","type":"message"}
{"nick":"caitp","message":"see the \"cacheMyTag\" example above","date":"2018-05-14T17:52:14.456Z","type":"message"}
{"nick":"caitp","message":"if you try that in chrome 65 vs chrome 55 you get different results","date":"2018-05-14T17:52:42.279Z","type":"message"}
{"nick":"devsnek","message":"with the literal `1`","date":"2018-05-14T17:52:57.162Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: ``` let cache = []; let tag = a => cache.push(a); tag``; [0, 1].map(()=>tag``); cache[0] === cache[1] /* false */; cache[1] === cache[2] /* true */; ```","date":"2018-05-14T17:53:04.109Z","type":"message"}
{"nick":"devsnek","message":"wait its the same array for the second two?","date":"2018-05-14T17:54:38.676Z","type":"message"}
{"nick":"Bakkot","message":"yes.","date":"2018-05-14T17:54:44.980Z","type":"message"}
{"nick":"caitp","message":"it is now","date":"2018-05-14T17:54:48.464Z","type":"message"}
{"nick":"Bakkot","message":"it always was","date":"2018-05-14T17:54:53.156Z","type":"message"}
{"nick":"devsnek","message":"yes that is definitely surprising","date":"2018-05-14T17:54:59.321Z","type":"message"}
{"nick":"Bakkot","message":"the new thing is that it is *not* the same array for the first two","date":"2018-05-14T17:55:00.513Z","type":"message"}
{"nick":"caitp","message":"right, sorry I got that backwards","date":"2018-05-14T17:55:01.150Z","type":"message"}
{"nick":"caitp","message":"the first one is false now","date":"2018-05-14T17:55:04.054Z","type":"message"}
{"nick":"caitp","message":"but didn't used to be :p","date":"2018-05-14T17:55:15.082Z","type":"message"}
{"nick":"devsnek","message":"weird","date":"2018-05-14T17:55:19.991Z","type":"message"}
{"nick":"devsnek","message":"but lets not use the excuse \"confusing stuff happened so we can do more of it now\"","date":"2018-05-14T17:55:33.971Z","type":"message"}
{"nick":"caitp","message":"I still don't really see it as confusing","date":"2018-05-14T17:55:46.963Z","type":"message"}
{"nick":"caitp","message":"it's similar to most static typed languages","date":"2018-05-14T17:55:55.045Z","type":"message"}
{"nick":"caitp","message":"not java, afaik?","date":"2018-05-14T17:56:07.801Z","type":"message"}
{"nick":"caitp","message":"but maybe java too","date":"2018-05-14T17:56:09.892Z","type":"message"}
{"nick":"devsnek","message":"i would expect tagged literals to always get new arrays","date":"2018-05-14T17:56:34.004Z","type":"message"}
{"nick":"devsnek","message":"but whatever","date":"2018-05-14T17:56:44.206Z","type":"message"}
{"nick":"caitp","message":"anyway, fiiiine, I'll not embed constants in code and be sad about that","date":"2018-05-14T17:59:54.818Z","type":"message"}
{"nick":"caitp","message":":[","date":"2018-05-14T17:59:55.762Z","type":"message"}
{"nick":"TabAtkins","message":",3","date":"2018-05-14T18:10:43.286Z","type":"message"}
{"nick":"TabAtkins","message":"<3 rather","date":"2018-05-14T18:10:45.445Z","type":"message"}
{"nick":"gsathya","message":"caitp:  I was pretty sad about having to do a double lookup too, but I've made my peace with it.","date":"2018-05-14T18:11:59.595Z","type":"message"}
{"nick":"gsathya","message":"But, I agree with Bakkot, this is not the behavior I expected.","date":"2018-05-14T18:13:04.153Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T19:06:59.744Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-14T19:13:48.827Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 260 seconds","date":"2018-05-14T19:54:39.697Z","type":"quit"}
{"nick":"AtumT","date":"2018-05-14T19:54:58.695Z","type":"join"}
{"nick":"Bakkot","message":"Question: why does everyone implement function.caller? is it actually required for web reality?","date":"2018-05-14T21:43:17.834Z","type":"message"}
{"nick":"Bakkot","message":"if so, shouldn't we spec it better?","date":"2018-05-14T21:43:25.642Z","type":"message"}
{"nick":"devsnek","message":"Domenic: i love love love your blocks proposal","date":"2018-05-14T21:44:10.693Z","type":"message"}
{"nick":"devsnek","message":"just wanted to say that","date":"2018-05-14T21:44:14.976Z","type":"message"}
{"nick":"Domenic","message":"Thanks!","date":"2018-05-14T21:44:27.546Z","type":"message"}
{"nick":"Domenic","message":"Bakkot: I think we should spec function.caller and stack traces better. Hard job.","date":"2018-05-14T21:44:38.254Z","type":"message"}
{"nick":"devsnek","message":"stack traces need some love","date":"2018-05-14T21:45:15.467Z","type":"message"}
{"nick":"ljharb","message":"the proposal is happy to accept more cochampions :-)","date":"2018-05-14T21:46:32.160Z","type":"message"}
{"nick":"ljharb","message":"once the initial one goes in, it opens the door for a lot of followups to improve things","date":"2018-05-14T21:46:41.993Z","type":"message"}
{"nick":"devsnek","message":"Domenic: did you consider making blOcks create workers instead of requiring a worker to run them?","date":"2018-05-14T21:58:16.296Z","type":"message"}
{"nick":"Domenic","message":"devsnek: it's really up to the creator of the worker() function what they do.","date":"2018-05-14T21:58:32.858Z","type":"message"}
{"nick":"devsnek","message":"well they're kinda just parsed code that happens to be transferable right?","date":"2018-05-14T21:59:07.034Z","type":"message"}
{"nick":"Domenic","message":"Yeah so its up to you what you do with that code","date":"2018-05-14T21:59:20.190Z","type":"message"}
{"nick":"Domenic","message":"I think that'd be a bad idea though as a whole thread per blöck is very wasteful","date":"2018-05-14T21:59:30.196Z","type":"message"}
{"nick":"Domenic","message":"Compare to e.g. C# or Android's built-in threadpools","date":"2018-05-14T21:59:53.691Z","type":"message"}
{"nick":"devsnek","message":"good point","date":"2018-05-14T22:00:31.953Z","type":"message"}
{"nick":"devsnek","message":"the thing that jumps out at me is blöck-receiver.js though","date":"2018-05-14T22:01:19.003Z","type":"message"}
{"nick":"ljharb","message":"how can you know the thread is transferable if it references builtins?","date":"2018-05-14T22:01:22.849Z","type":"message"}
{"nick":"ljharb","message":"would the engine have to keep track of whether builtins were overwritten or not?","date":"2018-05-14T22:01:33.671Z","type":"message"}
{"nick":"devsnek","message":"i assume thats the reason you have to explicitly capture them","date":"2018-05-14T22:01:51.482Z","type":"message"}
{"nick":"devsnek","message":"same as like c++ lambdas","date":"2018-05-14T22:01:56.417Z","type":"message"}
{"nick":"ljharb","message":"i'm not seeing that in the readme","date":"2018-05-14T22:02:26.658Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/domenic/proposal-blocks#variable-capture","date":"2018-05-14T22:02:45.221Z","type":"message"}
{"nick":"ljharb","message":"ah k thx","date":"2018-05-14T22:02:53.256Z","type":"message"}
{"nick":"Domenic","message":"No, it's a fair point, I didn't capture fetch() in the examples","date":"2018-05-14T22:03:13.038Z","type":"message"}
{"nick":"devsnek","message":"anything in WindowOrWorkerGlobalScope is fair game right?","date":"2018-05-14T22:03:36.765Z","type":"message"}
{"nick":"ljharb","message":"so when you say \"capture\" you really mean \"mark as something that the worker will provide\"?","date":"2018-05-14T22:03:40.300Z","type":"message"}
{"nick":"ljharb","message":"ah, in .reify","date":"2018-05-14T22:03:50.987Z","type":"message"}
{"nick":"Domenic","message":"devsnek: I never stated that, and I'm wary of such a rule... opening an issue now.","date":"2018-05-14T22:04:04.720Z","type":"message"}
{"nick":"Domenic","message":"Ouch https://github.com/domenic/proposal-blocks/issues/1","date":"2018-05-14T22:09:03.870Z","type":"message"}
{"nick":"ljharb","message":"yeah that's a tough one","date":"2018-05-14T22:10:56.097Z","type":"message"}
{"nick":"ljharb","message":"based on how you go, it raises questions about polyfills, mutable globals, implicit vs explicit","date":"2018-05-14T22:11:13.682Z","type":"message"}
{"nick":"bterlson","message":"I'm very invested in some feature like this, but... it's very hard to do right","date":"2018-05-14T22:12:29.858Z","type":"message"}
{"nick":"bterlson","message":"consider that transpilers may depend on/introduce globals at compile time","date":"2018-05-14T22:12:43.326Z","type":"message"}
{"nick":"Bakkot","message":"Domenic: also need to worry about prototypes of builtins","date":"2018-05-14T22:14:19.750Z","type":"message"}
{"nick":"bterlson","message":"but I have a very great scenario to drive this: https://github.com/Azure/azure-documentdb-node/blob/ca337c9ddff136e01d6f589a45e24957d3efe5e3/source/lib/documentclient.js#L437","date":"2018-05-14T22:14:25.067Z","type":"message"}
{"nick":"Domenic","message":"Bakkot: example?","date":"2018-05-14T22:14:46.780Z","type":"message"}
{"nick":"Bakkot","message":"Array.prototype.foo = () => 0; await worker({| return [].foo(); |});","date":"2018-05-14T22:15:24.506Z","type":"message"}
{"nick":"ljharb","message":"oh very true, esp with polyfills","date":"2018-05-14T22:15:55.460Z","type":"message"}
{"nick":"Domenic","message":"That doesn't seem like an issue; you should be aware that will just runtime error becaues there's no .foo","date":"2018-05-14T22:15:56.899Z","type":"message"}
{"nick":"ljharb","message":"i suppose you could make \"worker\" provide a polyfilled Array.prototype","date":"2018-05-14T22:16:09.601Z","type":"message"}
{"nick":"Bakkot","message":"(This is a bigger deal in light of the protocols proposal.)","date":"2018-05-14T22:16:09.779Z","type":"message"}
{"nick":"Domenic","message":"The code in the blöck is not running in your realm; it's just syntactically co-located with your source file.","date":"2018-05-14T22:16:20.226Z","type":"message"}
{"nick":"Bakkot","message":"yeah, that's... weird to me","date":"2018-05-14T22:16:30.460Z","type":"message"}
{"nick":"bterlson","message":"domenic: that's basically the ocntract that the sdk I linked is built around","date":"2018-05-14T22:16:48.448Z","type":"message"}
{"nick":"Bakkot","message":"given that it enforces that you don't capture any variables","date":"2018-05-14T22:16:50.404Z","type":"message"}
{"nick":"bterlson","message":"it's very confusing for people","date":"2018-05-14T22:17:00.651Z","type":"message"}
{"nick":"Domenic","message":"I mean, the reason it enforces that is so that it can be moved around to another realm...","date":"2018-05-14T22:17:06.086Z","type":"message"}
{"nick":"Domenic","message":"bterlson: The hope is that the funky syntax makes it less confusing?","date":"2018-05-14T22:17:28.168Z","type":"message"}
{"nick":"Domenic","message":"And the parse-time restrictions, if we can keep them...","date":"2018-05-14T22:17:36.609Z","type":"message"}
{"nick":"bterlson","message":"maybe","date":"2018-05-14T22:18:11.823Z","type":"message"}
{"nick":"bterlson","message":"but identifier lookup semantics are something very... fundamental","date":"2018-05-14T22:18:25.415Z","type":"message"}
{"nick":"Domenic","message":"Yep. That's the big question for the committee: will it ever be possible to have a source file that contains code that doesn't run in the same scope.","date":"2018-05-14T22:19:03.637Z","type":"message"}
{"nick":"Domenic","message":"If accepting that is too weird for the committee, I think we're doomed to string-based hacks forever :(","date":"2018-05-14T22:19:21.949Z","type":"message"}
{"nick":"Domenic","message":"My hope is that with enough syntactic offset it'd be acceptable. But we'll find out!","date":"2018-05-14T22:19:38.308Z","type":"message"}
{"nick":"Domenic","message":"(String-based hacks: https://github.com/domenic/proposal-blocks#alternatives-considered )","date":"2018-05-14T22:19:56.038Z","type":"message"}
{"nick":"bterlson","message":"Domenic: there is an alternative: there is a user space package that \"just works\" for serializing functions across realms using, I think, debugger APIs to chase dependencies and package them in? I'm not sure I can link the code yet, will check","date":"2018-05-14T22:21:23.403Z","type":"message"}
{"nick":"bterlson","message":"hmm I can't, stay tuned","date":"2018-05-14T22:22:05.681Z","type":"message"}
{"nick":"Domenic","message":"Hmm, is it different in usage than the ones I linked in https://github.com/domenic/proposal-blocks#alternatives-considered ?","date":"2018-05-14T22:22:11.421Z","type":"message"}
{"nick":"devsnek","message":"greenlet is really simple","date":"2018-05-14T22:22:27.629Z","type":"message"}
{"nick":"devsnek","message":"or it was the last time i looked","date":"2018-05-14T22:22:31.470Z","type":"message"}
{"nick":"devsnek","message":"i've never seen clooney tho","date":"2018-05-14T22:22:46.939Z","type":"message"}
{"nick":"bterlson","message":"Domenic: at first glance seems much different","date":"2018-05-14T22:24:57.407Z","type":"message"}
{"nick":"Domenic","message":"Interesting","date":"2018-05-14T22:25:44.091Z","type":"message"}
{"nick":"devsnek","message":"TabAtkins's point is interesting","date":"2018-05-14T22:26:31.035Z","type":"message"}
{"nick":"devsnek","message":"is there any precedence for accessing the primordial state of the global scope","date":"2018-05-14T22:26:47.860Z","type":"message"}
{"nick":"TabAtkins","message":"There's long-standing attempts to provide primordial access, yeah.","date":"2018-05-14T22:27:06.313Z","type":"message"}
{"nick":"TabAtkins","message":"With one actively under development right now.","date":"2018-05-14T22:27:17.044Z","type":"message"}
{"nick":"TabAtkins","message":"Championed by domenic, iirc?","date":"2018-05-14T22:27:29.856Z","type":"message"}
{"nick":"Domenic","message":"Yeah we're working on a web API for that: https://github.com/drufball/layered-apis/issues/6","date":"2018-05-14T22:28:08.055Z","type":"message"}
{"nick":"devsnek","message":"looks pretty nice","date":"2018-05-14T22:30:09.001Z","type":"message"}
{"nick":"arai","reason":"Ping timeout: 255 seconds","date":"2018-05-14T23:25:02.865Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-05-14T23:37:08.165Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-14T23:58:14.230Z","type":"quit"}
