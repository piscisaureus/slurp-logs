{"nick":"ErrorIsNullError","date":"2019-07-27T00:08:57.594Z","type":"join"}
{"nick":"burgess23","date":"2019-07-27T00:10:40.263Z","type":"join"}
{"nick":"burgess23","reason":"Ping timeout: 246 seconds","date":"2019-07-27T00:14:49.330Z","type":"quit"}
{"nick":"burgess23","date":"2019-07-27T00:19:33.695Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-07-27T00:25:36.960Z","type":"quit"}
{"nick":"michaelficarra","date":"2019-07-27T00:32:48.776Z","type":"join"}
{"nick":"michaelficarra","date":"2019-07-27T00:33:22.812Z","type":"part"}
{"nick":"keith_mi_","date":"2019-07-27T00:44:16.336Z","type":"join"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-07-27T00:57:53.319Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-07-27T00:58:30.776Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-07-27T01:27:35.004Z","type":"quit"}
{"nick":"SamB","date":"2019-07-27T01:28:44.981Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-27T01:34:02.224Z","type":"quit"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-07-27T01:43:14.436Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-07-27T01:44:06.124Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-07-27T02:00:02.518Z","type":"quit"}
{"nick":"michaelficarra","date":"2019-07-27T03:02:36.812Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-07-27T04:10:34.038Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-07-27T04:14:31.040Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-07-27T04:17:32.605Z","type":"quit"}
{"nick":"cybai","date":"2019-07-27T04:22:36.776Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-07-27T04:24:41.224Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 258 seconds","date":"2019-07-27T04:26:54.778Z","type":"quit"}
{"nick":"cybai","date":"2019-07-27T04:42:17.326Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-07-27T04:46:42.121Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-27T06:02:02.226Z","type":"join"}
{"nick":"cybai","date":"2019-07-27T06:29:22.994Z","type":"join"}
{"nick":"cybai_","date":"2019-07-27T07:31:56.592Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 268 seconds","date":"2019-07-27T07:34:25.769Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-07-27T08:05:20.417Z","type":"quit"}
{"nick":"cybai_","reason":"Remote host closed the connection","date":"2019-07-27T09:05:00.099Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-07-27T09:51:55.908Z","type":"quit"}
{"nick":"Nimelrian","date":"2019-07-27T10:00:45.156Z","type":"join"}
{"nick":"haxjs_","date":"2019-07-27T10:13:48.027Z","type":"join"}
{"nick":"maggie____","reason":"Quit: Connection closed for inactivity","date":"2019-07-27T11:01:25.838Z","type":"quit"}
{"nick":"jmdyck","date":"2019-07-27T11:24:32.686Z","type":"join"}
{"nick":"AtumT","date":"2019-07-27T11:50:03.487Z","type":"join"}
{"nick":"mgol","date":"2019-07-27T12:19:21.979Z","type":"join"}
{"nick":"mgol","reason":"Client Quit","date":"2019-07-27T12:21:12.824Z","type":"quit"}
{"nick":"cybai","date":"2019-07-27T12:36:04.657Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-07-27T12:40:49.591Z","type":"quit"}
{"nick":"cybai","date":"2019-07-27T12:45:05.121Z","type":"join"}
{"nick":"ErrorIsNullError","date":"2019-07-27T15:39:08.707Z","type":"join"}
{"nick":"laughinghan","date":"2019-07-27T16:00:04.182Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-27T16:14:03.996Z","type":"quit"}
{"nick":"Nimelrian","reason":"Ping timeout: 252 seconds","date":"2019-07-27T16:27:32.134Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-27T16:27:36.791Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-27T16:55:28.383Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-27T16:56:59.343Z","type":"join"}
{"nick":"cpplearner","message":"Can I make a user-defined constructor? For example, since the specification defined Array to be a constructor and a constructor shall also implement [[Call]], I can do new Array() or Array(). But, If I make a new class I can only implement `constructor`. I wonder if there's any chance to implement [[Call]] myself.","date":"2019-07-27T17:00:45.277Z","type":"message"}
{"nick":"devsnek","message":"cpplearner: using `function() {}` and `new.target`https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target","date":"2019-07-27T17:02:03.922Z","type":"message"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-27T17:08:07.477Z","type":"quit"}
{"nick":"cpplearner","message":"devsnek: Oh, `FunctionAllocate` takes care of [[Construct]] part, if functionKind is normal. Hmm, but implmenting both with `class` keyword is impossible, am I right?","date":"2019-07-27T17:10:58.080Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-07-27T17:11:13.827Z","type":"message"}
{"nick":"cpplearner","message":"Thanks for clarifying and helping me all the time!","date":"2019-07-27T17:11:24.826Z","type":"message"}
{"nick":"cpplearner","message":"Have a nice day!","date":"2019-07-27T17:11:28.550Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-07-27T17:17:13.719Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-27T17:42:51.810Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-27T17:47:03.919Z","type":"quit"}
{"nick":"Nimelrian","date":"2019-07-27T18:16:23.989Z","type":"join"}
{"nick":"EmNudge","date":"2019-07-27T21:03:57.688Z","type":"join"}
{"nick":"EmNudge","reason":"Remote host closed the connection","date":"2019-07-27T21:16:41.875Z","type":"quit"}
{"nick":"Nimelrian","reason":"Ping timeout: 264 seconds","date":"2019-07-27T21:49:52.092Z","type":"quit"}
{"nick":"rkirsling","message":"damn, after a couple of days, I think I've finally worked myself into a corner","date":"2019-07-27T22:45:48.974Z","type":"message"}
{"nick":"rkirsling","message":"think non-re-evaluation in `a.b?.().c` is just not compatible with an \"it's just a ternary!\"-style approach","date":"2019-07-27T22:46:52.820Z","type":"message"}
{"nick":"rkirsling","message":"(i.e. if I'm just holding `a.b` and `a.b().c`, that call is gonna have a bad time trying to determine its this value...)","date":"2019-07-27T22:49:03.057Z","type":"message"}
{"nick":"devsnek","message":"rkirsling: i'm not following what you're saying","date":"2019-07-27T23:16:14.260Z","type":"message"}
{"nick":"rkirsling","message":"devsnek: lol I was hoping you would but it's tricky to express concisely","date":"2019-07-27T23:16:42.199Z","type":"message"}
{"nick":"devsnek","message":"i think its just miscommunication","date":"2019-07-27T23:17:26.891Z","type":"message"}
{"nick":"devsnek","message":"does \"its just a ternary\" refer to the syntax or the behaviour","date":"2019-07-27T23:17:37.237Z","type":"message"}
{"nick":"rkirsling","message":"semantics","date":"2019-07-27T23:17:43.569Z","type":"message"}
{"nick":"rkirsling","message":"er like, bytecode standpoint","date":"2019-07-27T23:17:55.875Z","type":"message"}
{"nick":"devsnek","message":"so like... `(a.b ? a.b() : undefined).c`","date":"2019-07-27T23:18:05.651Z","type":"message"}
{"nick":"devsnek","message":"except that still throws","date":"2019-07-27T23:18:13.592Z","type":"message"}
{"nick":"devsnek","message":"and i forgot to compare to null/undefined","date":"2019-07-27T23:18:38.228Z","type":"message"}
{"nick":"devsnek","message":"yeah i dunno i think the feature is pretty useful","date":"2019-07-27T23:19:45.386Z","type":"message"}
{"nick":"rkirsling","message":"so, for my hackathon version of this, I just have an OptionalChainNode with children `a.b` and `a.b().c`, and the bytecode generated from that node mimics a ternary, but it naively re-evaluates the base when it's not nullish","date":"2019-07-27T23:20:13.039Z","type":"message"}
{"nick":"devsnek","message":"oh i see","date":"2019-07-27T23:20:47.213Z","type":"message"}
{"nick":"rkirsling","message":"(I can upload that part to WK BZ if you want to see)","date":"2019-07-27T23:20:51.874Z","type":"message"}
{"nick":"devsnek","message":"i get what you're saying now","date":"2019-07-27T23:21:06.999Z","type":"message"}
{"nick":"rkirsling","message":"so then to deal with the re-eval, I thought it would suffice to pass down the register for the already-evaluated base","date":"2019-07-27T23:21:26.818Z","type":"message"}
{"nick":"mgol","date":"2019-07-27T23:21:37.276Z","type":"join"}
{"nick":"rkirsling","message":"and that almost works...but `a.b()` is usually a single node in itself because it not only needs to know the function to call (`a.b`) it also needs the `this` value (just `a`)","date":"2019-07-27T23:23:25.462Z","type":"message"}
{"nick":"devsnek","message":"i've gotten too used to an accumulator interpreter","date":"2019-07-27T23:24:45.166Z","type":"message"}
{"nick":"rkirsling","message":"so basically `a.b?.()` is already tricky because I need to pass down the already-evaluated `this` value, but once we extend the chain, I think the entire approach is just doomed","date":"2019-07-27T23:25:50.662Z","type":"message"}
{"nick":"devsnek","message":"sounds like a fun mess","date":"2019-07-27T23:26:40.090Z","type":"message"}
{"nick":"devsnek","message":"ðŸ˜„","date":"2019-07-27T23:26:44.678Z","type":"message"}
{"nick":"rkirsling","message":"yes :P","date":"2019-07-27T23:26:57.107Z","type":"message"}
{"nick":"rkirsling","message":"a mess indeed, but I still do enjoy a good compiler frontend puzzle","date":"2019-07-27T23:27:23.394Z","type":"message"}
{"nick":"rkirsling","message":"...think I'm gonna upload my naive approach for posterity before I redo it, heh","date":"2019-07-27T23:28:41.767Z","type":"message"}
{"nick":"rkirsling","message":"pour votre amusement: https://bugs.webkit.org/show_bug.cgi?id=200199","date":"2019-07-27T23:32:19.122Z","type":"message"}
{"nick":"devsnek","message":"hmm yeah i had to emit a different bytecode for each of the accessor, computed, and call variants","date":"2019-07-27T23:34:11.191Z","type":"message"}
{"nick":"devsnek","message":"the proposal moved forward with parens required right","date":"2019-07-27T23:35:18.118Z","type":"message"}
{"nick":"rkirsling","message":"do you mean for `??`?","date":"2019-07-27T23:35:47.934Z","type":"message"}
{"nick":"devsnek","message":"oh lol confused already","date":"2019-07-27T23:37:04.498Z","type":"message"}
{"nick":"rkirsling","message":"ðŸ˜‚","date":"2019-07-27T23:38:00.785Z","type":"message"}
{"nick":"devsnek","message":"me trying to figure out v8's parser https://i.redd.it/f46azqiqcg411.jpg","date":"2019-07-27T23:51:12.864Z","type":"message"}
{"nick":"rkirsling","message":"wait maybe there still is a way (tm)","date":"2019-07-27T23:58:06.387Z","type":"message"}
{"nick":"rkirsling","message":"if I have an OptionalCallNode that treats the call as part of the chain's base, maybe this could still be salvageable...?","date":"2019-07-27T23:59:27.140Z","type":"message"}
