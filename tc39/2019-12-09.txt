{"nick":"mgol","date":"2019-12-09T00:16:25.664Z","type":"join"}
{"nick":"laughinghan","date":"2019-12-09T00:22:15.701Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-12-09T00:25:16.195Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T00:28:48.541Z","type":"quit"}
{"nick":"chrisands_","reason":"Ping timeout: 252 seconds","date":"2019-12-09T01:03:14.112Z","type":"quit"}
{"nick":"drousso","date":"2019-12-09T01:04:34.537Z","type":"join"}
{"nick":"chrisands","date":"2019-12-09T01:09:02.021Z","type":"join"}
{"nick":"Nimelrian","reason":"Read error: Connection reset by peer","date":"2019-12-09T01:10:32.181Z","type":"quit"}
{"nick":"laughinghan","date":"2019-12-09T01:18:07.936Z","type":"join"}
{"nick":"mgol","date":"2019-12-09T01:22:13.128Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T01:34:00.529Z","type":"quit"}
{"nick":"laughinghan","date":"2019-12-09T01:34:39.169Z","type":"join"}
{"nick":"chrisands_","date":"2019-12-09T02:00:21.696Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T02:01:54.041Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T02:10:34.385Z","type":"quit"}
{"nick":"chrisands","date":"2019-12-09T02:39:07.036Z","type":"join"}
{"nick":"chrisands_","reason":"Ping timeout: 276 seconds","date":"2019-12-09T02:41:38.572Z","type":"quit"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T02:45:32.017Z","type":"quit"}
{"nick":"chrisands","date":"2019-12-09T02:54:34.668Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 250 seconds","date":"2019-12-09T02:58:45.723Z","type":"quit"}
{"nick":"chrisands","date":"2019-12-09T03:05:23.121Z","type":"join"}
{"nick":"haxjs","date":"2019-12-09T03:30:42.584Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T03:41:16.016Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-12-09T04:21:23.211Z","type":"quit"}
{"nick":"cybai","date":"2019-12-09T04:21:54.665Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-12-09T04:26:56.577Z","type":"quit"}
{"nick":"cybai","date":"2019-12-09T04:30:37.470Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 265 seconds","date":"2019-12-09T04:35:16.379Z","type":"quit"}
{"nick":"cybai","date":"2019-12-09T05:00:27.787Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 250 seconds","date":"2019-12-09T05:21:19.779Z","type":"quit"}
{"nick":"mathiasbynens","message":"devsnek, Bakkot: what's the Chrome DevTools bug? please file it if you haven't already, thanks","date":"2019-12-09T06:20:45.896Z","type":"message"}
{"nick":"gibson042","reason":"Ping timeout: 245 seconds","date":"2019-12-09T06:21:33.440Z","type":"quit"}
{"nick":"chrisands","date":"2019-12-09T07:38:43.027Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T07:42:54.045Z","type":"quit"}
{"nick":"devsnek","message":"mathiasbynens: reported already https://bugs.chromium.org/p/chromium/issues/detail?id=1031243","date":"2019-12-09T08:21:52.963Z","type":"message"}
{"nick":"devsnek","message":"mathiasbynens: devtools seems to be doing a local parse of the input and using that to decide if it has side effects","date":"2019-12-09T08:24:40.930Z","type":"message"}
{"nick":"devsnek","message":"which seems counter intuitive to the existence of v8's side effect detection","date":"2019-12-09T08:25:14.618Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-12-09T08:50:11.800Z","type":"quit"}
{"nick":"cybai","date":"2019-12-09T08:59:57.384Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-12-09T09:04:03.390Z","type":"quit"}
{"nick":"cybai","date":"2019-12-09T09:07:06.463Z","type":"join"}
{"nick":"cybai_","date":"2019-12-09T09:09:27.419Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-12-09T09:13:13.396Z","type":"quit"}
{"nick":"mathiasbynens","message":"devsnek: agreed... we should just rely on V8 here instead of trying to \"guess\" with broken heuristics","date":"2019-12-09T09:34:45.176Z","type":"message"}
{"nick":"mathiasbynens","message":"we're fixing it! thanks for pointing that out","date":"2019-12-09T09:35:34.586Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T09:48:50.699Z","type":"quit"}
{"nick":"mgol","date":"2019-12-09T10:00:23.683Z","type":"join"}
{"nick":"rickbutton","reason":"Quit: killed","date":"2019-12-09T10:16:41.718Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T10:34:50.830Z","type":"quit"}
{"nick":"mgol","date":"2019-12-09T10:52:44.547Z","type":"join"}
{"nick":"rickbutton","date":"2019-12-09T11:00:12.656Z","type":"join"}
{"nick":"chrisands","date":"2019-12-09T11:40:42.113Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T11:44:54.090Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T11:46:58.457Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T11:59:03.789Z","type":"quit"}
{"nick":"jmdyck","date":"2019-12-09T11:59:48.915Z","type":"join"}
{"nick":"mgol","date":"2019-12-09T11:59:58.537Z","type":"join"}
{"nick":"keith_miller","date":"2019-12-09T12:31:32.484Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T12:59:32.621Z","type":"quit"}
{"nick":"mgol","date":"2019-12-09T13:00:32.680Z","type":"join"}
{"nick":"chrisands","date":"2019-12-09T13:29:22.104Z","type":"join"}
{"nick":"gibson042","date":"2019-12-09T13:41:07.046Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T13:50:48.922Z","type":"quit"}
{"nick":"mgol","date":"2019-12-09T13:55:59.151Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T13:58:12.212Z","type":"quit"}
{"nick":"chrisands_","date":"2019-12-09T14:04:37.652Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T14:05:32.122Z","type":"quit"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T14:06:26.016Z","type":"quit"}
{"nick":"mgol","date":"2019-12-09T14:06:33.947Z","type":"join"}
{"nick":"ErrorIsNullError","date":"2019-12-09T14:08:32.730Z","type":"join"}
{"nick":"keith_miller","date":"2019-12-09T14:15:31.227Z","type":"join"}
{"nick":"chrisands","date":"2019-12-09T14:40:15.628Z","type":"join"}
{"nick":"chrisands_","reason":"Ping timeout: 276 seconds","date":"2019-12-09T14:42:29.644Z","type":"quit"}
{"nick":"chrisands_","date":"2019-12-09T14:54:23.041Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 276 seconds","date":"2019-12-09T14:56:08.708Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T15:04:12.657Z","type":"quit"}
{"nick":"mgol","date":"2019-12-09T15:05:08.586Z","type":"join"}
{"nick":"chrisands","date":"2019-12-09T15:32:36.036Z","type":"join"}
{"nick":"chrisands_","reason":"Ping timeout: 252 seconds","date":"2019-12-09T15:34:26.103Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T16:00:45.369Z","type":"quit"}
{"nick":"ErrorIsNullError","reason":"Ping timeout: 268 seconds","date":"2019-12-09T16:06:43.709Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T16:36:06.188Z","type":"quit"}
{"nick":"mgol","date":"2019-12-09T16:37:17.354Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T16:50:55.416Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-12-09T16:53:32.790Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 246 seconds","date":"2019-12-09T16:53:42.295Z","type":"quit"}
{"nick":"decompiled","date":"2019-12-09T16:57:58.765Z","type":"join"}
{"nick":"decompiled","reason":"Client Quit","date":"2019-12-09T16:57:59.203Z","type":"quit"}
{"nick":"litherum","date":"2019-12-09T17:01:18.772Z","type":"join"}
{"nick":"chrisands","date":"2019-12-09T17:07:58.052Z","type":"join"}
{"nick":"chrisands_","date":"2019-12-09T17:36:45.176Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T17:38:22.068Z","type":"quit"}
{"nick":"litherum","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-12-09T17:42:20.330Z","type":"quit"}
{"nick":"chrisands","date":"2019-12-09T17:46:47.102Z","type":"join"}
{"nick":"chrisands_","reason":"Ping timeout: 252 seconds","date":"2019-12-09T17:48:38.092Z","type":"quit"}
{"nick":"chrisands_","date":"2019-12-09T17:56:23.028Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 252 seconds","date":"2019-12-09T17:57:26.109Z","type":"quit"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T17:58:10.185Z","type":"quit"}
{"nick":"aradesh","date":"2019-12-09T18:08:09.208Z","type":"join"}
{"nick":"gibson042","date":"2019-12-09T18:12:45.100Z","type":"join"}
{"nick":"keith_miller","date":"2019-12-09T18:47:58.794Z","type":"join"}
{"nick":"Nimelrian","date":"2019-12-09T18:51:47.075Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 246 seconds","date":"2019-12-09T19:01:27.150Z","type":"quit"}
{"nick":"chrisands","date":"2019-12-09T19:06:54.029Z","type":"join"}
{"nick":"chrisands_","reason":"Ping timeout: 252 seconds","date":"2019-12-09T19:08:56.135Z","type":"quit"}
{"nick":"gibson042","date":"2019-12-09T19:21:58.411Z","type":"join"}
{"nick":"drousso","date":"2019-12-09T19:22:03.758Z","type":"join"}
{"nick":"avp","reason":"Disconnected by services","date":"2019-12-09T19:33:12.097Z","type":"quit"}
{"nick":"avp","date":"2019-12-09T19:33:21.673Z","type":"join"}
{"nick":"avp_","date":"2019-12-09T19:33:42.815Z","type":"join"}
{"nick":"avp","message":"Can someone explain https://www.ecma-international.org/ecma-262/10.0/#sec-block-level-function-declarations-web-legacy-compatibility-semantics to me, please? In particular, I've got the following code: https://pastebin.com/Zx0VNUaj and I want to know where its behavior is specified","date":"2019-12-09T19:37:40.701Z","type":"message"}
{"nick":"avp","message":"it seems like it'd have to do with (3.) in that list, but it does say that \"No other declaration of f that is not a var declaration occurs within the function code of g\" - there is a `let bar = 3` which fails that condition","date":"2019-12-09T19:38:50.468Z","type":"message"}
{"nick":"Bakkot","message":"avp the notes at the beginning of the section are just of historical interest - they're documenting cases where browsers agreed before this was specified in ES2015","date":"2019-12-09T19:40:02.939Z","type":"message"}
{"nick":"Bakkot","message":"the actual changes are in B.3.3.1","date":"2019-12-09T19:40:08.215Z","type":"message"}
{"nick":"Bakkot","message":"sidebar: you should use the living spec at https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics","date":"2019-12-09T19:40:21.898Z","type":"message"}
{"nick":"avp","message":"Bakkot: thanks, i'll try and use that section to reconcile my mental model","date":"2019-12-09T19:41:06.609Z","type":"message"}
{"nick":"rkirsling","message":"B.3.3 is notoriously the most cursed section of the spec though","date":"2019-12-09T19:42:10.037Z","type":"message"}
{"nick":"rkirsling","message":"so don't feel bad for being confused :p","date":"2019-12-09T19:42:19.999Z","type":"message"}
{"nick":"Bakkot","message":"the basic semantics are: when you have `function f(){ x() }` within a block, and you could replace that with a `var f` without getting a syntax error, then the semantics of the function are 1) you add a `var f;` to the top of the _containing_ function, 2) you add a `let f = function(){ x() }` at the top of the containing _block_ and 2) when control reaches the actual function declaration within the block, you read from the `let f` and","date":"2019-12-09T19:43:34.902Z","type":"message"}
{"nick":"Bakkot","message":" write to the `var f`","date":"2019-12-09T19:43:35.128Z","type":"message"}
{"nick":"Bakkot","message":"ugh, that second 2) should be a 3) obviously","date":"2019-12-09T19:43:43.493Z","type":"message"}
{"nick":"avp","message":"Bakkot: that helps a lot - deciphering the intent of B.3.3.1 was daunting","date":"2019-12-09T19:44:47.001Z","type":"message"}
{"nick":"Bakkot","message":"avp also you should use strict mode so this doesn't happen :P","date":"2019-12-09T19:57:21.029Z","type":"message"}
{"nick":"rkirsling","message":"JSC has bugs for B.3.3 early errors that I've been too scared to fix","date":"2019-12-09T20:01:55.797Z","type":"message"}
{"nick":"Bakkot","message":"everyone does","date":"2019-12-09T20:04:02.899Z","type":"message"}
{"nick":"Bakkot","message":"the spec does","date":"2019-12-09T20:04:04.535Z","type":"message"}
{"nick":"Bakkot","message":"https://github.com/tc39/ecma262/issues/913 etc","date":"2019-12-09T20:04:25.708Z","type":"message"}
{"nick":"chrisands_","date":"2019-12-09T20:11:51.128Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 252 seconds","date":"2019-12-09T20:13:50.169Z","type":"quit"}
{"nick":"jwalden","date":"2019-12-09T20:17:30.757Z","type":"join"}
{"nick":"devsnek","message":"it's functions all the way down","date":"2019-12-09T20:19:12.481Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T20:19:38.412Z","type":"quit"}
{"nick":"chrisands","date":"2019-12-09T20:22:20.075Z","type":"join"}
{"nick":"chrisands_","reason":"Ping timeout: 252 seconds","date":"2019-12-09T20:23:00.152Z","type":"quit"}
{"nick":"chrisands_","date":"2019-12-09T20:31:41.127Z","type":"join"}
{"nick":"chrisands","reason":"Ping timeout: 246 seconds","date":"2019-12-09T20:33:09.054Z","type":"quit"}
{"nick":"mgol","date":"2019-12-09T21:12:54.335Z","type":"join"}
{"nick":"rkirsling","message":"> dysfunction all the way down","date":"2019-12-09T21:13:46.724Z","type":"message"}
{"nick":"rkirsling","message":"FTFY","date":"2019-12-09T21:13:46.874Z","type":"message"}
{"nick":"howdoi","date":"2019-12-09T21:14:31.652Z","type":"join"}
{"nick":"bradleymeck","message":"Object.assign(Object.prototype,{get:()=>{}, set:(v)=>{}, value:undefined}); wrecks so much","date":"2019-12-09T21:38:59.766Z","type":"message"}
{"nick":"bradleymeck","message":"it kinda seems like you have to use null prototypes to guard against it","date":"2019-12-09T21:39:22.894Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: ? what key are you trying to defineProperty there?","date":"2019-12-09T21:45:47.660Z","type":"message"}
{"nick":"bradleymeck","message":"none, just if Object.prototype has all 3 of those keys Object.defineProperty stops working unless you use null prototypes like Object.defineProperty(obj, 'propname', {__proto__:null, value: 'value'})","date":"2019-12-09T21:49:01.422Z","type":"message"}
{"nick":"bradleymeck","message":"since it sees stuff up the proto chain and says it can't be both an accessor and data prop","date":"2019-12-09T21:49:20.593Z","type":"message"}
{"nick":"bradleymeck","message":"was staring at my node pr and noticed we don't guard this currently","date":"2019-12-09T21:49:40.337Z","type":"message"}
{"nick":"ljharb","message":"ohhhhh wow i just realized what you mean","date":"2019-12-09T21:49:43.135Z","type":"message"}
{"nick":"ljharb","message":"i wonder if it'd be web compatible to change that somehow","date":"2019-12-09T21:50:02.753Z","type":"message"}
{"nick":"bradleymeck","message":"well idk but running that little script on all my open tabs killed all of them except some static sites","date":"2019-12-09T21:50:29.750Z","type":"message"}
{"nick":"bradleymeck","message":"likely we can't change it though","date":"2019-12-09T21:50:51.398Z","type":"message"}
{"nick":"ljharb","message":"we can't make it be own properties i'm sure, but i wonder if we could effectively make it be \"Get\" but stop before Object.prototype","date":"2019-12-09T21:51:59.499Z","type":"message"}
{"nick":"bradleymeck","message":"that seems pretty weird too","date":"2019-12-09T21:52:16.449Z","type":"message"}
{"nick":"devsnek","message":"better question","date":"2019-12-09T21:52:18.153Z","type":"message"}
{"nick":"devsnek","message":"who is doing Object.assign(Object.prototype,{get:()=>{}, set:(v)=>{}, value:undefined})","date":"2019-12-09T21:52:24.735Z","type":"message"}
{"nick":"bradleymeck","message":"me, checking to see if we survive it in node (we don't)","date":"2019-12-09T21:52:52.486Z","type":"message"}
{"nick":"bradleymeck","message":"once you get implicit set hooks things look pretty dicey about data exfiltration across modules","date":"2019-12-09T21:53:15.250Z","type":"message"}
{"nick":"bradleymeck","message":"but 🤷 this is more just locking down stuff to survive craziness","date":"2019-12-09T21:53:33.134Z","type":"message"}
{"nick":"bradleymeck","message":"we had a couple of people snooping internals and doing bad things in the long past and we started to move to primordials in part because of that","date":"2019-12-09T21:53:57.898Z","type":"message"}
{"nick":"devsnek","message":"i remember symbol polyfills were able to patch node","date":"2019-12-09T21:54:56.984Z","type":"message"}
{"nick":"devsnek","message":"so that util.inspect and stuff worked with them","date":"2019-12-09T21:55:08.668Z","type":"message"}
{"nick":"bradleymeck","message":"causing it to always error by filling out both get/set always or value is probably good enough honestly","date":"2019-12-09T21:55:52.630Z","type":"message"}
{"nick":"bradleymeck","message":"ideally we would use some null proto shenanigans but slowdown on benchmarks is pretty bad","date":"2019-12-09T21:56:40.017Z","type":"message"}
{"nick":"devsnek","message":"i just don't see why its worth guarding against","date":"2019-12-09T21:57:47.953Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: another alternative is that the error for \"no get/set + value\" could be made to only throw when get/set is not undefined, instead of just present","date":"2019-12-09T21:57:53.099Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: that way you'd always be able to locally override the shenanigans with `get: undefined, set: undefined` for data properties","date":"2019-12-09T21:58:13.872Z","type":"message"}
{"nick":"ljharb","message":"altho i guess that wouldn't protect you for accessors","date":"2019-12-09T21:58:25.229Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: same thing as why any other part of the runtime is worth being robust","date":"2019-12-09T21:58:46.093Z","type":"message"}
{"nick":"devsnek","message":"i don't really get the overall goal tbh","date":"2019-12-09T21:59:12.887Z","type":"message"}
{"nick":"ljharb","message":"user code shouldn't be able to break the platform?","date":"2019-12-09T22:00:18.030Z","type":"message"}
{"nick":"bradleymeck","message":"mostly its to get reliable behavior when things go wrong, node has access to things like shell execution and often people send authorization strings to node in various ways, you don't want people snooping on strings and you don't want shell execution to happen. it gets hard to understand what a user can accidently load (see all those malicious packages people install) and have it undermine the default platform APIs","date":"2019-12-09T22:00:57.704Z","type":"message"}
{"nick":"devsnek","message":"malicious code can just `require('inspector')` and read every value of every variable in the entire codebase","date":"2019-12-09T22:01:40.628Z","type":"message"}
{"nick":"bradleymeck","message":"so, make it just ignore anything strange and/or make it survive anything strange to avoid leaking data or allow accidental execution. accidental execution is hard to avoid in JS","date":"2019-12-09T22:01:49.594Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: not if you use a policy that doesn't allow it","date":"2019-12-09T22:02:07.226Z","type":"message"}
{"nick":"bradleymeck","message":"which is why we have started making efforts to use em","date":"2019-12-09T22:02:17.127Z","type":"message"}
{"nick":"devsnek","message":"assuming the code you've explicitly pulled in is malicious is like","date":"2019-12-09T22:02:51.803Z","type":"message"}
{"nick":"devsnek","message":"you've already lost","date":"2019-12-09T22:03:11.311Z","type":"message"}
{"nick":"devsnek","message":"you either need full isolation","date":"2019-12-09T22:03:21.323Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: we work with developers who install 3rd party code all the time. you build up layers of defenses like anything else","date":"2019-12-09T22:03:25.246Z","type":"message"}
{"nick":"devsnek","message":"or you need to trust the code somehow","date":"2019-12-09T22:03:25.478Z","type":"message"}
{"nick":"bradleymeck","message":"even with full isolation you can get confusion problems that make the isolated payload malicious","date":"2019-12-09T22:03:43.785Z","type":"message"}
{"nick":"devsnek","message":"seems like an inherently losing battle tbh","date":"2019-12-09T22:04:08.078Z","type":"message"}
{"nick":"ljharb","message":"devsnek: the entire concept of SES is winning that battle, isn't it?","date":"2019-12-09T22:04:42.348Z","type":"message"}
{"nick":"ljharb","message":"or attempting to","date":"2019-12-09T22:04:46.058Z","type":"message"}
{"nick":"devsnek","message":"🤷🏻","date":"2019-12-09T22:05:00.800Z","type":"message"}
{"nick":"bradleymeck","message":"i think security always will be a race of sorts yea. though i don't think we are really trying to prevent everything, but instead make auditing feasible","date":"2019-12-09T22:05:08.296Z","type":"message"}
{"nick":"devsnek","message":"i think SES solves a symptom of the problem","date":"2019-12-09T22:05:20.659Z","type":"message"}
{"nick":"devsnek","message":"not the problem","date":"2019-12-09T22:05:22.811Z","type":"message"}
{"nick":"bradleymeck","message":"even reading code line by line myself i'm not fully confident in it not having some odd effect (i had one with a sticky regexp today!)","date":"2019-12-09T22:05:48.157Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: wait you had a real use case for the sticky flag??","date":"2019-12-09T22:06:09.973Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: i saw it being used and i removed it","date":"2019-12-09T22:06:22.088Z","type":"message"}
{"nick":"bradleymeck","message":"cause lastIndex was being weird with .search","date":"2019-12-09T22:06:30.251Z","type":"message"}
{"nick":"bradleymeck","message":"anyways, i do want to use shell commands so it isn't like i can ever really trust anything","date":"2019-12-09T22:06:55.844Z","type":"message"}
{"nick":"ljharb","message":"aha","date":"2019-12-09T22:08:20.113Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: the idea was to match the last \" in a quoted string but it wasn't working right","date":"2019-12-09T22:08:55.980Z","type":"message"}
{"nick":"devsnek","message":"misplaced sticky flags won't exfiltrate your tokens","date":"2019-12-09T22:09:23.176Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: no, but it did change a parser and we got bad data that bypassed some checks!","date":"2019-12-09T22:10:16.661Z","type":"message"}
{"nick":"chrisands_","reason":"Quit: chrisands_","date":"2019-12-09T22:12:18.735Z","type":"quit"}
{"nick":"devsnek","message":"you can always keep structured data structured... bugs exist of course but these systems aren't inherently fallible","date":"2019-12-09T22:15:30.257Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: not all data is provided to you in a structured format; you can't get away from parsing untrusted input sometimes","date":"2019-12-09T22:20:01.621Z","type":"message"}
{"nick":"bradleymeck","message":"even if it is structured it can be bad to intake naively (\"__proto__\" from json payloads)","date":"2019-12-09T22:20:36.900Z","type":"message"}
{"nick":"devsnek","message":"I mean the output of the parser","date":"2019-12-09T22:20:54.453Z","type":"message"}
{"nick":"devsnek","message":"it's still the output of the parser, and you can know it may be unsafe","date":"2019-12-09T22:21:15.103Z","type":"message"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-12-09T22:31:08.419Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-12-09T23:19:42.208Z","type":"quit"}
{"nick":"Nimelrian","reason":"Read error: Connection reset by peer","date":"2019-12-09T23:53:34.695Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-09T23:59:58.546Z","type":"quit"}
