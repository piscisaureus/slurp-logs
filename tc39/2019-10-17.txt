{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T00:16:02.972Z","type":"quit"}
{"nick":"mgol","date":"2019-10-17T01:24:48.053Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T01:40:19.587Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-17T02:18:36.668Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T02:19:13.417Z","type":"join"}
{"nick":"cybai","reason":"Read error: Connection reset by peer","date":"2019-10-17T02:19:14.151Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T02:29:33.975Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 240 seconds","date":"2019-10-17T02:33:38.944Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T02:40:39.249Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T03:03:24.730Z","type":"join"}
{"nick":"drousso","date":"2019-10-17T03:40:16.078Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T04:02:55.173Z","type":"quit"}
{"nick":"drousso","date":"2019-10-17T04:15:58.408Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 246 seconds","date":"2019-10-17T05:04:39.025Z","type":"quit"}
{"nick":"cybai_","date":"2019-10-17T06:01:04.996Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-10-17T06:03:49.704Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-10-17T06:16:36.368Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T07:05:39.750Z","type":"join"}
{"nick":"cybai_","reason":"Ping timeout: 264 seconds","date":"2019-10-17T07:08:28.010Z","type":"quit"}
{"nick":"gibson042","reason":"Read error: Connection reset by peer","date":"2019-10-17T07:31:16.109Z","type":"quit"}
{"nick":"kpatticha","date":"2019-10-17T07:35:28.944Z","type":"join"}
{"nick":"aqquadro","date":"2019-10-17T07:45:39.155Z","type":"join"}
{"nick":"gibson042","date":"2019-10-17T08:00:47.524Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-17T08:50:30.487Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T09:00:17.192Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 240 seconds","date":"2019-10-17T09:04:17.055Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T09:29:38.694Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-17T10:24:50.407Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T10:28:03.156Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-17T10:32:47.393Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T10:33:46.033Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-17T10:34:24.644Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T10:45:49.789Z","type":"join"}
{"nick":"aqquadro","reason":"Ping timeout: 240 seconds","date":"2019-10-17T10:58:17.051Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-17T11:54:44.813Z","type":"quit"}
{"nick":"mgol","date":"2019-10-17T12:03:23.161Z","type":"join"}
{"nick":"jmdyck","date":"2019-10-17T12:35:51.953Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T12:38:22.073Z","type":"quit"}
{"nick":"kpattich_","date":"2019-10-17T13:05:31.839Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 240 seconds","date":"2019-10-17T13:07:38.971Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T13:13:50.570Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 268 seconds","date":"2019-10-17T13:18:28.879Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T13:45:39.093Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-17T13:45:58.967Z","type":"quit"}
{"nick":"cybai","date":"2019-10-17T13:59:03.735Z","type":"join"}
{"nick":"kpattich__","date":"2019-10-17T14:22:33.715Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 268 seconds","date":"2019-10-17T14:25:04.751Z","type":"quit"}
{"nick":"kpattich__","reason":"Remote host closed the connection","date":"2019-10-17T15:14:01.325Z","type":"quit"}
{"nick":"AtumT","date":"2019-10-17T15:46:27.181Z","type":"join"}
{"nick":"drousso","date":"2019-10-17T16:22:34.147Z","type":"join"}
{"nick":"jorydotcom","date":"2019-10-17T16:51:29.773Z","type":"join"}
{"nick":"ErrorIsNullError","date":"2019-10-17T16:58:26.216Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T17:18:42.770Z","type":"quit"}
{"nick":"drousso","date":"2019-10-17T17:26:58.772Z","type":"join"}
{"nick":"laughinghan","date":"2019-10-17T17:51:57.296Z","type":"join"}
{"nick":"aradesh","date":"2019-10-17T18:00:24.756Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2019-10-17T19:50:17.123Z","type":"quit"}
{"nick":"AtumT","date":"2019-10-17T19:50:28.575Z","type":"join"}
{"nick":"jwalden","date":"2019-10-17T20:06:10.084Z","type":"join"}
{"nick":"laughinghan","reason":"Ping timeout: 276 seconds","date":"2019-10-17T20:23:59.565Z","type":"quit"}
{"nick":"howdoi","date":"2019-10-17T20:40:43.995Z","type":"join"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-10-17T21:34:05.524Z","type":"quit"}
{"nick":"Havvy","reason":"Ping timeout: 268 seconds","date":"2019-10-17T21:56:28.879Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T22:04:12.802Z","type":"quit"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T22:07:24.501Z","type":"quit"}
{"nick":"Havvy","date":"2019-10-17T22:07:44.943Z","type":"join"}
{"nick":"mgol","date":"2019-10-17T22:31:20.571Z","type":"join"}
{"nick":"shu","message":"devsnek: i now think my analysis of #1685 was incorrect and we need to revert it","date":"2019-10-17T22:50:50.728Z","type":"message"}
{"nick":"shu","message":"namely, the analogy with AsyncGeneratorStart and GeneratorStart doesn't work","date":"2019-10-17T22:51:11.627Z","type":"message"}
{"nick":"devsnek","message":"the change would be correct with that line removed","date":"2019-10-17T22:51:53.078Z","type":"message"}
{"nick":"devsnek","message":"engine262 is running fine","date":"2019-10-17T22:52:07.076Z","type":"message"}
{"nick":"shu","message":"devsnek: well, there's the added weirdness of what it means to push a non-copied execution context onto the stack twice","date":"2019-10-17T22:53:59.390Z","type":"message"}
{"nick":"devsnek","message":"ü§∑üèª","date":"2019-10-17T22:54:45.229Z","type":"message"}
{"nick":"devsnek","message":"that part is definitely weird","date":"2019-10-17T22:54:55.335Z","type":"message"}
{"nick":"shu","message":"devsnek: i originally thought the change would be correct because you don't need to duplicate the asyncContext","date":"2019-10-17T22:55:22.585Z","type":"message"}
{"nick":"devsnek","message":"i think ideally we would just rework the [[Call]] for ecmascript functions","date":"2019-10-17T22:55:54.633Z","type":"message"}
{"nick":"devsnek","message":"so that the actual dispatch is the one doing the pushing and popping","date":"2019-10-17T22:56:02.644Z","type":"message"}
{"nick":"shu","message":"devsnek: but you still do, because right now we're pushing a reference to the running (even after removing the erroneous 2nd push) context","date":"2019-10-17T22:56:04.969Z","type":"message"}
{"nick":"shu","message":"devsnek: no, that wouldn't fix the issue, let me try to explain the issue to see if it makes sense","date":"2019-10-17T22:56:15.114Z","type":"message"}
{"nick":"shu","message":"you have an `async function f()` and call `f()`, which is synchronous up until the first `await`, if any","date":"2019-10-17T22:56:38.871Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2019-10-17T22:56:43.390Z","type":"message"}
{"nick":"shu","message":"in the case there is an `await`, the execution context of `f` needs to manually remove its execution context from the stack after resuming from the `await`","date":"2019-10-17T22:57:15.539Z","type":"message"}
{"nick":"shu","message":"err, after running to completion after resuming from all awaits","date":"2019-10-17T22:57:26.303Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2019-10-17T22:57:54.684Z","type":"message"}
{"nick":"shu","message":"in the case there is no `await`, it shouldn't manually remove its own execution context, because the [[Call]] itself pops it","date":"2019-10-17T22:58:05.212Z","type":"message"}
{"nick":"shu","message":"that's why it's copied and re-pushed","date":"2019-10-17T22:58:10.294Z","type":"message"}
{"nick":"shu","message":"it's annoying to deal with \"was there an await or not\" case otherwise","date":"2019-10-17T22:58:24.174Z","type":"message"}
{"nick":"shu","message":"with a single execution context","date":"2019-10-17T22:58:29.474Z","type":"message"}
{"nick":"shu","message":"the generator contexts don't need to duplicate and repush because they start suspended","date":"2019-10-17T22:58:40.840Z","type":"message"}
{"nick":"shu","message":"so there is always at least one suspension point","date":"2019-10-17T22:58:49.519Z","type":"message"}
{"nick":"laughinghan","date":"2019-10-17T22:59:19.851Z","type":"join"}
{"nick":"shu","message":"the current state, with your change merged, is that we re-push something that doesn't have its own \"code evaluation state\", which is incorrect","date":"2019-10-17T22:59:58.872Z","type":"message"}
{"nick":"devsnek","message":"i'm still not following where the incorrect behaviour is","date":"2019-10-17T23:00:15.717Z","type":"message"}
{"nick":"devsnek","message":"like i get the current logic is odd","date":"2019-10-17T23:00:24.599Z","type":"message"}
{"nick":"jwalden","reason":"Ping timeout: 250 seconds","date":"2019-10-17T23:00:51.697Z","type":"quit"}
{"nick":"shu","message":"okay, let's walk through an `async function f() { }`","date":"2019-10-17T23:01:26.645Z","type":"message"}
{"nick":"shu","message":"PrepareForOrdinaryCall allocates a new execution context, let's call that `asyncContext`","date":"2019-10-17T23:02:11.185Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-10-17T23:02:22.588Z","type":"message"}
{"nick":"shu","message":"right before we call `f();`, the execution stack is `[originalContext]`","date":"2019-10-17T23:02:42.484Z","type":"message"}
{"nick":"devsnek","message":"yep","date":"2019-10-17T23:03:14.809Z","type":"message"}
{"nick":"shu","message":"in [[Call]], PrepareForOrdinaryCall pushes `asyncContext` onto the stack, so now the stack is `[originalContext, asyncContext]`","date":"2019-10-17T23:03:49.312Z","type":"message"}
{"nick":"shu","message":"eventually, via OrdinaryCallEvaluateBody, we get to `AsyncFunctionStart`","date":"2019-10-17T23:04:09.530Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-10-17T23:04:23.247Z","type":"quit"}
{"nick":"shu","message":"(assuming the second push in `AsyncFunctionStart` is removed)","date":"2019-10-17T23:04:32.898Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-10-17T23:04:57.413Z","type":"message"}
{"nick":"shu","message":"`AsyncFunctionStart` pushes `asyncContext` onto the stack again and resumes it, so now the stack is `[originalContext, asyncContext, asyncContext]`","date":"2019-10-17T23:04:59.082Z","type":"message"}
{"nick":"shu","message":"since there's no awaits, the resumed `asyncContext` tries to remove itself from the context stack","date":"2019-10-17T23:05:21.953Z","type":"message"}
{"nick":"devsnek","message":"wait are you talking about with clones or not","date":"2019-10-17T23:05:24.452Z","type":"message"}
{"nick":"shu","message":"i'm talking about the current version that is merged","date":"2019-10-17T23:05:32.810Z","type":"message"}
{"nick":"shu","message":"so no language around \"copy an execution context\"","date":"2019-10-17T23:05:39.489Z","type":"message"}
{"nick":"devsnek","message":"ok yeah, with the duplicate push","date":"2019-10-17T23:05:42.349Z","type":"message"}
{"nick":"devsnek","message":"there are two asyncContexts on the stack","date":"2019-10-17T23:05:49.441Z","type":"message"}
{"nick":"shu","message":"well, the bug in the current version is that there would actually be 3 asyncContexts","date":"2019-10-17T23:06:03.449Z","type":"message"}
{"nick":"shu","message":"but assume we removed the obviously buggy 2nd push, there are 2 asyncContexts","date":"2019-10-17T23:06:11.240Z","type":"message"}
{"nick":"devsnek","message":"there should only be one push","date":"2019-10-17T23:06:19.394Z","type":"message"}
{"nick":"devsnek","message":"step 6","date":"2019-10-17T23:06:27.578Z","type":"message"}
{"nick":"shu","message":"right, in AsyncFunctionStart","date":"2019-10-17T23:06:35.835Z","type":"message"}
{"nick":"devsnek","message":"step 3 shouldn't exist","date":"2019-10-17T23:06:41.850Z","type":"message"}
{"nick":"devsnek","message":"so you'd have `[originalContext, asyncContext]`","date":"2019-10-17T23:06:49.282Z","type":"message"}
{"nick":"devsnek","message":"then evaluation is resumed","date":"2019-10-17T23:06:54.333Z","type":"message"}
{"nick":"shu","message":"ah but no, but `asyncContext` is already pushed via `PrepareForOrdinaryCall`","date":"2019-10-17T23:06:58.709Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-10-17T23:07:05.224Z","type":"message"}
{"nick":"devsnek","message":"that's how asyncContext got there","date":"2019-10-17T23:07:14.767Z","type":"message"}
{"nick":"shu","message":"so there are now 2 asyncContexts at the top of the stack","date":"2019-10-17T23:07:14.978Z","type":"message"}
{"nick":"devsnek","message":"i'm not seeing the thing you're talking about","date":"2019-10-17T23:07:24.537Z","type":"message"}
{"nick":"devsnek","message":"where is the third push","date":"2019-10-17T23:07:34.720Z","type":"message"}
{"nick":"shu","message":"the extra buggy push is making this hard to talk about","date":"2019-10-17T23:07:50.548Z","type":"message"}
{"nick":"devsnek","message":"pretend step 3 doesn't exist","date":"2019-10-17T23:08:01.308Z","type":"message"}
{"nick":"shu","message":"let's pretend step 3 of AsyncFunctionStart doesn't exist, yes","date":"2019-10-17T23:08:03.392Z","type":"message"}
{"nick":"shu","message":"do you agree that before we even get to AsyncFunctionStart, asyncContext is already on the stack","date":"2019-10-17T23:08:19.317Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2019-10-17T23:08:23.693Z","type":"message"}
{"nick":"shu","message":"okay, then we get to step 6","date":"2019-10-17T23:08:33.457Z","type":"message"}
{"nick":"shu","message":"now the stack is [originalContext, asyncContext, asyncContext]","date":"2019-10-17T23:08:42.721Z","type":"message"}
{"nick":"devsnek","message":"nope","date":"2019-10-17T23:08:45.425Z","type":"message"}
{"nick":"shu","message":"why not?","date":"2019-10-17T23:08:55.701Z","type":"message"}
{"nick":"devsnek","message":"no matter what, after a resumed evaluation, it removes itself from the stack","date":"2019-10-17T23:09:11.237Z","type":"message"}
{"nick":"devsnek","message":"in this case its 2.b","date":"2019-10-17T23:09:16.511Z","type":"message"}
{"nick":"shu","message":"what resumed evaluation?","date":"2019-10-17T23:09:27.529Z","type":"message"}
{"nick":"shu","message":"asyncContext is never suspended","date":"2019-10-17T23:09:30.248Z","type":"message"}
{"nick":"devsnek","message":"step 4 resumes evaluation","date":"2019-10-17T23:09:33.302Z","type":"message"}
{"nick":"shu","message":"and what step suspends it?","date":"2019-10-17T23:09:39.944Z","type":"message"}
{"nick":"devsnek","message":"Await() or the steps in 2","date":"2019-10-17T23:10:08.844Z","type":"message"}
{"nick":"shu","message":"the example has no awaits","date":"2019-10-17T23:10:17.696Z","type":"message"}
{"nick":"devsnek","message":"ok so the steps in step 2","date":"2019-10-17T23:10:22.737Z","type":"message"}
{"nick":"shu","message":"what steps in 2?","date":"2019-10-17T23:10:27.085Z","type":"message"}
{"nick":"devsnek","message":"code evaluation state steps","date":"2019-10-17T23:10:41.362Z","type":"message"}
{"nick":"shu","message":"step 2 is what happens upon resumption","date":"2019-10-17T23:10:45.794Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-10-17T23:10:49.147Z","type":"message"}
{"nick":"shu","message":"it doesn't suspend the running execution context","date":"2019-10-17T23:10:50.417Z","type":"message"}
{"nick":"devsnek","message":"return and throw automatically suspend evaluation","date":"2019-10-17T23:11:32.362Z","type":"message"}
{"nick":"devsnek","message":"in this case","date":"2019-10-17T23:11:36.686Z","type":"message"}
{"nick":"devsnek","message":"i didn't add step 5","date":"2019-10-17T23:11:54.334Z","type":"message"}
{"nick":"shu","message":"i think you're confused, let's start at step 1","date":"2019-10-17T23:12:18.177Z","type":"message"}
{"nick":"shu","message":"the stack at Step 1 is `[originalContext, asyncContext]`, yes?","date":"2019-10-17T23:12:40.739Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-10-17T23:12:44.620Z","type":"message"}
{"nick":"shu","message":"Step 2 says, *when asyncContext is resumed*, do all these substeps, but doesn't do anything with asyncFunctionBody or touch the stack, so the stack is still `[originalContext, asyncCOntext]`, yes?","date":"2019-10-17T23:13:26.082Z","type":"message"}
{"nick":"devsnek","message":"yep","date":"2019-10-17T23:13:39.704Z","type":"message"}
{"nick":"shu","message":"step 3 doesn't exist, so we skip","date":"2019-10-17T23:13:49.891Z","type":"message"}
{"nick":"devsnek","message":"yep","date":"2019-10-17T23:13:55.810Z","type":"message"}
{"nick":"shu","message":"Step 4 now tries to resume something that isn't suspended to begin with","date":"2019-10-17T23:14:08.444Z","type":"message"}
{"nick":"shu","message":"what does that even do","date":"2019-10-17T23:14:13.948Z","type":"message"}
{"nick":"devsnek","message":"i didn't change that","date":"2019-10-17T23:14:22.219Z","type":"message"}
{"nick":"devsnek","message":"i just removed a clone","date":"2019-10-17T23:14:33.180Z","type":"message"}
{"nick":"shu","message":"right","date":"2019-10-17T23:14:57.211Z","type":"message"}
{"nick":"jwalden","date":"2019-10-17T23:15:26.704Z","type":"join"}
{"nick":"devsnek","message":"i take step 4 to mean \"run the code evaluation state\"","date":"2019-10-17T23:15:27.142Z","type":"message"}
{"nick":"devsnek","message":"which either gets to 2.b or Await step 10","date":"2019-10-17T23:16:00.689Z","type":"message"}
{"nick":"devsnek","message":"er 2.c","date":"2019-10-17T23:16:16.290Z","type":"message"}
{"nick":"shu","message":"ah okay, i see, it's very different if line 3 doesn't exist or line 6 doesn't exist","date":"2019-10-17T23:17:40.966Z","type":"message"}
{"nick":"shu","message":"this is still very strange","date":"2019-10-17T23:17:54.879Z","type":"message"}
{"nick":"devsnek","message":"i think it also depends on how you see the evaluation of abstract ops","date":"2019-10-17T23:18:02.512Z","type":"message"}
{"nick":"shu","message":"i don't think that's up to interpretation?","date":"2019-10-17T23:18:10.179Z","type":"message"}
{"nick":"devsnek","message":"they certainly don't operate on the stack","date":"2019-10-17T23:18:26.711Z","type":"message"}
{"nick":"devsnek","message":"since they define the stack","date":"2019-10-17T23:18:29.520Z","type":"message"}
{"nick":"shu","message":"as it stands now, there are two fixes: either revert, or remove 2.c, 3, and 6","date":"2019-10-17T23:18:45.178Z","type":"message"}
{"nick":"devsnek","message":"i don't think 2.c and 6 should be removed","date":"2019-10-17T23:19:14.992Z","type":"message"}
{"nick":"devsnek","message":"if you're super against this, i guess reverting isn't terrible","date":"2019-10-17T23:19:33.601Z","type":"message"}
{"nick":"shu","message":"you have some mental model of this that i do not around resuming non-suspended contexts","date":"2019-10-17T23:21:54.017Z","type":"message"}
{"nick":"devsnek","message":"i think the whole \"suspended\" terminology is a bit odd to begin with","date":"2019-10-17T23:22:19.121Z","type":"message"}
{"nick":"devsnek","message":"i think there might've even been some idea to rework how that is specified a while ago","date":"2019-10-17T23:22:56.532Z","type":"message"}
{"nick":"devsnek","message":"anyway, please ping me if you end up reverting it so i can update engine262 appropriately","date":"2019-10-17T23:23:56.251Z","type":"message"}
{"nick":"shu","message":"sure","date":"2019-10-17T23:24:58.196Z","type":"message"}
{"nick":"shu","message":"i think it comes down to i don't know how step 4 can mean the \"run the code evaluation state\"","date":"2019-10-17T23:25:07.433Z","type":"message"}
{"nick":"shu","message":"when you're already running the code evaluation state of the current context","date":"2019-10-17T23:25:21.410Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2019-10-17T23:25:38.176Z","type":"message"}
{"nick":"shu","message":"generators don't have this problem because they start suspended, so there's no inline resumption like this","date":"2019-10-17T23:26:13.734Z","type":"message"}
{"nick":"shu","message":"and this is what copying handles","date":"2019-10-17T23:26:31.798Z","type":"message"}
{"nick":"devsnek","message":"what if we just moved the initial evaluation out of the code evaluation state","date":"2019-10-17T23:26:36.655Z","type":"message"}
{"nick":"shu","message":"there is probably a way to do this without copying","date":"2019-10-17T23:26:36.873Z","type":"message"}
{"nick":"shu","message":"let's see...","date":"2019-10-17T23:26:45.902Z","type":"message"}
{"nick":"devsnek","message":"moving step 2.a i mean","date":"2019-10-17T23:26:51.326Z","type":"message"}
{"nick":"shu","message":"just 2.a, or all substeps?","date":"2019-10-17T23:27:23.067Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2019-10-17T23:27:41.954Z","type":"message"}
{"nick":"devsnek","message":"i guess we'd have to duplicate the substeps","date":"2019-10-17T23:27:46.827Z","type":"message"}
{"nick":"devsnek","message":"actually i don't hate that idea","date":"2019-10-17T23:28:00.440Z","type":"message"}
{"nick":"shu","message":"you can't even duplicate the substeps, how would Await know where to resume in the duplicated substeps?","date":"2019-10-17T23:28:10.390Z","type":"message"}
{"nick":"devsnek","message":"yeah i guess that would break the references elsewhere","date":"2019-10-17T23:29:18.645Z","type":"message"}
{"nick":"devsnek","message":"oh well","date":"2019-10-17T23:29:19.672Z","type":"message"}
{"nick":"shu","message":"i think your interpretation of step 4 requires the step 2 substeps be a thunk-like thing that can run without affecting the currently running AsyncFunctionStart","date":"2019-10-17T23:33:27.079Z","type":"message"}
{"nick":"shu","message":"and the closest thing we have to that abstraction *is* an execution context, thus the duplication","date":"2019-10-17T23:33:54.166Z","type":"message"}
{"nick":"devsnek","message":"i'd imagine that's what anba was thinking","date":"2019-10-17T23:38:05.561Z","type":"message"}
{"nick":"shu","message":"devsnek: if you are happy with that reasoning, it does certainly seem to warrant a NOTE in that step","date":"2019-10-17T23:43:07.733Z","type":"message"}
{"nick":"devsnek","message":"yeah that's fine","date":"2019-10-17T23:43:25.734Z","type":"message"}
