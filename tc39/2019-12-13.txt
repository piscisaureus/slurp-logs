{"nick":"WeirdAl","date":"2019-12-13T00:25:32.295Z","type":"join"}
{"nick":"WeirdAl","reason":"Client Quit","date":"2019-12-13T00:25:40.998Z","type":"quit"}
{"nick":"mgol","date":"2019-12-13T00:49:32.663Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T00:57:48.125Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T01:10:55.876Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T01:15:14.540Z","type":"quit"}
{"nick":"drousso","date":"2019-12-13T01:17:16.683Z","type":"join"}
{"nick":"keith_miller","date":"2019-12-13T01:26:07.917Z","type":"join"}
{"nick":"keith_mi_","date":"2019-12-13T01:26:54.737Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-12-13T01:28:37.465Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T01:59:47.388Z","type":"quit"}
{"nick":"drousso","date":"2019-12-13T02:00:19.084Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 252 seconds","date":"2019-12-13T02:04:48.024Z","type":"quit"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-12-13T02:27:10.874Z","type":"quit"}
{"nick":"keith_miller","date":"2019-12-13T02:27:46.917Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T03:03:26.212Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-12-13T04:42:11.848Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2019-12-13T04:59:30.482Z","type":"quit"}
{"nick":"drousso","date":"2019-12-13T05:29:49.726Z","type":"join"}
{"nick":"keith_miller","date":"2019-12-13T05:35:07.628Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T05:49:02.529Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-12-13T06:41:44.622Z","type":"quit"}
{"nick":"mgol","date":"2019-12-13T08:00:27.696Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-12-13T08:10:28.370Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T08:47:11.186Z","type":"quit"}
{"nick":"mgol","date":"2019-12-13T10:21:51.463Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T11:41:59.018Z","type":"quit"}
{"nick":"mgol","date":"2019-12-13T11:43:05.328Z","type":"join"}
{"nick":"jmdyck","date":"2019-12-13T12:35:03.934Z","type":"join"}
{"nick":"gibson042","date":"2019-12-13T13:57:28.884Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T15:21:44.114Z","type":"quit"}
{"nick":"Nimelrian","date":"2019-12-13T15:33:34.102Z","type":"join"}
{"nick":"gibson042","reason":"Read error: Connection reset by peer","date":"2019-12-13T16:12:56.503Z","type":"quit"}
{"nick":"gibson042","date":"2019-12-13T16:13:03.167Z","type":"join"}
{"nick":"jwalden","date":"2019-12-13T17:11:53.939Z","type":"join"}
{"nick":"howdoi","date":"2019-12-13T17:13:32.147Z","type":"join"}
{"nick":"jorendorff","message":"https://tc39.es/ecma262/#sec-numberbitwiseop seems a bit circular","date":"2019-12-13T18:40:38.369Z","type":"message"}
{"nick":"jorendorff","message":"step 3, i mean","date":"2019-12-13T18:40:43.014Z","type":"message"}
{"nick":"jorendorff","message":"& is specified in terms of Number::bitwiseAND which is specified in terms of &","date":"2019-12-13T18:42:17.053Z","type":"message"}
{"nick":"ljharb","message":"\"applying the bitwise operator op\" tho isn't the same as how `&` is specified, is it?","date":"2019-12-13T18:42:59.027Z","type":"message"}
{"nick":"jorendorff","message":"What does that phrase mean?","date":"2019-12-13T18:43:16.767Z","type":"message"}
{"nick":"ljharb","message":"perhaps we're missing an explicit definition for it - but the intention i think is to do math","date":"2019-12-13T18:43:49.014Z","type":"message"}
{"nick":"jorendorff","message":"yeah, i think that has to be the intention,","date":"2019-12-13T18:44:17.236Z","type":"message"}
{"nick":"ljharb","message":"ie if the op is &, it should do what previous editions did here: http://www.ecma-international.org/ecma-262/#sec-unsigned-right-shift-operator","date":"2019-12-13T18:45:02.807Z","type":"message"}
{"nick":"ljharb","message":"where it just says \"compute rnum & 0x1F\"","date":"2019-12-13T18:45:13.875Z","type":"message"}
{"nick":"ljharb","message":"so maybe that detailed info for each op that's in steps 7 and 8 of the last edition needs to be restored somehow?","date":"2019-12-13T18:45:44.221Z","type":"message"}
{"nick":"jorendorff","message":"wow, here's what the previous edition says about bitwise AND: http://www.ecma-international.org/ecma-262/#sec-binary-bitwise-operators-runtime-semantics-evaluation","date":"2019-12-13T18:46:31.491Z","type":"message"}
{"nick":"ljharb","message":"right, that's probably where the bigint proposal got the prose from","date":"2019-12-13T18:47:11.140Z","type":"message"}
{"nick":"jorendorff","message":"basically the same thing only instead of \"op\" it's called \"@\"","date":"2019-12-13T18:47:13.572Z","type":"message"}
{"nick":"jorendorff","message":"love it","date":"2019-12-13T18:47:15.923Z","type":"message"}
{"nick":"ljharb","message":"sounds to me like not a new bug, if it's a bug :-)","date":"2019-12-13T18:47:33.613Z","type":"message"}
{"nick":"jorendorff","message":"no indeed :)","date":"2019-12-13T18:47:46.903Z","type":"message"}
{"nick":"ljharb","message":"but if you want to make a PR that makes that clearer that'd be fine with me","date":"2019-12-13T18:47:54.186Z","type":"message"}
{"nick":"ljharb","message":"right shift has a clearer definition in old editions than && does","date":"2019-12-13T18:48:21.065Z","type":"message"}
{"nick":"ljharb","message":"* &","date":"2019-12-13T18:48:23.421Z","type":"message"}
{"nick":"jorendorff","message":"hmm. BigInt::bitwiseAND is specified in more detail. Although ... too much detail for my brain","date":"2019-12-13T18:49:04.762Z","type":"message"}
{"nick":"jorendorff","message":"I don't think I should work on this, it probably isn't bothering anyone else","date":"2019-12-13T18:49:25.293Z","type":"message"}
{"nick":"ljharb","message":"lol k","date":"2019-12-13T18:49:40.436Z","type":"message"}
{"nick":"ljharb","message":"thanks for bringing it up!","date":"2019-12-13T18:49:45.751Z","type":"message"}
{"nick":"aradesh","date":"2019-12-13T18:50:49.445Z","type":"join"}
{"nick":"Nimelrian","reason":"Ping timeout: 246 seconds","date":"2019-12-13T19:41:39.057Z","type":"quit"}
{"nick":"Nimelrian","date":"2019-12-13T20:13:52.123Z","type":"join"}
{"nick":"keith_miller","date":"2019-12-13T20:14:35.704Z","type":"join"}
{"nick":"mgol","date":"2019-12-13T20:38:39.209Z","type":"join"}
{"nick":"bradleymeck","message":"https://tc39.es/ecma262/#sec-jobs-and-job-queues states that Jobs can be interleaved, but it does not clarify if that also includes preemption","date":"2019-12-13T21:21:12.978Z","type":"message"}
{"nick":"bradleymeck","message":"mmmm","date":"2019-12-13T21:21:15.502Z","type":"message"}
{"nick":"devsnek","message":"jobs must be dispatched in the correct order","date":"2019-12-13T21:22:19.256Z","type":"message"}
{"nick":"devsnek","message":"i guess it depends on your definition of \"dispatched\"","date":"2019-12-13T21:22:37.444Z","type":"message"}
{"nick":"bradleymeck","message":"yea, but in RunJobs the host can determine the order","date":"2019-12-13T21:22:58.102Z","type":"message"}
{"nick":"bradleymeck","message":"i don't see anything that implies a job can be paused entirely","date":"2019-12-13T21:23:09.078Z","type":"message"}
{"nick":"bradleymeck","message":"but that word is \"interleaved\"... oddly placed","date":"2019-12-13T21:23:21.302Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2019-12-13T21:23:52.652Z","type":"message"}
{"nick":"devsnek","message":"`No other Job may be initiated until the currently running Job completes`","date":"2019-12-13T21:23:53.527Z","type":"message"}
{"nick":"devsnek","message":"that answers my question at least","date":"2019-12-13T21:24:35.342Z","type":"message"}
{"nick":"bradleymeck","message":"yes, \"completes\" i assume means all the spec work / eval runs to completion as in end of source text","date":"2019-12-13T21:24:39.769Z","type":"message"}
{"nick":"laughinghan","date":"2019-12-13T21:25:29.462Z","type":"join"}
{"nick":"devsnek","message":"at the very least, this means the require(esm) thing is against the rules","date":"2019-12-13T21:25:50.364Z","type":"message"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-12-13T21:26:13.171Z","type":"quit"}
{"nick":"bradleymeck","message":"yea, reading the other things like await they never affect jobs, only the execution context stack","date":"2019-12-13T21:26:17.866Z","type":"message"}
{"nick":"bradleymeck","message":"maybe we should explicitly state preemption of the entire job is not allowed","date":"2019-12-13T21:26:55.774Z","type":"message"}
{"nick":"bradleymeck","message":"interleaved makes it a bit confusing","date":"2019-12-13T21:27:06.746Z","type":"message"}
{"nick":"bradleymeck","message":"PerformEval is a trip","date":"2019-12-13T21:30:59.384Z","type":"message"}
{"nick":"devsnek","message":"step 18 of PerformEval annoys me","date":"2019-12-13T21:32:29.178Z","type":"message"}
{"nick":"devsnek","message":"i should open a pr","date":"2019-12-13T21:32:31.094Z","type":"message"}
{"nick":"devsnek","message":"why does RunJobs offset execution cleanup","date":"2019-12-13T21:38:45.539Z","type":"message"}
{"nick":"devsnek","message":"execution contexts are cleaned up in the next iteration","date":"2019-12-13T21:38:58.970Z","type":"message"}
{"nick":"devsnek","message":"is this just for compat with InitializeHostDefinedRealm","date":"2019-12-13T21:39:25.469Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: isn't the Function null for `var`?","date":"2019-12-13T21:40:10.131Z","type":"message"}
{"nick":"devsnek","message":"hmm?","date":"2019-12-13T21:40:21.170Z","type":"message"}
{"nick":"bradleymeck","message":"> step 18 of PerformEval annoys me","date":"2019-12-13T21:40:30.322Z","type":"message"}
{"nick":"devsnek","message":"oh","date":"2019-12-13T21:40:40.271Z","type":"message"}
{"nick":"bradleymeck","message":"18. Set evalContext's Function to null.","date":"2019-12-13T21:40:53.344Z","type":"message"}
{"nick":"devsnek","message":"uhhh","date":"2019-12-13T21:40:56.179Z","type":"message"}
{"nick":"devsnek","message":"for one of the two eval call types, eval's frame is missing that eval was called","date":"2019-12-13T21:41:08.954Z","type":"message"}
{"nick":"devsnek","message":"it doesn't matter that much except for when building up stack traces","date":"2019-12-13T21:41:24.393Z","type":"message"}
{"nick":"devsnek","message":"i think its for direct calls","date":"2019-12-13T21:42:39.447Z","type":"message"}
{"nick":"devsnek","message":"yeah it is","date":"2019-12-13T21:43:31.703Z","type":"message"}
{"nick":"Nimelrian","reason":"Ping timeout: 246 seconds","date":"2019-12-13T21:48:42.093Z","type":"quit"}
{"nick":"metanomial","date":"2019-12-13T22:02:29.672Z","type":"join"}
{"nick":"metanomial","message":"In my limited use of `BigInt` in Chrome and Firefox, I've found myself repeatedly writing Math.abs, Math.min, and Math.max equivalents. Is there any proposal to add something like BigInt.abs, BigInt.max, etc?","date":"2019-12-13T22:05:02.761Z","type":"message"}
{"nick":"devsnek","message":"one of the things on my todo list is changing those math methods to accept bigints","date":"2019-12-13T22:05:30.967Z","type":"message"}
{"nick":"metanomial","message":"If, say, Math.max were changed to accept BigInt values, what happens if you mix Number and BigInt arguments?","date":"2019-12-13T22:07:46.814Z","type":"message"}
{"nick":"devsnek","message":"it would throw","date":"2019-12-13T22:07:55.079Z","type":"message"}
{"nick":"devsnek","message":"actually","date":"2019-12-13T22:08:09.024Z","type":"message"}
{"nick":"devsnek","message":"relational comparison works on numbers and bigints","date":"2019-12-13T22:08:18.752Z","type":"message"}
{"nick":"metanomial","message":"But what should the return type be then?","date":"2019-12-13T22:08:36.116Z","type":"message"}
{"nick":"devsnek","message":"Math.max and Math.min could work on inputs containing both","date":"2019-12-13T22:08:36.703Z","type":"message"}
{"nick":"devsnek","message":"Number|BigInt","date":"2019-12-13T22:08:44.044Z","type":"message"}
{"nick":"devsnek","message":"well really","date":"2019-12-13T22:09:02.366Z","type":"message"}
{"nick":"devsnek","message":"a union based on the types you pass in","date":"2019-12-13T22:09:09.165Z","type":"message"}
{"nick":"metanomial","message":"So `Math.max(3, 5n)` would return `5n`, but `Math.max(5, 3n)` would return `5`?","date":"2019-12-13T22:09:28.372Z","type":"message"}
{"nick":"metanomial","message":"That seems like it could cause problems","date":"2019-12-13T22:09:33.786Z","type":"message"}
{"nick":"devsnek","message":"🤷🏻","date":"2019-12-13T22:09:35.313Z","type":"message"}
{"nick":"devsnek","message":"it doesn't exist yet","date":"2019-12-13T22:09:42.786Z","type":"message"}
{"nick":"devsnek","message":"lots of discussions to be had","date":"2019-12-13T22:09:45.810Z","type":"message"}
{"nick":"ljharb","message":"making math methods work with bigint is something on my list","date":"2019-12-13T22:09:51.897Z","type":"message"}
{"nick":"ljharb","message":"i might actually draw something up for february","date":"2019-12-13T22:09:51.949Z","type":"message"}
{"nick":"devsnek","message":"i'd be happy to work with you on that","date":"2019-12-13T22:10:12.447Z","type":"message"}
{"nick":"ljharb","message":"cool, i'll ping you in the next few weeks","date":"2019-12-13T22:10:22.541Z","type":"message"}
{"nick":"devsnek","message":"🎉","date":"2019-12-13T22:10:25.745Z","type":"message"}
{"nick":"TabAtkins","message":"I think they should throw if types are mixed; yes, relational ops work on mixed inputs, but their return type isn't numeric; all the ops with numeric return types throw on mixing partially to avoid answering this question.","date":"2019-12-13T22:11:16.282Z","type":"message"}
{"nick":"rkirsling","message":"^ that does seem to be the precedent, I agree","date":"2019-12-13T22:11:36.275Z","type":"message"}
{"nick":"ljharb","message":"i think there's a few cases where we can hit a more useful bar than that - but yes, that is the precedent","date":"2019-12-13T22:12:20.112Z","type":"message"}
{"nick":"ljharb","message":"in general, anything where you'd lose information when using a Number above MAX_SAFE_INT is something that throws - not just mixing types","date":"2019-12-13T22:12:42.551Z","type":"message"}
{"nick":"ljharb","message":"relational comparison isn't a place like that, so it doesn't throw","date":"2019-12-13T22:12:57.129Z","type":"message"}
{"nick":"metanomial","message":"Wouldn't it be less error-prone and more readable to just add `BigInt.abs`, `BigInt.max`, etc. static methods?","date":"2019-12-13T22:13:57.618Z","type":"message"}
{"nick":"devsnek","message":"maybe(tm)","date":"2019-12-13T22:14:16.434Z","type":"message"}
{"nick":"devsnek","message":"i'd rather use the existing methods","date":"2019-12-13T22:14:22.620Z","type":"message"}
{"nick":"devsnek","message":"it's cleaner imo","date":"2019-12-13T22:14:25.509Z","type":"message"}
{"nick":"devsnek","message":"there's a lot of bikeshedding to be done though","date":"2019-12-13T22:14:30.986Z","type":"message"}
{"nick":"metanomial","message":"Moving away from the static methods entirely, here is an alternative idea for BigInt absolute value: https://gist.github.com/metanomial/18695b95517d0b78bb882ffe78ce16dd?ts=4","date":"2019-12-13T22:14:53.283Z","type":"message"}
{"nick":"devsnek","message":"if math didn't already exist i'd be all over that","date":"2019-12-13T22:15:37.997Z","type":"message"}
{"nick":"metanomial","message":"Why not just leave Math to Number types?","date":"2019-12-13T22:16:30.390Z","type":"message"}
{"nick":"ljharb","message":"metanomial: that's something we'll have to consider, but it's much nicer to have \"math\" methods be able to do *math* with all the number types :-)","date":"2019-12-13T22:16:51.372Z","type":"message"}
{"nick":"ljharb","message":"because math isn't about number, math is a pure thing","date":"2019-12-13T22:16:59.400Z","type":"message"}
{"nick":"devsnek","message":"well it was pure until -0 came around","date":"2019-12-13T22:17:26.157Z","type":"message"}
{"nick":"Bakkot","message":"A bunch of the math stuff doesn't make sense for bigints","date":"2019-12-13T22:17:56.156Z","type":"message"}
{"nick":"Bakkot","message":"cos, etc","date":"2019-12-13T22:17:59.567Z","type":"message"}
{"nick":"ljharb","message":"also true","date":"2019-12-13T22:18:32.473Z","type":"message"}
{"nick":"Bakkot","message":"(or at least acos)","date":"2019-12-13T22:18:33.222Z","type":"message"}
{"nick":"metanomial","message":"Math as a general purpose set of methods would probably be more useful if there were well known symbols for describing \"number\" types and operator overloading","date":"2019-12-13T22:18:34.286Z","type":"message"}
{"nick":"ljharb","message":"and those would continue to throw","date":"2019-12-13T22:18:37.155Z","type":"message"}
{"nick":"devsnek","message":"the entire definition of math rn is pretty scary","date":"2019-12-13T22:19:26.446Z","type":"message"}
{"nick":"ljharb","message":"but yeah basically the options are something like 1) make some of the math methods support bigints where it's intuitive, 2) keep Math for Number, and add BigInt static methods, setting a precedent for BigDecimal as well, 3) add bigint and number prototype methods and effectively deprecate the math methods (seems weird to me), 4) do nothing","date":"2019-12-13T22:19:32.220Z","type":"message"}
{"nick":"devsnek","message":"`Each of the following Math object functions applies the ToNumber abstract operation to each of its arguments (in left-to-right order if there is more than one). If ToNumber returns an abrupt completion, that Completion Record is immediately returned.`","date":"2019-12-13T22:19:51.068Z","type":"message"}
{"nick":"devsnek","message":"fun prose","date":"2019-12-13T22:19:58.050Z","type":"message"}
{"nick":"metanomial","message":"Opt 4 is a terrible option. I'm going to be writing BigInt utilities to the end of time","date":"2019-12-13T22:20:15.262Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2019-12-13T22:20:27.731Z","type":"message"}
{"nick":"ljharb","message":"metanomial: i agree","date":"2019-12-13T22:20:33.518Z","type":"message"}
{"nick":"devsnek","message":"whatever the case","date":"2019-12-13T22:20:37.804Z","type":"message"}
{"nick":"devsnek","message":"we should definitely support clz32","date":"2019-12-13T22:20:51.971Z","type":"message"}
{"nick":"devsnek","message":":D","date":"2019-12-13T22:20:53.631Z","type":"message"}
{"nick":"rkirsling","message":"I think 2 may be the most reasonable given the lack of \"integer math\" ops to this point (like Bakkot was saying)","date":"2019-12-13T22:24:25.302Z","type":"message"}
{"nick":"rkirsling","message":"1 would probably be fine with ample throw cases though.","date":"2019-12-13T22:24:40.220Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: right, i think 1 or 2 are the two options to suggest, once the committee agrees on the problem :-)","date":"2019-12-13T22:25:13.140Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: i have a preference for 1, because it just doesn't make any sense to me that \"Math\" doesn't work on bigints","date":"2019-12-13T22:25:13.291Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: but maybe after i audit all the math methods and come up with a table, i'll change my mind, i dunno","date":"2019-12-13T22:25:29.052Z","type":"message"}
{"nick":"devsnek","message":"i'm also a fan of 1","date":"2019-12-13T22:25:41.326Z","type":"message"}
{"nick":"rkirsling","message":"yeah I'm not opposed","date":"2019-12-13T22:25:48.988Z","type":"message"}
{"nick":"rkirsling","message":"we definitely need some solution","date":"2019-12-13T22:26:09.460Z","type":"message"}
{"nick":"rkirsling","message":"and something that allows a path for bigdec would be good (whatever that means)","date":"2019-12-13T22:26:40.166Z","type":"message"}
{"nick":"devsnek","message":"Math.clz32(1f)","date":"2019-12-13T22:26:51.616Z","type":"message"}
{"nick":"devsnek","message":"or is that 1d","date":"2019-12-13T22:26:59.546Z","type":"message"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-12-13T22:27:33.003Z","type":"quit"}
{"nick":"rkirsling","message":"wow I did not realize that already existed","date":"2019-12-13T22:27:52.630Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: right, potential conflicts with BigDecimal would be unacceptable","date":"2019-12-13T22:28:05.728Z","type":"message"}
{"nick":"metanomial","message":"I feel like opt 1 could lead to obscure bugs. You could have an instance where a collection of `{Number|BigInt}` has been getting passed to Math.xyz successfully for a while, because the collection by serendipity was all of one type. But then after an unrelated code change, the collection suddenly starts holding mixed types and `Math.xyz` throws","date":"2019-12-13T22:32:34.815Z","type":"message"}
{"nick":"metanomial","message":"errors about it.","date":"2019-12-13T22:32:35.398Z","type":"message"}
{"nick":"ljharb","message":"metanomial: the collection changing type unexpectedly would break every option","date":"2019-12-13T22:33:35.033Z","type":"message"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T22:35:16.344Z","type":"quit"}
{"nick":"metanomial","message":"But it wouldn't *change* type. The developer could have documented that the collection was `{Number|BigInt}`, and have been unsafely passing the collection through `Math.xyz`. Then at a later time, a distance change in code causes the bug to come to a head.","date":"2019-12-13T22:35:44.199Z","type":"message"}
{"nick":"ljharb","message":"metanomial: right but that's just a bug","date":"2019-12-13T22:36:07.052Z","type":"message"}
{"nick":"ljharb","message":"metanomial: it could be documented as just Number and still suddenly start receiving a bigint","date":"2019-12-13T22:36:23.074Z","type":"message"}
{"nick":"metanomial","message":"My point is that it could become difficult to debug. `Math.xyz` would accept `{Number|BigInt}`, and the collection would be of type `{Number|BigInt}`, and yet it would be throwing an error.","date":"2019-12-13T22:37:41.201Z","type":"message"}
{"nick":"devsnek","message":"i'm confused about what this bug is","date":"2019-12-13T22:38:20.882Z","type":"message"}
{"nick":"devsnek","message":"but this doesn't sound like the fault of Math.xyz's accepted types","date":"2019-12-13T22:38:30.347Z","type":"message"}
{"nick":"rkirsling","message":"given the precedent for mixing to throw, I don't think it'd be very easy to have such a collection without a lot of conscious guarding","date":"2019-12-13T22:38:32.933Z","type":"message"}
{"nick":"ljharb","message":"i'm not clear on why it's difficult to debug","date":"2019-12-13T22:38:48.047Z","type":"message"}
{"nick":"metanomial","message":"I'll write up a quick example","date":"2019-12-13T22:39:24.817Z","type":"message"}
{"nick":"ljharb","message":"you'd get an exception that you mixed a bigint and a number, and you'd trace it back to where some caller was assuming it wouldn't be mixed","date":"2019-12-13T22:39:26.141Z","type":"message"}
{"nick":"ljharb","message":"thanks!","date":"2019-12-13T22:40:54.407Z","type":"message"}
{"nick":"metanomial","reason":"Remote host closed the connection","date":"2019-12-13T23:12:50.294Z","type":"quit"}
