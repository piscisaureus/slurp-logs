{"nick":"drousso","date":"2019-07-13T00:14:19.373Z","type":"join"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-07-13T00:26:02.422Z","type":"quit"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-07-13T00:26:18.621Z","type":"quit"}
{"nick":"drousso","date":"2019-07-13T00:26:24.365Z","type":"join"}
{"nick":"keith_miller","date":"2019-07-13T00:26:45.204Z","type":"join"}
{"nick":"gibson042","date":"2019-07-13T00:30:30.362Z","type":"join"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-07-13T00:55:35.237Z","type":"quit"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-07-13T00:55:45.188Z","type":"quit"}
{"nick":"drousso","date":"2019-07-13T00:55:53.584Z","type":"join"}
{"nick":"keith_miller","date":"2019-07-13T00:56:02.274Z","type":"join"}
{"nick":"devsnek","message":"can anyone make sense of this? https://github.com/Agoric/proposal-infix-bang","date":"2019-07-13T00:59:40.046Z","type":"message"}
{"nick":"howdoi","date":"2019-07-13T01:00:03.435Z","type":"join"}
{"nick":"devsnek","message":"deferred operations on objects is what i'm seeing","date":"2019-07-13T01:00:03.487Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-13T01:07:54.916Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-13T01:14:16.860Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-13T01:16:39.792Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-13T01:20:51.836Z","type":"quit"}
{"nick":"drousso","date":"2019-07-13T01:37:59.822Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 245 seconds","date":"2019-07-13T01:47:07.177Z","type":"quit"}
{"nick":"shu","reason":"Quit: Connection closed for inactivity","date":"2019-07-13T02:59:22.750Z","type":"quit"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2019-07-13T03:17:36.643Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-07-13T03:26:16.399Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-07-13T03:29:02.512Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-07-13T03:35:57.885Z","type":"quit"}
{"nick":"cybai","date":"2019-07-13T03:36:32.674Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-07-13T03:45:16.218Z","type":"quit"}
{"nick":"cybai","date":"2019-07-13T03:45:55.422Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 252 seconds","date":"2019-07-13T03:50:16.405Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-13T03:57:44.937Z","type":"quit"}
{"nick":"howdoi","date":"2019-07-13T04:23:08.091Z","type":"join"}
{"nick":"ljharb","message":"it looks like a really really large proposal","date":"2019-07-13T04:59:18.400Z","type":"message"}
{"nick":"ljharb","message":"like, the first one is \"promise prototype methods for deferred operations on a fulfillment value\"","date":"2019-07-13T04:59:34.540Z","type":"message"}
{"nick":"ljharb","message":"and the second piece is \"syntax for those methods\"","date":"2019-07-13T04:59:40.689Z","type":"message"}
{"nick":"devsnek","message":"ljharb: i think fluent apis can already do the deferred operations tbh","date":"2019-07-13T05:05:42.668Z","type":"message"}
{"nick":"ljharb","message":"devsnek: what do you mean","date":"2019-07-13T05:05:54.922Z","type":"message"}
{"nick":"devsnek","message":"like `target!foo` can just be `target.foo`","date":"2019-07-13T05:05:56.481Z","type":"message"}
{"nick":"ljharb","message":"devsnek: not if `target` is a promise","date":"2019-07-13T05:06:03.323Z","type":"message"}
{"nick":"ljharb","message":"then it'd be `(await target).foo`","date":"2019-07-13T05:06:07.250Z","type":"message"}
{"nick":"ljharb","message":"or `target.then(x => x.foo)` really","date":"2019-07-13T05:06:16.043Z","type":"message"}
{"nick":"devsnek","message":"well your weird proxy thing would be part of a larger api","date":"2019-07-13T05:06:26.431Z","type":"message"}
{"nick":"devsnek","message":"like in the readme's queue message example","date":"2019-07-13T05:06:36.087Z","type":"message"}
{"nick":"ljharb","message":"i guess i'm mostly confused why we need syntax for methods nobody's using yet","date":"2019-07-13T05:06:38.360Z","type":"message"}
{"nick":"devsnek","message":"`messageThing().foo(1, 2, 3)`","date":"2019-07-13T05:06:45.677Z","type":"message"}
{"nick":"devsnek","message":"can use proxies","date":"2019-07-13T05:06:49.950Z","type":"message"}
{"nick":"ljharb","message":"it'll be an interesting topic","date":"2019-07-13T05:06:50.794Z","type":"message"}
{"nick":"devsnek","message":"and thenable","date":"2019-07-13T05:06:52.114Z","type":"message"}
{"nick":"devsnek","message":"yeah i'm interested to hear the discussion","date":"2019-07-13T05:07:52.925Z","type":"message"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-13T05:14:20.735Z","type":"quit"}
{"nick":"vikash-afk","reason":"Quit: vikash.io","date":"2019-07-13T05:28:11.265Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-07-13T05:34:32.059Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-07-13T06:29:02.430Z","type":"quit"}
{"nick":"cybai","date":"2019-07-13T06:29:03.674Z","type":"join"}
{"nick":"drousso","date":"2019-07-13T07:00:25.864Z","type":"join"}
{"nick":"bakkot","message":"ljharb: yeah, the methods would need to be added and shown to be widely useful before the syntax could even be considered I’d think","date":"2019-07-13T08:42:24.816Z","type":"message"}
{"nick":"bakkot","message":"also not sure this needs new syntax at all: I am pretty sure you could just use a proxy which has traps for invocation and property access / assignment, and then use the existing syntax. something like `let remote = makeHandledPromise(); remote.foo(); remote.bar = 42; let value = await settle(remote);`","date":"2019-07-13T08:48:03.968Z","type":"message"}
{"nick":"bakkot","message":"anyway the point of the proposal, as I understand it, is that you want to have code which represents a sequence of operations on remote data without actually requiring the data to be passed from the remote system back to the system running the code at every step","date":"2019-07-13T08:49:46.285Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-07-13T09:02:12.559Z","type":"quit"}
{"nick":"cybai","date":"2019-07-13T09:03:05.602Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-07-13T09:07:52.631Z","type":"quit"}
{"nick":"ephemera_","reason":"Ping timeout: 246 seconds","date":"2019-07-13T09:18:43.331Z","type":"quit"}
{"nick":"ephemera_","date":"2019-07-13T09:29:56.545Z","type":"join"}
{"nick":"cybai","date":"2019-07-13T10:16:08.355Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-07-13T10:20:27.176Z","type":"quit"}
{"nick":"cybai","date":"2019-07-13T10:33:07.652Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 246 seconds","date":"2019-07-13T10:37:28.304Z","type":"quit"}
{"nick":"cybai","date":"2019-07-13T11:09:17.776Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 258 seconds","date":"2019-07-13T11:13:44.776Z","type":"quit"}
{"nick":"cybai","date":"2019-07-13T11:21:47.780Z","type":"join"}
{"nick":"kpatticha","date":"2019-07-13T11:22:50.840Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 252 seconds","date":"2019-07-13T11:39:36.828Z","type":"quit"}
{"nick":"jmdyck","date":"2019-07-13T12:17:09.484Z","type":"join"}
{"nick":"kpatticha","date":"2019-07-13T12:34:27.347Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 252 seconds","date":"2019-07-13T13:01:22.450Z","type":"quit"}
{"nick":"kpatticha","date":"2019-07-13T13:30:59.106Z","type":"join"}
{"nick":"devsnek","message":"aside from the new API stuff, it's cool to imagine `fetch()!.json().something`","date":"2019-07-13T13:46:09.477Z","type":"message"}
{"nick":"devsnek","message":"oops `fetch()!.json()!.something`","date":"2019-07-13T13:46:36.198Z","type":"message"}
{"nick":"devsnek","message":"perhaps it's a bit easy to forget an exclamation mark","date":"2019-07-13T13:46:47.414Z","type":"message"}
{"nick":"Domenic","message":"Excited to see the progress on https://github.com/tc39/proposal-explicit-resource-management","date":"2019-07-13T14:33:54.317Z","type":"message"}
{"nick":"Domenic","message":"I think the infix bang idea is cool but not cool enough to carry its weight in the language.","date":"2019-07-13T14:34:34.099Z","type":"message"}
{"nick":"Domenic","message":"So many new methods which are just awkward and ugly and nobody would use given that we have await","date":"2019-07-13T14:34:50.947Z","type":"message"}
{"nick":"Domenic","message":"And the actual bang syntax is pretty error-prone and hard to read","date":"2019-07-13T14:35:06.023Z","type":"message"}
{"nick":"Domenic","message":"I'd rather explore executing code remotely using something like blöcks","date":"2019-07-13T14:35:31.077Z","type":"message"}
{"nick":"devsnek","message":"i can't believe we might actually have RAII in the language","date":"2019-07-13T14:50:16.209Z","type":"message"}
{"nick":"devsnek","message":"i'm kinda sad it's squeezed into the top of a try block","date":"2019-07-13T14:51:18.383Z","type":"message"}
{"nick":"Domenic","message":"I don't think it counts as RAII if you have to declare a specific using statement","date":"2019-07-13T15:01:50.722Z","type":"message"}
{"nick":"Domenic","message":"It's more like RAIRA","date":"2019-07-13T15:01:54.460Z","type":"message"}
{"nick":"kpatticha","reason":"Remote host closed the connection","date":"2019-07-13T15:02:04.343Z","type":"quit"}
{"nick":"Domenic","message":"I.e. the point of RAII is that just intializing is equivalent to resource acquisition","date":"2019-07-13T15:02:22.629Z","type":"message"}
{"nick":"Domenic","message":"Whereas this requires a specific resource acquisition statement (try, formerly using)","date":"2019-07-13T15:02:36.906Z","type":"message"}
{"nick":"devsnek","message":"\"resource acquisition is resource acquisition\"","date":"2019-07-13T15:05:40.651Z","type":"message"}
{"nick":"devsnek","message":"i just imagine stuff like `try (const _handleScope = v8.handleScope()) {}`","date":"2019-07-13T15:06:16.262Z","type":"message"}
{"nick":"Domenic","message":"You don't need the extra binding actually","date":"2019-07-13T15:06:30.581Z","type":"message"}
{"nick":"Domenic","message":"But yes that's the idea","date":"2019-07-13T15:06:36.153Z","type":"message"}
{"nick":"Domenic","message":"The difference is more in cases like the file handle ones","date":"2019-07-13T15:06:50.789Z","type":"message"}
{"nick":"Domenic","message":"Whereas in C++ you just initialize the file and poof, resources allocated and deallocated at end of block","date":"2019-07-13T15:07:08.359Z","type":"message"}
{"nick":"Domenic","message":"In this proposal you need to remember the try() or else you don't get auto-deallocation","date":"2019-07-13T15:07:24.686Z","type":"message"}
{"nick":"Domenic","message":"(To be clear, this proposal seems to be the best you can do in a GC'ed language.)","date":"2019-07-13T15:07:50.694Z","type":"message"}
{"nick":"devsnek","message":"could just check every lexical declaration at the end of a block :)","date":"2019-07-13T15:09:09.768Z","type":"message"}
{"nick":"Domenic","message":"I assume there's a reason that doesn't work but it's too early for me to think hard enough to figure it out","date":"2019-07-13T15:10:36.473Z","type":"message"}
{"nick":"ErrorIsNullError","date":"2019-07-13T15:10:36.999Z","type":"join"}
{"nick":"devsnek","message":"i would assume performance","date":"2019-07-13T15:10:59.873Z","type":"message"}
{"nick":"devsnek","message":"although i guess engines like v8 already have stuff like \"does this object have a toStringTag\"","date":"2019-07-13T15:11:14.665Z","type":"message"}
{"nick":"Domenic","message":"Nah","date":"2019-07-13T15:11:46.507Z","type":"message"}
{"nick":"Domenic","message":"Google to the rescue https://softwareengineering.stackexchange.com/a/216032/13312","date":"2019-07-13T15:11:50.138Z","type":"message"}
{"nick":"Domenic","message":"TLDR it needs a lot more infrastructure like copy constructors, move semantics, etc.","date":"2019-07-13T15:12:05.746Z","type":"message"}
{"nick":"devsnek","message":"oh yeah","date":"2019-07-13T15:13:00.178Z","type":"message"}
{"nick":"Domenic","message":"In a language where everything is a reference type, attaching significance to object lifetimes and making things more stack-bound starts crossing into value type territory","date":"2019-07-13T15:13:07.475Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2019-07-13T15:13:10.289Z","type":"message"}
{"nick":"devsnek","message":"i could always do","date":"2019-07-13T15:13:16.888Z","type":"message"}
{"nick":"devsnek","message":"`let x; try (const y = whatever) { x = y }`","date":"2019-07-13T15:13:31.404Z","type":"message"}
{"nick":"devsnek","message":"or i guess just `x = whatever; try (x) {} `","date":"2019-07-13T15:14:00.140Z","type":"message"}
{"nick":"devsnek","message":"seems to have the same issue","date":"2019-07-13T15:14:09.807Z","type":"message"}
{"nick":"devsnek","message":"but i guess its more explicit","date":"2019-07-13T15:14:16.855Z","type":"message"}
{"nick":"shu","date":"2019-07-13T15:37:33.989Z","type":"join"}
