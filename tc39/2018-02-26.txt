{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2018-02-26T00:09:30.235Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-02-26T00:13:04.176Z","type":"join"}
{"nick":"keith_miller","date":"2018-02-26T00:15:20.475Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-26T00:33:41.358Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-26T01:09:03.078Z","type":"join"}
{"nick":"caridy","date":"2018-02-26T01:12:30.131Z","type":"join"}
{"nick":"jschoi","message":"I’m also confused about how step 1’s assertion in https://tc39.github.io/ecma262/#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization will hold true for a call with no arguments on an arrow function with one or more parameters, like `(x => x)()`.","date":"2018-02-26T02:24:12.832Z","type":"message"}
{"nick":"jschoi","message":"Considering `(x => x)()`, Step 24 of https://tc39.github.io/ecma262/#sec-functiondeclarationinstantiation will create an _iteratorRecord_ from _argumentsList_, which here I understand would be an empty list « ».","date":"2018-02-26T02:25:07.150Z","type":"message"}
{"nick":"jschoi","message":"Then step 26 would perform ? IteratorBindingInitialization for _formals_.","date":"2018-02-26T02:26:47.284Z","type":"message"}
{"nick":"jschoi","message":"_formals_ in this case, I understand, would be the |ArrowParameters| : |BindingIdentifier| that covers the first `x` in `x => x`. So https://tc39.github.io/ecma262/#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization will be used for the IteratorBindingInitialization in FunctionDeclarationInstantiation’s step 26.","date":"2018-02-26T02:28:36.353Z","type":"message"}
{"nick":"jschoi","message":"Step 1 of IteratorBindingIntialization associated with |ArrowParameters| : |Binding Identifier| asserts that _iteratorRecord_.[[Done]] must be *false*.","date":"2018-02-26T02:29:38.471Z","type":"message"}
{"nick":"jschoi","message":"But this _iteratorRecord_ parameter was created from the _argumentsList_, which was an empty list. It *would* be false.","date":"2018-02-26T02:30:16.549Z","type":"message"}
{"nick":"jschoi","message":"My logic somewhere above must therefore be incorrect, but I cannot determine where it is incorrect.","date":"2018-02-26T02:30:37.058Z","type":"message"}
{"nick":"jschoi","message":"How does `(x => x)()` not violate the assertion in step 1 of https://tc39.github.io/ecma262/#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization?","date":"2018-02-26T02:30:58.274Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-26T02:37:10.906Z","type":"quit"}
{"nick":"devsnek","message":"IteratorRecord is always initially false","date":"2018-02-26T02:42:27.649Z","type":"message"}
{"nick":"devsnek","message":"you have to explicitly consume an iterator to make it true","date":"2018-02-26T02:42:59.243Z","type":"message"}
{"nick":"devsnek","message":"jschoi: ^","date":"2018-02-26T02:43:43.607Z","type":"message"}
{"nick":"devsnek","message":"you can search through the spec for places where [[Done]] is set to true if you like","date":"2018-02-26T02:44:16.804Z","type":"message"}
{"nick":"jschoi","message":"devsnek: By “IteratorRecord is always initially false”, do you mean “a IteratorRecord’s [[Done]] is always initially false”? I see…","date":"2018-02-26T02:47:25.021Z","type":"message"}
{"nick":"devsnek","message":"yea","date":"2018-02-26T02:47:29.574Z","type":"message"}
{"nick":"devsnek","message":"sorry for being unclear :)","date":"2018-02-26T02:47:38.270Z","type":"message"}
{"nick":"jschoi","message":"And this holds true then…even for CreateListIteratorRecord(« »), empty lists. I see it in step 6 of https://tc39.github.io/ecma262/#sec-createlistiteratorRecord, though I still am confused by the choice to make it always initially false…","date":"2018-02-26T02:47:40.370Z","type":"message"}
{"nick":"devsnek","message":"its always false until its consumed in some way","date":"2018-02-26T02:47:54.423Z","type":"message"}
{"nick":"devsnek","message":"you can search for \"[[Done]] to true\"","date":"2018-02-26T02:48:04.083Z","type":"message"}
{"nick":"jschoi","message":"Yeah, taking a look.","date":"2018-02-26T02:48:16.346Z","type":"message"}
{"nick":"jschoi","message":"So…the purpose of this (this initial setting of [[Done]] to false) is to be able to ensure that the iterator hasn’t yet been consumed at all by any other operation?","date":"2018-02-26T02:48:57.454Z","type":"message"}
{"nick":"jschoi","message":"Like, step 1 of https://tc39.github.io/ecma262/#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization is basically asserting that IteratorStep(_iteratorRecord_) hasn’t yet been called at all by any other operator?","date":"2018-02-26T02:49:51.650Z","type":"message"}
{"nick":"jschoi","message":"I mean, that’s the purpose of it?","date":"2018-02-26T02:49:58.706Z","type":"message"}
{"nick":"devsnek","message":"i'm not quite sure","date":"2018-02-26T02:50:09.450Z","type":"message"}
{"nick":"jschoi","message":"I’m checking out “[[Done]] to true” right now.","date":"2018-02-26T02:50:12.845Z","type":"message"}
{"nick":"jschoi","message":"Anyways thanks for the pointer for now; this helps a lot.","date":"2018-02-26T02:50:21.310Z","type":"message"}
{"nick":"devsnek","message":"eventually someone who is actually in tc39 might come online and you can ask them :)","date":"2018-02-26T02:50:23.152Z","type":"message"}
{"nick":"jschoi","message":"Heh, yeah, but I’m still thankful","date":"2018-02-26T02:51:38.921Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-26T03:43:51.683Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 245 seconds","date":"2018-02-26T04:31:03.089Z","type":"quit"}
{"nick":"caridy","date":"2018-02-26T05:29:04.146Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-26T05:33:13.056Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-26T06:08:39.951Z","type":"quit"}
{"nick":"howdoi","date":"2018-02-26T06:28:13.254Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-02-26T06:29:06.034Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-26T07:42:26.640Z","type":"join"}
{"nick":"keith_miller","date":"2018-02-26T08:18:34.801Z","type":"join"}
{"nick":"gskachkov_","date":"2018-02-26T08:32:57.888Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 248 seconds","date":"2018-02-26T08:35:43.905Z","type":"quit"}
{"nick":"gskachkov_","new_nick":"gskachkov","date":"2018-02-26T08:35:43.985Z","type":"nick"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-02-26T08:52:47.236Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-26T08:55:32.709Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-26T09:06:41.722Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-26T09:37:13.284Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-26T09:37:45.390Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-02-26T11:25:12.488Z","type":"quit"}
{"nick":"mylesborins","date":"2018-02-26T11:25:42.829Z","type":"join"}
{"nick":"serbang","date":"2018-02-26T11:31:19.096Z","type":"join"}
{"nick":"AtumT","date":"2018-02-26T12:11:08.393Z","type":"join"}
{"nick":"gskachkov_","date":"2018-02-26T12:56:20.946Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 240 seconds","date":"2018-02-26T12:57:27.718Z","type":"quit"}
{"nick":"gskachkov_","new_nick":"gskachkov","date":"2018-02-26T12:57:28.179Z","type":"nick"}
{"nick":"serbang","reason":"Quit: Connection closed for inactivity","date":"2018-02-26T13:40:58.704Z","type":"quit"}
{"nick":"jmdyck","date":"2018-02-26T13:53:47.368Z","type":"join"}
{"nick":"gibson042","date":"2018-02-26T14:11:28.094Z","type":"join"}
{"nick":"caridy","date":"2018-02-26T15:18:07.190Z","type":"join"}
{"nick":"jschoi","message":"Why does the last step of https://tc39.github.io/ecma262/#sec-initializeboundname return NormalCompletion(*undefined*) instead of just returning the EnvironmentRecord’s method’s result, which is NormalCompletion(~empty~)?","date":"2018-02-26T16:18:28.943Z","type":"message"}
{"nick":"Fishrock123","date":"2018-02-26T16:44:01.872Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-26T16:44:31.992Z","type":"quit"}
{"nick":"AtumT_","date":"2018-02-26T17:01:43.865Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 248 seconds","date":"2018-02-26T17:05:05.377Z","type":"quit"}
{"nick":"jwalden","date":"2018-02-26T17:14:37.709Z","type":"join"}
{"nick":"AtumT","date":"2018-02-26T17:15:33.779Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 240 seconds","date":"2018-02-26T17:15:57.758Z","type":"quit"}
{"nick":"ljharb","message":"jschoi: not sure, but would that impact what `eval` returns?","date":"2018-02-26T17:22:51.759Z","type":"message"}
{"nick":"keith_miller","date":"2018-02-26T17:32:34.949Z","type":"join"}
{"nick":"jschoi","message":"ljharb: The only place I can find so far where `eval` distinguishes between NormalCompletion(~empty~) and NormalCompletion(*undefined*) is in step 26 of https://tc39.github.io/ecma262/#sec-performeval … which, as far as I can tell, results in the same thing in the end either way: a NormalCompletion(*undefined*).","date":"2018-02-26T17:41:50.414Z","type":"message"}
{"nick":"ljharb","message":"hm, not sure then","date":"2018-02-26T17:51:50.158Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-26T17:55:52.585Z","type":"quit"}
{"nick":"gskachkov","reason":"Ping timeout: 248 seconds","date":"2018-02-26T18:03:11.820Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-26T18:17:52.035Z","type":"join"}
{"nick":"srl295","date":"2018-02-26T18:18:25.269Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-02-26T18:24:40.259Z","type":"quit"}
{"nick":"cloudshu","date":"2018-02-26T18:32:14.439Z","type":"join"}
{"nick":"gskachkov","date":"2018-02-26T18:51:58.753Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-26T19:00:47.583Z","type":"quit"}
{"nick":"TimothyGu","reason":"Quit: WeeChat 1.6","date":"2018-02-26T19:04:14.666Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-26T19:05:57.514Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-26T19:09:10.256Z","type":"quit"}
{"nick":"aklein","message":"littledan: yt?","date":"2018-02-26T19:34:06.330Z","type":"message"}
{"nick":"aklein","message":"littledan: wanted to follow up about this decorator branding question","date":"2018-02-26T19:34:15.719Z","type":"message"}
{"nick":"gskachkov","date":"2018-02-26T19:40:42.766Z","type":"join"}
{"nick":"aklein","message":"littledan: responded on the issue: https://github.com/tc39/proposal-decorators/issues/56#issuecomment-368624483","date":"2018-02-26T19:41:53.651Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-02-26T19:48:40.825Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-26T19:59:50.700Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-26T20:00:13.325Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-02-26T20:06:37.067Z","type":"join"}
{"nick":"gskachkov","date":"2018-02-26T20:15:13.426Z","type":"join"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-26T20:55:41.880Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-26T20:59:40.853Z","type":"join"}
{"nick":"littledan","message":"aklein: Thanks, will respond there","date":"2018-02-26T21:02:46.244Z","type":"message"}
{"nick":"keith_miller","date":"2018-02-26T21:03:43.192Z","type":"join"}
{"nick":"jwalden","reason":"Ping timeout: 245 seconds","date":"2018-02-26T21:03:57.135Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-26T21:17:31.412Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-26T21:18:09.058Z","type":"join"}
{"nick":"jwalden","date":"2018-02-26T21:23:47.992Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-02-26T23:07:03.140Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-02-26T23:10:13.074Z","type":"join"}
