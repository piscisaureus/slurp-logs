{"nick":"JaseW","reason":"Quit: Leaving","date":"2018-04-09T00:09:22.631Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-09T00:16:05.472Z","type":"quit"}
{"nick":"srl295","date":"2018-04-09T00:32:14.109Z","type":"join"}
{"nick":"arai__","date":"2018-04-09T00:51:50.048Z","type":"join"}
{"nick":"arai__","reason":"Remote host closed the connection","date":"2018-04-09T00:52:02.160Z","type":"quit"}
{"nick":"arai","reason":"Ping timeout: 260 seconds","date":"2018-04-09T00:55:52.280Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-04-09T01:27:10.387Z","type":"quit"}
{"nick":"arai","date":"2018-04-09T01:54:36.420Z","type":"join"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2018-04-09T02:41:23.071Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-04-09T02:51:54.633Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-09T04:21:56.089Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-04-09T04:28:45.682Z","type":"join"}
{"nick":"jmdyck1","reason":"Quit: Leaving.","date":"2018-04-09T05:07:37.608Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-09T05:39:02.097Z","type":"quit"}
{"nick":"devsnek","message":"has anyone ever brought up Symbol.thenable or something similar","date":"2018-04-09T06:12:35.458Z","type":"message"}
{"nick":"devsnek","message":"and maybe module namespace objects having Symbol.thenable on them :s","date":"2018-04-09T06:14:57.841Z","type":"message"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-09T07:00:43.790Z","type":"quit"}
{"nick":"annevk","message":"devsnek: that was discussed, but the protocol for thenables is having a .then property","date":"2018-04-09T07:17:21.276Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-04-09T07:48:01.460Z","type":"quit"}
{"nick":"arai","date":"2018-04-09T08:21:05.782Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-04-09T10:25:07.834Z","type":"quit"}
{"nick":"mylesborins","date":"2018-04-09T10:25:38.227Z","type":"join"}
{"nick":"devsnek","message":"annevk: yea but that doesn't really line up with the existence of isConcatSpreadable and unscopables","date":"2018-04-09T11:44:00.360Z","type":"message"}
{"nick":"devsnek","message":"and hasInstance","date":"2018-04-09T11:44:33.233Z","type":"message"}
{"nick":"devsnek","message":"if you add some symbols to modify language behavior you can't just bar others by that same reason","date":"2018-04-09T11:48:42.944Z","type":"message"}
{"nick":"annevk","action":"shrugs","date":"2018-04-09T11:58:37.323Z","type":"action"}
{"nick":"TabAtkins","message":"devsnek: Yeah, thenables ended up being a nasty legacy hack, so shrug.","date":"2018-04-09T12:42:40.078Z","type":"message"}
{"nick":"devsnek","message":"I just threw this together: https://github.com/devsnek/proposal-symbol-thenable","date":"2018-04-09T12:51:04.338Z","type":"message"}
{"nick":"devsnek","message":"behaviour seems sane enough","date":"2018-04-09T12:51:16.011Z","type":"message"}
{"nick":"devsnek","message":"i need to do a better job with the spec formatting though","date":"2018-04-09T12:53:23.368Z","type":"message"}
{"nick":"bradleymeck","date":"2018-04-09T12:54:26.890Z","type":"join"}
{"nick":"devsnek","message":"does anyone know how i can fix this weird formatting issue https://github.com/devsnek/proposal-symbol-thenable/blob/master/spec.html#L222 https://gc.gy/Ƅȋ❏.png","date":"2018-04-09T13:07:13.483Z","type":"message"}
{"nick":"devsnek","message":"3.1 and 3.2 should be like indented and smaller right","date":"2018-04-09T13:07:35.034Z","type":"message"}
{"nick":"AtumT","date":"2018-04-09T13:15:32.357Z","type":"join"}
{"nick":"caitp","message":"are there use-cases for toggling an object's thenable-ness dynamically?","date":"2018-04-09T13:25:43.630Z","type":"message"}
{"nick":"caitp","message":"or, disabling the thenable-ness of a prototypically inherited object's `then` method without replacing the `then` method","date":"2018-04-09T13:27:10.508Z","type":"message"}
{"nick":"devsnek","message":"at least dynamic import","date":"2018-04-09T13:27:17.041Z","type":"message"}
{"nick":"devsnek","message":"which is good enough imo","date":"2018-04-09T13:27:17.220Z","type":"message"}
{"nick":"caitp","message":"that's not really dynamic though right, that's static","date":"2018-04-09T13:27:54.677Z","type":"message"}
{"nick":"devsnek","message":"huh","date":"2018-04-09T13:28:04.197Z","type":"message"}
{"nick":"caitp","message":"isn't it?","date":"2018-04-09T13:28:13.678Z","type":"message"}
{"nick":"devsnek","message":"I don't understand the question","date":"2018-04-09T13:28:34.519Z","type":"message"}
{"nick":"caitp","message":"like \"sometimes this module's .then method is meant in the sense that it's a thenable, and sometimes it isn't --- thus it needs to be possible to change the \"thenable\" value dynamically\"","date":"2018-04-09T13:29:18.344Z","type":"message"}
{"nick":"devsnek","message":"well my opinion is that exporting a then function shouldn't change the behaviour between dynamic and static","date":"2018-04-09T13:29:57.868Z","type":"message"}
{"nick":"devsnek","message":"they should always give you the same namespace (and dynamic import should always give you a namespace <.<)","date":"2018-04-09T13:30:39.874Z","type":"message"}
{"nick":"caitp","message":"right, so what if you have a module like `import \"async-thing\" as ns; ns[Symbol.thenable] = false; export default ns;`","date":"2018-04-09T13:31:12.655Z","type":"message"}
{"nick":"caitp","message":"is that the kind of thing that should be doable?","date":"2018-04-09T13:31:43.469Z","type":"message"}
{"nick":"caitp","message":"and if so, why","date":"2018-04-09T13:31:47.057Z","type":"message"}
{"nick":"devsnek","message":"setting the property would be no-op cuz namespaces are sealed","date":"2018-04-09T13:31:57.855Z","type":"message"}
{"nick":"devsnek","message":"is my intuition","date":"2018-04-09T13:32:01.556Z","type":"message"}
{"nick":"devsnek","message":"also it would be weird if other modules could change your modules behaviour","date":"2018-04-09T13:32:23.598Z","type":"message"}
{"nick":"caitp","message":"yeah, that could be --- but then alternatively, `import \"async-thing\" as ns; export default Object.setPrototypeOf({ [Symbol.thenable]: false }, ns);` would be the same thing effectively right","date":"2018-04-09T13:33:35.519Z","type":"message"}
{"nick":"caitp","message":"or close enough","date":"2018-04-09T13:33:45.694Z","type":"message"}
{"nick":"devsnek","message":"no","date":"2018-04-09T13:33:51.283Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2018-04-09T13:34:12.065Z","type":"message"}
{"nick":"devsnek","message":"again I don't think you can set the prototype of a namespace","date":"2018-04-09T13:34:58.292Z","type":"message"}
{"nick":"caitp","message":"you're setting the prototype of the object you're exporting","date":"2018-04-09T13:35:13.945Z","type":"message"}
{"nick":"devsnek","message":"that object is a namespace","date":"2018-04-09T13:35:29.254Z","type":"message"}
{"nick":"devsnek","message":"and you did export default so it doesn't matter anyway","date":"2018-04-09T13:35:38.570Z","type":"message"}
{"nick":"caitp","message":"the object is `{ [Symbol.thenable]: false, __proto__: <async-thing namespace> }`","date":"2018-04-09T13:36:14.066Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2018-04-09T13:36:41.805Z","type":"message"}
{"nick":"caitp","message":"which, I believe, is legal","date":"2018-04-09T13:36:49.944Z","type":"message"}
{"nick":"devsnek","message":"yea","date":"2018-04-09T13:36:53.406Z","type":"message"}
{"nick":"devsnek","message":"so then you have some frankenstein default export","date":"2018-04-09T13:37:11.024Z","type":"message"}
{"nick":"devsnek","message":"what's your point","date":"2018-04-09T13:37:17.761Z","type":"message"}
{"nick":"TabAtkins","message":"I mean, there's no real difference between \"you can toggle Symbol.thenable\" and \"you can toggle whether to use the 'then' name or something else\".","date":"2018-04-09T13:38:25.132Z","type":"message"}
{"nick":"devsnek","message":"yes there is","date":"2018-04-09T13:38:46.626Z","type":"message"}
{"nick":"caitp","message":"I guess I'm asking if these are things that should be possible, e.g. dynamically changing the thenable-ness at runtime (of any object, not just a module), or if it should be a static value with the prototype ignored","date":"2018-04-09T13:39:00.874Z","type":"message"}
{"nick":"devsnek","message":"definitely for dynamic import anyway","date":"2018-04-09T13:39:01.433Z","type":"message"}
{"nick":"devsnek","message":"because the user doesn't add the symbol","date":"2018-04-09T13:39:08.169Z","type":"message"}
{"nick":"devsnek","message":"in this case the production forces the static and dynamic to resolve the same thing","date":"2018-04-09T13:39:28.695Z","type":"message"}
{"nick":"devsnek","message":"whether you use `then` or not","date":"2018-04-09T13:39:38.262Z","type":"message"}
{"nick":"caitp","message":"(also, you can't export symbol-named properties in a namespace, right? don't they have to be identifiers?)","date":"2018-04-09T13:39:46.046Z","type":"message"}
{"nick":"devsnek","message":"correct","date":"2018-04-09T13:39:57.954Z","type":"message"}
{"nick":"devsnek","message":"well there might be private symbol exports but","date":"2018-04-09T13:40:17.004Z","type":"message"}
{"nick":"devsnek","message":"that's another conversation","date":"2018-04-09T13:40:23.120Z","type":"message"}
{"nick":"caitp","message":"so if you can't export symbol-named things, doesn't this mean it isn't really useful for making changing the thenable-ness of a module namespace with an exported callable \"then\"?","date":"2018-04-09T13:48:01.455Z","type":"message"}
{"nick":"devsnek","message":"TabAtkins: do you see the difference in taking about? I want to make sure people understand what my motivation behind this is","date":"2018-04-09T13:48:05.189Z","type":"message"}
{"nick":"caitp","message":"s/making//","date":"2018-04-09T13:48:20.118Z","type":"message"}
{"nick":"devsnek","message":"caitp: the idea is that the symbol can't be changed on a namespace","date":"2018-04-09T13:49:07.811Z","type":"message"}
{"nick":"caitp","message":"yeah but how do you put it on the namespace in the first place","date":"2018-04-09T13:49:19.371Z","type":"message"}
{"nick":"devsnek","message":"in the production ModuleNamespaceCreate","date":"2018-04-09T13:49:37.486Z","type":"message"}
{"nick":"devsnek","message":"Search that phrase in the spec","date":"2018-04-09T13:49:47.087Z","type":"message"}
{"nick":"devsnek","message":"actually it's technically not even there","date":"2018-04-09T13:49:56.122Z","type":"message"}
{"nick":"devsnek","message":"there's a place in the spec where Symbol.toStringTag is defined for a module namespace","date":"2018-04-09T13:50:28.329Z","type":"message"}
{"nick":"TabAtkins","message":"devsnek: I mean, I see why having a thenable symbol is good (you can opt your object out of being a thenable when you're just wanting a .then() method for some other reason), but I don't see what makes the thenable symbol special here vs \".then or not\" for determining whether something is thenable.","date":"2018-04-09T13:50:29.266Z","type":"message"}
{"nick":"devsnek","message":"because then is just another name","date":"2018-04-09T13:50:45.530Z","type":"message"}
{"nick":"devsnek","message":"there's nothing special about it for import","date":"2018-04-09T13:50:57.017Z","type":"message"}
{"nick":"caitp","message":"but, how do you make an export named Symbol.thenable? I mean, you can't `export let Symbol.thenable = false;`, you can't `export { [Symbol.thenable], ... }`, etc","date":"2018-04-09T13:52:14.060Z","type":"message"}
{"nick":"devsnek","message":"TabAtkins: and exports being stored in some object that is subject to thenable rules is almost an implementation detail","date":"2018-04-09T13:53:15.711Z","type":"message"}
{"nick":"devsnek","message":"caitp: you don't make an export named symbol.iterable","date":"2018-04-09T13:53:31.033Z","type":"message"}
{"nick":"caitp","message":"I don't understand how Symbol.thenable ends up on the namespace then","date":"2018-04-09T13:53:53.171Z","type":"message"}
{"nick":"caitp","message":"in the proposal","date":"2018-04-09T13:54:03.319Z","type":"message"}
{"nick":"devsnek","message":"the same way Symbol.toStringTag does","date":"2018-04-09T13:54:05.191Z","type":"message"}
{"nick":"caitp","message":"ok I see","date":"2018-04-09T13:54:26.583Z","type":"message"}
{"nick":"caitp","message":"so namespaces are never thenable","date":"2018-04-09T13:54:30.744Z","type":"message"}
{"nick":"devsnek","message":"correct","date":"2018-04-09T13:54:37.338Z","type":"message"}
{"nick":"devsnek","message":"that keeps the behaviour the same between dynamic and static imports","date":"2018-04-09T13:54:51.308Z","type":"message"}
{"nick":"devsnek","message":"there shouldn't be something you can do to change those two things","date":"2018-04-09T13:55:07.667Z","type":"message"}
{"nick":"devsnek","message":"whatever JavaScript mechanic it is, thenables or something else","date":"2018-04-09T13:55:19.952Z","type":"message"}
{"nick":"caitp","message":"but then you could get this behaviour by just saying \"if the resolution is not a module namespace object, ...\"","date":"2018-04-09T13:55:23.288Z","type":"message"}
{"nick":"devsnek","message":"yes you could","date":"2018-04-09T13:55:32.370Z","type":"message"}
{"nick":"devsnek","message":"but they didn't want a random exception","date":"2018-04-09T13:55:43.702Z","type":"message"}
{"nick":"caitp","message":"which brings me back to asking about the use-cases for this outside of modules","date":"2018-04-09T13:55:54.811Z","type":"message"}
{"nick":"TabAtkins","message":"devsnek: Ok, right, so you're just saying that module objects should never be thenables themselves, which I agree with. ^_^","date":"2018-04-09T13:56:02.181Z","type":"message"}
{"nick":"devsnek","message":"hype","date":"2018-04-09T13:56:12.432Z","type":"message"}
{"nick":"devsnek","message":"the mechanic I chose was Symbol.thenable because it made people uncomfortable having specific exceptions in the resolve production","date":"2018-04-09T13:57:17.479Z","type":"message"}
{"nick":"devsnek","message":"but I'm cool with whatever fixes this","date":"2018-04-09T13:57:26.813Z","type":"message"}
{"nick":"littledan","message":"No idea why we'd have Symbol.thenable when Promises are always calling the \"then\" property","date":"2018-04-09T13:57:51.714Z","type":"message"}
{"nick":"devsnek","message":"well in this case it isn't always","date":"2018-04-09T13:58:22.048Z","type":"message"}
{"nick":"littledan","message":"the decision to make `await` be explicitly tied in with built-in Promises was a deliberate one. The natural way to change it would be to omit the thing where we wrap everything in a native Promise","date":"2018-04-09T13:58:24.262Z","type":"message"}
{"nick":"littledan","message":"even when wrapping, you still end up calling the inner `then` function","date":"2018-04-09T13:58:51.325Z","type":"message"}
{"nick":"littledan","message":"(sorry, jumping in in the middle)","date":"2018-04-09T13:59:01.683Z","type":"message"}
{"nick":"devsnek","message":"it's ok","date":"2018-04-09T13:59:06.367Z","type":"message"}
{"nick":"littledan","message":"anyway I don't think we need to start giving all properties Symbol names","date":"2018-04-09T13:59:22.523Z","type":"message"}
{"nick":"littledan","message":"I think Symbol just makes sense when you need a different sort of namespace that doesn't collide","date":"2018-04-09T13:59:33.719Z","type":"message"}
{"nick":"devsnek","message":"I would generally agree that we don't need oodles of symbols","date":"2018-04-09T13:59:50.321Z","type":"message"}
{"nick":"devsnek","message":"I'm just not sure how else to go about this","date":"2018-04-09T13:59:59.835Z","type":"message"}
{"nick":"devsnek","message":"you mentioned using a different kind of promise?","date":"2018-04-09T14:00:18.248Z","type":"message"}
{"nick":"devsnek","message":"or did you mean like put the symbol on the Promise namespace","date":"2018-04-09T14:01:23.442Z","type":"message"}
{"nick":"caitp","message":"I think the `await import(...)` behaviour wouldn't change, but the behaviour of resolving the dynamic import promise with a namespace with a \"then\" method would change","date":"2018-04-09T14:01:40.883Z","type":"message"}
{"nick":"caitp","message":"because dynamic import returns its own promise anyway, right?","date":"2018-04-09T14:02:14.590Z","type":"message"}
{"nick":"devsnek","message":"are people suggesting making dynamic import return a thenable instead of a promise","date":"2018-04-09T14:03:04.158Z","type":"message"}
{"nick":"devsnek","message":"that wouldn't solve the problem would it","date":"2018-04-09T14:03:24.719Z","type":"message"}
{"nick":"caitp","message":"*re-reads the dynamic import prop*","date":"2018-04-09T14:03:44.254Z","type":"message"}
{"nick":"jmdyck","date":"2018-04-09T14:04:07.178Z","type":"join"}
{"nick":"devsnek","message":"littledan: just to clarify, were you suggesting moving thenable to Promise or something else","date":"2018-04-09T14:05:23.468Z","type":"message"}
{"nick":"littledan","message":"I don't know what you mean, but I am not suggesting anything","date":"2018-04-09T14:07:36.429Z","type":"message"}
{"nick":"devsnek","message":"ok","date":"2018-04-09T14:08:06.722Z","type":"message"}
{"nick":"annevk","message":"devsnek: are you also going to offer something for objects to opt-out of being array-like?","date":"2018-04-09T14:08:40.741Z","type":"message"}
{"nick":"devsnek","message":"I mean","date":"2018-04-09T14:09:05.382Z","type":"message"}
{"nick":"devsnek","message":"we already have Symbol.concatSpreadable","date":"2018-04-09T14:09:15.153Z","type":"message"}
{"nick":"devsnek","message":"Symbol.arrayLike isn't far off","date":"2018-04-09T14:09:22.649Z","type":"message"}
{"nick":"jmdyck1","date":"2018-04-09T14:44:51.250Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 264 seconds","date":"2018-04-09T14:45:58.289Z","type":"quit"}
