{"nick":"akirose","reason":"Ping timeout: 258 seconds","date":"2019-01-08T00:03:21.180Z","type":"quit"}
{"nick":"akirose","date":"2019-01-08T00:03:32.434Z","type":"join"}
{"nick":"AtumT_","reason":"Quit: AtumT_","date":"2019-01-08T00:04:58.925Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-08T00:06:08.900Z","type":"join"}
{"nick":"NaN","date":"2019-01-08T00:46:02.059Z","type":"join"}
{"nick":"NaN","new_nick":"Guest50841","date":"2019-01-08T00:46:19.757Z","type":"nick"}
{"nick":"Guest50841","date":"2019-01-08T00:47:20.059Z","type":"part"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-01-08T00:49:04.493Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-01-08T01:25:30.664Z","type":"quit"}
{"nick":"cloudshu","date":"2019-01-08T01:41:01.757Z","type":"join"}
{"nick":"keith_mi_","date":"2019-01-08T01:50:43.733Z","type":"join"}
{"nick":"keith_mi_","reason":"Client Quit","date":"2019-01-08T01:52:30.445Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-08T01:54:46.202Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-01-08T02:07:03.900Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 268 seconds","date":"2019-01-08T02:08:08.202Z","type":"quit"}
{"nick":"aki_","date":"2019-01-08T02:10:27.215Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-08T02:11:22.898Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-08T02:11:22.898Z","type":"nick"}
{"nick":"keith_mi_","date":"2019-01-08T02:16:11.083Z","type":"join"}
{"nick":"keith_mi_","reason":"Read error: Connection reset by peer","date":"2019-01-08T02:18:20.547Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-08T02:18:45.486Z","type":"join"}
{"nick":"keith_m__","date":"2019-01-08T02:20:28.127Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 244 seconds","date":"2019-01-08T02:23:11.531Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-08T02:28:08.519Z","type":"join"}
{"nick":"keith_m__","reason":"Remote host closed the connection","date":"2019-01-08T02:29:51.153Z","type":"quit"}
{"nick":"keith_m__","date":"2019-01-08T02:32:00.625Z","type":"join"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-01-08T02:32:51.319Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-08T02:33:25.067Z","type":"join"}
{"nick":"keith_m__","reason":"Ping timeout: 250 seconds","date":"2019-01-08T02:36:30.773Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-01-08T03:05:43.153Z","type":"quit"}
{"nick":"aki_","date":"2019-01-08T04:17:07.764Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 258 seconds","date":"2019-01-08T04:18:16.161Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-08T04:18:16.453Z","type":"nick"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-01-08T04:22:06.870Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-01-08T05:05:30.685Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-01-08T05:05:56.162Z","type":"quit"}
{"nick":"devsnek","reason":"Ping timeout: 264 seconds","date":"2019-01-08T05:12:04.028Z","type":"quit"}
{"nick":"devsnek","date":"2019-01-08T05:14:50.935Z","type":"join"}
{"nick":"aki_","date":"2019-01-08T06:23:56.423Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-08T06:25:06.918Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-08T06:25:06.918Z","type":"nick"}
{"nick":"nomadtechie","reason":"Read error: Connection reset by peer","date":"2019-01-08T08:05:07.704Z","type":"quit"}
{"nick":"rkirsling","reason":"Read error: Connection reset by peer","date":"2019-01-08T08:05:07.891Z","type":"quit"}
{"nick":"samth","reason":"Read error: Connection reset by peer","date":"2019-01-08T08:05:08.706Z","type":"quit"}
{"nick":"samth","date":"2019-01-08T08:05:22.366Z","type":"join"}
{"nick":"rkirsling","date":"2019-01-08T08:05:23.212Z","type":"join"}
{"nick":"nomadtechie","date":"2019-01-08T08:05:24.168Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-08T08:31:27.319Z","type":"quit"}
{"nick":"akirose","date":"2019-01-08T08:32:10.703Z","type":"join"}
{"nick":"akirose","reason":"Quit: üëãüèª","date":"2019-01-08T09:12:56.080Z","type":"quit"}
{"nick":"akirose","date":"2019-01-08T09:16:16.139Z","type":"join"}
{"nick":"dpk","reason":"Ping timeout: 260 seconds","date":"2019-01-08T10:09:45.385Z","type":"quit"}
{"nick":"dpk","date":"2019-01-08T10:13:23.866Z","type":"join"}
{"nick":"mgol","date":"2019-01-08T10:18:32.915Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 258 seconds","date":"2019-01-08T11:23:23.208Z","type":"quit"}
{"nick":"akirose","date":"2019-01-08T11:26:35.992Z","type":"join"}
{"nick":"m_gol","date":"2019-01-08T12:31:06.296Z","type":"join"}
{"nick":"mgol","reason":"Ping timeout: 250 seconds","date":"2019-01-08T12:33:12.891Z","type":"quit"}
{"nick":"mgol","date":"2019-01-08T12:56:11.904Z","type":"join"}
{"nick":"m_gol","reason":"Ping timeout: 245 seconds","date":"2019-01-08T12:57:08.330Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-08T13:18:03.521Z","type":"join"}
{"nick":"jmdyck","date":"2019-01-08T13:25:02.087Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-01-08T13:33:05.989Z","type":"quit"}
{"nick":"akirose","date":"2019-01-08T13:35:08.770Z","type":"join"}
{"nick":"gibson042","date":"2019-01-08T14:31:06.732Z","type":"join"}
{"nick":"jorydotcom","date":"2019-01-08T14:52:52.116Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 250 seconds","date":"2019-01-08T15:04:26.437Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-08T15:05:57.250Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-01-08T15:35:41.525Z","type":"quit"}
{"nick":"aki_","date":"2019-01-08T15:41:19.634Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-08T15:42:24.761Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-08T15:42:25.270Z","type":"nick"}
{"nick":"keith_mi_","date":"2019-01-08T15:48:13.831Z","type":"join"}
{"nick":"cloudshu","date":"2019-01-08T15:49:25.586Z","type":"join"}
{"nick":"devsnek","message":"littledan: i think maybe we're talking past each other?","date":"2019-01-08T16:04:18.376Z","type":"message"}
{"nick":"devsnek","message":"my point was that the private fields aren't tied to the prototype but rather the instance","date":"2019-01-08T16:04:43.668Z","type":"message"}
{"nick":"littledan","message":"devsnek: Could be; sorry I didn't review your comments here yet","date":"2019-01-08T16:04:47.667Z","type":"message"}
{"nick":"littledan","message":"yes, that's true","date":"2019-01-08T16:04:48.742Z","type":"message"}
{"nick":"littledan","message":"that's a design goal, basically","date":"2019-01-08T16:04:53.992Z","type":"message"}
{"nick":"littledan","message":"internal slots and WeakMaps are like that too","date":"2019-01-08T16:05:05.455Z","type":"message"}
{"nick":"devsnek","message":"so like if you have `class X { #y; constructor() { return {} } }`","date":"2019-01-08T16:05:12.907Z","type":"message"}
{"nick":"devsnek","message":"you've \"discarded\" the instance of X with `#y` on it","date":"2019-01-08T16:05:32.292Z","type":"message"}
{"nick":"littledan","message":"none of your examples use `class.initialize`, so I don't know what sort of point you're making about that proposal","date":"2019-01-08T16:05:34.629Z","type":"message"}
{"nick":"littledan","message":"yes","date":"2019-01-08T16:05:35.803Z","type":"message"}
{"nick":"devsnek","message":"regardless of if that return value comes from `Object.create(new.target.prototype)`","date":"2019-01-08T16:05:58.306Z","type":"message"}
{"nick":"littledan","message":"right","date":"2019-01-08T16:06:03.364Z","type":"message"}
{"nick":"devsnek","message":"you're opting out of using those private fields","date":"2019-01-08T16:06:05.048Z","type":"message"}
{"nick":"littledan","message":"yes","date":"2019-01-08T16:06:10.463Z","type":"message"}
{"nick":"devsnek","message":"so to me, the entire issue seems like its looking for the wrong solution","date":"2019-01-08T16:06:29.009Z","type":"message"}
{"nick":"littledan","message":"What do these facts about the semantics of the fields proposal have to do with it being a bad idea to make a mechanism to not opt out of it?","date":"2019-01-08T16:06:54.011Z","type":"message"}
{"nick":"littledan","message":"to opt back into it","date":"2019-01-08T16:07:02.061Z","type":"message"}
{"nick":"littledan","message":"I mean, how would you allow the original superclass constructor to reliably be called?","date":"2019-01-08T16:07:24.461Z","type":"message"}
{"nick":"devsnek","message":"explicitly call it?","date":"2019-01-08T16:08:21.078Z","type":"message"}
{"nick":"littledan","message":"that's exactly the pattern I'm suggesting in the class.initialize readme","date":"2019-01-08T16:09:54.580Z","type":"message"}
{"nick":"bradleymeck","message":"that won't install the private fields though","date":"2019-01-08T16:09:55.118Z","type":"message"}
{"nick":"littledan","message":"right","date":"2019-01-08T16:09:59.740Z","type":"message"}
{"nick":"devsnek","message":"all you lose is the fields of the current class","date":"2019-01-08T16:10:14.327Z","type":"message"}
{"nick":"devsnek","message":"not the super","date":"2019-01-08T16:10:16.451Z","type":"message"}
{"nick":"bradleymeck","message":"you need to add some way to strap those fields onto an object that != what super() returns","date":"2019-01-08T16:10:17.454Z","type":"message"}
{"nick":"littledan","message":"yes, that's true","date":"2019-01-08T16:10:28.335Z","type":"message"}
{"nick":"littledan","message":"the bug Domenic filed was all about getting the fields in the subclass","date":"2019-01-08T16:10:37.449Z","type":"message"}
{"nick":"littledan","message":"https://github.com/littledan/proposal-class-initialize","date":"2019-01-08T16:10:40.602Z","type":"message"}
{"nick":"littledan","message":"this explains clearly that it's all about getting the fields in the subclass","date":"2019-01-08T16:10:49.981Z","type":"message"}
{"nick":"littledan","message":"you could argue that built-in classes add all the fields in the base class, though","date":"2019-01-08T16:11:01.599Z","type":"message"}
{"nick":"devsnek","message":"yeah and my whole point here is that the fields of the subclass are gone","date":"2019-01-08T16:11:20.600Z","type":"message"}
{"nick":"littledan","message":"it's ambiguous, though, since web specs aren't really clear about their use of internal slots (which is being discusse das an area for improvement in WebIDL)","date":"2019-01-08T16:11:25.397Z","type":"message"}
{"nick":"devsnek","message":"like you've decided to return something else","date":"2019-01-08T16:11:27.334Z","type":"message"}
{"nick":"littledan","message":"so, yes ,that's something you can accomplish with the class fields proposal without changes","date":"2019-01-08T16:11:39.119Z","type":"message"}
{"nick":"littledan","message":"I think you understand the semantics well, and the disconnect is, I don't know where you go from the \"is\" to \"should\"","date":"2019-01-08T16:12:05.876Z","type":"message"}
{"nick":"littledan","message":"yes, you can write code that does that stuff. Why does that mean that we shouldn't add this feature to do other stuff?","date":"2019-01-08T16:12:22.951Z","type":"message"}
{"nick":"devsnek","message":"ü§∑ it just feels like the wrong semantics","date":"2019-01-08T16:12:35.963Z","type":"message"}
{"nick":"littledan","message":"what feels wrong about it?","date":"2019-01-08T16:12:41.990Z","type":"message"}
{"nick":"devsnek","message":"there's a difference between an instance of X and the result of Construct(X)","date":"2019-01-08T16:13:11.727Z","type":"message"}
{"nick":"devsnek","message":"a difference that is very explicit outside of spec land because of return overrides","date":"2019-01-08T16:13:46.262Z","type":"message"}
{"nick":"devsnek","message":"its like those proposals to do `constructor(.x)` to make it automatically assign to `this.x`, its a very common pattern and there's definitely logic in that syntax and behaviour but it connects two ideas which still have a separation and therefore feels weird","date":"2019-01-08T16:15:16.423Z","type":"message"}
{"nick":"devsnek","message":"i think the word i used in the issue is \"contrived\"","date":"2019-01-08T16:16:55.911Z","type":"message"}
{"nick":"littledan","message":"I don't quite understand what you're saying. Do you mean, fields and private methods are logically something that you should only get from \"really\" returning from super, and anything that violates that is unexpected?","date":"2019-01-08T16:16:56.827Z","type":"message"}
{"nick":"littledan","message":"this is a bit different from `constructor(.x)` in that that proposal is a shortcut, whereas this is a power tool","date":"2019-01-08T16:17:23.574Z","type":"message"}
{"nick":"littledan","message":"so I expect the situations where they are used will be different","date":"2019-01-08T16:17:48.000Z","type":"message"}
{"nick":"devsnek","message":"if you're not using the instance of X, don't bother having those private fields","date":"2019-01-08T16:19:29.590Z","type":"message"}
{"nick":"devsnek","message":"use something else, maybe private symbols","date":"2019-01-08T16:19:37.568Z","type":"message"}
{"nick":"gibson042","reason":"Ping timeout: 268 seconds","date":"2019-01-08T16:21:04.692Z","type":"quit"}
{"nick":"littledan","message":"private symbols don't exist, and I'm not confident that they will exist in the future","date":"2019-01-08T16:21:08.639Z","type":"message"}
{"nick":"littledan","message":"do you share Domenic's concern about what the issue means for the private fields and methods proposals overall?","date":"2019-01-08T16:21:32.547Z","type":"message"}
{"nick":"devsnek","message":"that its not well suited to describe the relationships of dom elements?","date":"2019-01-08T16:22:22.124Z","type":"message"}
{"nick":"littledan","message":"that seems to be Domenic's claim, and my proposal to rectify things is class.initialize (+ decorators to allow friends to happen)","date":"2019-01-08T16:23:23.950Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: what feels like the wrong semantics? the existing return override behavior for fields, or providing it via class.initialize as proposed?","date":"2019-01-08T16:26:09.905Z","type":"message"}
{"nick":"devsnek","message":"the latter","date":"2019-01-08T16:26:27.901Z","type":"message"}
{"nick":"devsnek","message":"i think the current behaviour is üëç","date":"2019-01-08T16:26:37.453Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: then i'm similarly confused... the existing behavior itself doesn't feel wrong, but giving programmatic access to it feels wrong?","date":"2019-01-08T16:27:47.684Z","type":"message"}
{"nick":"devsnek","message":"cloudshu: it feels like everything together makes weird semantics that's like js trying to get around itself","date":"2019-01-08T16:29:40.040Z","type":"message"}
{"nick":"devsnek","message":"dropping an instance to make another identical-ish one feels like poor design","date":"2019-01-08T16:30:01.975Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: i see. my point of view is a bit different. in that class behavior in JS differ form object behavior in JS, i see this as a step towards having programmatic reflection of something like a \"metaclass protocol\"","date":"2019-01-08T16:32:24.745Z","type":"message"}
{"nick":"devsnek","message":"i don't disagree with having that in general","date":"2019-01-08T16:33:00.987Z","type":"message"}
{"nick":"littledan","message":"note that, in subclasses (the case where I think this feature is most useful), there's no instance being dropped in favor of another one; it's just never created","date":"2019-01-08T16:36:26.444Z","type":"message"}
{"nick":"gibson042","date":"2019-01-08T16:36:55.301Z","type":"join"}
{"nick":"littledan","message":"but, for base classes, dropping one thing in favor of another has been the semantics of `new` since the two tablets were passed down to Brendan, or however it happened","date":"2019-01-08T16:36:56.062Z","type":"message"}
{"nick":"littledan","message":"so, none of this really is a property of `class.initialize`","date":"2019-01-08T16:37:19.104Z","type":"message"}
{"nick":"devsnek","message":"i assume you mean you mean if you don't call super","date":"2019-01-08T16:37:22.384Z","type":"message"}
{"nick":"littledan","message":"exactly","date":"2019-01-08T16:37:33.075Z","type":"message"}
{"nick":"devsnek","message":"if you're opting out of all the class things","date":"2019-01-08T16:37:40.849Z","type":"message"}
{"nick":"devsnek","message":"why even bother using classes","date":"2019-01-08T16:37:44.004Z","type":"message"}
{"nick":"littledan","message":"`class.initialize` is exactly to cover the cases where you don't call super","date":"2019-01-08T16:37:47.288Z","type":"message"}
{"nick":"littledan","message":"you're not opting out of all of them, just this one little part","date":"2019-01-08T16:38:06.576Z","type":"message"}
{"nick":"littledan","message":"you use classes for all of the other reasons","date":"2019-01-08T16:38:16.680Z","type":"message"}
{"nick":"littledan","message":"I mean, this is justified for the same reason it makes sense to have Reflect.construct","date":"2019-01-08T16:38:25.756Z","type":"message"}
{"nick":"AtumT","date":"2019-01-08T16:38:25.904Z","type":"join"}
{"nick":"devsnek","message":"well if everyone disagrees with me i'm probably the crazy one","date":"2019-01-08T16:39:26.117Z","type":"message"}
{"nick":"littledan","message":"well, I just don't understand this design perspective","date":"2019-01-08T16:39:33.308Z","type":"message"}
{"nick":"littledan","message":"I agree that this proposal isn't the highest priority one in the universe","date":"2019-01-08T16:39:48.388Z","type":"message"}
{"nick":"littledan","message":"I explain mitigations for its lack in the readme","date":"2019-01-08T16:40:00.007Z","type":"message"}
{"nick":"littledan","message":"but, if we consider the thing that Domenic posted about as a design goal, then this is the best solution I can think of, and it should be prioritized wherever we prioritize his concern.","date":"2019-01-08T16:40:32.157Z","type":"message"}
{"nick":"cloudshu","message":"is the point that \"one shouldn't be able to opt out of class behavior piecemeal\" about invariants?","date":"2019-01-08T16:40:38.549Z","type":"message"}
{"nick":"littledan","message":"I don't see what invariant this would relate to","date":"2019-01-08T16:44:31.941Z","type":"message"}
{"nick":"cloudshu","message":"the only one i can think of is the obvious one: the instance called super() if and only if the instance has the class's fields installed","date":"2019-01-08T16:45:53.229Z","type":"message"}
{"nick":"cloudshu","message":"but that doesn't seem that useful an invariant","date":"2019-01-08T16:46:04.894Z","type":"message"}
{"nick":"cloudshu","message":"well, i take that back, could be useful for VMs","date":"2019-01-08T16:59:03.751Z","type":"message"}
{"nick":"littledan","message":"it could be something that vms speculate on, sure","date":"2019-01-08T17:06:47.567Z","type":"message"}
{"nick":"littledan","message":"I am not sure what guarantees vms could use","date":"2019-01-08T17:06:58.134Z","type":"message"}
{"nick":"cloudshu","message":"vms speculating on that is still fine in that class.initialize is an easy-to-detect deopt","date":"2019-01-08T17:07:43.592Z","type":"message"}
{"nick":"littledan","message":"yeah","date":"2019-01-08T17:14:34.495Z","type":"message"}
{"nick":"littledan","message":"did you get my email about the TypeErorr thing?","date":"2019-01-08T17:14:42.752Z","type":"message"}
{"nick":"littledan","message":"oh oops I didn't send it yet","date":"2019-01-08T17:15:01.793Z","type":"message"}
{"nick":"cloudshu","message":"ah","date":"2019-01-08T17:15:26.915Z","type":"message"}
{"nick":"bradleymeck","message":"how do people feel about another global table like the global symbol table for compositeKey, rather than me making a synthetic internal slot to that is only ever used by compositeKey (some functions have internal slots already so idk)","date":"2019-01-08T17:15:53.489Z","type":"message"}
{"nick":"jwalden","date":"2019-01-08T17:35:30.283Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-01-08T17:43:46.632Z","type":"quit"}
{"nick":"aki_","date":"2019-01-08T17:48:50.485Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-08T17:49:06.825Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-08T17:49:09.165Z","type":"nick"}
{"nick":"kverrier","date":"2019-01-08T18:02:12.097Z","type":"join"}
{"nick":"kverrier","reason":"Client Quit","date":"2019-01-08T18:02:13.164Z","type":"quit"}
{"nick":"devsnek","message":"jridgewell's private symbol proposal is really nice","date":"2019-01-08T18:39:12.754Z","type":"message"}
{"nick":"cloudshu","message":"i disagree, it seems to carve out a 3rd semantics space different from both weakmap semantics and property semantics","date":"2019-01-08T18:40:33.671Z","type":"message"}
{"nick":"Domenic","message":"+1","date":"2019-01-08T18:40:46.700Z","type":"message"}
{"nick":"devsnek","message":"i like both but justin's feels more javascripty","date":"2019-01-08T18:41:28.539Z","type":"message"}
{"nick":"devsnek","message":"cloudshu: what do you mean its different from property semantics","date":"2019-01-08T18:45:00.054Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: i mean it doesn't behave like properties in fairly significant ways","date":"2019-01-08T18:45:52.786Z","type":"message"}
{"nick":"devsnek","message":"it behaves exactly like properties except for OwnPropertyKeys","date":"2019-01-08T18:46:08.358Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: it behaves like private fields except no error on not found and prototype chain lookups","date":"2019-01-08T18:46:54.445Z","type":"message"}
{"nick":"devsnek","message":"that's just regular properties","date":"2019-01-08T18:47:09.350Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: well, what do the bits on the property descriptors mean now?","date":"2019-01-08T18:48:05.244Z","type":"message"}
{"nick":"mgol","date":"2019-01-08T18:48:14.548Z","type":"join"}
{"nick":"cloudshu","message":"devsnek: i think it's a far stretch from \"just regular properties\"","date":"2019-01-08T18:48:29.335Z","type":"message"}
{"nick":"devsnek","message":"huh","date":"2019-01-08T18:48:29.935Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: what does enumerability mean for these properties?","date":"2019-01-08T18:49:10.744Z","type":"message"}
{"nick":"devsnek","message":"the entire proposal is \"private symbols as non-exposed symbols with [[Private]] and not shown in OwnPropertyKeys\"","date":"2019-01-08T18:49:20.269Z","type":"message"}
{"nick":"devsnek","message":"i guess you're right that the descriptors for them would be not used the same way, but since you can't see those descriptors either i don't think its a problem","date":"2019-01-08T18:50:06.205Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: in their behavior, i don't think you can say \"they're just like properties\" in that they behave very differently due to their encapsulated nature","date":"2019-01-08T18:50:45.743Z","type":"message"}
{"nick":"devsnek","message":"you could just say an invariat of private name properties is that their descriptors are always [[writable]] true and [[enumerable]] false","date":"2019-01-08T18:50:53.238Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: and in that light, it is a new set of semantics for a property-like feature from both regular properties and private fields","date":"2019-01-08T18:51:13.923Z","type":"message"}
{"nick":"devsnek","message":"i guess we just don't see it the same way :P","date":"2019-01-08T18:52:14.121Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: and it is strictly less desirable from a simplification for me POV because this is neither regular properties, which are well understood, nor private fields, which are weakmap semantics (which already exist)","date":"2019-01-08T18:52:26.486Z","type":"message"}
{"nick":"cloudshu","message":"err, from a simplification POV for me*","date":"2019-01-08T18:52:36.109Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: that's my disagreement with the \"this is simpler to understand\" narrative","date":"2019-01-08T18:53:15.969Z","type":"message"}
{"nick":"devsnek","message":"from the examples in https://github.com/jridgewell/proposal-private-symbols it seems pretty simple to use and understand","date":"2019-01-08T18:53:33.036Z","type":"message"}
{"nick":"cloudshu","message":"i have a more fundamental disagreement with doing proto lookups","date":"2019-01-08T18:53:34.840Z","type":"message"}
{"nick":"devsnek","message":"that is the main reason that reified private symbols got stuck right?","date":"2019-01-08T18:54:13.845Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: for straightforward use, both private fields and private symbols are easy to understand","date":"2019-01-08T18:54:14.569Z","type":"message"}
{"nick":"cloudshu","message":"part of the impetus for symbols was to simplify also the edge cases","date":"2019-01-08T18:54:29.625Z","type":"message"}
{"nick":"cloudshu","message":"whereas this new proposal introduces different edge cases instead, imo","date":"2019-01-08T18:54:39.017Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: it also got stuck due to some usability issues with lacking the check for if the target has the fields","date":"2019-01-08T18:54:58.829Z","type":"message"}
{"nick":"devsnek","message":"i'd definitely take private symbols over both","date":"2019-01-08T18:55:27.763Z","type":"message"}
{"nick":"cloudshu","message":"devsnek: and we might very well disagree on the understandability of those different edge cases. i don't think the private fields edge cases are so bad, for instance","date":"2019-01-08T18:55:32.894Z","type":"message"}
{"nick":"bradleymeck","message":"so if you were to setsPrivateField.call({}) it would install private fields on {} which is undesirable for preventing problems","date":"2019-01-08T18:55:39.448Z","type":"message"}
{"nick":"devsnek","message":"but i think all three are good in their own ways","date":"2019-01-08T18:55:44.264Z","type":"message"}
{"nick":"bradleymeck","message":"private fields aren't private in the same way as private symbols due to the checks for the fields","date":"2019-01-08T18:56:33.112Z","type":"message"}
{"nick":"devsnek","message":"if private symbols were a thing why wouldn't `hasOwnProperty` work","date":"2019-01-08T18:56:43.363Z","type":"message"}
{"nick":"devsnek","message":"or `in`","date":"2019-01-08T18:56:48.567Z","type":"message"}
{"nick":"bradleymeck","message":"because you don't want them to be detectable, and `in` already has a meaning, overloading it won't do checks in a way that allows us to ensure that a value already has the private field","date":"2019-01-08T18:57:35.547Z","type":"message"}
{"nick":"devsnek","message":"maybe i'm understanding what private symbols would be","date":"2019-01-08T18:58:27.791Z","type":"message"}
{"nick":"devsnek","message":"i'm currently thinking of them as what v8 currently has","date":"2019-01-08T18:58:33.954Z","type":"message"}
{"nick":"bradleymeck","message":"the way to move this kind of stuff forward I likely to stop trying to make them act like regular props","date":"2019-01-08T18:58:36.950Z","type":"message"}
{"nick":"devsnek","message":"with %CreatePrivateSymbol","date":"2019-01-08T18:58:45.354Z","type":"message"}
{"nick":"bradleymeck","message":"yup, there have been objections to that approach due to leakage concerns in the past","date":"2019-01-08T18:59:08.848Z","type":"message"}
{"nick":"devsnek","message":"if they act like that all the existing semantics would work pretty well","date":"2019-01-08T18:59:30.722Z","type":"message"}
{"nick":"bradleymeck","message":"the existing semantics are exactly what leak","date":"2019-01-08T19:00:18.981Z","type":"message"}
{"nick":"devsnek","message":"how do they leak, you can't tell if a private symbol even exists unless you have a reference to it","date":"2019-01-08T19:00:34.738Z","type":"message"}
{"nick":"bradleymeck","message":"p = new PrivateSymbol(); function danger(a) { if (a[p]) { /*do the thing*/ } }; function update(a) {a[p]++;};","date":"2019-01-08T19:01:46.996Z","type":"message"}
{"nick":"bradleymeck","message":"weakmaps have a similar problem and private fields had to make changes to avoid the leakage","date":"2019-01-08T19:02:03.253Z","type":"message"}
{"nick":"devsnek","message":"i don't understand where leakage happened in your example","date":"2019-01-08T19:02:15.486Z","type":"message"}
{"nick":"bradleymeck","message":"if you do assignments when things don't exist you mark them as existing","date":"2019-01-08T19:02:25.113Z","type":"message"}
{"nick":"devsnek","message":"don't create them if they don't exist","date":"2019-01-08T19:02:42.619Z","type":"message"}
{"nick":"bradleymeck","message":"and that means you can't do brand checks safely using simple assignments, you start having to fall back to weakmaps to have it be safe, and doing so requires lots of .has checks","date":"2019-01-08T19:03:04.185Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: exactly, that syntax usage of just adding them even if they don't exist is the problem","date":"2019-01-08T19:03:24.067Z","type":"message"}
{"nick":"devsnek","message":"in chrome they did the brand check with `if (hasOwnProperty(obj, private)) {}`","date":"2019-01-08T19:03:43.492Z","type":"message"}
{"nick":"bradleymeck","message":"you need some explicit initialization instead of simple assignment","date":"2019-01-08T19:03:50.189Z","type":"message"}
{"nick":"devsnek","message":"yeah you need to add them","date":"2019-01-08T19:04:00.210Z","type":"message"}
{"nick":"devsnek","message":"they don't just magically exist","date":"2019-01-08T19:04:08.836Z","type":"message"}
{"nick":"bradleymeck","message":"thats what we don't want as the default behavior leads to boilerplate and requires programmer vigilance to opt out of unsafe behavior instead of opting into unsafe behavior","date":"2019-01-08T19:04:36.627Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: yup, but the problem is in if the default behavior is problematic, which if it doesn't include that check it can be","date":"2019-01-08T19:05:11.769Z","type":"message"}
{"nick":"devsnek","message":"https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/streams/ReadableStream.js?l=685","date":"2019-01-08T19:05:23.074Z","type":"message"}
{"nick":"bradleymeck","message":"I know how they use them, but we are trying to have the defaults remain encapsulated, which private symbols in v8 do not default to","date":"2019-01-08T19:05:56.130Z","type":"message"}
{"nick":"bradleymeck","message":"they require quite a bit of care to use safely still with the field checks","date":"2019-01-08T19:06:09.839Z","type":"message"}
{"nick":"devsnek","message":"i still am missing how encapsulation is broken","date":"2019-01-08T19:06:54.651Z","type":"message"}
{"nick":"bradleymeck","message":"hence why adopting them isn't desirable to several people, if they didn't require such care to use properly it likely wouldn't be an issue","date":"2019-01-08T19:06:55.585Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: they require an external check to safely use. on their own, they do not present a safely encapsulated set of operations","date":"2019-01-08T19:07:34.789Z","type":"message"}
{"nick":"devsnek","message":"you mean brand checking","date":"2019-01-08T19:07:44.144Z","type":"message"}
{"nick":"devsnek","message":"like `if (obj[x]) {}` doesn't throw if `x` doesn't exist","date":"2019-01-08T19:08:08.192Z","type":"message"}
{"nick":"devsnek","message":"doesn't exist on obj*","date":"2019-01-08T19:08:15.585Z","type":"message"}
{"nick":"bradleymeck","message":"in this example, yes, the initialization of the field is overloaded also as the assignment to the field","date":"2019-01-08T19:08:15.678Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: it does for private fields","date":"2019-01-08T19:08:24.526Z","type":"message"}
{"nick":"bradleymeck","message":"because of this kind of problem","date":"2019-01-08T19:08:32.113Z","type":"message"}
{"nick":"cloudshu","message":"bradleymeck: agree, i now think the present disagreement is just very fundamental -- whether airtight per-instance privacy should be a first-class position that JS expresses, as a language. and that it is rather impossible to compose that with property semantics well, certainly at a metaobject protocol level. so those who believe it is not an important position, then all of this is needless complexity. and there're also many","date":"2019-01-08T19:09:08.330Z","type":"message"}
{"nick":"cloudshu","message":"folks who very strongly believe (myself included) that JS should definitely express this position","date":"2019-01-08T19:09:08.479Z","type":"message"}
{"nick":"devsnek","message":"like i get that brand checks are useful and important, i don't get why they're connected to private data","date":"2019-01-08T19:09:38.645Z","type":"message"}
{"nick":"devsnek","message":"and i'm not saying the current stage 3 proposal is bad, i'm fine with the semantics and have used them a bunch","date":"2019-01-08T19:10:29.925Z","type":"message"}
{"nick":"bradleymeck","message":"private data that can be forged onto objects passed in from userland is the problem, that means that userland can make objects look like they came from privileged code that only expected objects that it explicitly listed to have the initialized private fields it uses. class.initialize is an explicit initialization as is the constructor operations for classes.","date":"2019-01-08T19:12:59.484Z","type":"message"}
{"nick":"Bakkot","message":"i actually have much more of a problem with _partially_ forging them than forging them all at once in the constructor, which are kinda distinct cases","date":"2019-01-08T19:13:37.436Z","type":"message"}
{"nick":"Bakkot","message":"in related news, I think I want to bring Object.freezePrototype before the committee this meting","date":"2019-01-08T19:13:51.017Z","type":"message"}
{"nick":"Bakkot","message":"should get that ready","date":"2019-01-08T19:13:54.025Z","type":"message"}
{"nick":"bradleymeck","message":"cloudshu: so you aren't for per-instance privacy?","date":"2019-01-08T19:14:34.281Z","type":"message"}
{"nick":"cloudshu","message":"bradleymeck: no, i'm very much for per-instance privacy","date":"2019-01-08T19:14:46.260Z","type":"message"}
{"nick":"bradleymeck","message":"oh","date":"2019-01-08T19:14:50.087Z","type":"message"}
{"nick":"bradleymeck","message":"i misunderstood","date":"2019-01-08T19:14:53.937Z","type":"message"}
{"nick":"cloudshu","message":"bradleymeck: i'm very much for the status quo","date":"2019-01-08T19:15:09.073Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: like `x = Object.create(objWithPrivateProp); x.wellKnownMethod = ...`?","date":"2019-01-08T19:15:11.092Z","type":"message"}
{"nick":"cloudshu","message":"of the current proposals","date":"2019-01-08T19:15:13.429Z","type":"message"}
{"nick":"cloudshu","message":"Bakkot: what does freezePrototype do?","date":"2019-01-08T19:15:31.837Z","type":"message"}
{"nick":"bradleymeck","message":"stops .setPrototypeOf probably","date":"2019-01-08T19:16:19.755Z","type":"message"}
{"nick":"bradleymeck","message":"since only seal/freeze can do that right now","date":"2019-01-08T19:16:27.700Z","type":"message"}
{"nick":"cloudshu","message":"ah, so you get the prototype part without at least preventExtensions","date":"2019-01-08T19:16:43.221Z","type":"message"}
{"nick":"cloudshu","message":"sgtm","date":"2019-01-08T19:16:44.380Z","type":"message"}
{"nick":"Bakkot","message":"yeah, that","date":"2019-01-08T19:17:36.289Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: if you expect to have the actual object you can `hasOwnProperty` instead of `in`","date":"2019-01-08T19:19:54.030Z","type":"message"}
{"nick":"devsnek","message":"just like they do in chrome...","date":"2019-01-08T19:20:05.163Z","type":"message"}
{"nick":"bradleymeck","message":"still leaves the default usage via assignment as problematic","date":"2019-01-08T19:20:32.244Z","type":"message"}
{"nick":"devsnek","message":"you mean how you have to explicitly add the symbol to objects?","date":"2019-01-08T19:20:57.753Z","type":"message"}
{"nick":"bradleymeck","message":"you have to perform the check prior to all assignments","date":"2019-01-08T19:21:26.894Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2019-01-08T19:21:49.268Z","type":"message"}
{"nick":"devsnek","message":"well not every assignment","date":"2019-01-08T19:22:04.190Z","type":"message"}
{"nick":"devsnek","message":"just when you get an object from the outside world","date":"2019-01-08T19:22:09.661Z","type":"message"}
{"nick":"bradleymeck","message":"if even mark complains about not being able to feel safe about manually doing all those checks i think its a hard sell","date":"2019-01-08T19:22:14.269Z","type":"message"}
{"nick":"devsnek","message":"i don't understand why it's part of the sell","date":"2019-01-08T19:22:37.916Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: everytime you interact, if you pass an object to the outside it could still add your private symbol to something that came from inside your code","date":"2019-01-08T19:23:06.506Z","type":"message"}
{"nick":"devsnek","message":"you can accidentally add properties to anything","date":"2019-01-08T19:23:35.546Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: it isn't a selling point, it is a problem with not doing the check automatically","date":"2019-01-08T19:23:36.142Z","type":"message"}
{"nick":"Bakkot","message":"(and not the other symbols, leaving you only partially an instane!)","date":"2019-01-08T19:23:37.240Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: delicious partial instantiation is doable in all sorts of cases ;p","date":"2019-01-08T19:24:03.841Z","type":"message"}
{"nick":"devsnek","message":"partial state feels out of scope of private data imo","date":"2019-01-08T19:24:27.378Z","type":"message"}
{"nick":"Bakkot","message":"doable but usually not acidentally!","date":"2019-01-08T19:24:36.741Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: I think it's in scope: the point of private data is encapsulation. the point of encapsulation is making it easy to reason about the behavior of your code and its interactions with the rest of the world. \"this thing is only partially an instance\" is generally not a case anyone is going to even remember as a possibility, much less reason about correctly","date":"2019-01-08T19:25:46.642Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: it is all related to what ways a programmer can find to weasel out of expectations","date":"2019-01-08T19:26:05.171Z","type":"message"}
{"nick":"devsnek","message":"you can make getData and setData functions to enforce your invariants about accidental property creation","date":"2019-01-08T19:26:35.633Z","type":"message"}
{"nick":"bradleymeck","message":"some things aren't problematic, others are depending on how likely it could be done accidentally and how much boilerplate needs to be performed to avoid it","date":"2019-01-08T19:26:37.404Z","type":"message"}
{"nick":"devsnek","message":"you'll probably need them for regular properties too","date":"2019-01-08T19:26:41.788Z","type":"message"}
{"nick":"devsnek","message":"since you can accidentally create those as well","date":"2019-01-08T19:26:57.333Z","type":"message"}
{"nick":"Bakkot","message":"if you're always going to need them to reason about your code, they should just be given to you by the language","date":"2019-01-08T19:27:21.987Z","type":"message"}
{"nick":"devsnek","message":"i don't think you do always need them","date":"2019-01-08T19:27:30.452Z","type":"message"}
{"nick":"devsnek","message":"that's my point","date":"2019-01-08T19:27:36.736Z","type":"message"}
{"nick":"Bakkot","message":"s/always/typically/","date":"2019-01-08T19:27:37.994Z","type":"message"}
{"nick":"bradleymeck","message":"its pretty high near always if your fn is reachable via jargon like Function.prototype.call","date":"2019-01-08T19:28:00.581Z","type":"message"}
{"nick":"Bakkot","message":"if someone is not thinking about the case, is it more likely that they do or do not need them? I think it is far, far more likely that they do need them","date":"2019-01-08T19:28:03.688Z","type":"message"}
{"nick":"devsnek","message":"i feel like the need of branding is over-represented","date":"2019-01-08T19:28:33.248Z","type":"message"}
{"nick":"devsnek","message":"the only times i've ever used strict branding like this (and the only examples people give me) are implementing polyfills of builtins","date":"2019-01-08T19:29:14.141Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: the only case it's not particularly useful is when you're developing code which is only for yourself.","date":"2019-01-08T19:29:57.585Z","type":"message"}
{"nick":"devsnek","message":"i don't yet believe that the average code needs strict brand checks","date":"2019-01-08T19:30:52.864Z","type":"message"}
{"nick":"devsnek","message":"and even engine builtins don't need them (in node we barely do checks, at most instanceof)","date":"2019-01-08T19:31:15.258Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: in node we have tons of problems due to not locking down core","date":"2019-01-08T19:31:59.869Z","type":"message"}
{"nick":"Bakkot","message":"web platform apis are all very heavily brand checked; not sure what you mean","date":"2019-01-08T19:32:18.473Z","type":"message"}
{"nick":"bradleymeck","message":"want to sniff all those auth headers people are sending? just modify OutgoingMessage!","date":"2019-01-08T19:32:27.823Z","type":"message"}
{"nick":"devsnek","message":"yes web platform apis","date":"2019-01-08T19:32:28.065Z","type":"message"}
{"nick":"devsnek","message":"like i said above, polyfilling/implementing web platform apis","date":"2019-01-08T19:32:37.536Z","type":"message"}
{"nick":"devsnek","message":"that's definitely not a majority of users","date":"2019-01-08T19:32:44.026Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: even if it is just node core locking down it would be nice, as right now we can't even do package isolation of tons of core since it has tons of mutable prototypes that we call instead of the original fns","date":"2019-01-08T19:33:28.633Z","type":"message"}
{"nick":"devsnek","message":"i don't necessarily agree that it is a problem","date":"2019-01-08T19:34:09.884Z","type":"message"}
{"nick":"devsnek","message":"my opinion of untrusted code continues to be \"don't run it\"","date":"2019-01-08T19:35:08.140Z","type":"message"}
{"nick":"bradleymeck","message":"you can disagree, but my concerns remain. lack of concern on your part does not mean mine should remain unaddressed, if you have concerns with the consequences of addressing my concerns that seems like something we could work on, but as it stands i don't see a reason to drop my concerns","date":"2019-01-08T19:35:30.530Z","type":"message"}
{"nick":"devsnek","message":"but if your concerns tie me down its the same problem","date":"2019-01-08T19:36:34.469Z","type":"message"}
{"nick":"bradleymeck","message":"the point of a lot of work is to make it so that you can form an opinion on if code can be trusted","date":"2019-01-08T19:36:36.454Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: what are they preventing?","date":"2019-01-08T19:36:53.617Z","type":"message"}
{"nick":"bradleymeck","message":"you have been talking about a specific solution that goes against my concerns of safety, if you can alter your solution, that seems fine.","date":"2019-01-08T19:37:30.857Z","type":"message"}
{"nick":"devsnek","message":"for example locking private data to class syntax","date":"2019-01-08T19:38:05.238Z","type":"message"}
{"nick":"bradleymeck","message":"i'd love it to be outside of classes","date":"2019-01-08T19:38:19.204Z","type":"message"}
{"nick":"bradleymeck","message":"i even have emailed people about `private #foo;`","date":"2019-01-08T19:38:31.047Z","type":"message"}
{"nick":"bradleymeck","message":"nothing about the concerns over branding, partial initialization, etc. are being tied to class syntax","date":"2019-01-08T19:39:10.555Z","type":"message"}
{"nick":"bradleymeck","message":"it is just the first place that got syntax for this stuff","date":"2019-01-08T19:39:29.315Z","type":"message"}
{"nick":"bradleymeck","message":"class syntax has some nice thigns about the lifecycle of constructing instances that give it an explicit initalization point for private fields that gets around the branding and partial init problems","date":"2019-01-08T19:40:36.785Z","type":"message"}
{"nick":"bradleymeck","message":"in theory if we make real refs for the field key you could also put the fields in object literals, since they also have an explicit point of init for branding, but there are some things about order of ops that would probably need to be discussed to avoid partial init.","date":"2019-01-08T19:42:16.335Z","type":"message"}
{"nick":"bradleymeck","message":"an explicit initialization op like `private.init(o, #foo);` could be an interesting way to get around brand checking in a dynamic thing, where this operation would only be done when you are initially adding the field (semantics could have bikehshedding). However idk a good solution to partial init that Bakkot has concerns with","date":"2019-01-08T19:46:55.505Z","type":"message"}
{"nick":"bradleymeck","message":"could initialize multiple at once maybe?","date":"2019-01-08T19:47:28.155Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: idk if these thoughts have any affect for class.initialize but just some minor thoughts on if it would be problematic outside of classes would be interesting","date":"2019-01-08T19:49:00.764Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: my general understanding of js is that it's designed to be looseish by default","date":"2019-01-08T19:51:01.662Z","type":"message"}
{"nick":"bradleymeck","message":"its far less loose than tons of languages","date":"2019-01-08T19:51:25.119Z","type":"message"}
{"nick":"bradleymeck","message":"lack of reflection on scopes is a big one","date":"2019-01-08T19:51:38.813Z","type":"message"}
{"nick":"devsnek","message":"I'd say it's loose where it can be, I don't think it's usually sought out as explicit features like that","date":"2019-01-08T19:52:36.945Z","type":"message"}
{"nick":"devsnek","message":"branding isn't broken by having looser rules about private data","date":"2019-01-08T19:53:07.039Z","type":"message"}
{"nick":"devsnek","message":"it just becomes the person who wants branding's job to brand it as they want","date":"2019-01-08T19:53:22.651Z","type":"message"}
{"nick":"bradleymeck","message":"branding UX is broken since it defaults to problematic behavior","date":"2019-01-08T19:53:33.485Z","type":"message"}
{"nick":"bradleymeck","message":"it is my point that the default of private behavior must not require programmer vigilance and boilerplate to be used correctly","date":"2019-01-08T19:54:25.661Z","type":"message"}
{"nick":"devsnek","message":"I think we have different definitions of correctly then","date":"2019-01-08T19:54:43.080Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2019-01-08T19:56:40.447Z","type":"quit"}
{"nick":"akirose","date":"2019-01-08T19:56:57.490Z","type":"join"}
{"nick":"bradleymeck","message":"I don't see much difference in usability with WeakMaps if the checks are required everywhere, you still need to use boilerplate to properly avoid the concerns we have listed above","date":"2019-01-08T19:58:14.590Z","type":"message"}
{"nick":"bradleymeck","message":"those concerns are not removed by a desire for looser behavior in order to achieve a specific syntax","date":"2019-01-08T19:58:39.741Z","type":"message"}
{"nick":"bradleymeck","message":"if you could figure out how to avoid those problems and keep your syntax desires that seems fine","date":"2019-01-08T20:00:05.189Z","type":"message"}
{"nick":"bradleymeck","message":"adding an explicit init step (some fn or otherwise) mostly avoids the brand checking concern, but i don't have a good suggestion related to partial init","date":"2019-01-08T20:00:41.472Z","type":"message"}
{"nick":"bradleymeck","message":"that would mean instead of having hasOwnProperty/in checks everywhere you would just perform the init when first giving and object private data","date":"2019-01-08T20:01:18.736Z","type":"message"}
{"nick":"bradleymeck","message":"an*","date":"2019-01-08T20:01:23.018Z","type":"message"}
{"nick":"littledan","message":"Yes, I have also chatted with people about private declarations outside of classes, and encouraged the committee to find a champion. Ultimately, I think we chose the right syntax for field declarations, though. It would be really annoying to type private all the time in the common case","date":"2019-01-08T20:09:38.554Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: I think #id is enough as long as we keep these \"references\" well understood","date":"2019-01-08T20:11:37.672Z","type":"message"}
{"nick":"bradleymeck","message":"`{ private #id; (o) => o.#id }` seems sane to me where #id is kept contained within a lexical scope","date":"2019-01-08T20:13:10.876Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: the problem is, what does `{ private #id; class A { #id } }` mean?","date":"2019-01-08T20:16:11.380Z","type":"message"}
{"nick":"littledan","message":"Sure, that seems fine","date":"2019-01-08T20:16:13.736Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: shadowed","date":"2019-01-08T20:16:22.744Z","type":"message"}
{"nick":"bradleymeck","message":"same as other identifiers to my mind","date":"2019-01-08T20:16:36.364Z","type":"message"}
{"nick":"littledan","message":"The tricky point is, when exactly is a new private declaration introduced, and when are you referring to an outer one","date":"2019-01-08T20:16:39.341Z","type":"message"}
{"nick":"littledan","message":"There are many different designs possible","date":"2019-01-08T20:16:46.510Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: not sure i understand, how does this differ from other identifier shadowing?","date":"2019-01-08T20:17:33.485Z","type":"message"}
{"nick":"littledan","message":"Also, if we use private to indicate introducing a new name, we can't use it in contrast to protected (as many people expect)","date":"2019-01-08T20:18:15.689Z","type":"message"}
{"nick":"bradleymeck","message":".#foo is a dynamic lookup to w/e the key #foo is anyway instead of some literal like a string named property","date":"2019-01-08T20:18:20.265Z","type":"message"}
{"nick":"littledan","message":"One tricky case is, does an object literals introduce a new private scope or refer to the outer one?","date":"2019-01-08T20:18:41.812Z","type":"message"}
{"nick":"littledan","message":"Another is, how should a class field declaration refer to an outer declared name?","date":"2019-01-08T20:19:02.168Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: are there people trying to push protected through? to my knowledge no one is trying to make the protected keyword do anything currently","date":"2019-01-08T20:19:07.710Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: a lot of the value in private #id declarations is in allowing two classes to share access to a private field without nesting which would not work without shadowing","date":"2019-01-08T20:19:12.225Z","type":"message"}
{"nick":"Bakkot","message":"sorry, would not work with shadowing","date":"2019-01-08T20:19:23.487Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: how so?","date":"2019-01-08T20:19:40.259Z","type":"message"}
{"nick":"littledan","message":"It's not that there is no answer to these questions, but there are many answers and someone would have to champion figuring out which is best","date":"2019-01-08T20:19:43.814Z","type":"message"}
{"nick":"littledan","message":"Many community people miss protected, and the decorators story doesn't satisfy them","date":"2019-01-08T20:20:06.538Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: `{ private #id; class A { #id = 0; } let reflect = obj => obj.#id; reflect(new A); }` seems useful, but if the second `#id` shadows the first, that doesn't work; there's no way to write the `reflect` function except to put it in the class body","date":"2019-01-08T20:21:02.146Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-01-08T20:21:35.177Z","type":"quit"}
{"nick":"bradleymeck","message":"Bakkot: [#id] = 0; given precedent with Symbols seems pertinent","date":"2019-01-08T20:23:56.704Z","type":"message"}
{"nick":"bradleymeck","message":"though you could argue that it might not be needed that these work using fields syntax as well, and you just use the constructor","date":"2019-01-08T20:24:28.577Z","type":"message"}
{"nick":"bradleymeck","message":"though cross module sharing is a big concern for me","date":"2019-01-08T20:29:41.304Z","type":"message"}
{"nick":"bradleymeck","message":"cause exposing reflection fns is diff from giving direct refs to the fields","date":"2019-01-08T20:29:59.109Z","type":"message"}
{"nick":"keith_mi_","date":"2019-01-08T21:10:02.600Z","type":"join"}
{"nick":"jorydotcom","reason":"Ping timeout: 258 seconds","date":"2019-01-08T21:35:57.084Z","type":"quit"}
{"nick":"aki_","date":"2019-01-08T22:04:24.251Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-01-08T22:04:47.984Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-08T22:04:48.283Z","type":"nick"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-01-08T22:17:21.110Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-08T22:24:38.027Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-08T23:08:14.109Z","type":"quit"}
