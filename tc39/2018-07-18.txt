{"nick":"gibson042","date":"2018-07-18T02:31:19.751Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 265 seconds","date":"2018-07-18T03:16:37.351Z","type":"quit"}
{"nick":"stpeter","date":"2018-07-18T04:05:42.050Z","type":"join"}
{"nick":"stpeter","reason":"Client Quit","date":"2018-07-18T04:06:17.911Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-07-18T04:25:34.676Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-07-18T05:01:48.688Z","type":"quit"}
{"nick":"AtumT","reason":"Ping timeout: 256 seconds","date":"2018-07-18T05:03:25.410Z","type":"quit"}
{"nick":"shachaf_","date":"2018-07-18T05:11:26.425Z","type":"join"}
{"nick":"shachaf","reason":"*.net *.split","date":"2018-07-18T05:16:32.477Z","type":"quit"}
{"nick":"bradleymeck","reason":"*.net *.split","date":"2018-07-18T05:16:33.483Z","type":"quit"}
{"nick":"gajus","reason":"*.net *.split","date":"2018-07-18T05:16:33.639Z","type":"quit"}
{"nick":"Wizek","reason":"*.net *.split","date":"2018-07-18T05:16:33.794Z","type":"quit"}
{"nick":"d_run","reason":"*.net *.split","date":"2018-07-18T05:16:34.155Z","type":"quit"}
{"nick":"mathiasbynens","reason":"*.net *.split","date":"2018-07-18T05:16:34.366Z","type":"quit"}
{"nick":"JaseW","reason":"*.net *.split","date":"2018-07-18T05:16:34.528Z","type":"quit"}
{"nick":"mmun","reason":"*.net *.split","date":"2018-07-18T05:16:34.720Z","type":"quit"}
{"nick":"kosamari","reason":"*.net *.split","date":"2018-07-18T05:16:34.887Z","type":"quit"}
{"nick":"maggie_","reason":"*.net *.split","date":"2018-07-18T05:16:35.064Z","type":"quit"}
{"nick":"littledan","reason":"*.net *.split","date":"2018-07-18T05:16:35.220Z","type":"quit"}
{"nick":"Domenic","reason":"*.net *.split","date":"2018-07-18T05:16:35.220Z","type":"quit"}
{"nick":"vikash-afk","reason":"Ping timeout: 260 seconds","date":"2018-07-18T05:18:59.707Z","type":"quit"}
{"nick":"shachaf_","new_nick":"shachaf","date":"2018-07-18T05:19:58.198Z","type":"nick"}
{"nick":"vikash-afk","date":"2018-07-18T05:23:29.781Z","type":"join"}
{"nick":"gajus","date":"2018-07-18T05:35:17.046Z","type":"join"}
{"nick":"bradleymeck","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"Wizek","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"d_run","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"mathiasbynens","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"JaseW","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"mmun","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"kosamari","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"maggie_","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"Domenic","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"littledan","date":"2018-07-18T05:35:17.240Z","type":"join"}
{"nick":"Wizek","reason":"Max SendQ exceeded","date":"2018-07-18T05:36:22.734Z","type":"quit"}
{"nick":"Wizek","date":"2018-07-18T05:38:38.770Z","type":"join"}
{"nick":"howdoi","date":"2018-07-18T06:22:22.522Z","type":"join"}
{"nick":"akoserwa|lunch","date":"2018-07-18T08:09:02.846Z","type":"join"}
{"nick":"littledan","message":"eval is a sandwich: filled with savory code execution, with parsing, compilation and deoptimization as the bread","date":"2018-07-18T09:51:53.723Z","type":"message"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-07-18T10:25:40.409Z","type":"quit"}
{"nick":"mylesborins","date":"2018-07-18T10:25:49.816Z","type":"join"}
{"nick":"akoserwa_","date":"2018-07-18T10:33:07.327Z","type":"join"}
{"nick":"akoserwa|lunch","reason":"Ping timeout: 276 seconds","date":"2018-07-18T10:36:14.797Z","type":"quit"}
{"nick":"akoserwa__","date":"2018-07-18T10:53:03.454Z","type":"join"}
{"nick":"akoserwa_","reason":"Ping timeout: 240 seconds","date":"2018-07-18T10:55:21.322Z","type":"quit"}
{"nick":"ebryn","reason":"Quit: Connection closed for inactivity","date":"2018-07-18T11:03:03.241Z","type":"quit"}
{"nick":"jmdyck","date":"2018-07-18T11:39:51.064Z","type":"join"}
{"nick":"IgnoredAmbience","message":"In this case, I'm amazed we'd never noticed that it wasn't working in some circumstances.","date":"2018-07-18T13:42:41.624Z","type":"message"}
{"nick":"IgnoredAmbience","message":"Might be a test262 coverage hole, I should look into that","date":"2018-07-18T13:43:33.079Z","type":"message"}
{"nick":"IgnoredAmbience","message":"A quick grep leaves me unable to find any instances of eval.call(), bind() or apply()","date":"2018-07-18T13:50:05.660Z","type":"message"}
{"nick":"IgnoredAmbience","message":"For some odd reason we'd not actually populated the [[Call]] slot of our eval, but had special-cased it through the call syntax","date":"2018-07-18T13:50:48.865Z","type":"message"}
{"nick":"gsnedders|ooo","date":"2018-07-18T13:51:56.478Z","type":"join"}
{"nick":"IgnoredAmbience","message":"*only special-cased it","date":"2018-07-18T13:53:03.141Z","type":"message"}
{"nick":"gsnedders|ooo","message":"[[OwnPropertyKeys]]() on the built-in objects has a defined enumeration order, but EnumerableOwnPropertyNames just matches the order of EnumerateObjectProperties which has it undefined. I thought Object.keys() for example had a defined order, but this would imply it doesn't?","date":"2018-07-18T13:56:49.472Z","type":"message"}
{"nick":"IgnoredAmbience","message":"It follows the ES5-era for-in enumeration order. Implementations were different enough that the spec had to be loose.","date":"2018-07-18T13:59:21.790Z","type":"message"}
{"nick":"gsnedders|ooo","message":"Right; I thought that it had converged at this point, and been spec'd?","date":"2018-07-18T14:00:50.005Z","type":"message"}
{"nick":"IgnoredAmbience","message":"It is still specced loosely in EnumerateObjectProperties","date":"2018-07-18T14:01:09.540Z","type":"message"}
{"nick":"gsnedders|ooo","message":"Does the order defined for built-ins in the various [[OwnPropertyKeys]]() definitions get exposed anywhere?","date":"2018-07-18T14:01:50.554Z","type":"message"}
{"nick":"IgnoredAmbience","message":"Likely in any newer standard library additions, Object.getOwnPropertyDescriptors is one that I've just found","date":"2018-07-18T14:04:03.585Z","type":"message"}
{"nick":"gsnedders|ooo","message":"I guess Object.assign can expose it if a getter throws","date":"2018-07-18T14:04:05.598Z","type":"message"}
{"nick":"IgnoredAmbience","message":"And Reflect.ownKeys","date":"2018-07-18T14:04:22.511Z","type":"message"}
{"nick":"IgnoredAmbience","message":"It also seems that Object.getOwnPropertyNames had its iteration order defined between ES5 and now","date":"2018-07-18T14:07:18.414Z","type":"message"}
{"nick":"gsnedders|ooo","message":"Object.defineProperties() too","date":"2018-07-18T14:07:57.843Z","type":"message"}
{"nick":"gsnedders|ooo","action":"has scarcely looked at the spec since ES5 days","date":"2018-07-18T14:08:05.812Z","type":"action"}
{"nick":"IgnoredAmbience","message":"I'm still playing catch-up to be honest","date":"2018-07-18T14:08:20.531Z","type":"message"}
{"nick":"gsnedders|ooo","message":"Turns out not working on a JS VM any more meant I stopped looking :)","date":"2018-07-18T14:08:29.184Z","type":"message"}
{"nick":"IgnoredAmbience","message":"I'm now at a point where I'm familiar with how Proxies have been integrated to the language","date":"2018-07-18T14:08:51.950Z","type":"message"}
{"nick":"IgnoredAmbience","message":"And the various changes that were made to allow for it","date":"2018-07-18T14:09:17.721Z","type":"message"}
{"nick":"gsnedders|ooo","message":"Yeah, I've not got used to that yet :)","date":"2018-07-18T14:09:30.676Z","type":"message"}
{"nick":"gsnedders|ooo","action":"wonders if test262 has tests for order for these","date":"2018-07-18T14:11:30.956Z","type":"action"}
{"nick":"stpeter","date":"2018-07-18T14:22:03.355Z","type":"join"}
{"nick":"stpeter","reason":"Quit: stpeter","date":"2018-07-18T14:27:38.307Z","type":"quit"}
{"nick":"stpeter","date":"2018-07-18T14:46:38.356Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-07-18T14:51:19.400Z","type":"quit"}
{"nick":"devsnek","message":"what if we wrote a es2018 engine in JavaScript","date":"2018-07-18T14:59:54.942Z","type":"message"}
{"nick":"bradleymeck","message":"it would... be difficult","date":"2018-07-18T15:01:56.214Z","type":"message"}
{"nick":"devsnek","message":"that's where the fun is","date":"2018-07-18T15:02:32.196Z","type":"message"}
{"nick":"jmdyck","message":"There's Narcissus: https://github.com/mozilla/narcissus/","date":"2018-07-18T15:43:13.788Z","type":"message"}
{"nick":"jmdyck","message":"i.e., might be easier to upgrade that to es2018 than start from scratch","date":"2018-07-18T15:44:24.012Z","type":"message"}
{"nick":"gsnedders|ooo","message":"AFAIK, it doesn't implement all of ES5","date":"2018-07-18T15:44:39.280Z","type":"message"}
{"nick":"jmdyck","message":"yup, looks like it's es3 + some harmony stuff: https://github.com/mozilla/narcissus/wiki/Narcissus-internals","date":"2018-07-18T15:47:58.675Z","type":"message"}
{"nick":"gsnedders|ooo","message":"so what's the status specing enumeration order for forâ€¦in? how much non-interop stuff is left? is it just array properties in SM differing from everything else? is there anything else left?","date":"2018-07-18T15:50:34.236Z","type":"message"}
{"nick":"devsnek","message":"oooooo thats cool","date":"2018-07-18T15:58:34.558Z","type":"message"}
{"nick":"devsnek","message":"doesn't look like it got \"rapidly revived\"","date":"2018-07-18T15:58:51.366Z","type":"message"}
