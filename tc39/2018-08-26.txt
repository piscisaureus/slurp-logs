{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-08-26T00:00:31.553Z","type":"quit"}
{"nick":"gibson042","date":"2018-08-26T00:12:02.714Z","type":"join"}
{"nick":"annevk","reason":"Remote host closed the connection","date":"2018-08-26T00:49:34.310Z","type":"quit"}
{"nick":"linclark","reason":"Remote host closed the connection","date":"2018-08-26T00:49:34.500Z","type":"quit"}
{"nick":"zbraniecki","reason":"Remote host closed the connection","date":"2018-08-26T00:49:34.501Z","type":"quit"}
{"nick":"aki_","date":"2018-08-26T01:17:48.359Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-08-26T01:18:46.881Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-26T01:18:47.327Z","type":"nick"}
{"nick":"devsnek","message":"does it bother anyone else that there's this inconsistency in having \"Own\" in the names of object internal slots","date":"2018-08-26T01:46:56.289Z","type":"message"}
{"nick":"devsnek","message":"and that its inverted for the names exposed on Object","date":"2018-08-26T01:47:03.702Z","type":"message"}
{"nick":"zbraniecki","date":"2018-08-26T02:38:28.040Z","type":"join"}
{"nick":"zbraniecki","reason":"Remote host closed the connection","date":"2018-08-26T02:45:21.010Z","type":"quit"}
{"nick":"aki_","date":"2018-08-26T03:23:01.769Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2018-08-26T03:24:22.361Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-26T03:24:22.751Z","type":"nick"}
{"nick":"annevk","date":"2018-08-26T03:32:07.774Z","type":"join"}
{"nick":"zbraniecki","date":"2018-08-26T03:49:04.350Z","type":"join"}
{"nick":"linclark","date":"2018-08-26T03:52:26.441Z","type":"join"}
{"nick":"tschneidereit","date":"2018-08-26T03:56:06.474Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-08-26T04:36:08.210Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 264 seconds","date":"2018-08-26T04:36:30.699Z","type":"quit"}
{"nick":"ljharb","message":"devsnek: yes","date":"2018-08-26T04:39:21.392Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i'm suggesting that it start out as an accessor descriptor with a getter of %ThrowTypeError%","date":"2018-08-26T04:39:33.645Z","type":"message"}
{"nick":"devsnek","message":"oh","date":"2018-08-26T04:39:50.655Z","type":"message"}
{"nick":"ljharb","message":"and then later it would change to a data property, once it was out of tdz","date":"2018-08-26T04:39:51.859Z","type":"message"}
{"nick":"devsnek","message":"that sounds hecky","date":"2018-08-26T04:39:57.073Z","type":"message"}
{"nick":"ljharb","message":"or, we could make a special kind of descriptor that's \"everything but get/set/value\"","date":"2018-08-26T04:40:04.659Z","type":"message"}
{"nick":"ljharb","message":"and *that* wouldn't be TDZ'd","date":"2018-08-26T04:40:09.892Z","type":"message"}
{"nick":"devsnek","message":"decisions like this remind me of the existence of double-equals","date":"2018-08-26T04:40:50.430Z","type":"message"}
{"nick":"devsnek","message":"although i'll be honest i was considering a new primitive \"empty\" type :P","date":"2018-08-26T04:41:14.402Z","type":"message"}
{"nick":"devsnek","message":"i think a better thing might be to take a look at the general property logic we have going on in the spec rn","date":"2018-08-26T04:43:00.444Z","type":"message"}
{"nick":"Bakkot","message":"the problem with that plan is that you can actually reify the accessor functions, which is :(","date":"2018-08-26T04:52:14.379Z","type":"message"}
{"nick":"Bakkot","message":"(cf https://github.com/tc39/ecma262/issues/1209#issuecomment-392910280 )","date":"2018-08-26T04:52:17.067Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: you can already reify ThrowTypeError tho","date":"2018-08-26T04:56:21.997Z","type":"message"}
{"nick":"ljharb","message":"so this would just be exposing it in yet another place","date":"2018-08-26T04:56:27.172Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: note that i'm not saying it should be a getter/setter once out of the TDZ","date":"2018-08-26T04:56:49.529Z","type":"message"}
{"nick":"ljharb","message":"i'm saying it should be reconfigured from accessor to data as part of the module being evaluated","date":"2018-08-26T04:57:02.798Z","type":"message"}
{"nick":"Bakkot","message":"ah, hm","date":"2018-08-26T05:00:07.844Z","type":"message"}
{"nick":"Bakkot","message":"except they're non-configurable, and non-configurable things aren't supposed to switch from being accessors to data properties","date":"2018-08-26T05:01:42.160Z","type":"message"}
{"nick":"Bakkot","message":"that's one of the invariants for exotic objects: https://tc39.github.io/ecma262/#sec-invariants-of-the-essential-internal-methods","date":"2018-08-26T05:02:14.997Z","type":"message"}
{"nick":"Bakkot","message":"\"If P's attributes other than [[Writable]] may change over time or if the property might disappear, then P's [[Configurable]] attribute must be true\"","date":"2018-08-26T05:02:31.315Z","type":"message"}
{"nick":"Bakkot","message":"(of course, proxies can violate that _anyway_, but it still seems like maybe a bad thing)","date":"2018-08-26T05:02:55.458Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: could we make propertyIsEnumerable work, even though a descriptor isnâ€™t accessible?","date":"2018-08-26T05:08:26.107Z","type":"message"}
{"nick":"ljharb","message":"like provide a way to check enumerability without needing to get at the whole descriptor","date":"2018-08-26T05:09:08.095Z","type":"message"}
{"nick":"ljharb","message":"or would that be a major reworking","date":"2018-08-26T05:09:14.601Z","type":"message"}
{"nick":"Bakkot","message":"We'd have to special case module exotic objects, I think, which in principle is not something allowed by the MOP","date":"2018-08-26T05:09:25.962Z","type":"message"}
{"nick":"Bakkot","message":"(or extend the MOP, but that's even worse)","date":"2018-08-26T05:09:31.240Z","type":"message"}
{"nick":"Bakkot","message":"but I'd be ok with it personally; no one in the whole world knows about the MOP, and the intuition that for-in over a module object should work is reasonable","date":"2018-08-26T05:10:01.430Z","type":"message"}
{"nick":"ljharb","message":"yeah i agree","date":"2018-08-26T05:10:10.625Z","type":"message"}
{"nick":"Bakkot","message":"though, it might interfere weirdly with proxies for module namespace exotic objects","date":"2018-08-26T05:10:55.661Z","type":"message"}
{"nick":"Bakkot","message":"e.g. unless we also special case proxies for them, you'd be able to for-in over a namespace object but not a proxy for the namespace object","date":"2018-08-26T05:11:24.680Z","type":"message"}
{"nick":"devsnek","message":"what is the MOP lol","date":"2018-08-26T05:20:19.573Z","type":"message"}
{"nick":"Bakkot","message":"meta-object protocol","date":"2018-08-26T05:24:20.734Z","type":"message"}
{"nick":"Bakkot","message":"Basically all the [[GetOwnProperty]] stuff.","date":"2018-08-26T05:25:00.792Z","type":"message"}
{"nick":"devsnek","message":"ok","date":"2018-08-26T05:25:04.860Z","type":"message"}
{"nick":"devsnek","message":"well i think the MOP needs a mop-up","date":"2018-08-26T05:25:50.137Z","type":"message"}
{"nick":"aki_","date":"2018-08-26T05:29:39.764Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-08-26T05:30:00.765Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-26T05:30:00.977Z","type":"nick"}
{"nick":"rkirsling","message":"incidentally I have a GH issue opened to add MOP to our nascent glossary","date":"2018-08-26T05:56:38.635Z","type":"message"}
{"nick":"rkirsling","message":"because it's thrown around as if it were common CS verbiage but it's really a CLOSism so kind of a \"you gotta know what a crumpet is to understand cricket\" kinda situation","date":"2018-08-26T05:59:47.696Z","type":"message"}
{"nick":"aki_","date":"2018-08-26T07:35:49.793Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-08-26T07:37:30.905Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-26T07:37:31.056Z","type":"nick"}
{"nick":"pchan","date":"2018-08-26T07:52:17.614Z","type":"join"}
{"nick":"pchan","message":"hi","date":"2018-08-26T07:55:22.503Z","type":"message"}
{"nick":"pchan","message":"got questions.  Could anyone please reply?","date":"2018-08-26T07:56:01.411Z","type":"message"}
