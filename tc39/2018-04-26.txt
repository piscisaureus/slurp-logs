{"nick":"arai","date":"2018-04-26T00:09:27.204Z","type":"join"}
{"nick":"caitp","message":"`(new class { #x; m(o) { if (!o) o = this; return eval(\"o.#x;\"); } }).m()`  would throw a SyntaxError right, because direct (or not) eval() and CreateDynamicFunction can't reference private names from an outer PrivateNameEnvironment, right","date":"2018-04-26T01:12:57.193Z","type":"message"}
{"nick":"caitp","message":"but it wuold be a SyntaxError when the eval() is called, not when the top level script is parsed","date":"2018-04-26T01:15:17.020Z","type":"message"}
{"nick":"caitp","message":"basically private names outside the eval can never be referenced by stuff inside an eval?","date":"2018-04-26T01:18:27.282Z","type":"message"}
{"nick":"caitp","message":"but what about `class C { #x; constructor() { return eval(\"new class extends C { get x() { return this.#x; } }\"); } }` or something like that","date":"2018-04-26T01:19:52.309Z","type":"message"}
{"nick":"caitp","message":"apparently that's more of a stack overflow... but a similar thing to that would work","date":"2018-04-26T01:21:58.854Z","type":"message"}
{"nick":"caitp","message":"or fail","date":"2018-04-26T01:22:07.477Z","type":"message"}
{"nick":"caitp","message":"lets see","date":"2018-04-26T01:22:09.456Z","type":"message"}
{"nick":"jwalden","reason":"Quit: back later maybe","date":"2018-04-26T01:25:28.900Z","type":"quit"}
{"nick":"caitp","message":"https://jsfiddle.net/af62w5gg/ basically that","date":"2018-04-26T01:26:57.514Z","type":"message"}
{"nick":"caitp","message":"gsathya: littledan: ^ if you guys have an opinion","date":"2018-04-26T01:27:15.498Z","type":"message"}
{"nick":"caitp","message":"it looks like per the current proposal, it explicitly should be a SyntaxError","date":"2018-04-26T01:29:31.006Z","type":"message"}
{"nick":"caitp","message":"fair enough","date":"2018-04-26T01:29:34.297Z","type":"message"}
{"nick":"caitp","message":"I don't see a test262 test matching that pattern in the collection checked into wekit atm, might eb good to add one","date":"2018-04-26T01:35:16.324Z","type":"message"}
{"nick":"devsnek","message":"i thought subclasses didn't inherit private symbols","date":"2018-04-26T01:36:00.097Z","type":"message"}
{"nick":"Bakkot","message":"caitp: eval is meant to have access to outer PrivateNames per https://github.com/tc39/proposal-private-fields/issues/47","date":"2018-04-26T01:36:16.869Z","type":"message"}
{"nick":"caitp","message":"Bakkot: this is explicitly stated in the proposal already","date":"2018-04-26T01:36:36.400Z","type":"message"}
{"nick":"Bakkot","message":"and there should be a test that this is the case","date":"2018-04-26T01:36:54.846Z","type":"message"}
{"nick":"caitp","message":"but, v8 doesn't behave correctly, and afaik there's no test262 coverage for it yet","date":"2018-04-26T01:36:55.319Z","type":"message"}
{"nick":"Bakkot","message":"I can believe there's a coverage hole for sure","date":"2018-04-26T01:37:17.245Z","type":"message"}
{"nick":"devsnek","message":"i wouldn't expect any engines to behave \"correctly\" yet","date":"2018-04-26T01:37:31.172Z","type":"message"}
{"nick":"Bakkot","message":"I had some in my initial V8 implementation way back when, but I assume those didn't all get ported","date":"2018-04-26T01:37:33.978Z","type":"message"}
{"nick":"caitp","message":"it looks like v8 is taking the dynamic private name lookup path in that example, instead of throwing when it sees that #x is referenced in the class declared in the eval() but the private name isn't declared in that class","date":"2018-04-26T01:40:07.414Z","type":"message"}
{"nick":"caitp","message":"ah, if you remove the definition of #x, then eval() reports it as invalid, so the eval() still sees the lexical #x and that's the only thing being used to determine if it's valid or not","date":"2018-04-26T01:42:27.490Z","type":"message"}
{"nick":"caitp","message":"neato.","date":"2018-04-26T01:42:39.787Z","type":"message"}
{"nick":"devsnek","message":"hey caitp can i pick your brain a bit in #v8","date":"2018-04-26T01:42:57.546Z","type":"message"}
{"nick":"keith_miller","date":"2018-04-26T01:43:05.994Z","type":"join"}
{"nick":"caitp","message":"it would be simpler if we spec that, but i'm happy either way","date":"2018-04-26T01:43:06.809Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T01:55:43.222Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T02:05:08.329Z","type":"join"}
{"nick":"diervo_","date":"2018-04-26T02:08:17.594Z","type":"join"}
{"nick":"littledan_","date":"2018-04-26T02:08:40.683Z","type":"join"}
{"nick":"devsnek_","date":"2018-04-26T02:09:00.872Z","type":"join"}
{"nick":"tobie_","date":"2018-04-26T02:09:17.846Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-04-26T02:09:37.313Z","type":"quit"}
{"nick":"spectranaut_","date":"2018-04-26T02:10:19.841Z","type":"join"}
{"nick":"alex3","date":"2018-04-26T02:12:42.309Z","type":"join"}
{"nick":"devsnek","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:50.494Z","type":"quit"}
{"nick":"diervo","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.283Z","type":"quit"}
{"nick":"littledan","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.461Z","type":"quit"}
{"nick":"tobie","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.461Z","type":"quit"}
{"nick":"ambalek","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.639Z","type":"quit"}
{"nick":"saulh[m]","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:52.663Z","type":"quit"}
{"nick":"spectranaut","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:52.841Z","type":"quit"}
{"nick":"diervo_","new_nick":"diervo","date":"2018-04-26T02:12:53.646Z","type":"nick"}
{"nick":"littledan_","new_nick":"littledan","date":"2018-04-26T02:12:53.825Z","type":"nick"}
{"nick":"tobie_","new_nick":"tobie","date":"2018-04-26T02:12:56.719Z","type":"nick"}
{"nick":"devsnek_","new_nick":"devsnek","date":"2018-04-26T02:12:57.258Z","type":"nick"}
{"nick":"M-IvanSanchez","reason":"Ping timeout: 246 seconds","date":"2018-04-26T02:16:49.735Z","type":"quit"}
{"nick":"jwalden","date":"2018-04-26T02:35:03.210Z","type":"join"}
{"nick":"keith_miller","date":"2018-04-26T02:44:28.258Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T02:59:02.424Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T03:39:19.125Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-04-26T03:44:58.190Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T04:47:49.970Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T05:08:19.548Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-04-26T05:18:35.145Z","type":"quit"}
{"nick":"littledan","message":"Hey, as bakkot says, eval is supposed to support reading and writing private fields. Where do you see the spec doing something different?","date":"2018-04-26T06:14:53.339Z","type":"message"}
{"nick":"littledan","message":"We should probably add these test262 tests and fix up the spec test","date":"2018-04-26T06:15:08.298Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T07:04:48.811Z","type":"quit"}
{"nick":"isHavvy","date":"2018-04-26T08:26:21.766Z","type":"join"}
{"nick":"Havvy","reason":"Ping timeout: 260 seconds","date":"2018-04-26T08:29:24.374Z","type":"quit"}
{"nick":"saulh[m]","date":"2018-04-26T08:46:40.990Z","type":"join"}
{"nick":"M-IvanSanchez","date":"2018-04-26T08:52:55.060Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-26T09:04:13.727Z","type":"quit"}
{"nick":"saulh[m]","reason":"Ping timeout: 246 seconds","date":"2018-04-26T09:38:52.360Z","type":"quit"}
{"nick":"M-IvanSanchez","reason":"Ping timeout: 256 seconds","date":"2018-04-26T09:38:56.523Z","type":"quit"}
{"nick":"saulh[m]","date":"2018-04-26T10:16:53.643Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-04-26T10:25:09.134Z","type":"quit"}
{"nick":"mylesborins","date":"2018-04-26T10:25:39.669Z","type":"join"}
{"nick":"arai","date":"2018-04-26T10:51:04.797Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-26T10:52:52.895Z","type":"quit"}
{"nick":"AtumT","date":"2018-04-26T11:00:09.315Z","type":"join"}
{"nick":"arai","date":"2018-04-26T11:01:14.840Z","type":"join"}
{"nick":"M-IvanSanchez","date":"2018-04-26T11:19:39.372Z","type":"join"}
{"nick":"littledan","message":"what's missing is for the private name environment to be properly propagated through the lexical scoping mechanism... that was working before, back when we just hacked it onto the variable environment, but now it needs to be fixed up. See https://github.com/tc39/proposal-class-fields/issues/40","date":"2018-04-26T11:30:09.291Z","type":"message"}
{"nick":"littledan","message":"though the old phrasing had other problems, e.g., when it comes to with","date":"2018-04-26T11:30:37.398Z","type":"message"}
{"nick":"linclark","reason":"Ping timeout: 256 seconds","date":"2018-04-26T11:56:32.112Z","type":"quit"}
{"nick":"linclark","date":"2018-04-26T11:59:29.460Z","type":"join"}
{"nick":"seishun","date":"2018-04-26T12:41:32.033Z","type":"join"}
{"nick":"seishun","message":"hey, are there any TC39 delegates here or anyone who knows a TC39 delegate who might be interested in championing https://github.com/tc39/proposal-bigint/issues/137?","date":"2018-04-26T12:42:24.854Z","type":"message"}
{"nick":"devsnek","message":"I wouldn't expect trying to put a bigint into a number typed array to work at all","date":"2018-04-26T12:45:35.746Z","type":"message"}
{"nick":"Domenic","message":"Agreed, this is a pretty clear case of \"doctor it hurts when I do this\"","date":"2018-04-26T12:50:28.973Z","type":"message"}
{"nick":"jmdyck","date":"2018-04-26T12:53:57.802Z","type":"join"}
{"nick":"seishun","message":"Domenic: what do you mean by that?","date":"2018-04-26T12:54:32.612Z","type":"message"}
{"nick":"Domenic","message":"The patient says, \"Doctor, it hurts when I do this,\" then twists his body in a bizarre way. The doctor says, \"Then don't do that.\"","date":"2018-04-26T12:55:58.681Z","type":"message"}
{"nick":"Domenic","message":"(This is part of some old comedy routine, but has become a shorthand used in technical circles.)","date":"2018-04-26T12:57:11.845Z","type":"message"}
{"nick":"seishun","reason":"Read error: Connection reset by peer","date":"2018-04-26T14:56:20.649Z","type":"quit"}
{"nick":"caitp","message":"littledan: I actually think eval being able to read/write private names declared outside the eval is a pretty bad idea, and it’s problematic for other reasons","date":"2018-04-26T15:01:26.237Z","type":"message"}
{"nick":"caitp","message":"especially if you want to have the AllPrivateNamesValid rules","date":"2018-04-26T15:03:47.835Z","type":"message"}
{"nick":"caitp","message":"but, the modification to eval() and CreateDynamicFunction also explicitly violates the AllPrivateNamesValid rule if they use a name outside of a class declaration which declares it in the eval()","date":"2018-04-26T15:05:47.316Z","type":"message"}
{"nick":"caitp","message":"so, the spec explicitly does not allow it atm","date":"2018-04-26T15:06:12.042Z","type":"message"}
{"nick":"caitp","message":"why are you saying it does?","date":"2018-04-26T15:06:22.486Z","type":"message"}
{"nick":"caitp","message":"oh hang on, I see what you're getting at","date":"2018-04-26T15:19:03.332Z","type":"message"}
{"nick":"caitp","message":"I would say \"remove step 7 and 8 in the modified eval() algorithm to avoid a kind of injection attack, that only makes sense\"","date":"2018-04-26T15:20:05.560Z","type":"message"}
{"nick":"caitp","message":"CreateDynamicFunction doesn't have that modification though, so it is a SyntaxError in new Function(...) --- I guess I assumed it was consistent between the two","date":"2018-04-26T15:21:26.804Z","type":"message"}
{"nick":"caitp","message":"the fact that it's not consistent is also kind of bad","date":"2018-04-26T15:21:33.906Z","type":"message"}
{"nick":"seishun","date":"2018-04-26T15:45:27.243Z","type":"join"}
{"nick":"seishun","reason":"Read error: Connection reset by peer","date":"2018-04-26T16:05:01.582Z","type":"quit"}
{"nick":"seishun","date":"2018-04-26T16:12:46.819Z","type":"join"}
{"nick":"littledan","message":"Yeah, I mean I agree with you on the design point. That's why I argued against allowing private fields access from eval in committee. But, the committee went the other way","date":"2018-04-26T16:46:04.643Z","type":"message"}
{"nick":"littledan","message":"You're probably right about there being spec bugs here, I need to look at it more closely","date":"2018-04-26T16:46:41.523Z","type":"message"}
{"nick":"ljharb","message":"could private fields be made to work inside Function","date":"2018-04-26T17:14:56.113Z","type":"message"}
{"nick":"ljharb","message":"?","date":"2018-04-26T17:14:56.774Z","type":"message"}
{"nick":"keith_miller","date":"2018-04-26T17:17:47.082Z","type":"join"}
{"nick":"saulh","reason":"Remote host closed the connection","date":"2018-04-26T18:20:06.429Z","type":"quit"}
{"nick":"gsathya","message":"caitp: The jsfiddle you posted is not a SyntaxError looking at the spec and V8 behaves correctly. I don't know about test262 tests, but I have V8 tests for this","date":"2018-04-26T18:58:55.809Z","type":"message"}
{"nick":"caitp","message":"gsathya: it should be though","date":"2018-04-26T19:07:13.556Z","type":"message"}
{"nick":"caitp","message":"that its not is bad","date":"2018-04-26T19:07:15.619Z","type":"message"}
{"nick":"caitp","message":"like, it is a bad design","date":"2018-04-26T19:10:03.657Z","type":"message"}
{"nick":"caitp","message":"i explained why up there","date":"2018-04-26T19:12:46.319Z","type":"message"}
{"nick":"jwalden","date":"2018-04-26T19:18:49.544Z","type":"join"}
{"nick":"Bakkot","message":"ljharb: function is like indirect eval, no? it doesn't see variables from the calling scope. so it definitely shouldn't see private names.","date":"2018-04-26T20:05:39.540Z","type":"message"}
{"nick":"Bakkot","message":"caitp: not sure I understand the argument that it's a bad design","date":"2018-04-26T20:07:50.732Z","type":"message"}
{"nick":"Bakkot","message":"indirect eval should not have access to private names, direct eval should; this is consistent with access to anything else that's closed over","date":"2018-04-26T20:08:56.970Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: ah yeah good call","date":"2018-04-26T20:31:51.395Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 240 seconds","date":"2018-04-26T20:33:21.407Z","type":"quit"}
{"nick":"caitp","message":"Bakkot: because its room for injected stuff to access private state, it breaks guarantees","date":"2018-04-26T20:44:16.722Z","type":"message"}
{"nick":"caitp","message":"not a fan of that","date":"2018-04-26T20:44:24.178Z","type":"message"}
{"nick":"Bakkot","message":"caitp: if you're not sanitizing code passed to a direct eval, you have bigger problems","date":"2018-04-26T20:57:16.968Z","type":"message"}
{"nick":"Bakkot","message":"I don't think it breaks guarantees any more than the fact that a direct eval can access closed-over variables","date":"2018-04-26T20:57:36.164Z","type":"message"}
{"nick":"Bakkot","message":"if you want guarantees, you need to be able to reason about what you're passing to eval","date":"2018-04-26T20:57:59.452Z","type":"message"}
{"nick":"caitp","message":"yeah, OR, the primitive could be just not exposing this","date":"2018-04-26T20:58:37.457Z","type":"message"}
{"nick":"caitp","message":"because like, there's no benefit to it","date":"2018-04-26T20:58:43.596Z","type":"message"}
{"nick":"Bakkot","message":"there's benefit - it makes the mental model more consistent","date":"2018-04-26T20:59:25.909Z","type":"message"}
{"nick":"caitp","message":"how","date":"2018-04-26T20:59:31.576Z","type":"message"}
{"nick":"Bakkot","message":"currently the model for how privacy works with private fields is that the names are lexically scoped, so code has access to the field iff it has access to the lexical scope in question, just like for closed-over variables","date":"2018-04-26T21:00:24.680Z","type":"message"}
{"nick":"Bakkot","message":"this implies they can be used from a direct eval","date":"2018-04-26T21:00:33.774Z","type":"message"}
{"nick":"caitp","message":"eval has behaved kind of stupidly forever, keeping consistency with that badness isn't really improving things, it's just making new things worse","date":"2018-04-26T21:00:47.549Z","type":"message"}
{"nick":"caitp","message":"a simpler model is like \"eval code can't use private names, period\"","date":"2018-04-26T21:01:13.084Z","type":"message"}
{"nick":"caitp","message":"which would be awesome","date":"2018-04-26T21:01:19.743Z","type":"message"}
{"nick":"caitp","message":"or at the very least \"can only use private names declared in PNEs which occur within the eval\"","date":"2018-04-26T21:01:45.301Z","type":"message"}
{"nick":"Bakkot","message":"That's strictly less simple","date":"2018-04-26T21:02:24.654Z","type":"message"}
{"nick":"Bakkot","message":"that's precisely the above mental model, plus an epicycle","date":"2018-04-26T21:02:24.969Z","type":"message"}
{"nick":"caitp","message":"how is that less simple","date":"2018-04-26T21:02:39.205Z","type":"message"}
{"nick":"Bakkot","message":"Because now it's \"currently the model for how privacy works with private fields is that the names are lexically scoped, so code has access to the field iff it has access to the lexical scope in question, just like for closed-over variables. EXCEPT ALSO they're opaque to direct eval, for some reason.\"","date":"2018-04-26T21:03:04.485Z","type":"message"}
{"nick":"caitp","message":"eval'd code isn't strictly in the same lexical scope","date":"2018-04-26T21:03:34.717Z","type":"message"}
{"nick":"caitp","message":"that string can come from anywhere","date":"2018-04-26T21:03:38.890Z","type":"message"}
{"nick":"Bakkot","message":"the model is no longer \"lexical scope\". now it's \"lexical scope, and we decided to make it work differently for direct eval\"","date":"2018-04-26T21:03:45.711Z","type":"message"}
{"nick":"Bakkot","message":"for the purposes of JS code, direct eval'd code is in the same lexical scope.","date":"2018-04-26T21:04:01.261Z","type":"message"}
{"nick":"Bakkot","message":"that's what the \"direct\" part means.","date":"2018-04-26T21:04:12.589Z","type":"message"}
{"nick":"caitp","message":"or we can just stop calling it \"lexical scope\" and just make PNEs behave sort of like lexical scope","date":"2018-04-26T21:04:13.322Z","type":"message"}
{"nick":"caitp","message":"\"it's lexical, but better than ES2015 lexical\"","date":"2018-04-26T21:04:28.628Z","type":"message"}
{"nick":"Bakkot","message":"sure, we can, but then we've introduced a new kind of scoping to the language.","date":"2018-04-26T21:04:55.598Z","type":"message"}
{"nick":"caitp","message":"I mean, not really","date":"2018-04-26T21:05:29.920Z","type":"message"}
{"nick":"caitp","message":"it's just a stricter meaning of lexical","date":"2018-04-26T21:05:44.696Z","type":"message"}
{"nick":"Bakkot","message":"stricter implies different","date":"2018-04-26T21:06:07.833Z","type":"message"}
{"nick":"cloudshu","message":"i prefer not special casing direct eval for private names as well","date":"2018-04-26T21:06:27.506Z","type":"message"}
{"nick":"caitp","message":"\"it's the same but with fewer bad ideas\"","date":"2018-04-26T21:06:27.872Z","type":"message"}
{"nick":"cloudshu","message":"is the desire so there's no need to implement by-name access for private names?","date":"2018-04-26T21:07:18.542Z","type":"message"}
{"nick":"cloudshu","message":"and everything can be by-slot or whatever with all the lookups resolved ahead of time?","date":"2018-04-26T21:07:28.221Z","type":"message"}
{"nick":"caitp","message":"i'm not 100% sure what you mean -- you mean like instead of doing a dynamic search for the name, it's statically known?","date":"2018-04-26T21:09:03.181Z","type":"message"}
{"nick":"cloudshu","message":"yes","date":"2018-04-26T21:09:28.210Z","type":"message"}
{"nick":"caitp","message":"it's probably easier to do that yeah","date":"2018-04-26T21:09:58.608Z","type":"message"}
{"nick":"cloudshu","message":"i'm asking if you want private names to be invisible to direct eval for implementation reasons, or because you think it's gross","date":"2018-04-26T21:10:00.482Z","type":"message"}
{"nick":"caitp","message":"hopefully the dynamic lookups can be eliminated during optimization anyways, but that's not really the reason for not liking it","date":"2018-04-26T21:11:08.125Z","type":"message"}
{"nick":"cloudshu","message":"okay","date":"2018-04-26T21:11:29.963Z","type":"message"}
{"nick":"caitp","message":"way I see it, eval code isn't \"really\" lexical, even for direct eval, it shouldn't be treated as lexical","date":"2018-04-26T21:11:31.290Z","type":"message"}
{"nick":"cloudshu","message":"ah interesting","date":"2018-04-26T21:12:16.988Z","type":"message"}
{"nick":"cloudshu","message":"i've always considered direct eval to be exactly lexical","date":"2018-04-26T21:12:24.854Z","type":"message"}
{"nick":"caitp","message":"well I mean the spec considers it that wy","date":"2018-04-26T21:12:33.356Z","type":"message"}
{"nick":"caitp","message":"way","date":"2018-04-26T21:12:34.134Z","type":"message"}
{"nick":"caitp","message":"but the actual eval'd source isn't guaranteed to be lexical","date":"2018-04-26T21:12:46.238Z","type":"message"}
{"nick":"cloudshu","message":"eval in general isn't really lexical, to be sure, but direct eval remains so","date":"2018-04-26T21:12:51.615Z","type":"message"}
{"nick":"cloudshu","message":"how so? because vars might not escape sometimes?","date":"2018-04-26T21:12:56.798Z","type":"message"}
{"nick":"caitp","message":"because the string could come from somewhere else","date":"2018-04-26T21:13:22.363Z","type":"message"}
{"nick":"caitp","message":"could come from user input","date":"2018-04-26T21:13:24.365Z","type":"message"}
{"nick":"caitp","message":"could come from untrusted stuff","date":"2018-04-26T21:13:28.739Z","type":"message"}
{"nick":"caitp","message":"so because of that, I don't think it should be able to do anything with lexical variables surrounding the direct eval","date":"2018-04-26T21:13:50.063Z","type":"message"}
{"nick":"caitp","message":"sanitized or not","date":"2018-04-26T21:13:54.307Z","type":"message"}
{"nick":"cloudshu","message":"oh, not lexical in that the eval'd source isn't in-situ in the scope in which it's evaluated","date":"2018-04-26T21:14:17.269Z","type":"message"}
{"nick":"cloudshu","message":"i think the mental model of direct eval is to eval something in the current lexical scope","date":"2018-04-26T21:15:29.540Z","type":"message"}
{"nick":"cloudshu","message":"making private names an exception here would be very surprising imo","date":"2018-04-26T21:15:37.432Z","type":"message"}
{"nick":"caitp","message":"i wouldn't be surprised","date":"2018-04-26T21:15:47.957Z","type":"message"}
{"nick":"cloudshu","message":"and i don't mean the mental model for the spec, i mean how people use it","date":"2018-04-26T21:15:49.750Z","type":"message"}
{"nick":"caitp","message":"in fact, I'm pretty sure most people don't really distinguish between direct and indirect eval","date":"2018-04-26T21:16:19.425Z","type":"message"}
{"nick":"cloudshu","message":"really?","date":"2018-04-26T21:16:31.422Z","type":"message"}
{"nick":"cloudshu","message":"actually who uses indirect eval anyhow","date":"2018-04-26T21:16:50.887Z","type":"message"}
{"nick":"ljharb","message":"i use it","date":"2018-04-26T21:20:09.514Z","type":"message"}
{"nick":"ljharb","message":"`Function` is the only way to featuretest syntax","date":"2018-04-26T21:20:18.298Z","type":"message"}
{"nick":"ljharb","message":"(the only way that’s not eval, and eval is terrible)","date":"2018-04-26T21:20:27.289Z","type":"message"}
{"nick":"caitp","message":"I've seen people use it by accident when I was working on angularjs, and use it on purpose for sketchy reasons","date":"2018-04-26T21:20:46.898Z","type":"message"}
{"nick":"cloudshu","message":"i see","date":"2018-04-26T21:21:53.843Z","type":"message"}
{"nick":"caitp","message":"statically resolving private names would be nice though","date":"2018-04-26T21:30:27.678Z","type":"message"}
{"nick":"caitp","message":"no doubt","date":"2018-04-26T21:30:29.344Z","type":"message"}
{"nick":"Bakkot","message":"as long as there's no direct evals, which everyone has to check for anyway, you can still do that","date":"2018-04-26T21:30:58.671Z","type":"message"}
{"nick":"caitp","message":"not worth having 2 paths for it imo","date":"2018-04-26T21:31:55.992Z","type":"message"}
{"nick":"caitp","message":"not in baseline","date":"2018-04-26T21:32:13.919Z","type":"message"}
{"nick":"cloudshu","message":"the path already has to exist for basically everything else, though","date":"2018-04-26T21:35:18.556Z","type":"message"}
{"nick":"caitp","message":"we don't really have a path converting dynamic loads into constants in baseline","date":"2018-04-26T21:36:18.598Z","type":"message"}
{"nick":"caitp","message":"at least, last I checked","date":"2018-04-26T21:36:29.425Z","type":"message"}
{"nick":"caitp","message":"and eliminating scope resolution and stuff, having multiple paths for it seems pretty flaky","date":"2018-04-26T21:37:24.456Z","type":"message"}
{"nick":"cloudshu","message":"that's a parser decision","date":"2018-04-26T22:07:11.123Z","type":"message"}
{"nick":"cloudshu","message":"i don't know how ignition works, it's vregs, right?","date":"2018-04-26T22:07:16.953Z","type":"message"}
{"nick":"cloudshu","message":"but the decision whether a local or something can even go into a vreg must be based on the presence of eval","date":"2018-04-26T22:07:27.089Z","type":"message"}
{"nick":"not-an-aardvark","date":"2018-04-26T22:40:40.788Z","type":"join"}
{"nick":"keith_miller","reason":"Read error: Connection reset by peer","date":"2018-04-26T22:40:41.234Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T22:42:51.447Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 276 seconds","date":"2018-04-26T22:49:23.846Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T22:53:45.082Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T23:04:46.807Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-04-26T23:20:13.262Z","type":"quit"}
{"nick":"caitp","message":"I'm not implementing it in v8 --- making the decision, either at parse time or at codegen time, creates a complex decision, which is kind of annoying to make for something not strictly necessary","date":"2018-04-26T23:30:58.003Z","type":"message"}
{"nick":"caitp","message":"but again, it's not really a \"change it for easier implementation\" thing, it's just a \"don't expose private information to arbitrary code\" thing","date":"2018-04-26T23:31:38.139Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T23:35:19.477Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T23:37:06.589Z","type":"join"}
{"nick":"arai","date":"2018-04-26T23:59:17.490Z","type":"join"}
