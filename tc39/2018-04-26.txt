{"nick":"arai","date":"2018-04-26T00:09:27.204Z","type":"join"}
{"nick":"caitp","message":"`(new class { #x; m(o) { if (!o) o = this; return eval(\"o.#x;\"); } }).m()`  would throw a SyntaxError right, because direct (or not) eval() and CreateDynamicFunction can't reference private names from an outer PrivateNameEnvironment, right","date":"2018-04-26T01:12:57.193Z","type":"message"}
{"nick":"caitp","message":"but it wuold be a SyntaxError when the eval() is called, not when the top level script is parsed","date":"2018-04-26T01:15:17.020Z","type":"message"}
{"nick":"caitp","message":"basically private names outside the eval can never be referenced by stuff inside an eval?","date":"2018-04-26T01:18:27.282Z","type":"message"}
{"nick":"caitp","message":"but what about `class C { #x; constructor() { return eval(\"new class extends C { get x() { return this.#x; } }\"); } }` or something like that","date":"2018-04-26T01:19:52.309Z","type":"message"}
{"nick":"caitp","message":"apparently that's more of a stack overflow... but a similar thing to that would work","date":"2018-04-26T01:21:58.854Z","type":"message"}
{"nick":"caitp","message":"or fail","date":"2018-04-26T01:22:07.477Z","type":"message"}
{"nick":"caitp","message":"lets see","date":"2018-04-26T01:22:09.456Z","type":"message"}
{"nick":"jwalden","reason":"Quit: back later maybe","date":"2018-04-26T01:25:28.900Z","type":"quit"}
{"nick":"caitp","message":"https://jsfiddle.net/af62w5gg/ basically that","date":"2018-04-26T01:26:57.514Z","type":"message"}
{"nick":"caitp","message":"gsathya: littledan: ^ if you guys have an opinion","date":"2018-04-26T01:27:15.498Z","type":"message"}
{"nick":"caitp","message":"it looks like per the current proposal, it explicitly should be a SyntaxError","date":"2018-04-26T01:29:31.006Z","type":"message"}
{"nick":"caitp","message":"fair enough","date":"2018-04-26T01:29:34.297Z","type":"message"}
{"nick":"caitp","message":"I don't see a test262 test matching that pattern in the collection checked into wekit atm, might eb good to add one","date":"2018-04-26T01:35:16.324Z","type":"message"}
{"nick":"devsnek","message":"i thought subclasses didn't inherit private symbols","date":"2018-04-26T01:36:00.097Z","type":"message"}
{"nick":"Bakkot","message":"caitp: eval is meant to have access to outer PrivateNames per https://github.com/tc39/proposal-private-fields/issues/47","date":"2018-04-26T01:36:16.869Z","type":"message"}
{"nick":"caitp","message":"Bakkot: this is explicitly stated in the proposal already","date":"2018-04-26T01:36:36.400Z","type":"message"}
{"nick":"Bakkot","message":"and there should be a test that this is the case","date":"2018-04-26T01:36:54.846Z","type":"message"}
{"nick":"caitp","message":"but, v8 doesn't behave correctly, and afaik there's no test262 coverage for it yet","date":"2018-04-26T01:36:55.319Z","type":"message"}
{"nick":"Bakkot","message":"I can believe there's a coverage hole for sure","date":"2018-04-26T01:37:17.245Z","type":"message"}
{"nick":"devsnek","message":"i wouldn't expect any engines to behave \"correctly\" yet","date":"2018-04-26T01:37:31.172Z","type":"message"}
{"nick":"Bakkot","message":"I had some in my initial V8 implementation way back when, but I assume those didn't all get ported","date":"2018-04-26T01:37:33.978Z","type":"message"}
{"nick":"caitp","message":"it looks like v8 is taking the dynamic private name lookup path in that example, instead of throwing when it sees that #x is referenced in the class declared in the eval() but the private name isn't declared in that class","date":"2018-04-26T01:40:07.414Z","type":"message"}
{"nick":"caitp","message":"ah, if you remove the definition of #x, then eval() reports it as invalid, so the eval() still sees the lexical #x and that's the only thing being used to determine if it's valid or not","date":"2018-04-26T01:42:27.490Z","type":"message"}
{"nick":"caitp","message":"neato.","date":"2018-04-26T01:42:39.787Z","type":"message"}
{"nick":"devsnek","message":"hey caitp can i pick your brain a bit in #v8","date":"2018-04-26T01:42:57.546Z","type":"message"}
{"nick":"keith_miller","date":"2018-04-26T01:43:05.994Z","type":"join"}
{"nick":"caitp","message":"it would be simpler if we spec that, but i'm happy either way","date":"2018-04-26T01:43:06.809Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T01:55:43.222Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T02:05:08.329Z","type":"join"}
{"nick":"diervo_","date":"2018-04-26T02:08:17.594Z","type":"join"}
{"nick":"littledan_","date":"2018-04-26T02:08:40.683Z","type":"join"}
{"nick":"devsnek_","date":"2018-04-26T02:09:00.872Z","type":"join"}
{"nick":"tobie_","date":"2018-04-26T02:09:17.846Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-04-26T02:09:37.313Z","type":"quit"}
{"nick":"spectranaut_","date":"2018-04-26T02:10:19.841Z","type":"join"}
{"nick":"alex3","date":"2018-04-26T02:12:42.309Z","type":"join"}
{"nick":"devsnek","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:50.494Z","type":"quit"}
{"nick":"diervo","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.283Z","type":"quit"}
{"nick":"littledan","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.461Z","type":"quit"}
{"nick":"tobie","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.461Z","type":"quit"}
{"nick":"ambalek","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.639Z","type":"quit"}
{"nick":"saulh[m]","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:52.663Z","type":"quit"}
{"nick":"spectranaut","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:52.841Z","type":"quit"}
{"nick":"diervo_","new_nick":"diervo","date":"2018-04-26T02:12:53.646Z","type":"nick"}
{"nick":"littledan_","new_nick":"littledan","date":"2018-04-26T02:12:53.825Z","type":"nick"}
{"nick":"tobie_","new_nick":"tobie","date":"2018-04-26T02:12:56.719Z","type":"nick"}
{"nick":"devsnek_","new_nick":"devsnek","date":"2018-04-26T02:12:57.258Z","type":"nick"}
{"nick":"M-IvanSanchez","reason":"Ping timeout: 246 seconds","date":"2018-04-26T02:16:49.735Z","type":"quit"}
{"nick":"jwalden","date":"2018-04-26T02:35:03.210Z","type":"join"}
{"nick":"keith_miller","date":"2018-04-26T02:44:28.258Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T02:59:02.424Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T03:39:19.125Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-04-26T03:44:58.190Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T04:47:49.970Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T05:08:19.548Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-04-26T05:18:35.145Z","type":"quit"}
{"nick":"littledan","message":"Hey, as bakkot says, eval is supposed to support reading and writing private fields. Where do you see the spec doing something different?","date":"2018-04-26T06:14:53.339Z","type":"message"}
{"nick":"littledan","message":"We should probably add these test262 tests and fix up the spec test","date":"2018-04-26T06:15:08.298Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T07:04:48.811Z","type":"quit"}
{"nick":"isHavvy","date":"2018-04-26T08:26:21.766Z","type":"join"}
{"nick":"Havvy","reason":"Ping timeout: 260 seconds","date":"2018-04-26T08:29:24.374Z","type":"quit"}
{"nick":"saulh[m]","date":"2018-04-26T08:46:40.990Z","type":"join"}
{"nick":"M-IvanSanchez","date":"2018-04-26T08:52:55.060Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-26T09:04:13.727Z","type":"quit"}
{"nick":"saulh[m]","reason":"Ping timeout: 246 seconds","date":"2018-04-26T09:38:52.360Z","type":"quit"}
{"nick":"M-IvanSanchez","reason":"Ping timeout: 256 seconds","date":"2018-04-26T09:38:56.523Z","type":"quit"}
{"nick":"saulh[m]","date":"2018-04-26T10:16:53.643Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-04-26T10:25:09.134Z","type":"quit"}
{"nick":"mylesborins","date":"2018-04-26T10:25:39.669Z","type":"join"}
{"nick":"arai","date":"2018-04-26T10:51:04.797Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-26T10:52:52.895Z","type":"quit"}
{"nick":"AtumT","date":"2018-04-26T11:00:09.315Z","type":"join"}
{"nick":"arai","date":"2018-04-26T11:01:14.840Z","type":"join"}
{"nick":"M-IvanSanchez","date":"2018-04-26T11:19:39.372Z","type":"join"}
{"nick":"littledan","message":"what's missing is for the private name environment to be properly propagated through the lexical scoping mechanism... that was working before, back when we just hacked it onto the variable environment, but now it needs to be fixed up. See https://github.com/tc39/proposal-class-fields/issues/40","date":"2018-04-26T11:30:09.291Z","type":"message"}
{"nick":"littledan","message":"though the old phrasing had other problems, e.g., when it comes to with","date":"2018-04-26T11:30:37.398Z","type":"message"}
{"nick":"linclark","reason":"Ping timeout: 256 seconds","date":"2018-04-26T11:56:32.112Z","type":"quit"}
{"nick":"linclark","date":"2018-04-26T11:59:29.460Z","type":"join"}
{"nick":"seishun","date":"2018-04-26T12:41:32.033Z","type":"join"}
{"nick":"seishun","message":"hey, are there any TC39 delegates here or anyone who knows a TC39 delegate who might be interested in championing https://github.com/tc39/proposal-bigint/issues/137?","date":"2018-04-26T12:42:24.854Z","type":"message"}
{"nick":"devsnek","message":"I wouldn't expect trying to put a bigint into a number typed array to work at all","date":"2018-04-26T12:45:35.746Z","type":"message"}
{"nick":"Domenic","message":"Agreed, this is a pretty clear case of \"doctor it hurts when I do this\"","date":"2018-04-26T12:50:28.973Z","type":"message"}
{"nick":"jmdyck","date":"2018-04-26T12:53:57.802Z","type":"join"}
{"nick":"seishun","message":"Domenic: what do you mean by that?","date":"2018-04-26T12:54:32.612Z","type":"message"}
{"nick":"Domenic","message":"The patient says, \"Doctor, it hurts when I do this,\" then twists his body in a bizarre way. The doctor says, \"Then don't do that.\"","date":"2018-04-26T12:55:58.681Z","type":"message"}
{"nick":"Domenic","message":"(This is part of some old comedy routine, but has become a shorthand used in technical circles.)","date":"2018-04-26T12:57:11.845Z","type":"message"}
{"nick":"seishun","reason":"Read error: Connection reset by peer","date":"2018-04-26T14:56:20.649Z","type":"quit"}
{"nick":"caitp","message":"littledan: I actually think eval being able to read/write private names declared outside the eval is a pretty bad idea, and it’s problematic for other reasons","date":"2018-04-26T15:01:26.237Z","type":"message"}
{"nick":"caitp","message":"especially if you want to have the AllPrivateNamesValid rules","date":"2018-04-26T15:03:47.835Z","type":"message"}
{"nick":"caitp","message":"but, the modification to eval() and CreateDynamicFunction also explicitly violates the AllPrivateNamesValid rule if they use a name outside of a class declaration which declares it in the eval()","date":"2018-04-26T15:05:47.316Z","type":"message"}
{"nick":"caitp","message":"so, the spec explicitly does not allow it atm","date":"2018-04-26T15:06:12.042Z","type":"message"}
{"nick":"caitp","message":"why are you saying it does?","date":"2018-04-26T15:06:22.486Z","type":"message"}
{"nick":"caitp","message":"oh hang on, I see what you're getting at","date":"2018-04-26T15:19:03.332Z","type":"message"}
{"nick":"caitp","message":"I would say \"remove step 7 and 8 in the modified eval() algorithm to avoid a kind of injection attack, that only makes sense\"","date":"2018-04-26T15:20:05.560Z","type":"message"}
{"nick":"caitp","message":"CreateDynamicFunction doesn't have that modification though, so it is a SyntaxError in new Function(...) --- I guess I assumed it was consistent between the two","date":"2018-04-26T15:21:26.804Z","type":"message"}
{"nick":"caitp","message":"the fact that it's not consistent is also kind of bad","date":"2018-04-26T15:21:33.906Z","type":"message"}
{"nick":"seishun","date":"2018-04-26T15:45:27.243Z","type":"join"}
