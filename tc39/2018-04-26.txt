{"nick":"arai","date":"2018-04-26T00:09:27.204Z","type":"join"}
{"nick":"caitp","message":"`(new class { #x; m(o) { if (!o) o = this; return eval(\"o.#x;\"); } }).m()`  would throw a SyntaxError right, because direct (or not) eval() and CreateDynamicFunction can't reference private names from an outer PrivateNameEnvironment, right","date":"2018-04-26T01:12:57.193Z","type":"message"}
{"nick":"caitp","message":"but it wuold be a SyntaxError when the eval() is called, not when the top level script is parsed","date":"2018-04-26T01:15:17.020Z","type":"message"}
{"nick":"caitp","message":"basically private names outside the eval can never be referenced by stuff inside an eval?","date":"2018-04-26T01:18:27.282Z","type":"message"}
{"nick":"caitp","message":"but what about `class C { #x; constructor() { return eval(\"new class extends C { get x() { return this.#x; } }\"); } }` or something like that","date":"2018-04-26T01:19:52.309Z","type":"message"}
{"nick":"caitp","message":"apparently that's more of a stack overflow... but a similar thing to that would work","date":"2018-04-26T01:21:58.854Z","type":"message"}
{"nick":"caitp","message":"or fail","date":"2018-04-26T01:22:07.477Z","type":"message"}
{"nick":"caitp","message":"lets see","date":"2018-04-26T01:22:09.456Z","type":"message"}
{"nick":"jwalden","reason":"Quit: back later maybe","date":"2018-04-26T01:25:28.900Z","type":"quit"}
{"nick":"caitp","message":"https://jsfiddle.net/af62w5gg/ basically that","date":"2018-04-26T01:26:57.514Z","type":"message"}
{"nick":"caitp","message":"gsathya: littledan: ^ if you guys have an opinion","date":"2018-04-26T01:27:15.498Z","type":"message"}
{"nick":"caitp","message":"it looks like per the current proposal, it explicitly should be a SyntaxError","date":"2018-04-26T01:29:31.006Z","type":"message"}
{"nick":"caitp","message":"fair enough","date":"2018-04-26T01:29:34.297Z","type":"message"}
{"nick":"caitp","message":"I don't see a test262 test matching that pattern in the collection checked into wekit atm, might eb good to add one","date":"2018-04-26T01:35:16.324Z","type":"message"}
{"nick":"devsnek","message":"i thought subclasses didn't inherit private symbols","date":"2018-04-26T01:36:00.097Z","type":"message"}
{"nick":"Bakkot","message":"caitp: eval is meant to have access to outer PrivateNames per https://github.com/tc39/proposal-private-fields/issues/47","date":"2018-04-26T01:36:16.869Z","type":"message"}
{"nick":"caitp","message":"Bakkot: this is explicitly stated in the proposal already","date":"2018-04-26T01:36:36.400Z","type":"message"}
{"nick":"Bakkot","message":"and there should be a test that this is the case","date":"2018-04-26T01:36:54.846Z","type":"message"}
{"nick":"caitp","message":"but, v8 doesn't behave correctly, and afaik there's no test262 coverage for it yet","date":"2018-04-26T01:36:55.319Z","type":"message"}
{"nick":"Bakkot","message":"I can believe there's a coverage hole for sure","date":"2018-04-26T01:37:17.245Z","type":"message"}
{"nick":"devsnek","message":"i wouldn't expect any engines to behave \"correctly\" yet","date":"2018-04-26T01:37:31.172Z","type":"message"}
{"nick":"Bakkot","message":"I had some in my initial V8 implementation way back when, but I assume those didn't all get ported","date":"2018-04-26T01:37:33.978Z","type":"message"}
{"nick":"caitp","message":"it looks like v8 is taking the dynamic private name lookup path in that example, instead of throwing when it sees that #x is referenced in the class declared in the eval() but the private name isn't declared in that class","date":"2018-04-26T01:40:07.414Z","type":"message"}
{"nick":"caitp","message":"ah, if you remove the definition of #x, then eval() reports it as invalid, so the eval() still sees the lexical #x and that's the only thing being used to determine if it's valid or not","date":"2018-04-26T01:42:27.490Z","type":"message"}
{"nick":"caitp","message":"neato.","date":"2018-04-26T01:42:39.787Z","type":"message"}
{"nick":"devsnek","message":"hey caitp can i pick your brain a bit in #v8","date":"2018-04-26T01:42:57.546Z","type":"message"}
{"nick":"keith_miller","date":"2018-04-26T01:43:05.994Z","type":"join"}
{"nick":"caitp","message":"it would be simpler if we spec that, but i'm happy either way","date":"2018-04-26T01:43:06.809Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T01:55:43.222Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T02:05:08.329Z","type":"join"}
{"nick":"diervo_","date":"2018-04-26T02:08:17.594Z","type":"join"}
{"nick":"littledan_","date":"2018-04-26T02:08:40.683Z","type":"join"}
{"nick":"devsnek_","date":"2018-04-26T02:09:00.872Z","type":"join"}
{"nick":"tobie_","date":"2018-04-26T02:09:17.846Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-04-26T02:09:37.313Z","type":"quit"}
{"nick":"spectranaut_","date":"2018-04-26T02:10:19.841Z","type":"join"}
{"nick":"alex3","date":"2018-04-26T02:12:42.309Z","type":"join"}
{"nick":"devsnek","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:50.494Z","type":"quit"}
{"nick":"diervo","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.283Z","type":"quit"}
{"nick":"littledan","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.461Z","type":"quit"}
{"nick":"tobie","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.461Z","type":"quit"}
{"nick":"ambalek","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:51.639Z","type":"quit"}
{"nick":"saulh[m]","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:52.663Z","type":"quit"}
{"nick":"spectranaut","reason":"Ping timeout: 256 seconds","date":"2018-04-26T02:12:52.841Z","type":"quit"}
{"nick":"diervo_","new_nick":"diervo","date":"2018-04-26T02:12:53.646Z","type":"nick"}
{"nick":"littledan_","new_nick":"littledan","date":"2018-04-26T02:12:53.825Z","type":"nick"}
{"nick":"tobie_","new_nick":"tobie","date":"2018-04-26T02:12:56.719Z","type":"nick"}
{"nick":"devsnek_","new_nick":"devsnek","date":"2018-04-26T02:12:57.258Z","type":"nick"}
{"nick":"M-IvanSanchez","reason":"Ping timeout: 246 seconds","date":"2018-04-26T02:16:49.735Z","type":"quit"}
{"nick":"jwalden","date":"2018-04-26T02:35:03.210Z","type":"join"}
{"nick":"keith_miller","date":"2018-04-26T02:44:28.258Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T02:59:02.424Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T03:39:19.125Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-04-26T03:44:58.190Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T04:47:49.970Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-26T05:08:19.548Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-04-26T05:18:35.145Z","type":"quit"}
{"nick":"littledan","message":"Hey, as bakkot says, eval is supposed to support reading and writing private fields. Where do you see the spec doing something different?","date":"2018-04-26T06:14:53.339Z","type":"message"}
{"nick":"littledan","message":"We should probably add these test262 tests and fix up the spec test","date":"2018-04-26T06:15:08.298Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-26T07:04:48.811Z","type":"quit"}
