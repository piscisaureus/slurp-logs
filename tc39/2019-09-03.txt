{"nick":"SferaDev","reason":"Ping timeout: 246 seconds","date":"2019-09-03T00:02:37.374Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-09-03T00:12:45.523Z","type":"quit"}
{"nick":"cybai","date":"2019-09-03T00:13:19.995Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-09-03T00:18:04.032Z","type":"quit"}
{"nick":"silterbparthalf2","reason":"Remote host closed the connection","date":"2019-09-03T00:24:02.704Z","type":"quit"}
{"nick":"silterbparthalf2","date":"2019-09-03T00:31:03.760Z","type":"join"}
{"nick":"laughinghan","date":"2019-09-03T00:40:30.781Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-09-03T00:41:25.568Z","type":"quit"}
{"nick":"cybai","date":"2019-09-03T01:00:45.772Z","type":"join"}
{"nick":"puppy0cam","date":"2019-09-03T01:11:38.632Z","type":"join"}
{"nick":"puppy0cam","message":"I'm trying to use switches, but I find that having a variable within the scope of it is rather difficult. Here is a gist (https://gist.github.com/puppy0cam/b319f59831d2da18043278e466a4f01c) for what I want to do, as well as a workaround for how you could do to somewhat achieve this. The problem with this workaround is that it exposes a variable tha","date":"2019-09-03T01:12:15.275Z","type":"message"}
{"nick":"puppy0cam","message":"t is only relevant to the body of the switch and is accessible from outside the switch body","date":"2019-09-03T01:12:15.764Z","type":"message"}
{"nick":"puppy0cam","reason":"Remote host closed the connection","date":"2019-09-03T01:17:08.051Z","type":"quit"}
{"nick":"puppy0cam","date":"2019-09-03T01:17:48.743Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-09-03T01:46:09.834Z","type":"quit"}
{"nick":"ljharb","message":"puppy0cam: right, you should declare it outside the switch. there's no way to have a variable in the entry to a block (like the parens of a switch, or if, or while, etc) that's only scoped to that block.","date":"2019-09-03T03:10:11.727Z","type":"message"}
{"nick":"devsnek","message":"ljharb: there's something to be said for `if (const x = ...) {}` too","date":"2019-09-03T03:14:48.186Z","type":"message"}
{"nick":"ljharb","message":"devsnek: that has the same issue","date":"2019-09-03T03:15:10.316Z","type":"message"}
{"nick":"devsnek","message":"what issue","date":"2019-09-03T03:15:17.342Z","type":"message"}
{"nick":"ljharb","message":"iow, while it might be intuitive for that to declare a var just for the block, it creates it for the outer block.","date":"2019-09-03T03:15:24.515Z","type":"message"}
{"nick":"ljharb","message":"eg `if (const x = 3) {} console.log(x)`","date":"2019-09-03T03:15:36.537Z","type":"message"}
{"nick":"puppy0cam","message":"It does seem strange that the block receives it's own scope since if you have a let in there, you could end up with errors from accessing the value before initialization as the switch skipped the initialization and went directly to the part where it is being accessed.","date":"2019-09-03T03:15:49.232Z","type":"message"}
{"nick":"ljharb","message":"oh wait","date":"2019-09-03T03:15:55.653Z","type":"message"}
{"nick":"ljharb","message":"ok nvm in `if` you can't declare a var in the parens","date":"2019-09-03T03:16:07.872Z","type":"message"}
{"nick":"ljharb","message":"either way there's no \"make a var for just this block as i enter the block\" syntax ¯\\_(ツ)_/¯","date":"2019-09-03T03:16:45.663Z","type":"message"}
{"nick":"devsnek","message":"yeah i was just saying","date":"2019-09-03T03:17:17.977Z","type":"message"}
{"nick":"devsnek","message":"if someone were to propose such a thing","date":"2019-09-03T03:17:22.989Z","type":"message"}
{"nick":"devsnek","message":"for if/while/etc","date":"2019-09-03T03:17:25.890Z","type":"message"}
{"nick":"devsnek","message":"i would support it","date":"2019-09-03T03:17:28.354Z","type":"message"}
{"nick":"devsnek","message":"i use it a lot in rust","date":"2019-09-03T03:17:36.511Z","type":"message"}
{"nick":"devsnek","message":"in js you just end up wrapping the entire thing in a block so you feel clean","date":"2019-09-03T03:17:52.696Z","type":"message"}
{"nick":"devsnek","message":"imagine `while (let x = regex.match()) {}`","date":"2019-09-03T03:18:26.733Z","type":"message"}
{"nick":"devsnek","message":"or exec","date":"2019-09-03T03:18:53.307Z","type":"message"}
{"nick":"devsnek","message":"whichever one makes you loop","date":"2019-09-03T03:19:00.569Z","type":"message"}
{"nick":"ljharb","message":"with matchAll you don't need an exec loop anymore :-p","date":"2019-09-03T03:20:20.911Z","type":"message"}
{"nick":"devsnek","message":"fancy","date":"2019-09-03T03:20:58.712Z","type":"message"}
{"nick":"puppy0cam","message":"And there is a case of a variable being declared in the parameters to a block, for loops","date":"2019-09-03T03:41:22.782Z","type":"message"}
{"nick":"devsnek","message":"interestingly, the current way that async functions evaluate means that the stack may have two almost identical execution contexts on it before the first await","date":"2019-09-03T03:58:37.669Z","type":"message"}
{"nick":"devsnek","message":"because the context is cloned","date":"2019-09-03T03:58:42.318Z","type":"message"}
{"nick":"devsnek","message":"in theory the context doesn't need to be cloned until an await is hit, but would such a change be safe to make?","date":"2019-09-03T03:58:57.185Z","type":"message"}
{"nick":"puppy0cam","message":"it depends on whether anything will be able to access the old context","date":"2019-09-03T03:59:44.071Z","type":"message"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2019-09-03T03:59:46.586Z","type":"quit"}
{"nick":"devsnek","message":"engines have really odd stacks","date":"2019-09-03T04:00:43.425Z","type":"message"}
{"nick":"devsnek","message":"but engine262 is the only one that reveals this duplicate context","date":"2019-09-03T04:00:55.269Z","type":"message"}
{"nick":"devsnek","message":"https://gc.gy/35188265.png","date":"2019-09-03T04:01:10.113Z","type":"message"}
{"nick":"TimothyGu","message":"production engines probably have a way of eliding the duplicate one or mark them as hidden","date":"2019-09-03T04:01:22.097Z","type":"message"}
{"nick":"devsnek","message":"well my current assumption is that they just don't have cloned contexts at all","date":"2019-09-03T04:01:37.182Z","type":"message"}
{"nick":"SferaDev","date":"2019-09-03T04:01:45.435Z","type":"join"}
{"nick":"TimothyGu","message":"lol ChakraCore with that generator shim","date":"2019-09-03T04:01:50.400Z","type":"message"}
{"nick":"devsnek","message":"as far as i can tell the context cloning is only done to fulfill a contract with Function's [[Call]]","date":"2019-09-03T04:02:05.176Z","type":"message"}
{"nick":"devsnek","message":"which pops the context when it finishes","date":"2019-09-03T04:02:09.408Z","type":"message"}
{"nick":"devsnek","message":"actually that might not be the case","date":"2019-09-03T04:02:30.037Z","type":"message"}
{"nick":"TimothyGu","message":"I mean in one sense this is equivalent to the .next() function for generators","date":"2019-09-03T04:02:37.503Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-09-03T04:02:49.721Z","type":"message"}
{"nick":"devsnek","message":"actually i can't figure this out","date":"2019-09-03T04:03:17.292Z","type":"message"}
{"nick":"TimothyGu","message":"https://www.irccloud.com/pastebin/rQGjAe6K/","date":"2019-09-03T04:03:17.399Z","type":"message"}
{"nick":"devsnek","message":"time to remove the clone and see what happens","date":"2019-09-03T04:03:22.085Z","type":"message"}
{"nick":"TimothyGu","message":"right?","date":"2019-09-03T04:03:34.551Z","type":"message"}
{"nick":"devsnek","message":"something bad will probably happen","date":"2019-09-03T04:03:53.281Z","type":"message"}
{"nick":"TimothyGu","message":"indeed","date":"2019-09-03T04:04:07.153Z","type":"message"}
{"nick":"TimothyGu","message":"also I made https://docs.google.com/document/d/1BRg0EvYIqKYqZ79ssgSLpRFr60sFjeX_-Ijw9VzsYvA/edit for fun","date":"2019-09-03T04:04:15.533Z","type":"message"}
{"nick":"TimothyGu","message":"fun = LinkedIn fun","date":"2019-09-03T04:04:28.650Z","type":"message"}
{"nick":"devsnek","message":"this is #tc39","date":"2019-09-03T04:04:33.935Z","type":"message"}
{"nick":"TimothyGu","message":"oops","date":"2019-09-03T04:04:37.274Z","type":"message"}
{"nick":"devsnek","message":"ll","date":"2019-09-03T04:04:39.970Z","type":"message"}
{"nick":"devsnek","message":"lol*","date":"2019-09-03T04:04:41.752Z","type":"message"}
{"nick":"TimothyGu","message":"fine I don't mind","date":"2019-09-03T04:04:47.288Z","type":"message"}
{"nick":"drousso","date":"2019-09-03T04:15:03.624Z","type":"join"}
{"nick":"drousso","reason":"Client Quit","date":"2019-09-03T04:16:39.386Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-09-03T05:04:46.484Z","type":"quit"}
{"nick":"haxjs","date":"2019-09-03T05:41:50.931Z","type":"join"}
{"nick":"keith_miller","date":"2019-09-03T06:03:58.108Z","type":"join"}
{"nick":"cybai_","date":"2019-09-03T07:57:58.625Z","type":"join"}
