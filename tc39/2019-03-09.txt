{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-03-09T00:31:45.514Z","type":"quit"}
{"nick":"keith_miller","date":"2019-03-09T00:38:53.350Z","type":"join"}
{"nick":"cybai","date":"2019-03-09T00:58:59.249Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 246 seconds","date":"2019-03-09T01:03:07.249Z","type":"quit"}
{"nick":"aki_","date":"2019-03-09T01:48:15.352Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 255 seconds","date":"2019-03-09T01:49:23.004Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-09T01:49:23.405Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-03-09T01:51:19.829Z","type":"quit"}
{"nick":"cybai","date":"2019-03-09T02:09:42.201Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 252 seconds","date":"2019-03-09T02:14:39.174Z","type":"quit"}
{"nick":"isHavvy","reason":"Ping timeout: 244 seconds","date":"2019-03-09T02:18:07.530Z","type":"quit"}
{"nick":"Havvy","date":"2019-03-09T02:20:38.199Z","type":"join"}
{"nick":"keith_miller","date":"2019-03-09T02:50:13.969Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-03-09T03:05:43.152Z","type":"quit"}
{"nick":"cybai","date":"2019-03-09T03:12:33.872Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-03-09T03:16:58.774Z","type":"quit"}
{"nick":"aki_","date":"2019-03-09T03:54:22.969Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-03-09T03:55:07.320Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-09T03:55:07.616Z","type":"nick"}
{"nick":"h11","reason":"Quit: The Lounge - https://thelounge.chat","date":"2019-03-09T04:02:13.481Z","type":"quit"}
{"nick":"h11","date":"2019-03-09T04:02:56.643Z","type":"join"}
{"nick":"h11","reason":"Quit: The Lounge - https://thelounge.chat","date":"2019-03-09T04:22:44.444Z","type":"quit"}
{"nick":"h11","date":"2019-03-09T04:23:22.099Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-03-09T05:21:40.302Z","type":"quit"}
{"nick":"cybai","date":"2019-03-09T05:22:45.317Z","type":"join"}
{"nick":"kpattich_","date":"2019-03-09T05:32:40.961Z","type":"join"}
{"nick":"rkirsling","message":"is the order taken as meaningful in text like this?","date":"2019-03-09T05:32:59.871Z","type":"message"}
{"nick":"rkirsling","message":"https://tc39.github.io/ecma262/#sec-primary-expression-regular-expression-literals-static-semantics-early-errors","date":"2019-03-09T05:33:00.019Z","type":"message"}
{"nick":"rkirsling","message":"(i.e. do we consider *which* early error gets prioritized in `/+/gg` to be specified?)","date":"2019-03-09T05:33:00.020Z","type":"message"}
{"nick":"rkirsling","message":"I'm assuming not, because V8 and SM both complain about the flags first, and the reason I'm even asking is because I'm playing the video game called \"JSC early error whac-a-mole\"","date":"2019-03-09T05:35:47.831Z","type":"message"}
{"nick":"rkirsling","message":"(it's easily as fun as a Zachtronics title ðŸ˜‚)","date":"2019-03-09T05:36:29.567Z","type":"message"}
{"nick":"Bakkot","message":"rkirsling, I would say no, since it does not define semantics differentiating between those two early errors","date":"2019-03-09T05:59:27.119Z","type":"message"}
{"nick":"rkirsling","message":"Bakkot: hmm. I'd ask for a counterexample but then I kind of doubt one exists?","date":"2019-03-09T06:00:22.558Z","type":"message"}
{"nick":"rkirsling","message":"since I suppose one might view it as needlessly specific","date":"2019-03-09T06:01:04.706Z","type":"message"}
{"nick":"aki_","date":"2019-03-09T06:01:11.003Z","type":"join"}
{"nick":"Bakkot","message":"there is a bit of an edge case related to this:  `0++` is, for some reason, an early Reference Error rather than a Syntax Error, so I am not sure what `try { eval('0++; /r/gg;'); } catch (e) { console.log(e.name); }` should print","date":"2019-03-09T06:01:49.915Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 255 seconds","date":"2019-03-09T06:02:16.950Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-09T06:02:17.237Z","type":"nick"}
{"nick":"rkirsling","message":"interesting","date":"2019-03-09T06:02:26.693Z","type":"message"}
{"nick":"rkirsling","message":"it's like a static race condition lol","date":"2019-03-09T06:02:48.147Z","type":"message"}
{"nick":"Bakkot","message":"in trying to determine if this is specified I have not yet been able to find an answer, but I did learn that `eval` acts as identity for anything which is not of Type string","date":"2019-03-09T06:05:20.317Z","type":"message"}
{"nick":"kpattich_","reason":"Ping timeout: 255 seconds","date":"2019-03-09T06:05:25.955Z","type":"quit"}
{"nick":"Bakkot","message":"i.e. `x = {}; eval(x) === x` is true","date":"2019-03-09T06:05:34.873Z","type":"message"}
{"nick":"rkirsling","message":"huh. fair enough.","date":"2019-03-09T06:07:40.976Z","type":"message"}
{"nick":"ljharb","message":"anyone have any suggestions for how to most cleanly handle this? https://github.com/tc39/ecma262/pull/702#discussion_r263966562","date":"2019-03-09T06:58:56.733Z","type":"message"}
{"nick":"kpattich_","date":"2019-03-09T07:01:42.806Z","type":"join"}
{"nick":"kpattich_","reason":"Remote host closed the connection","date":"2019-03-09T07:27:45.255Z","type":"quit"}
{"nick":"kpattich_","date":"2019-03-09T07:28:02.201Z","type":"join"}
{"nick":"kpattich_","reason":"Remote host closed the connection","date":"2019-03-09T07:38:17.253Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-03-09T07:41:14.056Z","type":"quit"}
{"nick":"kpatticha","date":"2019-03-09T07:45:48.948Z","type":"join"}
{"nick":"kpatticha","reason":"Read error: Connection reset by peer","date":"2019-03-09T07:48:29.723Z","type":"quit"}
{"nick":"kpatticha","date":"2019-03-09T07:49:10.287Z","type":"join"}
{"nick":"kpatticha","reason":"Quit: Leaving","date":"2019-03-09T07:54:17.383Z","type":"quit"}
