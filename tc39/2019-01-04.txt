{"nick":"keith_mi_","date":"2019-01-04T00:02:33.691Z","type":"join"}
{"nick":"wuz_","date":"2019-01-04T00:07:53.483Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2019-01-04T00:12:20.551Z","type":"quit"}
{"nick":"devsnek","message":"is there any normative definition of \"the arguments passed to this function invocation\"","date":"2019-01-04T00:22:12.754Z","type":"message"}
{"nick":"devsnek","message":"i can't find anything and every usage of it seems to go against the behaviour of filling arguments with undefined based on the function's length","date":"2019-01-04T00:22:34.607Z","type":"message"}
{"nick":"ljharb","message":"? isn't it like, the things in the invocation parens?","date":"2019-01-04T00:22:44.791Z","type":"message"}
{"nick":"devsnek","message":"ðŸ¤·","date":"2019-01-04T00:23:04.905Z","type":"message"}
{"nick":"devsnek","message":"like i said i can't find any normative definition","date":"2019-01-04T00:23:10.834Z","type":"message"}
{"nick":"ljharb","message":"devsnek: https://tc39.github.io/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist leads to https://tc39.github.io/ecma262/#sec-ordinarycallevaluatebody which leads to https://tc39.github.io/ecma262/#sec-function-definitions-runtime-semantics-evaluatebody which leads to https://tc39.github.io/ecma262/#sec-functiondeclarationinstantiation which seems like it has the steps you're interested in?","date":"2019-01-04T00:25:35.074Z","type":"message"}
{"nick":"ljharb","message":"there's 37 steps there so i'm not super sure","date":"2019-01-04T00:25:53.194Z","type":"message"}
{"nick":"ljharb","message":"note that i wouldn't expect `arguments` to match the length, only to match the actual provided arguments","date":"2019-01-04T00:26:20.137Z","type":"message"}
{"nick":"devsnek","message":"yeah i'm not talking about `arguments`","date":"2019-01-04T00:27:02.378Z","type":"message"}
{"nick":"devsnek","message":"builtin function algorithms refer to both \"the number of arguments passed for this function invocation\" and \"the arguments passed to this function invocation\"","date":"2019-01-04T00:27:34.696Z","type":"message"}
{"nick":"devsnek","message":"neither of them are actually specified but its pretty easy to see what they mean in context","date":"2019-01-04T00:27:54.652Z","type":"message"}
{"nick":"devsnek","message":"the problem is that it feels like i need to store two copies of every function arguments list now. one for dealing with functions that want the raw list, and one for functions with use the more normal behaviour of arguments being filled in with `undefined`","date":"2019-01-04T00:28:42.887Z","type":"message"}
{"nick":"devsnek","message":"String.fromCharCode, for example, has `...codeUnits` as the arguments, `1` as the length, so everything about it would suggest that calling it with no args would be like calling it with (undefined) but since other engines exist i know that's not right","date":"2019-01-04T00:30:51.777Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i'm not sure that's true - if you only store `arguments`, and then do something like `declaredArgumentNames.map((name, i) => ({ identifier: name, value: arguments.length < i ? arguments[i] : undefined }))` to get the function's argument bindings?","date":"2019-01-04T00:40:13.271Z","type":"message"}
{"nick":"ljharb","message":"for a rest arg tho you'd do something like `Array.prototype.slice.call(arguments, i)`","date":"2019-01-04T00:41:02.236Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/devsnek/engine262/blob/master/src/intrinsics/StringPrototype.mjs#L85","date":"2019-01-04T00:41:17.186Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-04T00:53:28.780Z","type":"quit"}
{"nick":"aki_","date":"2019-01-04T00:55:29.617Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-01-04T00:56:24.818Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T00:56:33.137Z","type":"nick"}
{"nick":"keith_m__","date":"2019-01-04T01:05:58.535Z","type":"join"}
{"nick":"rkirsling","message":"created https://github.com/tc39/ecma262/issues/1392","date":"2019-01-04T01:06:26.202Z","type":"message"}
{"nick":"rkirsling","message":"^ ljharb cloudshu (and also bradleymeck jmdyck )","date":"2019-01-04T01:06:34.654Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: so, `try {} catch (e) { for (var e of whatever) {} }` works fine for me in safari","date":"2019-01-04T01:09:45.799Z","type":"message"}
{"nick":"ljharb","message":"where does that error?","date":"2019-01-04T01:09:50.403Z","type":"message"}
{"nick":"ljharb","message":"ah, you documented it, nvm","date":"2019-01-04T01:09:58.680Z","type":"message"}
{"nick":"rkirsling","message":"yeah I didn't implement that piece because the parser doesn't currently know whether we're for-of or for-in at the time of that `var e`","date":"2019-01-04T01:11:44.153Z","type":"message"}
{"nick":"rkirsling","message":"*didn't yet","date":"2019-01-04T01:11:57.795Z","type":"message"}
{"nick":"rkirsling","message":"...so it's convenient that this discussion came up ;)","date":"2019-01-04T01:12:12.650Z","type":"message"}
{"nick":"not-an-aardvark","date":"2019-01-04T01:12:12.839Z","type":"join"}
{"nick":"keith_m__","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-04T01:41:26.605Z","type":"quit"}
{"nick":"aki_","date":"2019-01-04T03:01:16.774Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 258 seconds","date":"2019-01-04T03:02:24.092Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T03:02:24.526Z","type":"nick"}
{"nick":"rkirsling","message":"^ just put up a concrete proposal for the above since it's quite simple","date":"2019-01-04T03:16:25.156Z","type":"message"}
{"nick":"rkirsling","message":"(we can obviously still discuss any conceptual objections on the issue thread)","date":"2019-01-04T03:16:51.831Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2019-01-04T03:31:51.179Z","type":"quit"}
{"nick":"Bakkot","message":"ljharb: might have missed this in scrollback, but in case this has not yet been clearly stated, the reason catch bindings are weird is that in `try { throw 0; } catch (e) { var e = 1; }`, the `var e = 1` declares one variable and writes to _a different variable_","date":"2019-01-04T03:46:01.084Z","type":"message"}
{"nick":"Bakkot","message":"similar thing happens for `with({e: 0}) { var e = 1; }`, but of course it's not possible to statically prevent that case","date":"2019-01-04T03:47:18.557Z","type":"message"}
{"nick":"devsnek","message":"does anyone know where the spec talks about filling in arguments to builtin function calls with `undefined` based on the length","date":"2019-01-04T03:47:57.516Z","type":"message"}
{"nick":"devsnek","message":"i can never find the section","date":"2019-01-04T03:48:00.683Z","type":"message"}
{"nick":"jmdyck","message":"https://tc39.github.io/ecma262/#sec-ecmascript-standard-built-in-objects","date":"2019-01-04T03:49:21.223Z","type":"message"}
{"nick":"jmdyck","message":"4th para","date":"2019-01-04T03:49:30.422Z","type":"message"}
{"nick":"devsnek","message":"thank you very much","date":"2019-01-04T03:49:55.471Z","type":"message"}
{"nick":"jmdyck","message":"unless otherwise specified!","date":"2019-01-04T03:50:05.254Z","type":"message"}
{"nick":"devsnek","message":"i'm changing all the occurrences of \"the arguments passed to this function invocation\"","date":"2019-01-04T03:51:14.622Z","type":"message"}
{"nick":"devsnek","message":"cuz its kinda hacky","date":"2019-01-04T03:51:23.182Z","type":"message"}
{"nick":"jmdyck","message":"to what?","date":"2019-01-04T03:51:36.302Z","type":"message"}
{"nick":"devsnek","message":"to using the number of arguments passed to this function invocation","date":"2019-01-04T03:52:07.717Z","type":"message"}
{"nick":"devsnek","message":"also maybe you know the answer to this, everywhere that rest args are used in builtin functions, there's always an explicit step describing getting those args","date":"2019-01-04T03:53:20.713Z","type":"message"}
{"nick":"devsnek","message":"like step one of https://tc39.github.io/ecma262/#sec-string.raw","date":"2019-01-04T03:53:48.711Z","type":"message"}
{"nick":"jmdyck","message":"hm, no occurrences of \"the arguments passed to this function invocation\" exactly","date":"2019-01-04T03:53:54.234Z","type":"message"}
{"nick":"devsnek","message":"+/i invocation/call","date":"2019-01-04T03:54:16.062Z","type":"message"}
{"nick":"devsnek","message":"+/-","date":"2019-01-04T03:54:28.234Z","type":"message"}
{"nick":"jmdyck","message":"so in String.raw, the alg still needs the arguments, not just the number of them.","date":"2019-01-04T03:55:49.085Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2019-01-04T03:55:57.690Z","type":"message"}
{"nick":"jmdyck","message":"so i don't see how you can do the substitution you described","date":"2019-01-04T03:56:14.847Z","type":"message"}
{"nick":"devsnek","message":"no i was asking about step 1","date":"2019-01-04T03:56:23.320Z","type":"message"}
{"nick":"devsnek","message":"why it exists","date":"2019-01-04T03:56:27.504Z","type":"message"}
{"nick":"jmdyck","message":"ah","date":"2019-01-04T03:56:48.286Z","type":"message"}
{"nick":"devsnek","message":"like nothing says \"Let template be the first argument passed to this function call\"","date":"2019-01-04T03:56:49.847Z","type":"message"}
{"nick":"devsnek","message":"its implicit from the header","date":"2019-01-04T03:56:57.687Z","type":"message"}
{"nick":"jmdyck","message":"i think there actually are some things like that...","date":"2019-01-04T03:57:31.568Z","type":"message"}
{"nick":"devsnek","message":"no results for \"first argument\" in that position","date":"2019-01-04T03:58:21.499Z","type":"message"}
{"nick":"devsnek","message":"there's also \"number of arguments\" and \"actual number of arguments\" even though they're used the same way","date":"2019-01-04T03:58:57.455Z","type":"message"}
{"nick":"devsnek","message":"Array.prototype.unshift just says \"Let argCount be the number of actual arguments.\" :(","date":"2019-01-04T04:01:11.036Z","type":"message"}
{"nick":"jmdyck","message":"I'm not finding what I said, so probably imagined it.","date":"2019-01-04T04:03:04.516Z","type":"message"}
{"nick":"jmdyck","message":"(other than the rest param cases you noted)","date":"2019-01-04T04:03:26.795Z","type":"message"}
{"nick":"devsnek","message":"every builtin with ...args seems to have its own magic semantics approximating that the arguments matched by `...args` will not be `undefined` filled","date":"2019-01-04T04:03:53.656Z","type":"message"}
{"nick":"jmdyck","message":"But yeah, I recall I was surprised at the vagueness of the semantics for invoking built-in functions.","date":"2019-01-04T04:05:03.716Z","type":"message"}
{"nick":"devsnek","message":"this is the most annoying thing i've had with it so far","date":"2019-01-04T04:05:56.359Z","type":"message"}
{"nick":"wuz_","date":"2019-01-04T04:08:13.984Z","type":"join"}
{"nick":"jmdyck","message":"It's well-defined down to the point that the built-in function's [[Call]] is invoked, but at that point it traverses this bubble of prose in 9.3 and 17 before it hits the algorithms that actually appear in the spec.","date":"2019-01-04T04:11:26.852Z","type":"message"}
{"nick":"devsnek","message":"that's why i can never find that section lol","date":"2019-01-04T04:12:19.858Z","type":"message"}
{"nick":"wuz_","reason":"Ping timeout: 246 seconds","date":"2019-01-04T04:12:26.980Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-01-04T04:15:25.447Z","type":"quit"}
{"nick":"jmdyck","message":"Moreover, for the overloaded constructors (like Date and Array), there's some extra (non-algorithmic) logic to select the appropriate constructor-alg.","date":"2019-01-04T04:16:26.604Z","type":"message"}
{"nick":"devsnek","message":"yeah those things are hecky","date":"2019-01-04T04:17:40.627Z","type":"message"}
{"nick":"jmdyck","message":"Looks like that layer of vagueness has been there since the first edition (and was even vaguer).","date":"2019-01-04T04:24:40.247Z","type":"message"}
{"nick":"devsnek","message":"time to refactor","date":"2019-01-04T04:25:50.350Z","type":"message"}
{"nick":"jmdyck","message":"I'm guessing it hasn't ever been clarified because it was (perceived to be) kinda tricky for not much benefit.","date":"2019-01-04T04:26:30.507Z","type":"message"}
{"nick":"jmdyck","message":"And leaving it vague allows some flexibility when it comes to specifying builtin func algs","date":"2019-01-04T04:30:23.956Z","type":"message"}
{"nick":"devsnek","message":"vague is ok, but its just kinda confusing rn","date":"2019-01-04T04:31:13.510Z","type":"message"}
{"nick":"devsnek","message":"if other engines didn't exist it would be reasonable to assume that String.fromCharCode(undefined) behaved like String.fromCharCode()","date":"2019-01-04T04:31:39.938Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/tc39/ecma262/pull/1394","date":"2019-01-04T04:33:06.010Z","type":"message"}
{"nick":"jmdyck","message":"Well, that would be one reasonable possibility, but the problem is the concept of the number of arguments that \"the function is specified to require\" isn't well-defined","date":"2019-01-04T04:35:10.728Z","type":"message"}
{"nick":"devsnek","message":"its specified in that paragraph","date":"2019-01-04T04:35:52.733Z","type":"message"}
{"nick":"jmdyck","message":"hm?","date":"2019-01-04T04:36:23.650Z","type":"message"}
{"nick":"devsnek","message":"i swear i just saw something that said `\"length\" defines the number of required arguments of a function` (paraphrase)","date":"2019-01-04T04:37:25.511Z","type":"message"}
{"nick":"devsnek","message":"oh i saw this https://tc39.github.io/ecma262/#sec-function-instances-length","date":"2019-01-04T04:37:51.482Z","type":"message"}
{"nick":"jmdyck","message":"\"typical number\", so doesn't synch with wording in 17","date":"2019-01-04T04:38:42.962Z","type":"message"}
{"nick":"devsnek","message":"aha paragraph 3 of section 17","date":"2019-01-04T04:39:09.214Z","type":"message"}
{"nick":"devsnek","message":"\"For each built-in function, this specification describes the arguments required by that function and the properties of that function object.\"","date":"2019-01-04T04:39:11.074Z","type":"message"}
{"nick":"devsnek","message":"i think that's as close as it gets","date":"2019-01-04T04:39:17.840Z","type":"message"}
{"nick":"jmdyck","message":"also not well-defined is exactly what would constitute \"specifying otherwise\".","date":"2019-01-04T04:39:36.668Z","type":"message"}
{"nick":"devsnek","message":"isn't that where hacky prose comes into play","date":"2019-01-04T04:40:06.863Z","type":"message"}
{"nick":"jmdyck","message":"well, it could be done via prose or pseudo-code, the spec doesn't say.","date":"2019-01-04T04:40:56.111Z","type":"message"}
{"nick":"devsnek","message":"maybe we can increase the specified behaviour of the [[Call]] and [[Construct]] of builtins","date":"2019-01-04T04:41:13.448Z","type":"message"}
{"nick":"devsnek","message":"to basically this https://github.com/devsnek/engine262/blob/master/src/value.mjs#L263","date":"2019-01-04T04:41:43.689Z","type":"message"}
{"nick":"jmdyck","message":"o wait, what i said before is wrong.","date":"2019-01-04T04:47:28.651Z","type":"message"}
{"nick":"jmdyck","message":"The vagueness layer doesn't start till step 10 of https://tc39.github.io/ecma262/#sec-built-in-function-objects-call-thisargument-argumentslist","date":"2019-01-04T04:49:20.723Z","type":"message"}
{"nick":"devsnek","message":"like i said above lol","date":"2019-01-04T04:49:58.407Z","type":"message"}
{"nick":"devsnek","message":"it just kinda falls off a cliff there","date":"2019-01-04T04:50:06.754Z","type":"message"}
{"nick":"jmdyck","message":"I'm not sure what the point of \"an imp-defined manner that conforms to the specification of F\" is. Does any implementation actually define that manner?","date":"2019-01-04T04:52:24.312Z","type":"message"}
{"nick":"jmdyck","message":"Should there be variation between implementations on this point?","date":"2019-01-04T04:53:15.496Z","type":"message"}
{"nick":"devsnek","message":"the specification of F is always section 17","date":"2019-01-04T04:53:47.509Z","type":"message"}
{"nick":"jmdyck","message":"Certainly they can vary in how they accomplish it, but should there be any variation in the semantics?","date":"2019-01-04T04:53:51.625Z","type":"message"}
{"nick":"jmdyck","message":"\"the specification of F\" probably refers to the algorithm (or whatever) for the function in 18-26","date":"2019-01-04T04:55:46.639Z","type":"message"}
{"nick":"devsnek","message":"ðŸ¤·","date":"2019-01-04T04:56:21.095Z","type":"message"}
{"nick":"aki_","date":"2019-01-04T05:06:39.757Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-04T05:07:52.774Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T05:07:53.168Z","type":"nick"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-01-04T05:44:32.398Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-04T06:08:23.747Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 272 seconds","date":"2019-01-04T06:12:52.897Z","type":"quit"}
{"nick":"ljharb","message":"Bakkot: i guess i don't understand why it wouldn't just overwrite the catch binding","date":"2019-01-04T06:55:33.724Z","type":"message"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-01-04T07:07:25.197Z","type":"quit"}
{"nick":"rkirsling","message":"so `let e = 0; try {} catch (e) { var e; }` is a syntax error, while `var e = 1; try { throw 2; } catch (e) { var e = 3; print(e); } print(e);`prints 3 and 1","date":"2019-01-04T07:08:58.399Z","type":"message"}
{"nick":"rkirsling","message":"hadn't fully thought about the latter case","date":"2019-01-04T07:09:17.132Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-04T07:13:40.763Z","type":"quit"}
{"nick":"akirose","date":"2019-01-04T07:14:40.470Z","type":"join"}
{"nick":"rkirsling","message":"the catch param scope is just its own thing, and so I guess ideally we would preventing hoisting through it, but that would break the web, so the idea was to prevent as much as possible","date":"2019-01-04T07:15:24.106Z","type":"message"}
{"nick":"ljharb","message":"ahh","date":"2019-01-04T07:16:02.926Z","type":"message"}
{"nick":"rkirsling","message":"prohibiting `try {} catch ({ message }) { var message; }` (the result of PR #150) definitely seems good","date":"2019-01-04T07:16:07.429Z","type":"message"}
{"nick":"ljharb","message":"devsnek: btw, with your recent pr, did you find the location where function signature conventions are discussed?","date":"2019-01-04T07:16:25.065Z","type":"message"}
{"nick":"ljharb","message":"like what permits the spec to say \"Object.assign (target, ...sources)` and have that map to argument 0 in target and 1+ in sources","date":"2019-01-04T07:17:21.063Z","type":"message"}
{"nick":"devsnek","message":"ljharb: as far as i can tell neither that or regular named arguments are explicitly defined","date":"2019-01-04T07:25:09.588Z","type":"message"}
{"nick":"ljharb","message":"interesting","date":"2019-01-04T07:26:11.295Z","type":"message"}
{"nick":"ljharb","message":"i assume they are for runtime code; but not for spec functions","date":"2019-01-04T07:26:23.100Z","type":"message"}
{"nick":"devsnek","message":"yes they have extensive specification for js source","date":"2019-01-04T07:26:39.231Z","type":"message"}
{"nick":"ljharb","message":"we should probably add a section to https://tc39.github.io/ecma262/#sec-notational-conventions that talks about the spec forms","date":"2019-01-04T07:26:46.646Z","type":"message"}
{"nick":"ljharb","message":"specifically i'm interested in whether a rest arg is a List or an Array (i assume a list)","date":"2019-01-04T07:27:06.385Z","type":"message"}
{"nick":"devsnek","message":"and yeah they are `List` not arrays","date":"2019-01-04T07:27:09.045Z","type":"message"}
{"nick":"ljharb","message":"where does it say that tho","date":"2019-01-04T07:27:20.345Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2019-01-04T07:27:33.378Z","type":"message"}
{"nick":"devsnek","message":"technically i removed the stuff that said that","date":"2019-01-04T07:27:38.900Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2019-01-04T07:28:08.336Z","type":"message"}
{"nick":"ljharb","message":"i suspect that there are many \"rest args\" that didn't say that in the first place","date":"2019-01-04T07:28:26.492Z","type":"message"}
{"nick":"ljharb","message":"that's why i'm thinking it should have an overarching notational convention","date":"2019-01-04T07:28:40.765Z","type":"message"}
{"nick":"devsnek","message":"yes i agree","date":"2019-01-04T07:29:02.922Z","type":"message"}
{"nick":"devsnek","message":"the key thing about the builtin rest args is that they don't get filled with `undefined` via function.length","date":"2019-01-04T07:30:04.708Z","type":"message"}
{"nick":"devsnek","message":"i really really wish js had python's function annotations rn","date":"2019-01-04T07:30:26.195Z","type":"message"}
{"nick":"mgol","date":"2019-01-04T07:36:10.376Z","type":"join"}
{"nick":"annevk","message":"Domenic: arc and arcTo on canvas 2d context need to be in order; thereâ€™s a note in the spec about it (maybe source only)","date":"2019-01-04T07:53:41.500Z","type":"message"}
{"nick":"annevk","message":"Domenic: and yeah, always random or always ordered applies here, but of course we have neither ðŸ˜Š","date":"2019-01-04T07:54:34.324Z","type":"message"}
{"nick":"aki_","date":"2019-01-04T09:21:34.770Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-04T09:21:47.326Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T09:21:49.658Z","type":"nick"}
{"nick":"howdoi","date":"2019-01-04T09:55:57.774Z","type":"join"}
{"nick":"wuz_","date":"2019-01-04T10:08:49.799Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 268 seconds","date":"2019-01-04T10:13:52.699Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-04T11:28:46.774Z","type":"quit"}
{"nick":"akirose","date":"2019-01-04T11:29:19.441Z","type":"join"}
{"nick":"jmdyck","date":"2019-01-04T12:38:19.778Z","type":"join"}
{"nick":"aki_","date":"2019-01-04T13:36:01.302Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-04T13:36:47.398Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T13:36:47.825Z","type":"nick"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-01-04T13:38:14.805Z","type":"quit"}
{"nick":"gibson042","date":"2019-01-04T13:55:59.694Z","type":"join"}
{"nick":"cloudshu","date":"2019-01-04T14:15:56.885Z","type":"join"}
{"nick":"wuz_","date":"2019-01-04T14:28:46.425Z","type":"join"}
{"nick":"jorydotcom","date":"2019-01-04T15:10:54.038Z","type":"join"}
{"nick":"Havvy","reason":"Read error: Connection reset by peer","date":"2019-01-04T15:29:30.473Z","type":"quit"}
{"nick":"Havvy","date":"2019-01-04T15:31:33.327Z","type":"join"}
{"nick":"Havvy","reason":"Read error: Connection reset by peer","date":"2019-01-04T15:32:45.434Z","type":"quit"}
{"nick":"Havvy","date":"2019-01-04T15:39:55.255Z","type":"join"}
{"nick":"aki_","date":"2019-01-04T15:41:14.255Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-01-04T15:42:08.299Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T15:42:08.599Z","type":"nick"}
{"nick":"devsnek","date":"2019-01-04T16:29:01.472Z","type":"quit"}
{"nick":"devsnek","date":"2019-01-04T16:29:23.980Z","type":"join"}
{"nick":"devsnek","message":"any bocoup people around? i'm wondering if test262-integrator is safe to use. it looks sorta unmaintained","date":"2019-01-04T16:32:28.381Z","type":"message"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2019-01-04T17:05:54.453Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-04T17:07:00.292Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 245 seconds","date":"2019-01-04T17:15:28.290Z","type":"quit"}
{"nick":"jwalden","date":"2019-01-04T17:23:37.807Z","type":"join"}
{"nick":"wuz_","date":"2019-01-04T17:45:50.428Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-01-04T17:48:46.254Z","type":"quit"}
{"nick":"aki_","date":"2019-01-04T17:48:52.301Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T17:49:46.710Z","type":"nick"}
{"nick":"AtumT","date":"2019-01-04T17:55:11.723Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2019-01-04T18:32:34.431Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-04T18:44:02.868Z","type":"join"}
{"nick":"wuz_","date":"2019-01-04T18:55:50.093Z","type":"join"}
{"nick":"aki_","date":"2019-01-04T19:54:37.804Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-01-04T19:55:03.291Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T19:55:04.158Z","type":"nick"}
{"nick":"devsnek","message":"jmdyck: do you think this is ok? \"Builtin functions in ECMA-262 are specified by signature and normative algorithm. A function signature is comprised of named arguments, which may be optional or rest arguments. Optional arguments are specified with [ , _name_ ] and rest arguments are specified with ..._name_ .A function's <dfn>required arguments</dfn> are the named arguments not covered by optional or rest arguments. Unless","date":"2019-01-04T19:58:21.374Z","type":"message"}
{"nick":"devsnek","message":"otherwise specified, a builtin function's \"length\" property is set to the number of required arguments it has.\"","date":"2019-01-04T19:58:21.753Z","type":"message"}
{"nick":"devsnek","message":"hmm that kinda went over the irc limit lol","date":"2019-01-04T19:58:45.189Z","type":"message"}
{"nick":"jmdyck","message":"They aren't all specified by a normative algorithm. E.g. a lot of the Math functions are specified by a set of constraints.","date":"2019-01-04T19:59:43.374Z","type":"message"}
{"nick":"devsnek","message":"heck","date":"2019-01-04T20:00:05.268Z","type":"message"}
{"nick":"jmdyck","message":"And Array.sort is a hodge-podge of algorithms and prose.","date":"2019-01-04T20:00:41.454Z","type":"message"}
{"nick":"devsnek","message":"its also kinda annoying that \"rest\" isn't an adjective","date":"2019-01-04T20:00:42.219Z","type":"message"}
{"nick":"devsnek","message":"is there a better term for this type of argument","date":"2019-01-04T20:01:16.215Z","type":"message"}
{"nick":"jmdyck","message":"It's probably better if you refer to the things in the signature as parameters rather than arguments.","date":"2019-01-04T20:02:20.919Z","type":"message"}
{"nick":"devsnek","message":"i wish we wrapped the paragraphs in the spec","date":"2019-01-04T20:02:55.718Z","type":"message"}
{"nick":"jmdyck","message":"(I'm kinda glad we don't. If you're searching the source for a paragraph that contains some text, you can be confident that a potential hit won't be interrupted by a linebreak.)","date":"2019-01-04T20:04:33.101Z","type":"message"}
{"nick":"devsnek","message":"but diffs and editing","date":"2019-01-04T20:05:23.579Z","type":"message"}
{"nick":"jmdyck","message":"Yeah, I'll concede that it's a pain in some respects.","date":"2019-01-04T20:05:51.595Z","type":"message"}
{"nick":"jmdyck","message":"But note that wrapping can have bad effects on diffs too.","date":"2019-01-04T20:06:09.860Z","type":"message"}
{"nick":"jmdyck","message":"e.g. insert a word near beginning of para, and every subsequent line gets rewrapped.","date":"2019-01-04T20:06:37.531Z","type":"message"}
{"nick":"devsnek","message":"wouldn't be any worse than the current thing :P","date":"2019-01-04T20:06:58.482Z","type":"message"}
{"nick":"jmdyck","message":"some diff-ers would highlight just the insertion.","date":"2019-01-04T20:07:31.277Z","type":"message"}
{"nick":"devsnek","message":"github usually does that too","date":"2019-01-04T20:07:38.551Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2019-01-04T20:07:40.689Z","type":"message"}
{"nick":"jmdyck","message":"except that sometimes it doesn't, dunno why.","date":"2019-01-04T20:08:04.397Z","type":"message"}
{"nick":"jmdyck","message":"(E.g., it didn't highlight the insertion of \"if not covered by a rest argument\".)","date":"2019-01-04T20:08:33.575Z","type":"message"}
{"nick":"wuz_","reason":"Ping timeout: 258 seconds","date":"2019-01-04T20:08:35.091Z","type":"quit"}
{"nick":"jmdyck","message":"(resuming looking at your para...)","date":"2019-01-04T20:09:09.794Z","type":"message"}
{"nick":"devsnek","message":"yeah that was the only thing i added","date":"2019-01-04T20:09:25.037Z","type":"message"}
{"nick":"devsnek","message":"i guess i need a better term for that too","date":"2019-01-04T20:09:36.673Z","type":"message"}
{"nick":"TabAtkins","message":"devsnek: Wrapping is good. Wrapping at a col limit is terrible, for multiple reasons of which jmdyck provided one. Wrap at sentence and significant phrase breaks, best of both worlds.","date":"2019-01-04T20:09:48.468Z","type":"message"}
{"nick":"devsnek","message":"i think whatwg wraps like that","date":"2019-01-04T20:10:02.857Z","type":"message"}
{"nick":"TabAtkins","message":"https://rhodesmill.org/brandon/2012/one-sentence-per-line/","date":"2019-01-04T20:10:16.062Z","type":"message"}
{"nick":"jmdyck","message":"The distinction of \"named argument\" vs \"rest argument\" doesn't sound right, because a rest arg has a name too.","date":"2019-01-04T20:10:16.451Z","type":"message"}
{"nick":"TabAtkins","message":"CSSWG does. WHATWG uses col-based breaking.","date":"2019-01-04T20:10:23.568Z","type":"message"}
{"nick":"devsnek","message":"markdown lets you wrap at sentences","date":"2019-01-04T20:10:25.603Z","type":"message"}
{"nick":"jmdyck","message":"(TabAtkins: I like linebreaking at sentence and significant phrase breaks too. I don't think I've ever seen it in anyone else's text though.)","date":"2019-01-04T20:12:09.669Z","type":"message"}
{"nick":"TabAtkins","message":"It's feels weird at first! but good god it has so many benefits","date":"2019-01-04T20:12:35.215Z","type":"message"}
{"nick":"jmdyck","message":"yup","date":"2019-01-04T20:12:41.569Z","type":"message"}
{"nick":"TabAtkins","message":"really tho just the extreme diff-friendliness is enough all by itself imo","date":"2019-01-04T20:12:52.591Z","type":"message"}
{"nick":"TabAtkins","message":"(example right at the beginning of the linked webpage)","date":"2019-01-04T20:13:02.725Z","type":"message"}
{"nick":"devsnek","message":"i generally wrap my comments near the longest line in the same block :(","date":"2019-01-04T20:13:22.125Z","type":"message"}
{"nick":"jmdyck","message":"devsnek: as a strawman, consider (plain vs optional vs rest) parameters","date":"2019-01-04T20:13:57.864Z","type":"message"}
{"nick":"wuz_","date":"2019-01-04T20:15:47.983Z","type":"join"}
{"nick":"devsnek","message":"sgtm","date":"2019-01-04T20:16:09.869Z","type":"message"}
{"nick":"devsnek","message":"those are all subsets of named parameters though","date":"2019-01-04T20:16:17.297Z","type":"message"}
{"nick":"jmdyck","message":"The problem with defining \"required arguments\" is that readers might infer that they actually *are* required, i.e. that omitting them is some kind of error, which it isn't.","date":"2019-01-04T20:17:24.475Z","type":"message"}
{"nick":"jmdyck","message":"In fact that's also a problem with defining \"optional\" args, since that suggests that the others aren't optional, whereas they are.","date":"2019-01-04T20:18:27.357Z","type":"message"}
{"nick":"jmdyck","message":"But the latter I'm not sure we can get away from.","date":"2019-01-04T20:18:48.029Z","type":"message"}
{"nick":"devsnek","message":"is there a way to use the formatting of signatures without using heading","date":"2019-01-04T20:19:22.551Z","type":"message"}
{"nick":"devsnek","message":"can i pop it in a paragraph tag or something","date":"2019-01-04T20:19:31.564Z","type":"message"}
{"nick":"jmdyck","message":"hm","date":"2019-01-04T20:19:44.177Z","type":"message"}
{"nick":"jmdyck","message":"I don't think so.","date":"2019-01-04T20:20:27.579Z","type":"message"}
{"nick":"TabAtkins","message":"\"defaulted\" args, not optional.","date":"2019-01-04T20:20:32.374Z","type":"message"}
{"nick":"devsnek","message":"defaulted to what","date":"2019-01-04T20:20:45.735Z","type":"message"}
{"nick":"devsnek","message":"aren't they explicitly not present","date":"2019-01-04T20:20:56.699Z","type":"message"}
{"nick":"devsnek","message":"unless the function's length is overridden by one of those \"The \"length\" property of Math.max is 1\" things","date":"2019-01-04T20:21:15.650Z","type":"message"}
{"nick":"jmdyck","message":"I think the only difference between \"plain\" and \"optional\" parameters is that the former contribute to the 'default' value of \"length\" property, and the latter don't. Semantically, they're treated exactly the same, aren't they?","date":"2019-01-04T20:22:23.887Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-01-04T20:22:44.945Z","type":"message"}
{"nick":"jmdyck","message":"for built-ins that is.","date":"2019-01-04T20:22:52.783Z","type":"message"}
{"nick":"devsnek","message":"but not being part of the length property means they don't get filled by undefined","date":"2019-01-04T20:22:55.850Z","type":"message"}
{"nick":"jmdyck","message":"(For abstract operations, there *is* a distinction.)","date":"2019-01-04T20:23:08.220Z","type":"message"}
{"nick":"devsnek","message":"they're the ones where the algorithm says \"if _x_ is present, blah blah blah\"","date":"2019-01-04T20:23:17.466Z","type":"message"}
{"nick":"jmdyck","message":"So you don't think there's a case where an 'optional' param is ever set to undefined according to the missing arg rule?","date":"2019-01-04T20:24:31.641Z","type":"message"}
{"nick":"devsnek","message":"there are cases","date":"2019-01-04T20:25:45.797Z","type":"message"}
{"nick":"devsnek","message":"when the length property is explicitly overridden","date":"2019-01-04T20:25:53.385Z","type":"message"}
{"nick":"jmdyck","message":"hm","date":"2019-01-04T20:26:20.641Z","type":"message"}
{"nick":"devsnek","message":"well in theory that would be a case","date":"2019-01-04T20:26:58.742Z","type":"message"}
{"nick":"devsnek","message":"i assume something like that exists in the spec","date":"2019-01-04T20:27:05.713Z","type":"message"}
{"nick":"devsnek","message":"actually y'know what go figure :( https://tc39.github.io/ecma262/#sec-date.utc","date":"2019-01-04T20:27:47.177Z","type":"message"}
{"nick":"jmdyck","message":"ah, length is 7.","date":"2019-01-04T20:28:45.195Z","type":"message"}
{"nick":"devsnek","message":"but it still asks if they're present","date":"2019-01-04T20:28:55.192Z","type":"message"}
{"nick":"devsnek","message":"so i guess they don't get filled","date":"2019-01-04T20:29:01.300Z","type":"message"}
{"nick":"jmdyck","message":"In the constructor for Symbol, _description_ is optional, but there's no check for whether it's present, just for if it's undefined, so that's assuming that the optional param still gets the undefined-for-missing rule.","date":"2019-01-04T20:31:35.174Z","type":"message"}
{"nick":"jmdyck","message":"Similarly String.prototype.endsWith's  _endPosition_","date":"2019-01-04T20:34:24.872Z","type":"message"}
{"nick":"jmdyck","message":"String.prototype.includes _position_","date":"2019-01-04T20:34:43.158Z","type":"message"}
{"nick":"jmdyck","message":"String.prototype.indexOf _position_","date":"2019-01-04T20:35:58.230Z","type":"message"}
{"nick":"jmdyck","message":"String.prototype.lastIndexOf _position_","date":"2019-01-04T20:36:26.880Z","type":"message"}
{"nick":"jmdyck","message":"String.prototype.padEnd _fillString_","date":"2019-01-04T20:36:53.958Z","type":"message"}
{"nick":"jmdyck","message":"String.prototype.padStart _fillString_","date":"2019-01-04T20:37:14.580Z","type":"message"}
{"nick":"jmdyck","message":"well, that's enough for now.","date":"2019-01-04T20:37:27.851Z","type":"message"}
{"nick":"devsnek","message":"so Date is the weird one","date":"2019-01-04T20:38:25.621Z","type":"message"}
{"nick":"jmdyck","message":"well, checking if square-bracketed params are 'present' isn't weird. But having square-bracketed params at positions <= `length` is probably weird.","date":"2019-01-04T20:40:56.832Z","type":"message"}
{"nick":"devsnek","message":"https://gc.gy/14339560.png","date":"2019-01-04T20:42:43.943Z","type":"message"}
{"nick":"devsnek","message":"is there a tag i can use to prevent breaks inside those method signatures","date":"2019-01-04T20:43:26.726Z","type":"message"}
{"nick":"devsnek","message":"aha `nobr`","date":"2019-01-04T20:43:57.994Z","type":"message"}
{"nick":"jmdyck","message":"(looking at image now...)","date":"2019-01-04T20:45:29.113Z","type":"message"}
{"nick":"jmdyck","message":"\"Builtin\" should be \"Built-in\"","date":"2019-01-04T20:45:44.802Z","type":"message"}
{"nick":"devsnek","message":"i feel like the semantics of rest params are still lacking","date":"2019-01-04T20:46:17.856Z","type":"message"}
{"nick":"jmdyck","message":"again, not always a normative algorithm.","date":"2019-01-04T20:46:18.142Z","type":"message"}
{"nick":"devsnek","message":"maybe \"behavior\"?","date":"2019-01-04T20:46:56.030Z","type":"message"}
{"nick":"jmdyck","message":"maybe just \"and usually a normative algorithm\". Or you could just leave out the algorithm bit","date":"2019-01-04T20:47:56.125Z","type":"message"}
{"nick":"jmdyck","message":"E.g. \"the specification of each built-in starts with a signature\", or something like that","date":"2019-01-04T20:48:35.901Z","type":"message"}
{"nick":"jmdyck","message":"You might want to avoid \"signature\" and just talk about the (clause) header.","date":"2019-01-04T20:49:45.888Z","type":"message"}
{"nick":"jmdyck","message":"The phrase \"would be written as\" sounds like \"a JS programmer could write...\", whereas what you want to say is, this is how it would appear in the clause-header for that function in the spec.","date":"2019-01-04T20:55:03.558Z","type":"message"}
{"nick":"jmdyck","message":"not sure how to say that well","date":"2019-01-04T20:55:33.505Z","type":"message"}
{"nick":"jmdyck","message":"Need better distinction between \"parameters\" (which appear in the function's header), and \"arguments\" which appear in an invocation of the function.","date":"2019-01-04T20:56:45.396Z","type":"message"}
{"nick":"devsnek","message":"hmmm","date":"2019-01-04T20:59:19.127Z","type":"message"}
{"nick":"jmdyck","message":"The text should maybe say that these are notations that the spec uses to specify (part of) the behavior of built-ins, and aren't (necessarily) notations in the language itself. I think there are example wordings for this elsewhere in the spec.","date":"2019-01-04T21:01:13.919Z","type":"message"}
{"nick":"jmdyck","message":"I find that text is usually clearer if you can change plurals to singulars, e.g. \"A rest parameter collects ...\" If you put it in the plural, then there's the possibility that a bunch of them are doing it collectively.","date":"2019-01-04T21:04:26.565Z","type":"message"}
{"nick":"jmdyck","message":"For \"named parameters not covered by optional or rest parameters\", that's just the plain params.","date":"2019-01-04T21:05:15.373Z","type":"message"}
{"nick":"jmdyck","message":"So rather than define \"required params\", just say \"length\" property is the number of plain params.","date":"2019-01-04T21:06:08.353Z","type":"message"}
{"nick":"jmdyck","message":"(unless otherwise specified)","date":"2019-01-04T21:06:18.258Z","type":"message"}
{"nick":"devsnek","message":"good catch","date":"2019-01-04T21:08:48.966Z","type":"message"}
{"nick":"jmdyck","message":"then there's the last sentence","date":"2019-01-04T21:08:59.621Z","type":"message"}
{"nick":"devsnek","message":"indeed, i changed `is` to `are`","date":"2019-01-04T21:10:02.240Z","type":"message"}
{"nick":"jmdyck","message":"I don't think the current spec is clear what it means by the number of arguments that \"the function is specified to require\". Does it mean the number of args indicated by the value of the \"length\" property?","date":"2019-01-04T21:10:43.101Z","type":"message"}
{"nick":"devsnek","message":"i define it in the first sentence","date":"2019-01-04T21:12:14.591Z","type":"message"}
{"nick":"devsnek","message":"oh i need to flip that around sorta","date":"2019-01-04T21:12:26.454Z","type":"message"}
{"nick":"devsnek","message":"to mention that things can override it","date":"2019-01-04T21:12:31.830Z","type":"message"}
{"nick":"jmdyck","message":"And even if it did intend that, we've got examples of where parameters beyond the \"length\" number also need to get the missing-is-undefined treatment.","date":"2019-01-04T21:13:27.115Z","type":"message"}
{"nick":"devsnek","message":"only Date right?","date":"2019-01-04T21:13:58.982Z","type":"message"}
{"nick":"jmdyck","message":"no, Date is an example of something else.","date":"2019-01-04T21:14:19.722Z","type":"message"}
{"nick":"jmdyck","message":"e.g. String.prototype.padEnd","date":"2019-01-04T21:14:46.203Z","type":"message"}
{"nick":"jmdyck","message":"length is presumably 1, but you can't limit missing-is-undefined only to the first param","date":"2019-01-04T21:15:23.124Z","type":"message"}
{"nick":"devsnek","message":"looks like a typo","date":"2019-01-04T21:15:26.934Z","type":"message"}
{"nick":"devsnek","message":"bug/typo","date":"2019-01-04T21:15:35.294Z","type":"message"}
{"nick":"devsnek","message":"should say if fillString is not present or undefined i guess?","date":"2019-01-04T21:15:50.504Z","type":"message"}
{"nick":"jmdyck","message":"We could treat it as a bug.","date":"2019-01-04T21:16:06.719Z","type":"message"}
{"nick":"jmdyck","message":"but I'd say that should be a separate PR","date":"2019-01-04T21:16:33.078Z","type":"message"}
{"nick":"devsnek","message":"engines treat no arg and undefined the same :(","date":"2019-01-04T21:16:56.437Z","type":"message"}
{"nick":"jmdyck","message":"for padEnd, you mean?","date":"2019-01-04T21:17:40.873Z","type":"message"}
{"nick":"ljharb","message":"devsnek: they don't always; it depends on the method","date":"2019-01-04T21:17:53.524Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2019-01-04T21:17:53.818Z","type":"message"}
{"nick":"devsnek","message":"ljharb: for this one at least","date":"2019-01-04T21:18:01.982Z","type":"message"}
{"nick":"ljharb","message":"i believe moving forward, we're trying to treat absent and undefined the same","date":"2019-01-04T21:18:02.712Z","type":"message"}
{"nick":"devsnek","message":"i feel like this is moving into \"bitten off too much\" territory","date":"2019-01-04T21:18:24.272Z","type":"message"}
{"nick":"jmdyck","message":"Well, if you don't bring \"length\" into it, it's more chewable.","date":"2019-01-04T21:19:17.279Z","type":"message"}
{"nick":"ljharb","message":"devsnek: it seems like the first order of business is, specifying the notational conventions for method signature","date":"2019-01-04T21:20:17.703Z","type":"message"}
{"nick":"ljharb","message":"s","date":"2019-01-04T21:20:18.369Z","type":"message"}
{"nick":"devsnek","message":"gotta figure out what they are first","date":"2019-01-04T21:20:43.878Z","type":"message"}
{"nick":"ljharb","message":"and that would unblock most of the changes in your current PR","date":"2019-01-04T21:20:47.426Z","type":"message"}
{"nick":"ljharb","message":"lol, yes, exactly","date":"2019-01-04T21:20:49.322Z","type":"message"}
{"nick":"ljharb","message":"noting that we have to allow for an algorithm to distinguish absence, from present and undefined, etc","date":"2019-01-04T21:21:16.417Z","type":"message"}
{"nick":"devsnek","message":"i think the behaviour should be to check for \"is absent or undefined\"","date":"2019-01-04T21:21:56.899Z","type":"message"}
{"nick":"ljharb","message":"for some methods. but for some it treats them differently","date":"2019-01-04T21:23:26.221Z","type":"message"}
{"nick":"ljharb","message":"and that can't be changed or it'd break the web","date":"2019-01-04T21:23:30.617Z","type":"message"}
{"nick":"devsnek","message":"oh yeah i mean for new stuff","date":"2019-01-04T21:23:37.757Z","type":"message"}
{"nick":"devsnek","message":"since old stuff needs \"is present\"","date":"2019-01-04T21:23:43.403Z","type":"message"}
{"nick":"ljharb","message":"new stuff generally just compares to undefined","date":"2019-01-04T21:24:25.738Z","type":"message"}
{"nick":"devsnek","message":"which is incorrect if it also has [, this]","date":"2019-01-04T21:24:42.137Z","type":"message"}
{"nick":"ljharb","message":"which is the same as \"is absent\"","date":"2019-01-04T21:24:42.420Z","type":"message"}
{"nick":"ljharb","message":"true, if it's optional, you'd need to check both","date":"2019-01-04T21:24:54.093Z","type":"message"}
{"nick":"devsnek","message":"well engines treat it that way","date":"2019-01-04T21:24:57.859Z","type":"message"}
{"nick":"devsnek","message":"but that's not how its specified","date":"2019-01-04T21:25:07.046Z","type":"message"}
{"nick":"ljharb","message":"altho we could easily write the notational conventions so that optional arguments get filled in with undefined too","date":"2019-01-04T21:25:11.407Z","type":"message"}
{"nick":"ljharb","message":"and that'd probably allow for simpler spec text","date":"2019-01-04T21:25:17.287Z","type":"message"}
{"nick":"devsnek","message":"but then they're present","date":"2019-01-04T21:25:19.990Z","type":"message"}
{"nick":"ljharb","message":"right - but for new stuff, it should behave the same if it's absent, or if it's present and undefined","date":"2019-01-04T21:25:46.731Z","type":"message"}
{"nick":"ljharb","message":"so there's no reason the methods should need to distinguish in the common case","date":"2019-01-04T21:25:54.482Z","type":"message"}
{"nick":"devsnek","message":"so you're saying like","date":"2019-01-04T21:26:21.659Z","type":"message"}
{"nick":"devsnek","message":"filled with undefined but can still be called not present","date":"2019-01-04T21:26:29.415Z","type":"message"}
{"nick":"jmdyck","message":"(afk)","date":"2019-01-04T21:27:37.471Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2019-01-04T21:29:02.819Z","type":"message"}
{"nick":"devsnek","message":"sounds like ~magic~","date":"2019-01-04T21:29:39.806Z","type":"message"}
{"nick":"devsnek","message":"and i'm reluctant to spec it that way because i can't think of a good way implement it in engine262","date":"2019-01-04T21:30:07.203Z","type":"message"}
{"nick":"ljharb","message":"i mean, each named argument, optional or not, would get filled in as `undefined` if needed; and `arguments` would be created as needed, and you'd keep a mapping of argument names to arguments object indexes, and \"if present\" would check if the identifier's argument index was < arguments.length","date":"2019-01-04T21:31:43.184Z","type":"message"}
{"nick":"wuz_","reason":"Ping timeout: 246 seconds","date":"2019-01-04T21:43:30.036Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-04T21:59:41.313Z","type":"join"}
{"nick":"aki_","date":"2019-01-04T22:01:27.460Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-04T22:02:52.860Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T22:02:55.586Z","type":"nick"}
{"nick":"wuz_","reason":"Ping timeout: 240 seconds","date":"2019-01-04T22:03:47.312Z","type":"quit"}
{"nick":"jmdyck","message":"ljharb: are use suggesting that as a strategy for implementation or specification?","date":"2019-01-04T22:08:15.416Z","type":"message"}
{"nick":"ljharb","message":"specification","date":"2019-01-04T22:08:20.803Z","type":"message"}
{"nick":"ljharb","message":"or rather","date":"2019-01-04T22:08:24.236Z","type":"message"}
{"nick":"ljharb","message":"sorry that last comment was for implementing it in engine262","date":"2019-01-04T22:08:31.717Z","type":"message"}
{"nick":"jmdyck","message":"ok","date":"2019-01-04T22:08:39.681Z","type":"message"}
{"nick":"ljharb","message":"for specifying it, it's probably enough to say \"was provided\"","date":"2019-01-04T22:08:44.820Z","type":"message"}
{"nick":"ljharb","message":"or at least, i don't think specifying it's the hard part","date":"2019-01-04T22:09:03.074Z","type":"message"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-04T22:20:51.189Z","type":"quit"}
{"nick":"jorydotcom","date":"2019-01-04T22:21:31.554Z","type":"join"}
{"nick":"jorydotcom","reason":"Client Quit","date":"2019-01-04T22:24:01.319Z","type":"quit"}
{"nick":"jorydotcom","date":"2019-01-04T22:25:24.712Z","type":"join"}
{"nick":"jorydotcom","reason":"Client Quit","date":"2019-01-04T22:25:41.396Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-04T22:56:01.392Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-04T23:38:08.097Z","type":"quit"}
{"nick":"rkirsling","message":"cloudshu: hope I didn't miss the point of your example or anything :) the bit that Bakkot quoted occurs in two places and we can surely simplify the first one, but I'm a bit perplexed about the second one (for direct eval) due to what seems to be a spec/reality divergence","date":"2019-01-04T23:57:30.484Z","type":"message"}
{"nick":"cloudshu","message":"rkirsling: it was just an oddity, no real point","date":"2019-01-04T23:59:19.295Z","type":"message"}
{"nick":"cloudshu","message":"rkirsling: it's an example of the two annexes interacting in such a way that's weird","date":"2019-01-04T23:59:50.316Z","type":"message"}
{"nick":"wuz_","date":"2019-01-04T23:59:51.088Z","type":"join"}
