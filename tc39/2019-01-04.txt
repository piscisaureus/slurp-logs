{"nick":"keith_mi_","date":"2019-01-04T00:02:33.691Z","type":"join"}
{"nick":"wuz_","date":"2019-01-04T00:07:53.483Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2019-01-04T00:12:20.551Z","type":"quit"}
{"nick":"devsnek","message":"is there any normative definition of \"the arguments passed to this function invocation\"","date":"2019-01-04T00:22:12.754Z","type":"message"}
{"nick":"devsnek","message":"i can't find anything and every usage of it seems to go against the behaviour of filling arguments with undefined based on the function's length","date":"2019-01-04T00:22:34.607Z","type":"message"}
{"nick":"ljharb","message":"? isn't it like, the things in the invocation parens?","date":"2019-01-04T00:22:44.791Z","type":"message"}
{"nick":"devsnek","message":"ðŸ¤·","date":"2019-01-04T00:23:04.905Z","type":"message"}
{"nick":"devsnek","message":"like i said i can't find any normative definition","date":"2019-01-04T00:23:10.834Z","type":"message"}
{"nick":"ljharb","message":"devsnek: https://tc39.github.io/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist leads to https://tc39.github.io/ecma262/#sec-ordinarycallevaluatebody which leads to https://tc39.github.io/ecma262/#sec-function-definitions-runtime-semantics-evaluatebody which leads to https://tc39.github.io/ecma262/#sec-functiondeclarationinstantiation which seems like it has the steps you're interested in?","date":"2019-01-04T00:25:35.074Z","type":"message"}
{"nick":"ljharb","message":"there's 37 steps there so i'm not super sure","date":"2019-01-04T00:25:53.194Z","type":"message"}
{"nick":"ljharb","message":"note that i wouldn't expect `arguments` to match the length, only to match the actual provided arguments","date":"2019-01-04T00:26:20.137Z","type":"message"}
{"nick":"devsnek","message":"yeah i'm not talking about `arguments`","date":"2019-01-04T00:27:02.378Z","type":"message"}
{"nick":"devsnek","message":"builtin function algorithms refer to both \"the number of arguments passed for this function invocation\" and \"the arguments passed to this function invocation\"","date":"2019-01-04T00:27:34.696Z","type":"message"}
{"nick":"devsnek","message":"neither of them are actually specified but its pretty easy to see what they mean in context","date":"2019-01-04T00:27:54.652Z","type":"message"}
{"nick":"devsnek","message":"the problem is that it feels like i need to store two copies of every function arguments list now. one for dealing with functions that want the raw list, and one for functions with use the more normal behaviour of arguments being filled in with `undefined`","date":"2019-01-04T00:28:42.887Z","type":"message"}
{"nick":"devsnek","message":"String.fromCharCode, for example, has `...codeUnits` as the arguments, `1` as the length, so everything about it would suggest that calling it with no args would be like calling it with (undefined) but since other engines exist i know that's not right","date":"2019-01-04T00:30:51.777Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i'm not sure that's true - if you only store `arguments`, and then do something like `declaredArgumentNames.map((name, i) => ({ identifier: name, value: arguments.length < i ? arguments[i] : undefined }))` to get the function's argument bindings?","date":"2019-01-04T00:40:13.271Z","type":"message"}
{"nick":"ljharb","message":"for a rest arg tho you'd do something like `Array.prototype.slice.call(arguments, i)`","date":"2019-01-04T00:41:02.236Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/devsnek/engine262/blob/master/src/intrinsics/StringPrototype.mjs#L85","date":"2019-01-04T00:41:17.186Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-04T00:53:28.780Z","type":"quit"}
{"nick":"aki_","date":"2019-01-04T00:55:29.617Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-01-04T00:56:24.818Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T00:56:33.137Z","type":"nick"}
{"nick":"keith_m__","date":"2019-01-04T01:05:58.535Z","type":"join"}
{"nick":"rkirsling","message":"created https://github.com/tc39/ecma262/issues/1392","date":"2019-01-04T01:06:26.202Z","type":"message"}
{"nick":"rkirsling","message":"^ ljharb cloudshu (and also bradleymeck jmdyck )","date":"2019-01-04T01:06:34.654Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: so, `try {} catch (e) { for (var e of whatever) {} }` works fine for me in safari","date":"2019-01-04T01:09:45.799Z","type":"message"}
{"nick":"ljharb","message":"where does that error?","date":"2019-01-04T01:09:50.403Z","type":"message"}
{"nick":"ljharb","message":"ah, you documented it, nvm","date":"2019-01-04T01:09:58.680Z","type":"message"}
{"nick":"rkirsling","message":"yeah I didn't implement that piece because the parser doesn't currently know whether we're for-of or for-in at the time of that `var e`","date":"2019-01-04T01:11:44.153Z","type":"message"}
{"nick":"rkirsling","message":"*didn't yet","date":"2019-01-04T01:11:57.795Z","type":"message"}
{"nick":"rkirsling","message":"...so it's convenient that this discussion came up ;)","date":"2019-01-04T01:12:12.650Z","type":"message"}
{"nick":"not-an-aardvark","date":"2019-01-04T01:12:12.839Z","type":"join"}
{"nick":"keith_m__","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-04T01:41:26.605Z","type":"quit"}
{"nick":"aki_","date":"2019-01-04T03:01:16.774Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 258 seconds","date":"2019-01-04T03:02:24.092Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T03:02:24.526Z","type":"nick"}
{"nick":"rkirsling","message":"^ just put up a concrete proposal for the above since it's quite simple","date":"2019-01-04T03:16:25.156Z","type":"message"}
{"nick":"rkirsling","message":"(we can obviously still discuss any conceptual objections on the issue thread)","date":"2019-01-04T03:16:51.831Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2019-01-04T03:31:51.179Z","type":"quit"}
{"nick":"Bakkot","message":"ljharb: might have missed this in scrollback, but in case this has not yet been clearly stated, the reason catch bindings are weird is that in `try { throw 0; } catch (e) { var e = 1; }`, the `var e = 1` declares one variable and writes to _a different variable_","date":"2019-01-04T03:46:01.084Z","type":"message"}
{"nick":"Bakkot","message":"similar thing happens for `with({e: 0}) { var e = 1; }`, but of course it's not possible to statically prevent that case","date":"2019-01-04T03:47:18.557Z","type":"message"}
{"nick":"devsnek","message":"does anyone know where the spec talks about filling in arguments to builtin function calls with `undefined` based on the length","date":"2019-01-04T03:47:57.516Z","type":"message"}
{"nick":"devsnek","message":"i can never find the section","date":"2019-01-04T03:48:00.683Z","type":"message"}
{"nick":"jmdyck","message":"https://tc39.github.io/ecma262/#sec-ecmascript-standard-built-in-objects","date":"2019-01-04T03:49:21.223Z","type":"message"}
{"nick":"jmdyck","message":"4th para","date":"2019-01-04T03:49:30.422Z","type":"message"}
{"nick":"devsnek","message":"thank you very much","date":"2019-01-04T03:49:55.471Z","type":"message"}
{"nick":"jmdyck","message":"unless otherwise specified!","date":"2019-01-04T03:50:05.254Z","type":"message"}
{"nick":"devsnek","message":"i'm changing all the occurrences of \"the arguments passed to this function invocation\"","date":"2019-01-04T03:51:14.622Z","type":"message"}
{"nick":"devsnek","message":"cuz its kinda hacky","date":"2019-01-04T03:51:23.182Z","type":"message"}
{"nick":"jmdyck","message":"to what?","date":"2019-01-04T03:51:36.302Z","type":"message"}
{"nick":"devsnek","message":"to using the number of arguments passed to this function invocation","date":"2019-01-04T03:52:07.717Z","type":"message"}
{"nick":"devsnek","message":"also maybe you know the answer to this, everywhere that rest args are used in builtin functions, there's always an explicit step describing getting those args","date":"2019-01-04T03:53:20.713Z","type":"message"}
{"nick":"devsnek","message":"like step one of https://tc39.github.io/ecma262/#sec-string.raw","date":"2019-01-04T03:53:48.711Z","type":"message"}
{"nick":"jmdyck","message":"hm, no occurrences of \"the arguments passed to this function invocation\" exactly","date":"2019-01-04T03:53:54.234Z","type":"message"}
{"nick":"devsnek","message":"+/i invocation/call","date":"2019-01-04T03:54:16.062Z","type":"message"}
{"nick":"devsnek","message":"+/-","date":"2019-01-04T03:54:28.234Z","type":"message"}
{"nick":"jmdyck","message":"so in String.raw, the alg still needs the arguments, not just the number of them.","date":"2019-01-04T03:55:49.085Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2019-01-04T03:55:57.690Z","type":"message"}
{"nick":"jmdyck","message":"so i don't see how you can do the substitution you described","date":"2019-01-04T03:56:14.847Z","type":"message"}
{"nick":"devsnek","message":"no i was asking about step 1","date":"2019-01-04T03:56:23.320Z","type":"message"}
{"nick":"devsnek","message":"why it exists","date":"2019-01-04T03:56:27.504Z","type":"message"}
{"nick":"jmdyck","message":"ah","date":"2019-01-04T03:56:48.286Z","type":"message"}
{"nick":"devsnek","message":"like nothing says \"Let template be the first argument passed to this function call\"","date":"2019-01-04T03:56:49.847Z","type":"message"}
{"nick":"devsnek","message":"its implicit from the header","date":"2019-01-04T03:56:57.687Z","type":"message"}
{"nick":"jmdyck","message":"i think there actually are some things like that...","date":"2019-01-04T03:57:31.568Z","type":"message"}
{"nick":"devsnek","message":"no results for \"first argument\" in that position","date":"2019-01-04T03:58:21.499Z","type":"message"}
{"nick":"devsnek","message":"there's also \"number of arguments\" and \"actual number of arguments\" even though they're used the same way","date":"2019-01-04T03:58:57.455Z","type":"message"}
{"nick":"devsnek","message":"Array.prototype.unshift just says \"Let argCount be the number of actual arguments.\" :(","date":"2019-01-04T04:01:11.036Z","type":"message"}
{"nick":"jmdyck","message":"I'm not finding what I said, so probably imagined it.","date":"2019-01-04T04:03:04.516Z","type":"message"}
{"nick":"jmdyck","message":"(other than the rest param cases you noted)","date":"2019-01-04T04:03:26.795Z","type":"message"}
{"nick":"devsnek","message":"every builtin with ...args seems to have its own magic semantics approximating that the arguments matched by `...args` will not be `undefined` filled","date":"2019-01-04T04:03:53.656Z","type":"message"}
{"nick":"jmdyck","message":"But yeah, I recall I was surprised at the vagueness of the semantics for invoking built-in functions.","date":"2019-01-04T04:05:03.716Z","type":"message"}
{"nick":"devsnek","message":"this is the most annoying thing i've had with it so far","date":"2019-01-04T04:05:56.359Z","type":"message"}
{"nick":"wuz_","date":"2019-01-04T04:08:13.984Z","type":"join"}
{"nick":"jmdyck","message":"It's well-defined down to the point that the built-in function's [[Call]] is invoked, but at that point it traverses this bubble of prose in 9.3 and 17 before it hits the algorithms that actually appear in the spec.","date":"2019-01-04T04:11:26.852Z","type":"message"}
{"nick":"devsnek","message":"that's why i can never find that section lol","date":"2019-01-04T04:12:19.858Z","type":"message"}
{"nick":"wuz_","reason":"Ping timeout: 246 seconds","date":"2019-01-04T04:12:26.980Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-01-04T04:15:25.447Z","type":"quit"}
{"nick":"jmdyck","message":"Moreover, for the overloaded constructors (like Date and Array), there's some extra (non-algorithmic) logic to select the appropriate constructor-alg.","date":"2019-01-04T04:16:26.604Z","type":"message"}
{"nick":"devsnek","message":"yeah those things are hecky","date":"2019-01-04T04:17:40.627Z","type":"message"}
{"nick":"jmdyck","message":"Looks like that layer of vagueness has been there since the first edition (and was even vaguer).","date":"2019-01-04T04:24:40.247Z","type":"message"}
{"nick":"devsnek","message":"time to refactor","date":"2019-01-04T04:25:50.350Z","type":"message"}
{"nick":"jmdyck","message":"I'm guessing it hasn't ever been clarified because it was (perceived to be) kinda tricky for not much benefit.","date":"2019-01-04T04:26:30.507Z","type":"message"}
{"nick":"jmdyck","message":"And leaving it vague allows some flexibility when it comes to specifying builtin func algs","date":"2019-01-04T04:30:23.956Z","type":"message"}
{"nick":"devsnek","message":"vague is ok, but its just kinda confusing rn","date":"2019-01-04T04:31:13.510Z","type":"message"}
{"nick":"devsnek","message":"if other engines didn't exist it would be reasonable to assume that String.fromCharCode(undefined) behaved like String.fromCharCode()","date":"2019-01-04T04:31:39.938Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/tc39/ecma262/pull/1394","date":"2019-01-04T04:33:06.010Z","type":"message"}
{"nick":"jmdyck","message":"Well, that would be one reasonable possibility, but the problem is the concept of the number of arguments that \"the function is specified to require\" isn't well-defined","date":"2019-01-04T04:35:10.728Z","type":"message"}
{"nick":"devsnek","message":"its specified in that paragraph","date":"2019-01-04T04:35:52.733Z","type":"message"}
{"nick":"jmdyck","message":"hm?","date":"2019-01-04T04:36:23.650Z","type":"message"}
{"nick":"devsnek","message":"i swear i just saw something that said `\"length\" defines the number of required arguments of a function` (paraphrase)","date":"2019-01-04T04:37:25.511Z","type":"message"}
{"nick":"devsnek","message":"oh i saw this https://tc39.github.io/ecma262/#sec-function-instances-length","date":"2019-01-04T04:37:51.482Z","type":"message"}
{"nick":"jmdyck","message":"\"typical number\", so doesn't synch with wording in 17","date":"2019-01-04T04:38:42.962Z","type":"message"}
{"nick":"devsnek","message":"aha paragraph 3 of section 17","date":"2019-01-04T04:39:09.214Z","type":"message"}
{"nick":"devsnek","message":"\"For each built-in function, this specification describes the arguments required by that function and the properties of that function object.\"","date":"2019-01-04T04:39:11.074Z","type":"message"}
{"nick":"devsnek","message":"i think that's as close as it gets","date":"2019-01-04T04:39:17.840Z","type":"message"}
{"nick":"jmdyck","message":"also not well-defined is exactly what would constitute \"specifying otherwise\".","date":"2019-01-04T04:39:36.668Z","type":"message"}
{"nick":"devsnek","message":"isn't that where hacky prose comes into play","date":"2019-01-04T04:40:06.863Z","type":"message"}
{"nick":"jmdyck","message":"well, it could be done via prose or pseudo-code, the spec doesn't say.","date":"2019-01-04T04:40:56.111Z","type":"message"}
{"nick":"devsnek","message":"maybe we can increase the specified behaviour of the [[Call]] and [[Construct]] of builtins","date":"2019-01-04T04:41:13.448Z","type":"message"}
{"nick":"devsnek","message":"to basically this https://github.com/devsnek/engine262/blob/master/src/value.mjs#L263","date":"2019-01-04T04:41:43.689Z","type":"message"}
{"nick":"jmdyck","message":"o wait, what i said before is wrong.","date":"2019-01-04T04:47:28.651Z","type":"message"}
{"nick":"jmdyck","message":"The vagueness layer doesn't start till step 10 of https://tc39.github.io/ecma262/#sec-built-in-function-objects-call-thisargument-argumentslist","date":"2019-01-04T04:49:20.723Z","type":"message"}
{"nick":"devsnek","message":"like i said above lol","date":"2019-01-04T04:49:58.407Z","type":"message"}
{"nick":"devsnek","message":"it just kinda falls off a cliff there","date":"2019-01-04T04:50:06.754Z","type":"message"}
{"nick":"jmdyck","message":"I'm not sure what the point of \"an imp-defined manner that conforms to the specification of F\" is. Does any implementation actually define that manner?","date":"2019-01-04T04:52:24.312Z","type":"message"}
{"nick":"jmdyck","message":"Should there be variation between implementations on this point?","date":"2019-01-04T04:53:15.496Z","type":"message"}
{"nick":"devsnek","message":"the specification of F is always section 17","date":"2019-01-04T04:53:47.509Z","type":"message"}
{"nick":"jmdyck","message":"Certainly they can vary in how they accomplish it, but should there be any variation in the semantics?","date":"2019-01-04T04:53:51.625Z","type":"message"}
{"nick":"jmdyck","message":"\"the specification of F\" probably refers to the algorithm (or whatever) for the function in 18-26","date":"2019-01-04T04:55:46.639Z","type":"message"}
{"nick":"devsnek","message":"ðŸ¤·","date":"2019-01-04T04:56:21.095Z","type":"message"}
{"nick":"aki_","date":"2019-01-04T05:06:39.757Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-04T05:07:52.774Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-04T05:07:53.168Z","type":"nick"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-01-04T05:44:32.398Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-04T06:08:23.747Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 272 seconds","date":"2019-01-04T06:12:52.897Z","type":"quit"}
{"nick":"ljharb","message":"Bakkot: i guess i don't understand why it wouldn't just overwrite the catch binding","date":"2019-01-04T06:55:33.724Z","type":"message"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-01-04T07:07:25.197Z","type":"quit"}
{"nick":"rkirsling","message":"so `let e = 0; try {} catch (e) { var e; }` is a syntax error, while `var e = 1; try { throw 2; } catch (e) { var e = 3; print(e); } print(e);`prints 3 and 1","date":"2019-01-04T07:08:58.399Z","type":"message"}
{"nick":"rkirsling","message":"hadn't fully thought about the latter case","date":"2019-01-04T07:09:17.132Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-04T07:13:40.763Z","type":"quit"}
{"nick":"akirose","date":"2019-01-04T07:14:40.470Z","type":"join"}
{"nick":"rkirsling","message":"the catch param scope is just its own thing, and so I guess ideally we would preventing hoisting through it, but that would break the web, so the idea was to prevent as much as possible","date":"2019-01-04T07:15:24.106Z","type":"message"}
{"nick":"ljharb","message":"ahh","date":"2019-01-04T07:16:02.926Z","type":"message"}
{"nick":"rkirsling","message":"prohibiting `try {} catch ({ message }) { var message; }` (the result of PR #150) definitely seems good","date":"2019-01-04T07:16:07.429Z","type":"message"}
{"nick":"ljharb","message":"devsnek: btw, with your recent pr, did you find the location where function signature conventions are discussed?","date":"2019-01-04T07:16:25.065Z","type":"message"}
{"nick":"ljharb","message":"like what permits the spec to say \"Object.assign (target, ...sources)` and have that map to argument 0 in target and 1+ in sources","date":"2019-01-04T07:17:21.063Z","type":"message"}
{"nick":"devsnek","message":"ljharb: as far as i can tell neither that or regular named arguments are explicitly defined","date":"2019-01-04T07:25:09.588Z","type":"message"}
{"nick":"ljharb","message":"interesting","date":"2019-01-04T07:26:11.295Z","type":"message"}
{"nick":"ljharb","message":"i assume they are for runtime code; but not for spec functions","date":"2019-01-04T07:26:23.100Z","type":"message"}
{"nick":"devsnek","message":"yes they have extensive specification for js source","date":"2019-01-04T07:26:39.231Z","type":"message"}
{"nick":"ljharb","message":"we should probably add a section to https://tc39.github.io/ecma262/#sec-notational-conventions that talks about the spec forms","date":"2019-01-04T07:26:46.646Z","type":"message"}
{"nick":"ljharb","message":"specifically i'm interested in whether a rest arg is a List or an Array (i assume a list)","date":"2019-01-04T07:27:06.385Z","type":"message"}
{"nick":"devsnek","message":"and yeah they are `List` not arrays","date":"2019-01-04T07:27:09.045Z","type":"message"}
{"nick":"ljharb","message":"where does it say that tho","date":"2019-01-04T07:27:20.345Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2019-01-04T07:27:33.378Z","type":"message"}
{"nick":"devsnek","message":"technically i removed the stuff that said that","date":"2019-01-04T07:27:38.900Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2019-01-04T07:28:08.336Z","type":"message"}
{"nick":"ljharb","message":"i suspect that there are many \"rest args\" that didn't say that in the first place","date":"2019-01-04T07:28:26.492Z","type":"message"}
{"nick":"ljharb","message":"that's why i'm thinking it should have an overarching notational convention","date":"2019-01-04T07:28:40.765Z","type":"message"}
{"nick":"devsnek","message":"yes i agree","date":"2019-01-04T07:29:02.922Z","type":"message"}
{"nick":"devsnek","message":"the key thing about the builtin rest args is that they don't get filled with `undefined` via function.length","date":"2019-01-04T07:30:04.708Z","type":"message"}
{"nick":"devsnek","message":"i really really wish js had python's function annotations rn","date":"2019-01-04T07:30:26.195Z","type":"message"}
{"nick":"mgol","date":"2019-01-04T07:36:10.376Z","type":"join"}
{"nick":"annevk","message":"Domenic: arc and arcTo on canvas 2d context need to be in order; thereâ€™s a note in the spec about it (maybe source only)","date":"2019-01-04T07:53:41.500Z","type":"message"}
{"nick":"annevk","message":"Domenic: and yeah, always random or always ordered applies here, but of course we have neither ðŸ˜Š","date":"2019-01-04T07:54:34.324Z","type":"message"}
