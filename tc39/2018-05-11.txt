{"nick":"ljharb","message":"Domenic: the raw form shows <a name>s and looks like a typoed extra >","date":"2018-05-11T00:00:05.263Z","type":"message"}
{"nick":"rkirsling","message":"I assumed it was for pizzazz ðŸ˜‚","date":"2018-05-11T00:00:56.224Z","type":"message"}
{"nick":"zkat","message":"It's just a convention I use","date":"2018-05-11T00:01:50.521Z","type":"message"}
{"nick":"arai","date":"2018-05-11T00:02:07.284Z","type":"join"}
{"nick":"zkat","message":"Habit because it makes API calls stand out so I just do it for a bunch of things ðŸ˜…","date":"2018-05-11T00:02:29.221Z","type":"message"}
{"nick":"ljharb","message":"oh lol","date":"2018-05-11T00:03:35.415Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-05-11T00:28:25.268Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-05-11T00:39:28.976Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-11T01:05:34.839Z","type":"join"}
{"nick":"zkat","message":"(it looks nicer when it's rendered)","date":"2018-05-11T01:10:39.117Z","type":"message"}
{"nick":"zkat","message":"(but looks very weird in raw .md)","date":"2018-05-11T01:11:01.300Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-05-11T01:13:43.219Z","type":"quit"}
{"nick":"devsnek","message":"zkat: would `catch (BadError err)` maybe make more sense as `catch (err instanceof BadError)` or something? or is `Type x` already in the pattern matching proposal for instances?","date":"2018-05-11T02:51:24.626Z","type":"message"}
{"nick":"zkat","message":"That was the original. It didn't work grammatically so I tossed in a glyph","date":"2018-05-11T02:56:33.747Z","type":"message"}
{"nick":"zkat","message":"And it doesn't quite work how you're saying. It's an extractor, not a type declaration","date":"2018-05-11T02:56:55.303Z","type":"message"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2018-05-11T03:18:52.377Z","type":"quit"}
{"nick":"linclark_","reason":"Quit: Connection closed for inactivity","date":"2018-05-11T03:21:36.693Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-05-11T03:46:38.466Z","type":"quit"}
{"nick":"cloudshu","date":"2018-05-11T03:50:40.373Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-05-11T04:32:27.622Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-05-11T04:34:05.364Z","type":"join"}
{"nick":"ljharb","message":"personally what we really need is the Builtins.is proposal (with a better name)","date":"2018-05-11T05:28:56.800Z","type":"message"}
{"nick":"ljharb","message":"`instanceof` is terrible and anything that relies on it is also terrible","date":"2018-05-11T05:29:11.620Z","type":"message"}
{"nick":"rkirsling","message":"`instanceof` is definitely not good :( I have a library that defines an `isInstanceOf` function just so that I can check instances from a separated unit testing context","date":"2018-05-11T05:33:39.057Z","type":"message"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2018-05-11T07:58:52.555Z","type":"quit"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-05-11T08:09:32.018Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-05-11T08:17:21.934Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-05-11T09:52:36.744Z","type":"quit"}
{"nick":"arai","date":"2018-05-11T10:09:43.287Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-11T10:25:07.650Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-11T10:25:38.138Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-11T10:32:08.107Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-05-11T10:36:52.752Z","type":"quit"}
{"nick":"jmdyck","date":"2018-05-11T11:43:13.236Z","type":"join"}
{"nick":"devsnek","message":"ljharb: +1 to that","date":"2018-05-11T12:48:10.010Z","type":"message"}
{"nick":"devsnek","message":"maybe that will be my next proposal","date":"2018-05-11T12:48:18.094Z","type":"message"}
{"nick":"devsnek","message":"is \"builtin\" the well defined term for stuff like Array and Map and String","date":"2018-05-11T12:49:20.021Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: https://github.com/tc39/proposals/blob/master/inactive-proposals.md see James Snell's proposal (he withdrew it)","date":"2018-05-11T12:50:16.331Z","type":"message"}
{"nick":"devsnek","message":"my idea is to propose that all builtins have a static isX() on them","date":"2018-05-11T12:51:36.973Z","type":"message"}
{"nick":"devsnek","message":"which does an internal field check and such","date":"2018-05-11T12:51:52.525Z","type":"message"}
{"nick":"bradleymeck","message":"that is his proposal","date":"2018-05-11T12:55:00.728Z","type":"message"}
{"nick":"devsnek","message":"i thought his was a global object with .is(x, y)","date":"2018-05-11T12:59:45.075Z","type":"message"}
{"nick":"AtumT","date":"2018-05-11T13:06:09.946Z","type":"join"}
{"nick":"bradleymeck","message":"yea, but not really different from putting it on a class","date":"2018-05-11T13:33:42.105Z","type":"message"}
{"nick":"bradleymeck","message":"putting it on a class means that every new class must have that method","date":"2018-05-11T13:33:51.776Z","type":"message"}
{"nick":"devsnek","message":"good point","date":"2018-05-11T13:49:07.679Z","type":"message"}
{"nick":"ljharb","message":" Jamesâ€™s proposal is basically what toStringTag should have been: brand-checking functions that return a string instead of just a string.","date":"2018-05-11T14:41:53.690Z","type":"message"}
{"nick":"annevk","message":"bz also proposed that ages ago","date":"2018-05-11T14:54:00.128Z","type":"message"}
{"nick":"annevk","message":"I think we have something like it for Firefox code internally, at least for platform objects","date":"2018-05-11T14:54:22.714Z","type":"message"}
{"nick":"bradleymeck","message":"node does as well on util","date":"2018-05-11T14:55:27.108Z","type":"message"}
{"nick":"devsnek","message":"node just wrap's v8's internal equivalent of this","date":"2018-05-11T15:40:44.379Z","type":"message"}
{"nick":"devsnek","message":"s/wrap's/wraps","date":"2018-05-11T15:40:51.057Z","type":"message"}
{"nick":"spion_","reason":"Ping timeout: 265 seconds","date":"2018-05-11T16:06:08.508Z","type":"quit"}
{"nick":"spion","date":"2018-05-11T16:06:53.731Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-11T16:22:05.416Z","type":"join"}
{"nick":"zkat","message":"it'd be really nice to have a solution to The `instanceof` Problemâ„¢. It's still a super painful thing for me on the reg","date":"2018-05-11T16:43:02.508Z","type":"message"}
{"nick":"zkat","message":"(there's at least one certain library I use constantly that abuses it and ruins my day regularly because of it)","date":"2018-05-11T16:43:23.787Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-05-11T16:48:55.297Z","type":"quit"}
{"nick":"devsnek","message":"what if we just do Reflect.typeOf and then people can do Reflect.typeOf(x) === Reflect.typeOf(y)","date":"2018-05-11T16:52:42.233Z","type":"message"}
{"nick":"devsnek","message":"where typeOf is what jasnell proposed","date":"2018-05-11T16:52:49.252Z","type":"message"}
{"nick":"devsnek","message":"and people can make proxy traps for it cuz everyone loves those","date":"2018-05-11T16:53:43.127Z","type":"message"}
{"nick":"keith_miller","date":"2018-05-11T17:00:05.433Z","type":"join"}
{"nick":"cloudshu","date":"2018-05-11T17:15:50.399Z","type":"join"}
{"nick":"devsnek","message":"https://gist.github.com/devsnek/a99cd87a85644224255ef111ef3afebb","date":"2018-05-11T17:29:09.070Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-05-11T17:43:01.934Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-11T17:51:39.001Z","type":"join"}
{"nick":"ljharb","message":"devsnek: the important thing tho is that itâ€™s cross-realm, and, if i save the original copies of the functions, unforgeable - and also, that it is forgeable otherwise.","date":"2018-05-11T18:03:41.750Z","type":"message"}
{"nick":"devsnek","message":"well ideally the way engines implement it wouldn't be as a node module","date":"2018-05-11T18:04:27.434Z","type":"message"}
{"nick":"jwalden","date":"2018-05-11T18:46:20.415Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-05-11T18:58:27.608Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-11T19:46:53.238Z","type":"join"}
{"nick":"bradleymeck","message":"stuff in #node-dev made me wonder if anyone was still interested in taking up value types / I think most people aren't looking at them right now?","date":"2018-05-11T19:55:37.659Z","type":"message"}
{"nick":"devsnek","message":"do you guys think module authors should be able to detect how their modules get imported (static vs dynamic)","date":"2018-05-11T20:30:32.929Z","type":"message"}
{"nick":"devsnek","message":"s/guys/folks","date":"2018-05-11T20:31:02.011Z","type":"message"}
{"nick":"bradleymeck","message":"no","date":"2018-05-11T20:31:10.605Z","type":"message"}
{"nick":"devsnek","message":"that's the way I'm leaning","date":"2018-05-11T20:31:33.854Z","type":"message"}
{"nick":"bradleymeck","message":"you can have 2 consumers doing both at the same time anyway so what does that mean?","date":"2018-05-11T20:31:36.468Z","type":"message"}
{"nick":"devsnek","message":"good point lol","date":"2018-05-11T20:31:50.387Z","type":"message"}
{"nick":"ljharb","message":"how would you detect that anyways tho","date":"2018-05-11T20:43:47.359Z","type":"message"}
{"nick":"ljharb","message":"`import * as Module from 'path'; Promise.resolve(Module)` would send the same signal as `import('path')`, no?","date":"2018-05-11T20:44:10.916Z","type":"message"}
{"nick":"devsnek","message":"jdd suggested using \"then\" as a way to block people from dynamically importing your module","date":"2018-05-11T21:12:23.462Z","type":"message"}
{"nick":"bradleymeck","message":"you can get even sneakier, make it only work one time and then remove your then() export","date":"2018-05-11T21:13:03.748Z","type":"message"}
{"nick":"devsnek","message":"how do you remove your then export","date":"2018-05-11T21:15:13.234Z","type":"message"}
{"nick":"devsnek","message":"export let?","date":"2018-05-11T21:15:13.449Z","type":"message"}
{"nick":"bradleymeck","message":"export let then = () => { return ns; then = null; }","date":"2018-05-11T21:15:51.508Z","type":"message"}
{"nick":"bradleymeck","message":"but that doesn't work reliably in browsers since you can't reliably find a url to import yourself with, you might import another module","date":"2018-05-11T21:16:12.597Z","type":"message"}
{"nick":"bradleymeck","message":"s/url/specifier/","date":"2018-05-11T21:16:48.706Z","type":"message"}
{"nick":"devsnek","message":"import(import.meta.url)","date":"2018-05-11T21:17:17.594Z","type":"message"}
{"nick":"bradleymeck","message":"nope","date":"2018-05-11T21:17:24.156Z","type":"message"}
{"nick":"devsnek","action":"gives up and becomes an obj-c dev","date":"2018-05-11T21:17:36.610Z","type":"action"}
{"nick":"bradleymeck","message":"https://github.com/nodejs/modules/issues/62#issuecomment-380576688","date":"2018-05-11T21:17:47.925Z","type":"message"}
{"nick":"bradleymeck","message":"same behavior happens if you use import.meta.url","date":"2018-05-11T21:18:19.284Z","type":"message"}
{"nick":"devsnek","message":"oh you meant with module map cache","date":"2018-05-11T21:19:31.731Z","type":"message"}
{"nick":"bradleymeck","message":"yup, you return a new module instance so not the same and that means it has another then()","date":"2018-05-11T21:20:16.608Z","type":"message"}
{"nick":"devsnek","message":"i thought you meant like (assuming the server isn't doing anything stupid) there was no way for a module to know the url that will result in getting <an instance> of that module","date":"2018-05-11T21:20:38.601Z","type":"message"}
{"nick":"devsnek","message":"where <an instance> may or may not be an existing cached one","date":"2018-05-11T21:20:49.374Z","type":"message"}
{"nick":"bradleymeck","message":"don't understand the situation but i can probably cook up ways to return other module source texts for import.meta.url","date":"2018-05-11T21:21:23.982Z","type":"message"}
{"nick":"devsnek","message":"can't we just all agree to not break things","date":"2018-05-11T21:21:41.139Z","type":"message"}
{"nick":"bradleymeck","message":"idk if it really is breaking things, just showing that they don't act how they naively look","date":"2018-05-11T21:22:38.682Z","type":"message"}
{"nick":"devsnek","message":"how i see js: https://xkcd.com/1992/","date":"2018-05-11T21:24:53.165Z","type":"message"}
{"nick":"bradleymeck","message":"js is well designed given all the crazy constraints it has and being so dynamic","date":"2018-05-11T21:27:18.541Z","type":"message"}
{"nick":"devsnek","message":"the new stuff is better than the old stuff","date":"2018-05-11T21:28:09.056Z","type":"message"}
{"nick":"bradleymeck","message":"idk, most of the new stuff builds on and uses helpful ideas of the old stuff.","date":"2018-05-11T21:59:12.124Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-05-11T23:27:39.014Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-11T23:40:36.779Z","type":"join"}
