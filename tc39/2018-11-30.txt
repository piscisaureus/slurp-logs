{"nick":"devsnek","message":"toString revision made stage 4?","date":"2018-11-30T00:09:03.242Z","type":"message"}
{"nick":"brab","reason":"Remote host closed the connection","date":"2018-11-30T00:13:44.076Z","type":"quit"}
{"nick":"msaboff","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T00:18:28.631Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T00:34:06.474Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-11-30T00:34:59.794Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T00:35:52.809Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T00:47:54.315Z","type":"quit"}
{"nick":"natashenka","date":"2018-11-30T01:08:33.188Z","type":"join"}
{"nick":"me1000","date":"2018-11-30T01:15:12.795Z","type":"join"}
{"nick":"me1000","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-11-30T01:27:33.552Z","type":"quit"}
{"nick":"natashenka","reason":"Ping timeout: 268 seconds","date":"2018-11-30T01:54:44.225Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T01:56:25.905Z","type":"join"}
{"nick":"keith_mi_","date":"2018-11-30T01:58:12.477Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 246 seconds","date":"2018-11-30T02:00:50.985Z","type":"quit"}
{"nick":"keith_mi_","reason":"Ping timeout: 240 seconds","date":"2018-11-30T02:02:27.397Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T02:04:16.788Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-11-30T02:10:38.259Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T02:11:16.429Z","type":"join"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2018-11-30T02:12:34.594Z","type":"quit"}
{"nick":"natashenka","date":"2018-11-30T02:14:08.585Z","type":"join"}
{"nick":"jridgewell","reason":"Quit: Connection closed for inactivity","date":"2018-11-30T02:22:54.852Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T02:27:07.652Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T02:38:26.346Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T02:54:44.523Z","type":"quit"}
{"nick":"natashenka","reason":"Ping timeout: 252 seconds","date":"2018-11-30T03:05:18.646Z","type":"quit"}
{"nick":"rkirsling","message":"devsnek: yup","date":"2018-11-30T03:10:51.436Z","type":"message"}
{"nick":"devsnek","message":"woo","date":"2018-11-30T03:11:15.700Z","type":"message"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2018-11-30T04:56:36.051Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-11-30T06:15:58.907Z","type":"quit"}
{"nick":"dilijev","date":"2018-11-30T06:32:08.977Z","type":"join"}
{"nick":"dilijev","message":"https://freenode.logbot.info/tc39 says #tc39 is not logged","date":"2018-11-30T06:35:07.369Z","type":"message"}
{"nick":"dilijev","message":"did something break?","date":"2018-11-30T06:35:13.355Z","type":"message"}
{"nick":"dilijev","message":"Looks like http://logs.nodejs.org/tc39/latest still has them","date":"2018-11-30T06:36:27.556Z","type":"message"}
{"nick":"dilijev","message":"Does the topic have the wrong link?","date":"2018-11-30T06:36:36.700Z","type":"message"}
{"nick":"dilijev","message":"popped in to say thanks to @rwaldron for merging the eshost-cli stuff. I'm publishing the latest version tag to npm","date":"2018-11-30T06:37:45.298Z","type":"message"}
{"nick":"jwalden","date":"2018-11-30T07:29:15.201Z","type":"join"}
{"nick":"dilijev","reason":"Quit: Connection closed for inactivity","date":"2018-11-30T09:11:54.471Z","type":"quit"}
{"nick":"Bakkot","reason":"Ping timeout: 245 seconds","date":"2018-11-30T10:48:48.391Z","type":"quit"}
{"nick":"Bakkot","date":"2018-11-30T10:52:18.036Z","type":"join"}
{"nick":"AtumT","date":"2018-11-30T11:21:12.798Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-11-30T11:38:25.544Z","type":"quit"}
{"nick":"Bakkot","reason":"Ping timeout: 246 seconds","date":"2018-11-30T12:33:39.053Z","type":"quit"}
{"nick":"DTG","date":"2018-11-30T12:40:38.862Z","type":"join"}
{"nick":"douglasgordon","date":"2018-11-30T12:40:38.974Z","type":"join"}
{"nick":"Bakkot","date":"2018-11-30T12:41:03.819Z","type":"join"}
{"nick":"DTG","reason":"Ping timeout: 250 seconds","date":"2018-11-30T12:44:54.964Z","type":"quit"}
{"nick":"douglasgordon","reason":"Ping timeout: 250 seconds","date":"2018-11-30T12:44:55.074Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-11-30T13:18:54.055Z","type":"quit"}
{"nick":"jmdyck","date":"2018-11-30T13:43:00.715Z","type":"join"}
{"nick":"gibson042","date":"2018-11-30T14:07:09.332Z","type":"join"}
{"nick":"DTG","date":"2018-11-30T14:36:58.860Z","type":"join"}
{"nick":"douglasgordon","date":"2018-11-30T14:36:58.970Z","type":"join"}
{"nick":"keith_miller","date":"2018-11-30T14:42:26.082Z","type":"join"}
{"nick":"kverrier","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T14:45:18.949Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T14:51:12.089Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-11-30T15:01:42.659Z","type":"quit"}
{"nick":"gibson042","date":"2018-11-30T15:05:25.488Z","type":"join"}
{"nick":"douglasgordon","reason":"Remote host closed the connection","date":"2018-11-30T16:15:39.175Z","type":"quit"}
{"nick":"DTG","reason":"Ping timeout: 250 seconds","date":"2018-11-30T16:20:16.932Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 240 seconds","date":"2018-11-30T16:31:27.347Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T16:42:00.388Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-11-30T16:46:32.740Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T16:47:03.714Z","type":"join"}
{"nick":"DTG","date":"2018-11-30T16:49:37.738Z","type":"join"}
{"nick":"douglasgordon","date":"2018-11-30T16:49:43.791Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-11-30T16:56:20.800Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T16:57:59.375Z","type":"join"}
{"nick":"kverrier","date":"2018-11-30T17:47:10.076Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T17:47:22.937Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T18:01:30.632Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 268 seconds","date":"2018-11-30T18:03:36.723Z","type":"quit"}
{"nick":"kverrier","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-11-30T18:06:14.910Z","type":"quit"}
{"nick":"arkain","date":"2018-11-30T18:22:45.215Z","type":"join"}
{"nick":"cloudshu","date":"2018-11-30T18:28:11.651Z","type":"join"}
{"nick":"arkain","action":"invites all for opinions about 2 proposals: https://github.com/rdking/proposal-safe-prototype & https://github.com/rdking/proposal-known-keys","date":"2018-11-30T18:31:46.175Z","type":"action"}
{"nick":"devsnek","message":"i've read through the safe prototype thing like three times and i still have no idea what it does","date":"2018-11-30T18:34:28.396Z","type":"message"}
{"nick":"devsnek","message":"but `Any object attached to the prototype of a function is flagged as a prototype object.` this sounds like a bit of an issue","date":"2018-11-30T18:35:23.786Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T18:36:34.684Z","type":"quit"}
{"nick":"gibson042","date":"2018-11-30T18:43:38.909Z","type":"join"}
{"nick":"arkain","message":"The basic idea is to treat object properties of flagged prototype objects as primitives when they are referenced from an inheriting object.","date":"2018-11-30T18:53:14.336Z","type":"message"}
{"nick":"arkain","message":"If given this `var a = { alpha: 1, __proto__: { beta:2, gamma: { delta: 4}}}`","date":"2018-11-30T18:54:13.295Z","type":"message"}
{"nick":"arkain","message":"you'd expect that after `a.beta = 3`, that there would be an own property `beta` on a, right?","date":"2018-11-30T18:54:50.048Z","type":"message"}
{"nick":"ljharb","message":"and there will be","date":"2018-11-30T18:55:37.406Z","type":"message"}
{"nick":"arkain","message":"What this does is make it so that if you do `a.gamma.delta=5`, there would now be an own property gamma, with an own property delta on a.","date":"2018-11-30T18:55:45.291Z","type":"message"}
{"nick":"arkain","message":"but only under certain conditions.","date":"2018-11-30T18:55:57.786Z","type":"message"}
{"nick":"arkain","message":"From T.J. Crowder's and ljharb's initial suggestions, I made changes so the trigger to the behavior modifications is a well-known Symbol, with another well-known Symbol to block the new behavior entirely.","date":"2018-11-30T18:58:00.600Z","type":"message"}
{"nick":"arkain","message":"The example code in the README.md can be copied and pasted into Chrome debugger if you want to see how it's (more or less) supposed to work.","date":"2018-11-30T18:59:04.448Z","type":"message"}
{"nick":"ljharb","message":"what happens when someone assigns to a property on that well-known symbol when the symbol is inherited","date":"2018-11-30T19:00:09.126Z","type":"message"}
{"nick":"keith_miller","date":"2018-11-30T19:00:23.846Z","type":"join"}
{"nick":"ljharb","message":"does the temporarily created object box get copied to be an own property on the object being [[Set]] on?","date":"2018-11-30T19:00:34.754Z","type":"message"}
{"nick":"ljharb","message":"ie, they'd end up with `Object(Symbol.safeProto)` with their extra property added?","date":"2018-11-30T19:00:52.156Z","type":"message"}
{"nick":"ljharb","message":"what about when they assign to a property of any primitive, really","date":"2018-11-30T19:01:05.503Z","type":"message"}
{"nick":"arkain","message":"I may need to modify the example, but the well known symbol is supposed to be removed on [[Set]].","date":"2018-11-30T19:01:48.042Z","type":"message"}
{"nick":"devsnek","message":"prototypes are just objects though","date":"2018-11-30T19:02:09.551Z","type":"message"}
{"nick":"ljharb","message":"no i mean like, `const obj = { __proto__: { [Symbol.safeProto]: true } }; obj[Symbol.safeProto].a = 1;`","date":"2018-11-30T19:02:17.630Z","type":"message"}
{"nick":"ljharb","message":"do i end up with the equivalent of `const obj = { [Symbol.safeProto]: Object.assign(Object(true), { a: 1 }), __proto__: { [Symbol.safeProto]: true } };`?","date":"2018-11-30T19:03:10.146Z","type":"message"}
{"nick":"arkain","message":"Wouldn't that just throw since Obj[Symbol.safeProto] is not an object?","date":"2018-11-30T19:03:12.758Z","type":"message"}
{"nick":"ljharb","message":"not in sloppy mode","date":"2018-11-30T19:03:23.802Z","type":"message"}
{"nick":"ljharb","message":"it creates a temporary object by boxing the primitive, assigns to it, and then discards the object","date":"2018-11-30T19:03:41.573Z","type":"message"}
{"nick":"ljharb","message":"so i'm asking if your copy-on-write semantics would copy that temporary object to be an own property","date":"2018-11-30T19:03:58.778Z","type":"message"}
{"nick":"rwaldron","message":"Sorry for dropping this in the middle of the \"safe proto\" discussion, but I started with https://github.com/rdking/proposal-known-keys and have read through it twice. I don't see where the word \"known\" in the context of \"known keys\" is defined.","date":"2018-11-30T19:04:49.056Z","type":"message"}
{"nick":"arkain","message":"Yes, the temporary object becomes the new permanent instance-specific copy, but without the Symbol.SafeProto property.","date":"2018-11-30T19:04:53.725Z","type":"message"}
{"nick":"devsnek","message":"rwaldron: the intention seems to be accessible keys instead of own keys","date":"2018-11-30T19:05:18.693Z","type":"message"}
{"nick":"rwaldron","message":"Sure, I figured as much, but no clearly stated definition of that concept exists in the proposal sketch ¯\\_(ツ)_/¯","date":"2018-11-30T19:06:05.378Z","type":"message"}
{"nick":"arkain","message":"rwaldron: I probably need to add that to the readme, but the idea is that if (prop in obj) then prop will appear in Object.knownKeys()","date":"2018-11-30T19:06:25.705Z","type":"message"}
{"nick":"devsnek","message":"rwaldron: while you're here, hows the eshost addition going","date":"2018-11-30T19:06:34.456Z","type":"message"}
{"nick":"arkain","message":"... if it's enumerable","date":"2018-11-30T19:06:56.630Z","type":"message"}
{"nick":"rwaldron","message":"devsnek I'm actually writing something up right now","date":"2018-11-30T19:07:39.089Z","type":"message"}
{"nick":"devsnek","message":"👌","date":"2018-11-30T19:07:47.709Z","type":"message"}
{"nick":"rwaldron","message":"basically a \"needs list\"","date":"2018-11-30T19:07:50.173Z","type":"message"}
{"nick":"rwaldron","message":"It's stuff that's probably easy for you to bang out, I just wanted to collect it in one spot :D","date":"2018-11-30T19:08:11.117Z","type":"message"}
{"nick":"devsnek","message":"cool","date":"2018-11-30T19:08:20.888Z","type":"message"}
{"nick":"devsnek","message":"80% chance \"fix mop\" is on the list :P","date":"2018-11-30T19:08:43.669Z","type":"message"}
{"nick":"rwaldron","message":"lol, no (not yet anyway)","date":"2018-11-30T19:09:20.869Z","type":"message"}
{"nick":"ephemera_","date":"2018-11-30T19:09:39.373Z","type":"join"}
{"nick":"arkain","message":"Just added removal of the Symbol.SafeProto property on copyback.","date":"2018-11-30T19:13:08.799Z","type":"message"}
{"nick":"rwaldron","message":"devsnek https://github.com/devsnek/engine262/issues/23","date":"2018-11-30T19:15:26.040Z","type":"message"}
{"nick":"rwaldron","message":"But, I have to leave now!","date":"2018-11-30T19:15:39.084Z","type":"message"}
{"nick":"rwaldron","message":"Have a great day!","date":"2018-11-30T19:15:47.177Z","type":"message"}
{"nick":"devsnek","message":"👋","date":"2018-11-30T19:16:06.973Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T19:24:03.524Z","type":"quit"}
{"nick":"arkain","message":"rwaldron: care to check known-keys again. I just gave something of a definition for known.","date":"2018-11-30T19:26:00.396Z","type":"message"}
{"nick":"keith_miller","date":"2018-11-30T19:26:16.829Z","type":"join"}
{"nick":"arkain","message":"ljharb: did I manage to answer your question?","date":"2018-11-30T19:26:53.408Z","type":"message"}
{"nick":"ljharb","message":"arkain: no, the safeProto symbol wasn't the question","date":"2018-11-30T19:33:04.566Z","type":"message"}
{"nick":"ljharb","message":"let me try another code sample","date":"2018-11-30T19:33:09.165Z","type":"message"}
{"nick":"arkain","message":"wait. now I think I understand what you were asking. Since in sloppy mode, the assignment is simply shrugged off, no operation is actually performed.","date":"2018-11-30T19:33:10.082Z","type":"message"}
{"nick":"arkain","message":"so the copy never happens","date":"2018-11-30T19:33:25.227Z","type":"message"}
{"nick":"ljharb","message":"i believe the operation is performed; a setter on the primitive prototype will be invoked","date":"2018-11-30T19:33:30.371Z","type":"message"}
{"nick":"ljharb","message":"but i might be wrong","date":"2018-11-30T19:33:42.334Z","type":"message"}
{"nick":"arkain","message":"I just tried it. The setter doesn't trigger","date":"2018-11-30T19:33:52.168Z","type":"message"}
{"nick":"ljharb","message":"arkain: i ran `Object.defineProperty(Number.prototype, 'a', { configurable: true, set(v) { console.log('setter', v); } }); 1.2.a = 3;` in a browser console and it triggers for me","date":"2018-11-30T19:35:44.336Z","type":"message"}
{"nick":"michaelficarra","date":"2018-11-30T19:36:29.323Z","type":"join"}
{"nick":"arkain","message":"Try copying the example from the readme and adding your test case.","date":"2018-11-30T19:37:18.291Z","type":"message"}
{"nick":"arkain","message":"When I tried it, the copy didn't happen.","date":"2018-11-30T19:37:32.988Z","type":"message"}
{"nick":"arkain","message":"That would be correct behavior","date":"2018-11-30T19:37:43.955Z","type":"message"}
{"nick":"ljharb","message":"and if i do `Number.prototype[Symbol.safeProto] = true` first?","date":"2018-11-30T19:38:32.397Z","type":"message"}
{"nick":"arkain","message":"Btw, the difference between what you said before and this new example is that you created a new property for Number first. Then you accessed something that exists. In that case, it would trigger.","date":"2018-11-30T19:39:01.982Z","type":"message"}
{"nick":"ljharb","message":"ok so what would happen with a prototype property that exists (an object) that had a primitive as a value where the primitive's prototype had safeProto, and then i assigned a property to that primitive","date":"2018-11-30T19:40:16.897Z","type":"message"}
{"nick":"ljharb","message":"would the object end up copied to the instance, with the number value replaced by the boxed number?","date":"2018-11-30T19:40:32.712Z","type":"message"}
{"nick":"arkain","message":"If you changed the value assigned to that SafeProto property, then it would trigger. If you tried to set a non-existent property on a non-object, it won't trigger","date":"2018-11-30T19:40:39.064Z","type":"message"}
{"nick":"michaelficarra","reason":"Ping timeout: 246 seconds","date":"2018-11-30T19:41:07.308Z","type":"quit"}
{"nick":"ljharb","message":"i'm asking about what happens when it triggers","date":"2018-11-30T19:41:12.033Z","type":"message"}
{"nick":"arkain","message":".... but I think you pointed out something I need to fix in the example. The temp objects need SafeProto to be non-writable.","date":"2018-11-30T19:41:22.353Z","type":"message"}
{"nick":"dilijev","date":"2018-11-30T19:42:24.297Z","type":"join"}
{"nick":"arkain","message":"If the copy happens, then the value that was set at the time of copy would be the surviving value. Since setting the property caused the value to be boxed, then yes, the copy would contain the boxed value.","date":"2018-11-30T19:42:46.245Z","type":"message"}
{"nick":"arkain","message":"Again, play with the example in the readme. It's fairly accurate to what I want to happen (when dealing with plain objects)","date":"2018-11-30T19:43:59.021Z","type":"message"}
{"nick":"arkain","message":"ljharb: I just tried what you described in chrome debugger and ran into 2 issues","date":"2018-11-30T19:58:56.519Z","type":"message"}
{"nick":"arkain","message":"1. If you don't add the needed property to the prototype of a primitive wrapper, you just get an error. Even in sloppy mode.","date":"2018-11-30T20:00:55.462Z","type":"message"}
{"nick":"arkain","message":"2. Even if you did that, and this proposal were active, `1.2.a = 3` would box `2`, set `2.a = 3`, then try to set `2` on `1` which doesn't have the property `2` so it would fail. Even if you also add `2` as a property, `1` would get boxed, `1.2` would get set, then it would all be thrown away.","date":"2018-11-30T20:03:16.535Z","type":"message"}
{"nick":"arkain","message":"I could probably give you a more satisfying response if you at least start with a variable holding an object with a prototype.","date":"2018-11-30T20:04:50.159Z","type":"message"}
{"nick":"ljharb","message":"wait what? 2 on 1?","date":"2018-11-30T20:08:56.272Z","type":"message"}
{"nick":"ljharb","message":"1.2 is the number 1.2","date":"2018-11-30T20:09:00.896Z","type":"message"}
{"nick":"arkain","message":"ok... Thinking wrong... The 1st 2 parts still hold.","date":"2018-11-30T20:10:06.045Z","type":"message"}
{"nick":"arkain","message":"1.2 gets boxed, a gets set on that box, but there's no object to copy that back to.","date":"2018-11-30T20:10:32.350Z","type":"message"}
{"nick":"arkain","message":"You have to start with an object that has a flagged prototype","date":"2018-11-30T20:11:06.537Z","type":"message"}
{"nick":"arkain","message":"Notice that, in the example, the new behavior is bypassed if you directly fetch the prototype object.","date":"2018-11-30T20:11:41.187Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T20:51:42.117Z","type":"quit"}
{"nick":"keith_miller","date":"2018-11-30T20:53:34.348Z","type":"join"}
{"nick":"douglasgordon","reason":"Remote host closed the connection","date":"2018-11-30T21:05:12.203Z","type":"quit"}
{"nick":"DTG","reason":"Ping timeout: 268 seconds","date":"2018-11-30T21:09:13.821Z","type":"quit"}
{"nick":"jwalden","date":"2018-11-30T21:14:28.184Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-11-30T21:31:22.582Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-11-30T21:38:47.243Z","type":"join"}
{"nick":"douglasgordon","date":"2018-11-30T21:46:07.533Z","type":"join"}
{"nick":"DTG","date":"2018-11-30T21:46:07.646Z","type":"join"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2018-11-30T21:47:50.578Z","type":"quit"}
{"nick":"dilijev","reason":"Quit: Connection closed for inactivity","date":"2018-11-30T21:50:27.617Z","type":"quit"}
{"nick":"devsnek","message":"rwaldron: is this good enough for what you need?","date":"2018-11-30T22:08:49.801Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/devsnek/engine262/blob/master/bin/engine262.js#L25","date":"2018-11-30T22:08:51.417Z","type":"message"}
{"nick":"douglasgordon","reason":"Remote host closed the connection","date":"2018-11-30T22:33:44.766Z","type":"quit"}
{"nick":"DTG","reason":"Ping timeout: 250 seconds","date":"2018-11-30T22:37:16.547Z","type":"quit"}
{"nick":"devsnek","message":"am i going crazy https://gc.gy/11322805.png","date":"2018-11-30T22:44:03.245Z","type":"message"}
{"nick":"bpayton","date":"2018-11-30T22:54:27.984Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-11-30T23:55:12.005Z","type":"quit"}
