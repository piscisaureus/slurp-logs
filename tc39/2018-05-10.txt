{"nick":"not-an-aardvark","date":"2018-05-10T00:00:58.319Z","type":"join"}
{"nick":"arai","date":"2018-05-10T00:06:29.249Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-05-10T00:35:23.150Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-10T00:35:41.020Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-10T01:43:53.114Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-05-10T01:46:30.440Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-05-10T01:54:23.631Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-05-10T04:55:15.346Z","type":"quit"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2018-05-10T05:39:17.123Z","type":"quit"}
{"nick":"howdoi","date":"2018-05-10T05:41:21.537Z","type":"join"}
{"nick":"saulh[m]","reason":"*.net *.split","date":"2018-05-10T05:58:06.600Z","type":"quit"}
{"nick":"saulh[m]","date":"2018-05-10T08:28:56.475Z","type":"join"}
{"nick":"saulh[m]","reason":"Ping timeout: 240 seconds","date":"2018-05-10T08:36:03.330Z","type":"quit"}
{"nick":"M-IvanSanchez","reason":"Ping timeout: 269 seconds","date":"2018-05-10T08:36:35.679Z","type":"quit"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-05-10T09:08:10.444Z","type":"quit"}
{"nick":"M-IvanSanchez","date":"2018-05-10T09:35:16.429Z","type":"join"}
{"nick":"saulh[m]","date":"2018-05-10T09:38:02.419Z","type":"join"}
{"nick":"arai","date":"2018-05-10T10:11:58.758Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-05-10T10:20:39.853Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-10T10:25:08.562Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-10T10:25:38.996Z","type":"join"}
{"nick":"AtumT","date":"2018-05-10T10:35:54.766Z","type":"join"}
{"nick":"jmdyck","date":"2018-05-10T12:46:51.040Z","type":"join"}
{"nick":"bradleymeck","message":"interesting concern about lifetime detection with compositeKey and WeakRef combination https://github.com/bmeck/proposal-richer-keys/issues/3 , idk if anyone is interested but seems relevant to both","date":"2018-05-10T15:06:27.321Z","type":"message"}
{"nick":"Domenic","message":"bradleymeck: I don't understand how this is different than if you did `let $a = { a }`?","date":"2018-05-10T15:22:06.293Z","type":"message"}
{"nick":"bradleymeck","message":"that publicly exposes `$a.a` so your observation about the lifetime of `$a.a` is strongly held alive by `$a`, compositeKey isn't exposing the component parts for inspection. this might well be a non-issue, but something feels off","date":"2018-05-10T15:23:46.760Z","type":"message"}
{"nick":"Domenic","message":"OK, then `let $a = new class { #x = a }`","date":"2018-05-10T15:26:42.077Z","type":"message"}
{"nick":"bradleymeck","message":"I would say that is different, the main use case of compositeKeys seems to lean towards putting them into weakmaps, with `new class { #x = a }` I wouldn't think that the result has some intention of being in weakmaps just reading that","date":"2018-05-10T15:28:07.329Z","type":"message"}
{"nick":"bradleymeck","message":"weak collections*","date":"2018-05-10T15:28:27.181Z","type":"message"}
{"nick":"bradleymeck","message":"but the point is valid that it would expose `a`'s lifetime to whatever has a WeakRef of `$a`","date":"2018-05-10T15:29:54.531Z","type":"message"}
{"nick":"bradleymeck","message":"so, going to stew on this, but might just be a non-issue","date":"2018-05-10T15:30:11.125Z","type":"message"}
{"nick":"caitp","message":"if I'm module A, and I create a","date":"2018-05-10T15:41:29.550Z","type":"message"}
{"nick":"caitp","message":"a composite key, and pass it to some module B, who decides to weak-ref it to observe collection of a component to the key","date":"2018-05-10T15:41:46.286Z","type":"message"}
{"nick":"caitp","message":"then module B could figure out something about module A that wasn't supposed to be shared, maybe","date":"2018-05-10T15:42:05.822Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: but as Domenic pointed out, that is also true for anything private by indirect exposure: closured variables / private fields / etc.","date":"2018-05-10T15:46:50.959Z","type":"message"}
{"nick":"caitp","message":"I don't think that's the same threat","date":"2018-05-10T15:47:35.069Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: can you expand on the difference","date":"2018-05-10T15:48:18.681Z","type":"message"}
{"nick":"caitp","message":"the threat is observing the GC, not observing JS values","date":"2018-05-10T15:50:12.529Z","type":"message"}
{"nick":"caitp","message":"or keeping them alive","date":"2018-05-10T15:50:25.773Z","type":"message"}
{"nick":"caitp","message":"so I'm not sure how the indirect exposure matters","date":"2018-05-10T15:50:43.517Z","type":"message"}
{"nick":"devsnek","message":"i think this is a non issue","date":"2018-05-10T15:53:42.899Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: you can recreate the scenario without compositeKey using all sorts of indirect exposure when something is kept alive by an internal value : https://gist.github.com/bmeck/e48f2151dcca8d5cb6553e6239a82851","date":"2018-05-10T15:56:41.336Z","type":"message"}
{"nick":"bradleymeck","message":"the main interesting thing is that compositeKey is generally tailored to this scenario, not that it exposes something new","date":"2018-05-10T15:57:16.766Z","type":"message"}
{"nick":"devsnek","message":"i think the issue here is the weak reference not the composite key","date":"2018-05-10T15:58:05.123Z","type":"message"}
{"nick":"caitp","message":"I'm not entirely sure where the callback for the weakref is proposed, I'm not seeing it in https://github.com/tc39/proposal-weakrefs/blob/master/specs/spec.md","date":"2018-05-10T15:58:56.797Z","type":"message"}
{"nick":"caitp","message":"i think","date":"2018-05-10T15:59:00.580Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: proposal has been shifting a bit, but it is in the factory now as `cleanup` https://github.com/tc39/proposal-weakrefs/blob/master/specs/spec.md#the-weakfactory-constructor","date":"2018-05-10T16:01:27.389Z","type":"message"}
{"nick":"devsnek","message":"why would a callback for the thing we don't want people detecting be specified","date":"2018-05-10T16:02:31.976Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: observing a direct value has a lot of nice use cases for system modelling and things like WASM / remote references / threaded resource cleanup /etc. , observing indirect values hasn't been discussed to my knowledge","date":"2018-05-10T16:04:23.797Z","type":"message"}
{"nick":"devsnek","message":"indirect values are inherent with anything that owns anything else though?","date":"2018-05-10T16:07:11.881Z","type":"message"}
{"nick":"devsnek","message":"like the class example","date":"2018-05-10T16:07:16.412Z","type":"message"}
{"nick":"caitp","message":"if I'm module B, and module A gives me an instance of a class with some private member, and I decide to observe when that class gets GC'd, what does that give me","date":"2018-05-10T16:12:08.722Z","type":"message"}
{"nick":"caitp","message":"that's not exposing anything really","date":"2018-05-10T16:12:18.122Z","type":"message"}
{"nick":"caitp","message":"I mean I guess it says that whatever the associated value was isn't referenced anymore, but since I don't know anything about that value, does it matter?","date":"2018-05-10T16:13:13.179Z","type":"message"}
{"nick":"caitp","message":"and does it even mean that?","date":"2018-05-10T16:13:30.510Z","type":"message"}
{"nick":"caitp","message":"it doesn't really, does it","date":"2018-05-10T16:13:36.258Z","type":"message"}
{"nick":"caitp","message":"anyway, I'm making myself dizzy thinking about it when I'm trying to be productive at other things.","date":"2018-05-10T16:14:08.006Z","type":"message"}
{"nick":"devsnek","message":"btw how come exposing GC is bad, if anyone feels like explaining","date":"2018-05-10T16:15:11.737Z","type":"message"}
{"nick":"ljharb","message":"devsnek: it exposes timing attacks and things like that, i think - also it could make web code depend on certain gc semantics which would force everyone to match them","date":"2018-05-10T16:23:01.521Z","type":"message"}
{"nick":"IgnoredAmbience","message":"I recall some sandbox escape vulnerabilities have used garbage collection as part of the exploit. [citation needed]","date":"2018-05-10T16:24:00.894Z","type":"message"}
{"nick":"devsnek","message":"so it could be done without directly observing gc?","date":"2018-05-10T16:24:36.572Z","type":"message"}
{"nick":"ljharb","message":"devsnek: if you can know when it happens, you can infer a lot about the implementation, i believe","date":"2018-05-10T16:25:13.428Z","type":"message"}
{"nick":"IgnoredAmbience","message":"Here's one case where GC was forced to trigger a use-after-free (from a skim read) https://googleprojectzero.blogspot.co.uk/2014/07/pwn4fun-spring-2014-safari-part-i_24.html","date":"2018-05-10T16:26:46.900Z","type":"message"}
{"nick":"keith_miller","date":"2018-05-10T19:31:25.496Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-10T20:01:23.413Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-10T20:18:05.420Z","type":"join"}
{"nick":"not-an-aardvark","date":"2018-05-10T21:16:22.881Z","type":"join"}
{"nick":"srl295","date":"2018-05-10T21:19:01.576Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-10T21:31:00.928Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-10T21:32:11.622Z","type":"join"}
{"nick":"linclark_","date":"2018-05-10T22:31:55.368Z","type":"join"}
{"nick":"isHavvy","date":"2018-05-10T22:41:47.586Z","type":"join"}
{"nick":"Havvy","reason":"Read error: Connection reset by peer","date":"2018-05-10T22:42:40.868Z","type":"quit"}
{"nick":"arai","reason":"Ping timeout: 276 seconds","date":"2018-05-10T22:49:47.875Z","type":"quit"}
{"nick":"zkat","message":"how overly ambitious is it to put up 3 different proposals for stage 1? 👼","date":"2018-05-10T22:49:55.006Z","type":"message"}
{"nick":"zkat","message":"I figure the bar for stage 1's pretty low, and if they're all fairly straightforward, I can just put them up and see what happens? :)","date":"2018-05-10T22:51:47.565Z","type":"message"}
{"nick":"cloudshu","message":"depends on ambition of the proposal itself?","date":"2018-05-10T22:53:33.902Z","type":"message"}
{"nick":"cloudshu","message":"3 60-minute timeboxes back-to-back would be very ambitious :)","date":"2018-05-10T22:53:50.556Z","type":"message"}
{"nick":"zkat","message":"yeah","date":"2018-05-10T22:54:40.140Z","type":"message"}
{"nick":"zkat","message":"not that big. The reason they're broken up is so they're more bite-sized ;)","date":"2018-05-10T22:54:55.466Z","type":"message"}
{"nick":"zkat","message":"I got 1 15-min one, and one 60-min one that probably doesn't need that much anymore, plus a 30-minute one I'm thinking of tossing in.","date":"2018-05-10T22:55:15.511Z","type":"message"}
{"nick":"cloudshu","message":"sounds good to me","date":"2018-05-10T22:55:39.062Z","type":"message"}
{"nick":"cloudshu","message":"a lot of 30-minute items this time","date":"2018-05-10T22:55:50.050Z","type":"message"}
{"nick":"ljharb","message":"seems totally fine","date":"2018-05-10T22:56:22.150Z","type":"message"}
{"nick":"cloudshu","message":"this schedule looks pretty packed huh","date":"2018-05-10T22:56:31.414Z","type":"message"}
{"nick":"cloudshu","message":"are we gonna try to prioritize higher staged proposals this time?","date":"2018-05-10T22:57:20.860Z","type":"message"}
{"nick":"ljharb","message":"i was just going to make a TCO joke but i didn't have the heart","date":"2018-05-10T22:57:24.633Z","type":"message"}
{"nick":"cloudshu","message":"i remember that being mentioned","date":"2018-05-10T22:57:25.895Z","type":"message"}
{"nick":"ljharb","message":"cloudshu: we're going to discuss doing that next time","date":"2018-05-10T22:57:32.270Z","type":"message"}
{"nick":"cloudshu","message":"ok","date":"2018-05-10T22:57:54.769Z","type":"message"}
{"nick":"ljharb","message":"* i mean, we're going to discuss (in may) doing it next time (in july, +)","date":"2018-05-10T22:58:51.839Z","type":"message"}
{"nick":"cloudshu","message":"that's how i interpreted you, yes","date":"2018-05-10T22:59:05.330Z","type":"message"}
{"nick":"rkirsling","message":"whoa, pattern matching syntax was hugely revised, eh","date":"2018-05-10T22:59:54.519Z","type":"message"}
{"nick":"zkat","message":"yeah","date":"2018-05-10T23:01:38.990Z","type":"message"}
{"nick":"zkat","message":"I decided I really don't want to stick my hand in do{}'s pie until it's answered some of the same questions `match` would need to in order to be a nice expression that fits well into the language.","date":"2018-05-10T23:02:31.350Z","type":"message"}
{"nick":"zkat","message":"and treating case legs as ConciseBody just made some small-but-impactful details not work right at all.","date":"2018-05-10T23:03:14.453Z","type":"message"}
{"nick":"jwalden","date":"2018-05-10T23:03:21.475Z","type":"join"}
{"nick":"zkat","message":"I'm jumping on the \"please expression all my statements\" bandwagon. If `do{}` falls through, I'd _definitely_ at least like a standalone proposal for expression forms of all the if/try/for/while/switch statements.","date":"2018-05-10T23:04:50.506Z","type":"message"}
{"nick":"zkat","message":"I'd rather pattern matching not invent its own snowflakey solution without everything else being considered at the same time.","date":"2018-05-10T23:05:15.691Z","type":"message"}
{"nick":"rkirsling","message":"sounds wise :) looks like there are a lot of intertwining proposals in play","date":"2018-05-10T23:05:53.453Z","type":"message"}
{"nick":"rkirsling","message":"exciting as an FP-inclined individual myself","date":"2018-05-10T23:06:09.816Z","type":"message"}
{"nick":"rkirsling","message":"lots to read, lots to read...","date":"2018-05-10T23:06:28.837Z","type":"message"}
{"nick":"zkat","message":"\\o/","date":"2018-05-10T23:07:53.935Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-05-10T23:19:48.358Z","type":"quit"}
{"nick":"keith_miller","reason":"Ping timeout: 260 seconds","date":"2018-05-10T23:48:44.599Z","type":"quit"}
{"nick":"bradleymeck","message":"zkat: feel free to get Stage 1s out there, it lets other people see that it is being worked on","date":"2018-05-10T23:49:59.804Z","type":"message"}
{"nick":"Domenic","message":"So uh I feel bad asking but are we getting pattern matching in catch() guards? Cuz that's really where I want it...","date":"2018-05-10T23:54:26.873Z","type":"message"}
{"nick":"ljharb","message":"i think that's one of the \"future proposals\" kat has in the pattern matching repo","date":"2018-05-10T23:55:55.008Z","type":"message"}
{"nick":"TabAtkins","message":"Yeah, `match` *creates* the pattern matching syntax, then other stuff can absorb that.","date":"2018-05-10T23:56:13.518Z","type":"message"}
{"nick":"ljharb","message":"but to make it truly elegant you'd also want do expressions - otherwise you'","date":"2018-05-10T23:56:21.199Z","type":"message"}
{"nick":"ljharb","message":"* you'd have to have something weird in the catch guard, probably","date":"2018-05-10T23:56:32.397Z","type":"message"}
{"nick":"keith_miller","date":"2018-05-10T23:56:32.654Z","type":"join"}
{"nick":"ljharb","message":"but once match {} and do {} land, then catch guards seem relatively simple","date":"2018-05-10T23:56:48.975Z","type":"message"}
{"nick":"bradleymeck","message":"idk, if you have multiple types of errors you are guarding you definitely want it in the block which a statement works for","date":"2018-05-10T23:57:34.368Z","type":"message"}
{"nick":"Domenic","message":"Ah found it OK https://github.com/tc39/proposal-pattern-matching/blob/latest/TO_INFINITY_AND_BEYOND.md#catch-match","date":"2018-05-10T23:57:56.803Z","type":"message"}
{"nick":"rkirsling","message":"cool. 'cause yeah, Dart's `try {} on MySpecificException catch (e) {} catch (e) { /* default */ }` sure is nice","date":"2018-05-10T23:58:40.036Z","type":"message"}
{"nick":"Domenic","message":"(Confused as to why all headings have greater-than signs before them...)","date":"2018-05-10T23:58:59.584Z","type":"message"}
{"nick":"TabAtkins","message":"Huh, it looks like it might be a search-and-replace error. zkat?","date":"2018-05-10T23:59:55.388Z","type":"message"}
