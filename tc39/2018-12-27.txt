{"nick":"aki_","date":"2018-12-27T00:16:14.561Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2018-12-27T00:17:22.867Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T00:17:23.133Z","type":"nick"}
{"nick":"wuz_","date":"2018-12-27T01:53:30.816Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2018-12-27T01:57:54.785Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2018-12-27T02:23:54.559Z","type":"quit"}
{"nick":"aki_","date":"2018-12-27T02:23:56.352Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T02:24:20.471Z","type":"nick"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2018-12-27T04:30:53.293Z","type":"quit"}
{"nick":"akirose","date":"2018-12-27T04:37:41.480Z","type":"join"}
{"nick":"nilset","date":"2018-12-27T05:15:02.334Z","type":"join"}
{"nick":"nilset","message":"so i decided to try and make my own toy js as close to the spec as possible. looking at the grammar now","date":"2018-12-27T05:16:19.324Z","type":"message"}
{"nick":"nilset","message":"and the lexical grammar seems to depend on the syntactic grammar","date":"2018-12-27T05:16:50.367Z","type":"message"}
{"nick":"nilset","message":"so i am guessing there is no way to do a lexer pass first and then do a syntax pass over the tokens?","date":"2018-12-27T05:17:18.746Z","type":"message"}
{"nick":"nilset","message":"or is there a way to slice it where the correct set of tokens is always a concatenation of tokens i have already lexed?","date":"2018-12-27T05:19:55.249Z","type":"message"}
{"nick":"jmdyck","message":"conceivably you could do a complete lexer pass first if you gave the lexer enough smarts to know what the syntactic parser would want at any given point, but that's error prone and duplicates work. you might as well just do it more-or-less as the spec describes it.","date":"2018-12-27T05:32:23.355Z","type":"message"}
{"nick":"nilset","message":"which is... consuming tokens from a stream of code points as the lexical grammar requests them?","date":"2018-12-27T05:33:51.715Z","type":"message"}
{"nick":"jmdyck","message":"The current state of the syntactic parser dictates the goal symbol for lexical parser for the next input element only.","date":"2018-12-27T05:35:51.696Z","type":"message"}
{"nick":"nilset","message":"the \"current state of the syntactic parser\" isnt really covered by the spec is it? i only see a declaritive description of a grammar","date":"2018-12-27T05:37:38.509Z","type":"message"}
{"nick":"jmdyck","message":"\"current state of the syntactic parser\" is what clause 11 refers to as \"syntactic grammar contexts\"","date":"2018-12-27T05:38:49.599Z","type":"message"}
{"nick":"jmdyck","message":"(without definition)","date":"2018-12-27T05:40:49.854Z","type":"message"}
{"nick":"nilset","message":"mainly trying to figure out what technologies will be the clearest translation from spec to code. i am thinking parser combinators so far","date":"2018-12-27T05:40:52.558Z","type":"message"}
{"nick":"jmdyck","message":"can parser combinators handle lookahead-exclusions?","date":"2018-12-27T05:42:01.324Z","type":"message"}
{"nick":"nilset","message":"yes, the lib i am looking at found a way to implement a `not` combinator","date":"2018-12-27T05:44:50.247Z","type":"message"}
{"nick":"nilset","message":"https://github.com/Geal/nom/pull/264/files","date":"2018-12-27T05:45:12.289Z","type":"message"}
{"nick":"jmdyck","message":"rust, cool.","date":"2018-12-27T05:46:00.381Z","type":"message"}
{"nick":"nilset","message":"i ran across a few existing js parsers written in rust when researching this but since this is a toy i wanna implement it myself","date":"2018-12-27T05:48:18.576Z","type":"message"}
{"nick":"jmdyck","message":"having trouble reading it. I wonder if it's more like the \"but not\" annotation than the lookahead-exclusion","date":"2018-12-27T05:48:29.152Z","type":"message"}
{"nick":"devsnek","message":"i think with rust it would be more like","date":"2018-12-27T05:49:06.303Z","type":"message"}
{"nick":"devsnek","message":"`match getLookaheadSomehow() { all cases including negative one }`","date":"2018-12-27T05:49:50.242Z","type":"message"}
{"nick":"devsnek","message":"like if you were parsing a template, and you got \"$\", you would match on lookahead to be \"{\" or <anything else>","date":"2018-12-27T05:51:37.330Z","type":"message"}
{"nick":"nilset","message":"i think the trick is it matches but consumes no input","date":"2018-12-27T05:51:59.264Z","type":"message"}
{"nick":"devsnek","message":"well yes that is the idea of lookahead","date":"2018-12-27T05:52:11.294Z","type":"message"}
{"nick":"devsnek","message":"good luck implementing js btw","date":"2018-12-27T05:53:02.771Z","type":"message"}
{"nick":"nilset","message":"thanks, gonna need it!","date":"2018-12-27T05:53:14.963Z","type":"message"}
{"nick":"devsnek","message":"i'm working on an engine written in js","date":"2018-12-27T05:53:17.117Z","type":"message"}
{"nick":"nilset","message":"my goal is to have an engine which i can keep up to date with spec changes as they are merged in","date":"2018-12-27T05:54:48.837Z","type":"message"}
{"nick":"nilset","message":"and maybe be able to use it for experimenting with proposals","date":"2018-12-27T05:55:13.543Z","type":"message"}
{"nick":"jmdyck","message":"devsnek: does engine262 have its own parser, or does it use a pre-existing one?","date":"2018-12-27T05:55:36.892Z","type":"message"}
{"nick":"nilset","message":"i suppose writing it in js would be more useful for other people working on proposals","date":"2018-12-27T05:55:37.840Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: it uses acorn am","date":"2018-12-27T05:56:12.373Z","type":"message"}
{"nick":"devsnek","message":"atm*","date":"2018-12-27T05:56:13.776Z","type":"message"}
{"nick":"devsnek","message":"i'm working on making my own though","date":"2018-12-27T05:56:19.364Z","type":"message"}
{"nick":"devsnek","message":"nilset: yes that is the goal :)","date":"2018-12-27T05:56:30.078Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: one of the main things i want that acorn doesn't have is the ability to disable annex b parsing","date":"2018-12-27T05:56:55.318Z","type":"message"}
{"nick":"jmdyck","message":"does *any* parser have such a switch?","date":"2018-12-27T05:57:26.909Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2018-12-27T05:57:51.645Z","type":"message"}
{"nick":"devsnek","message":"graalvm's js vm has an annex b switch","date":"2018-12-27T05:58:00.444Z","type":"message"}
{"nick":"devsnek","message":"it is the only one","date":"2018-12-27T05:58:02.914Z","type":"message"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-12-27T06:01:06.214Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2018-12-27T06:13:21.417Z","type":"quit"}
{"nick":"aki_","date":"2018-12-27T06:44:29.699Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-12-27T06:45:27.402Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T06:45:27.882Z","type":"nick"}
{"nick":"ljharb","message":"devsnek: you could send a PR to acorn for that","date":"2018-12-27T07:41:25.411Z","type":"message"}
{"nick":"nilset","message":"rbuckton: any chance you will be cutting a release of grammarkdown soon? there is a bugfix which would be nice to have in ecmarkup","date":"2018-12-27T07:50:19.569Z","type":"message"}
{"nick":"nilset","message":"discussion here https://github.com/tc39/ecma262/pull/1381","date":"2018-12-27T07:50:37.212Z","type":"message"}
{"nick":"keith_mi_","date":"2018-12-27T07:55:28.164Z","type":"join"}
{"nick":"nilset","message":"wait my bad, it looks like it was released on npm, just not on github","date":"2018-12-27T07:56:42.719Z","type":"message"}
{"nick":"keith_miller","reason":"Ping timeout: 250 seconds","date":"2018-12-27T07:56:45.712Z","type":"quit"}
{"nick":"ljharb","message":"nilset: in that case, can you file an issue on grammarkdown to push the release tag to github, and update your ecma262 PR to update the dep?","date":"2018-12-27T07:59:27.489Z","type":"message"}
{"nick":"nilset","message":"my double bad, i think there was a more recent release than i thought on npm, but not recent enough to include the bugfix","date":"2018-12-27T08:01:43.064Z","type":"message"}
{"nick":"ljharb","message":"lol k","date":"2018-12-27T08:04:06.223Z","type":"message"}
{"nick":"aki_","date":"2018-12-27T08:51:26.717Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2018-12-27T08:52:39.739Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T08:52:40.073Z","type":"nick"}
{"nick":"nilset","reason":"Ping timeout: 250 seconds","date":"2018-12-27T09:06:02.871Z","type":"quit"}
{"nick":"Havvy","reason":"Read error: Connection reset by peer","date":"2018-12-27T09:23:56.300Z","type":"quit"}
{"nick":"Havvy","date":"2018-12-27T09:24:29.252Z","type":"join"}
{"nick":"aki_","date":"2018-12-27T10:58:08.439Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2018-12-27T10:58:56.698Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T10:58:57.006Z","type":"nick"}
{"nick":"nilset","date":"2018-12-27T11:02:35.676Z","type":"join"}
{"nick":"nilset","reason":"Ping timeout: 250 seconds","date":"2018-12-27T11:06:59.669Z","type":"quit"}
{"nick":"nilset","date":"2018-12-27T13:03:29.699Z","type":"join"}
{"nick":"aki_","date":"2018-12-27T13:04:25.700Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2018-12-27T13:05:29.441Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T13:05:29.860Z","type":"nick"}
{"nick":"nilset","reason":"Ping timeout: 268 seconds","date":"2018-12-27T13:08:26.697Z","type":"quit"}
{"nick":"jmdyck","date":"2018-12-27T13:36:56.979Z","type":"join"}
{"nick":"howdoi","date":"2018-12-27T14:46:24.817Z","type":"join"}
{"nick":"nilset","date":"2018-12-27T15:04:38.429Z","type":"join"}
{"nick":"nilset","reason":"Ping timeout: 250 seconds","date":"2018-12-27T15:09:10.427Z","type":"quit"}
{"nick":"aki_","date":"2018-12-27T15:11:34.841Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2018-12-27T15:12:23.828Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T15:12:24.121Z","type":"nick"}
{"nick":"nilset","date":"2018-12-27T15:29:08.703Z","type":"join"}
{"nick":"nilset","message":"looks like this channel is not currently being logged by logbot","date":"2018-12-27T15:31:24.157Z","type":"message"}
{"nick":"nilset","message":"https://freenode.logbot.info/tc39 says we need to invite glogbot","date":"2018-12-27T15:33:23.206Z","type":"message"}
{"nick":"nilset","message":"err globbot","date":"2018-12-27T15:35:12.546Z","type":"message"}
{"nick":"devsnek","message":"nilset: we use logs.libuv.org/tc39","date":"2018-12-27T15:37:25.567Z","type":"message"}
{"nick":"nilset","message":"ah, we should update the topic to include the right link","date":"2018-12-27T15:38:28.340Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2018-12-27T15:39:19.791Z","type":"message"}
{"nick":"nilset","reason":"Ping timeout: 268 seconds","date":"2018-12-27T15:52:28.821Z","type":"quit"}
{"nick":"bradleymeck","message":"is there any grammar position that is directly tied to a Record like how Delete is directly interacting with Reference and Parameters is interacting with List","date":"2018-12-27T16:00:32.554Z","type":"message"}
{"nick":"jmdyck","message":"bradleymeck: I don't understand the question.","date":"2018-12-27T16:08:27.056Z","type":"message"}
{"nick":"bradleymeck","message":"jmdyck: is there a position in the grammar where some source text gets directly shoved into a record type","date":"2018-12-27T16:08:50.894Z","type":"message"}
{"nick":"jmdyck","message":"hmm","date":"2018-12-27T16:09:16.412Z","type":"message"}
{"nick":"jmdyck","message":"I think so.","date":"2018-12-27T16:09:51.813Z","type":"message"}
{"nick":"jmdyck","message":"maybe not, if by \"source text\" you mean a sequence of code points.","date":"2018-12-27T16:14:34.154Z","type":"message"}
{"nick":"jmdyck","message":"If you're willing to accept Parse Nodes, then there are a few","date":"2018-12-27T16:16:11.114Z","type":"message"}
{"nick":"bradleymeck","message":"jmdyck: i am looking for a direct mapping of some kind, not really particular. trying to ensure I have all the source positions of types tested for an AST test fixture","date":"2018-12-27T16:21:37.923Z","type":"message"}
{"nick":"jmdyck","message":"Let me see if I understand: you're looking for parts of the grammar that, in the corresponding structures of the AST, will exercise the specification types?","date":"2018-12-27T16:32:35.679Z","type":"message"}
{"nick":"nilset","date":"2018-12-27T16:42:03.333Z","type":"join"}
{"nick":"bradleymeck","message":"yea","date":"2018-12-27T16:43:08.634Z","type":"message"}
{"nick":"nilset","reason":"Ping timeout: 240 seconds","date":"2018-12-27T16:46:27.347Z","type":"quit"}
{"nick":"jmdyck","message":"I think that would depend on the AST: in general, there isn't a guarantee that the structures of an AST will have *any* interaction with specification types.","date":"2018-12-27T16:53:47.446Z","type":"message"}
{"nick":"bradleymeck","message":"jmdyck: just looking at the spec grammar","date":"2018-12-27T16:55:23.891Z","type":"message"}
{"nick":"jmdyck","message":"(Certainly, code that *uses* the AST [e.g., evaluates it] will probably do stuff that relates to spec types, but the AST itself needn't)","date":"2018-12-27T16:55:38.168Z","type":"message"}
{"nick":"bradleymeck","message":"i can figure out how to mape things, but i simply don't see any location where records are created directly off a source text position","date":"2018-12-27T16:55:53.446Z","type":"message"}
{"nick":"bradleymeck","message":"they all seem to go through abstract ops","date":"2018-12-27T16:55:59.178Z","type":"message"}
{"nick":"bradleymeck","message":"jmdyck: yup, looking for evaluation not representation","date":"2018-12-27T16:56:20.676Z","type":"message"}
{"nick":"bradleymeck","message":"even object literals don't directly map record fields to anything, they just do a single object create","date":"2018-12-27T16:56:42.931Z","type":"message"}
{"nick":"jmdyck","message":"backing up: you're interested in the spec type Record, and where/when Records are created. And you can presumably see places in the spec where they're created, but no place where they're created \"directly off a source text position\". Right?","date":"2018-12-27T17:01:05.255Z","type":"message"}
{"nick":"nilset","date":"2018-12-27T17:04:03.001Z","type":"join"}
{"nick":"jmdyck","message":"So how about Script Record? https://tc39.github.io/ecma262/#sec-script-records It's created immediately after you parse source text as a /Script/.","date":"2018-12-27T17:05:33.939Z","type":"message"}
{"nick":"jmdyck","message":"Similarly with Source Text Module Record, though not as simply.","date":"2018-12-27T17:06:52.735Z","type":"message"}
{"nick":"bradleymeck","message":"jmdyck: mmm thats not quite right, having hard time describing it","date":"2018-12-27T17:07:43.366Z","type":"message"}
{"nick":"bradleymeck","message":"i'm trying to dynamically shape a record's list of fields using source text","date":"2018-12-27T17:08:05.654Z","type":"message"}
{"nick":"bradleymeck","message":"lists can be added to roughly by generating parameter lists with more items in the source text","date":"2018-12-27T17:08:44.948Z","type":"message"}
{"nick":"jmdyck","message":"Ah, I maybe understand...","date":"2018-12-27T17:09:49.179Z","type":"message"}
{"nick":"jmdyck","message":"I think  every Record Type in the spec has (more or less) a known and fixed set of fields: there's nothing you can do to dynamically add or remove fields.","date":"2018-12-27T17:12:11.463Z","type":"message"}
{"nick":"bradleymeck","message":"i think you are correct, been looking and don't see anything clearly affected in shape by source text","date":"2018-12-27T17:13:20.113Z","type":"message"}
{"nick":"jmdyck","message":"I think the only quasi-exception is Property Descriptors, where the [[Get]] and [[Set]] fields can be absent.","date":"2018-12-27T17:14:45.524Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2018-12-27T17:17:52.880Z","type":"quit"}
{"nick":"akirose","date":"2018-12-27T17:18:05.038Z","type":"join"}
{"nick":"devsnek","message":"aren't they ~empty~, not absent","date":"2018-12-27T17:20:59.226Z","type":"message"}
{"nick":"jmdyck","message":"I don't think so (although that would probably be an equivalent way to spec it).","date":"2018-12-27T17:23:02.163Z","type":"message"}
{"nick":"jmdyck","message":"E.g., see in CompletePropertyDescriptor:","date":"2018-12-27T17:23:10.384Z","type":"message"}
{"nick":"jmdyck","message":"\"If _Desc_ does not have a [[Set]] field, set _Desc_.[[Set]] to _like_.[[Set]].\"","date":"2018-12-27T17:23:20.261Z","type":"message"}
{"nick":"jmdyck","message":"checking whether it *has* a [[Set]] field, not whether _Desc_.[[Set]] is ~empty~.","date":"2018-12-27T17:23:56.380Z","type":"message"}
{"nick":"jmdyck","message":"and it looks like *all* of the fields can be absent?","date":"2018-12-27T17:24:42.044Z","type":"message"}
{"nick":"jmdyck","message":"(that abs op certainly assumes they can be)","date":"2018-12-27T17:25:22.542Z","type":"message"}
{"nick":"devsnek","message":"interesting","date":"2018-12-27T17:25:32.386Z","type":"message"}
{"nick":"devsnek","message":"so reading https://tc39.github.io/ecma262/#sec-property-descriptor-specification-type","date":"2018-12-27T17:27:01.837Z","type":"message"}
{"nick":"jmdyck","message":"\"In addition, any field may be present or absent.\"","date":"2018-12-27T17:27:09.800Z","type":"message"}
{"nick":"devsnek","message":"its more like PropertyDescriptor is an abstract parent class","date":"2018-12-27T17:27:11.950Z","type":"message"}
{"nick":"devsnek","message":"where you then have property/accessor descriptors as the concrete implementations","date":"2018-12-27T17:27:27.664Z","type":"message"}
{"nick":"jmdyck","message":"also \"generic\" Property Descriptor","date":"2018-12-27T17:28:25.453Z","type":"message"}
{"nick":"devsnek","message":"oh that makes it a big ugly","date":"2018-12-27T17:30:01.669Z","type":"message"}
{"nick":"jmdyck","message":"outside of that defining para, \"data Property Descriptor\" and \"accessor Property Descriptor\" are only used once each","date":"2018-12-27T17:30:55.148Z","type":"message"}
{"nick":"jmdyck","message":"\"generic\" PD not at all.","date":"2018-12-27T17:31:14.475Z","type":"message"}
{"nick":"jmdyck","message":"(so unclear that the terms are that useful)","date":"2018-12-27T17:32:06.628Z","type":"message"}
{"nick":"nilset","reason":"Ping timeout: 268 seconds","date":"2018-12-27T18:05:04.538Z","type":"quit"}
{"nick":"nilset","date":"2018-12-27T18:05:37.713Z","type":"join"}
{"nick":"AtumT","date":"2018-12-27T18:05:47.826Z","type":"join"}
{"nick":"Havvy","reason":"Quit: Computer Restarted or Restarting IRC","date":"2018-12-27T18:06:03.859Z","type":"quit"}
{"nick":"Havvy","date":"2018-12-27T18:06:28.336Z","type":"join"}
{"nick":"wuz_","date":"2018-12-27T18:42:45.293Z","type":"join"}
{"nick":"wuz_","message":"Hi! Is there anyone around that I can speak to about putting together a proposal?","date":"2018-12-27T18:44:07.730Z","type":"message"}
{"nick":"ljharb","message":"wuz_: how can i help?","date":"2018-12-27T18:44:36.041Z","type":"message"}
{"nick":"wuz_","message":"Hello! Yeah, I am interested in putting together a proposal and I am not sure what the best course of action is. I read through the Github docs and it said to reach out here","date":"2018-12-27T18:46:09.920Z","type":"message"}
{"nick":"nilset","reason":"Ping timeout: 268 seconds","date":"2018-12-27T18:48:13.791Z","type":"quit"}
{"nick":"ljharb","message":"wuz_: do you want more mechanical tips (like how to put the repo together) or are you looking for thoughts on the content of your idea (to discuss feasibility, obstacles/challenges, etc)?","date":"2018-12-27T18:50:43.962Z","type":"message"}
{"nick":"wuz_","message":"Probably mechanical, but I would also be interested in content discussion too","date":"2018-12-27T18:51:52.401Z","type":"message"}
{"nick":"wuz_","message":"Right now, the proposal is from me and another person (we've discussed on twitter), but no tc39 members","date":"2018-12-27T18:52:20.803Z","type":"message"}
{"nick":"devsnek","message":"wuz_: at stage 0 it just needs to be an explainer","date":"2018-12-27T18:56:07.879Z","type":"message"}
{"nick":"wuz_","message":"Ok cool - I wasn't sure if I needed a tc39 member to be on board. The document wasn't super clear: https://github.com/tc39/ecma262/blob/master/CONTRIBUTING.md","date":"2018-12-27T18:57:56.804Z","type":"message"}
{"nick":"wuz_","message":"Where do I share the explainer once it is done?","date":"2018-12-27T18:58:12.927Z","type":"message"}
{"nick":"devsnek","message":"you need to find a tc39 delegate","date":"2018-12-27T18:58:19.558Z","type":"message"}
{"nick":"devsnek","message":"and ask them to champion it","date":"2018-12-27T18:58:28.234Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/tc39/ecma262/blob/master/CONTRIBUTING.md#tc39-meetings-and-champions","date":"2018-12-27T18:58:46.111Z","type":"message"}
{"nick":"ljharb","message":"wuz_: and ^ is why it’s helpful to talk out the challenges and whatnot as early and often as possible :-)","date":"2018-12-27T19:04:54.560Z","type":"message"}
{"nick":"devsnek","message":"wuz_: out of curiosity what is your proposal","date":"2018-12-27T19:05:45.455Z","type":"message"}
{"nick":"wuz_","message":"Ok cool!","date":"2018-12-27T19:17:45.105Z","type":"message"}
{"nick":"wuz_","message":"The proposal is for a range method in JS","date":"2018-12-27T19:17:58.007Z","type":"message"}
{"nick":"wuz_","message":"We couldn't find one anywhere","date":"2018-12-27T19:18:25.758Z","type":"message"}
{"nick":"devsnek","message":"there isn't one","date":"2018-12-27T19:19:27.602Z","type":"message"}
{"nick":"wuz_","message":"How do I go about finding a champion?","date":"2018-12-27T19:20:21.847Z","type":"message"}
{"nick":"devsnek","message":"you just kinda gotta bump into one","date":"2018-12-27T19:22:12.408Z","type":"message"}
{"nick":"devsnek","message":"you can try asking here and on es discuss","date":"2018-12-27T19:22:23.589Z","type":"message"}
{"nick":"wuz_","message":"haha ok sounds good","date":"2018-12-27T19:22:42.742Z","type":"message"}
{"nick":"devsnek","message":"where would you put the range function","date":"2018-12-27T19:22:53.222Z","type":"message"}
{"nick":"wuz_","message":"I'll see about putting somethign in on es-discuss","date":"2018-12-27T19:22:53.730Z","type":"message"}
{"nick":"aki_","date":"2018-12-27T19:24:06.294Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2018-12-27T19:25:00.028Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T19:25:00.443Z","type":"nick"}
{"nick":"wuz_","message":"My thinking would be either on Array or Number","date":"2018-12-27T19:25:19.014Z","type":"message"}
{"nick":"wuz_","message":"My gut is leaning towards Array","date":"2018-12-27T19:25:58.007Z","type":"message"}
{"nick":"devsnek","message":"oh i was thinking you would produce an iterator","date":"2018-12-27T19:26:25.783Z","type":"message"}
{"nick":"devsnek","message":"i've been thinking of proposing some additions for iterator stuff","date":"2018-12-27T19:26:40.345Z","type":"message"}
{"nick":"wuz_","message":"Iterators would be interesting, I was also thinking about a potential new operator to define a range","date":"2018-12-27T19:28:11.981Z","type":"message"}
{"nick":"wuz_","message":"I guess iterators would actually be the best way to do it","date":"2018-12-27T19:29:08.953Z","type":"message"}
{"nick":"devsnek","message":"https://gist.github.com/devsnek/230919934eff442a31f9e3116a752c68","date":"2018-12-27T19:29:53.531Z","type":"message"}
{"nick":"devsnek","message":"i've been wanting to propose this","date":"2018-12-27T19:30:03.055Z","type":"message"}
{"nick":"devsnek","message":"but i'm waiting to see how first class protocols go","date":"2018-12-27T19:30:12.494Z","type":"message"}
{"nick":"wuz_","message":"Interesting! How would the reducer work with an infinite iterator?","date":"2018-12-27T19:31:23.004Z","type":"message"}
{"nick":"devsnek","message":"not that well","date":"2018-12-27T19:31:36.546Z","type":"message"}
{"nick":"wuz_","message":"ok haha that makes sense","date":"2018-12-27T19:31:46.884Z","type":"message"}
{"nick":"devsnek","message":"oh i forgot to add collect()","date":"2018-12-27T19:31:52.248Z","type":"message"}
{"nick":"devsnek","message":"`Iterator.of(1, 2, 3, 4).map((n) => n * 2).collect()` would be `[ 2, 4, 6, 8 ]`","date":"2018-12-27T19:33:17.143Z","type":"message"}
{"nick":"wuz_","message":"I gotta run, but I will definitely be back on to continue working on this. Thanks for the help!","date":"2018-12-27T19:35:44.548Z","type":"message"}
{"nick":"wuz_","reason":"Ping timeout: 245 seconds","date":"2018-12-27T19:40:03.296Z","type":"quit"}
{"nick":"nilset","date":"2018-12-27T19:44:00.248Z","type":"join"}
{"nick":"ljharb","message":"http://array.build already exists too","date":"2018-12-27T19:55:37.812Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-12-27T20:15:29.838Z","type":"quit"}
{"nick":"nilset","reason":"Ping timeout: 246 seconds","date":"2018-12-27T20:36:10.249Z","type":"quit"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2018-12-27T21:29:18.291Z","type":"quit"}
{"nick":"AtumT","date":"2018-12-27T21:29:59.262Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2018-12-27T21:30:28.332Z","type":"quit"}
{"nick":"akirose","date":"2018-12-27T21:31:08.529Z","type":"join"}
{"nick":"nilset","date":"2018-12-27T21:39:28.329Z","type":"join"}
{"nick":"nilset","reason":"Ping timeout: 240 seconds","date":"2018-12-27T22:04:07.314Z","type":"quit"}
{"nick":"jwalden","date":"2018-12-27T22:04:28.467Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-12-27T22:43:48.504Z","type":"quit"}
{"nick":"wuz_","date":"2018-12-27T23:37:02.732Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2018-12-27T23:37:54.430Z","type":"quit"}
{"nick":"akirose","date":"2018-12-27T23:38:08.441Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 268 seconds","date":"2018-12-27T23:41:45.712Z","type":"quit"}
{"nick":"nilset","date":"2018-12-27T23:45:29.929Z","type":"join"}
{"nick":"devsnek","message":"why don't ResolveExport() and GetExportedNames() say like \"if resolveSet is not passed, set resolveSet to a new empty List\"","date":"2018-12-27T23:50:01.378Z","type":"message"}
{"nick":"devsnek","message":"instead making the caller pass an empty list","date":"2018-12-27T23:50:07.349Z","type":"message"}
{"nick":"nilset","reason":"Ping timeout: 272 seconds","date":"2018-12-27T23:50:12.757Z","type":"quit"}
