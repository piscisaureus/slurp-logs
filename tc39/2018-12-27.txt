{"nick":"aki_","date":"2018-12-27T00:16:14.561Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2018-12-27T00:17:22.867Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T00:17:23.133Z","type":"nick"}
{"nick":"wuz_","date":"2018-12-27T01:53:30.816Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2018-12-27T01:57:54.785Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2018-12-27T02:23:54.559Z","type":"quit"}
{"nick":"aki_","date":"2018-12-27T02:23:56.352Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T02:24:20.471Z","type":"nick"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2018-12-27T04:30:53.293Z","type":"quit"}
{"nick":"akirose","date":"2018-12-27T04:37:41.480Z","type":"join"}
{"nick":"nilset","date":"2018-12-27T05:15:02.334Z","type":"join"}
{"nick":"nilset","message":"so i decided to try and make my own toy js as close to the spec as possible. looking at the grammar now","date":"2018-12-27T05:16:19.324Z","type":"message"}
{"nick":"nilset","message":"and the lexical grammar seems to depend on the syntactic grammar","date":"2018-12-27T05:16:50.367Z","type":"message"}
{"nick":"nilset","message":"so i am guessing there is no way to do a lexer pass first and then do a syntax pass over the tokens?","date":"2018-12-27T05:17:18.746Z","type":"message"}
{"nick":"nilset","message":"or is there a way to slice it where the correct set of tokens is always a concatenation of tokens i have already lexed?","date":"2018-12-27T05:19:55.249Z","type":"message"}
{"nick":"jmdyck","message":"conceivably you could do a complete lexer pass first if you gave the lexer enough smarts to know what the syntactic parser would want at any given point, but that's error prone and duplicates work. you might as well just do it more-or-less as the spec describes it.","date":"2018-12-27T05:32:23.355Z","type":"message"}
{"nick":"nilset","message":"which is... consuming tokens from a stream of code points as the lexical grammar requests them?","date":"2018-12-27T05:33:51.715Z","type":"message"}
{"nick":"jmdyck","message":"The current state of the syntactic parser dictates the goal symbol for lexical parser for the next input element only.","date":"2018-12-27T05:35:51.696Z","type":"message"}
{"nick":"nilset","message":"the \"current state of the syntactic parser\" isnt really covered by the spec is it? i only see a declaritive description of a grammar","date":"2018-12-27T05:37:38.509Z","type":"message"}
{"nick":"jmdyck","message":"\"current state of the syntactic parser\" is what clause 11 refers to as \"syntactic grammar contexts\"","date":"2018-12-27T05:38:49.599Z","type":"message"}
{"nick":"jmdyck","message":"(without definition)","date":"2018-12-27T05:40:49.854Z","type":"message"}
{"nick":"nilset","message":"mainly trying to figure out what technologies will be the clearest translation from spec to code. i am thinking parser combinators so far","date":"2018-12-27T05:40:52.558Z","type":"message"}
{"nick":"jmdyck","message":"can parser combinators handle lookahead-exclusions?","date":"2018-12-27T05:42:01.324Z","type":"message"}
{"nick":"nilset","message":"yes, the lib i am looking at found a way to implement a `not` combinator","date":"2018-12-27T05:44:50.247Z","type":"message"}
{"nick":"nilset","message":"https://github.com/Geal/nom/pull/264/files","date":"2018-12-27T05:45:12.289Z","type":"message"}
{"nick":"jmdyck","message":"rust, cool.","date":"2018-12-27T05:46:00.381Z","type":"message"}
{"nick":"nilset","message":"i ran across a few existing js parsers written in rust when researching this but since this is a toy i wanna implement it myself","date":"2018-12-27T05:48:18.576Z","type":"message"}
{"nick":"jmdyck","message":"having trouble reading it. I wonder if it's more like the \"but not\" annotation than the lookahead-exclusion","date":"2018-12-27T05:48:29.152Z","type":"message"}
{"nick":"devsnek","message":"i think with rust it would be more like","date":"2018-12-27T05:49:06.303Z","type":"message"}
{"nick":"devsnek","message":"`match getLookaheadSomehow() { all cases including negative one }`","date":"2018-12-27T05:49:50.242Z","type":"message"}
{"nick":"devsnek","message":"like if you were parsing a template, and you got \"$\", you would match on lookahead to be \"{\" or <anything else>","date":"2018-12-27T05:51:37.330Z","type":"message"}
{"nick":"nilset","message":"i think the trick is it matches but consumes no input","date":"2018-12-27T05:51:59.264Z","type":"message"}
{"nick":"devsnek","message":"well yes that is the idea of lookahead","date":"2018-12-27T05:52:11.294Z","type":"message"}
{"nick":"devsnek","message":"good luck implementing js btw","date":"2018-12-27T05:53:02.771Z","type":"message"}
{"nick":"nilset","message":"thanks, gonna need it!","date":"2018-12-27T05:53:14.963Z","type":"message"}
{"nick":"devsnek","message":"i'm working on an engine written in js","date":"2018-12-27T05:53:17.117Z","type":"message"}
{"nick":"nilset","message":"my goal is to have an engine which i can keep up to date with spec changes as they are merged in","date":"2018-12-27T05:54:48.837Z","type":"message"}
{"nick":"nilset","message":"and maybe be able to use it for experimenting with proposals","date":"2018-12-27T05:55:13.543Z","type":"message"}
{"nick":"jmdyck","message":"devsnek: does engine262 have its own parser, or does it use a pre-existing one?","date":"2018-12-27T05:55:36.892Z","type":"message"}
{"nick":"nilset","message":"i suppose writing it in js would be more useful for other people working on proposals","date":"2018-12-27T05:55:37.840Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: it uses acorn am","date":"2018-12-27T05:56:12.373Z","type":"message"}
{"nick":"devsnek","message":"atm*","date":"2018-12-27T05:56:13.776Z","type":"message"}
{"nick":"devsnek","message":"i'm working on making my own though","date":"2018-12-27T05:56:19.364Z","type":"message"}
{"nick":"devsnek","message":"nilset: yes that is the goal :)","date":"2018-12-27T05:56:30.078Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: one of the main things i want that acorn doesn't have is the ability to disable annex b parsing","date":"2018-12-27T05:56:55.318Z","type":"message"}
{"nick":"jmdyck","message":"does *any* parser have such a switch?","date":"2018-12-27T05:57:26.909Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2018-12-27T05:57:51.645Z","type":"message"}
{"nick":"devsnek","message":"graalvm's js vm has an annex b switch","date":"2018-12-27T05:58:00.444Z","type":"message"}
{"nick":"devsnek","message":"it is the only one","date":"2018-12-27T05:58:02.914Z","type":"message"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-12-27T06:01:06.214Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2018-12-27T06:13:21.417Z","type":"quit"}
{"nick":"aki_","date":"2018-12-27T06:44:29.699Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-12-27T06:45:27.402Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-27T06:45:27.882Z","type":"nick"}
{"nick":"ljharb","message":"devsnek: you could send a PR to acorn for that","date":"2018-12-27T07:41:25.411Z","type":"message"}
{"nick":"nilset","message":"rbuckton: any chance you will be cutting a release of grammarkdown soon? there is a bugfix which would be nice to have in ecmarkup","date":"2018-12-27T07:50:19.569Z","type":"message"}
{"nick":"nilset","message":"discussion here https://github.com/tc39/ecma262/pull/1381","date":"2018-12-27T07:50:37.212Z","type":"message"}
{"nick":"keith_mi_","date":"2018-12-27T07:55:28.164Z","type":"join"}
{"nick":"nilset","message":"wait my bad, it looks like it was released on npm, just not on github","date":"2018-12-27T07:56:42.719Z","type":"message"}
{"nick":"keith_miller","reason":"Ping timeout: 250 seconds","date":"2018-12-27T07:56:45.712Z","type":"quit"}
{"nick":"ljharb","message":"nilset: in that case, can you file an issue on grammarkdown to push the release tag to github, and update your ecma262 PR to update the dep?","date":"2018-12-27T07:59:27.489Z","type":"message"}
