{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-05T00:35:29.039Z","type":"quit"}
{"nick":"hellauer","reason":"Ping timeout: 264 seconds","date":"2019-08-05T00:45:04.044Z","type":"quit"}
{"nick":"AtumT_","reason":"Quit: AtumT_","date":"2019-08-05T00:45:33.004Z","type":"quit"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-05T01:01:43.660Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-08-05T01:03:18.857Z","type":"join"}
{"nick":"cybai","date":"2019-08-05T01:18:04.345Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-08-05T01:22:32.124Z","type":"quit"}
{"nick":"cybai","date":"2019-08-05T01:23:11.992Z","type":"join"}
{"nick":"drousso","date":"2019-08-05T02:22:05.753Z","type":"join"}
{"nick":"Wizek","date":"2019-08-05T03:26:36.020Z","type":"join"}
{"nick":"rkirsling","message":"devsnek: wowsers, apparently I still wasn't doing `a?.b?.()` (combined optional access and optional call) correctly","date":"2019-08-05T03:40:06.946Z","type":"message"}
{"nick":"devsnek","message":"what was it doing","date":"2019-08-05T03:40:26.959Z","type":"message"}
{"nick":"rkirsling","message":"I had it parsing as FunctionCallValueNode > OptionalChainNode > DotAccessorNode, but that runs into the same \"loss of this\" problem that I originally faced for `a.b?.()`","date":"2019-08-05T03:42:13.214Z","type":"message"}
{"nick":"rkirsling","message":"i.e. for `a = { b() { return this.c; }, c: 42 }`, `a?.b?.()` would be undefined","date":"2019-08-05T03:42:40.201Z","type":"message"}
{"nick":"rkirsling","message":"not sure how JSC-specific this problem is","date":"2019-08-05T03:43:25.632Z","type":"message"}
{"nick":"rkirsling","message":"it's not hard to fix but I have to basically introduce an `OptionalChainType::CombinedAccessAndCall` case where I reach for the *second* label on the stack :(","date":"2019-08-05T03:44:24.055Z","type":"message"}
{"nick":"drousso","message":"rkirsling are you implementing `?.` in JSC? =D","date":"2019-08-05T03:45:06.997Z","type":"message"}
{"nick":"rkirsling","message":"drousso: https://bugs.webkit.org/show_bug.cgi?id=200199 :D","date":"2019-08-05T03:45:42.213Z","type":"message"}
{"nick":"rkirsling","message":"the two places Darin requested extra coverage both had edge-case bugs lol","date":"2019-08-05T03:46:24.518Z","type":"message"}
{"nick":"rkirsling","message":"best kind of review :chefkiss:","date":"2019-08-05T03:46:35.895Z","type":"message"}
{"nick":"drousso","message":"aaaawwwwweeeeessssooooommmmmeeeee","date":"2019-08-05T03:46:44.465Z","type":"message"}
{"nick":"drousso","message":"i cant wait to use that in Web Inspector =D","date":"2019-08-05T03:46:53.529Z","type":"message"}
{"nick":"rkirsling","message":":D :D :D","date":"2019-08-05T03:47:26.348Z","type":"message"}
{"nick":"devsnek","message":"rkirsling: every time you talk about jsc internals it scares me more and more","date":"2019-08-05T03:51:25.812Z","type":"message"}
{"nick":"rkirsling","message":"lol it's really just the function node menagerie","date":"2019-08-05T03:52:20.346Z","type":"message"}
{"nick":"rkirsling","message":"what is `a.b()` in V8?","date":"2019-08-05T03:52:59.926Z","type":"message"}
{"nick":"devsnek","message":"Call { expression = Property { base = ..., name = \"b\" } }","date":"2019-08-05T03:55:04.116Z","type":"message"}
{"nick":"rkirsling","message":"ahh yeah it would sure be nice to have \"function call\" be a singular concept from the perspective of the bytecode generator","date":"2019-08-05T03:59:33.287Z","type":"message"}
{"nick":"rkirsling","message":"hehehe","date":"2019-08-05T03:59:35.809Z","type":"message"}
{"nick":"devsnek","message":"in the bytecode generator it just branches based on what `expression` is","date":"2019-08-05T03:59:56.776Z","type":"message"}
{"nick":"devsnek","message":"and then you end up with a `callee` register and a `receiver` register","date":"2019-08-05T04:00:18.833Z","type":"message"}
{"nick":"devsnek","message":"i can't even find the parser in spidermonkey","date":"2019-08-05T04:00:50.183Z","type":"message"}
{"nick":"rkirsling","message":"lol it's https://searchfox.org/mozilla-central/source/js/src/frontend/Parser.cpp and vicinity","date":"2019-08-05T04:07:41.182Z","type":"message"}
{"nick":"devsnek","message":"oh i thought the frontend folder would have like","date":"2019-08-05T04:14:36.100Z","type":"message"}
{"nick":"devsnek","message":"devtools or smth","date":"2019-08-05T04:14:40.081Z","type":"message"}
{"nick":"rkirsling","message":"haha yeah it's  quitehard to find the first time","date":"2019-08-05T04:15:28.267Z","type":"message"}
{"nick":"drousso_","date":"2019-08-05T04:32:18.049Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 250 seconds","date":"2019-08-05T04:33:31.676Z","type":"quit"}
{"nick":"drousso_","reason":"Remote host closed the connection","date":"2019-08-05T04:33:35.405Z","type":"quit"}
{"nick":"drousso","date":"2019-08-05T04:35:53.690Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-08-05T04:52:44.249Z","type":"quit"}
{"nick":"drousso","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-08-05T06:16:28.401Z","type":"quit"}
{"nick":"howdoi","date":"2019-08-05T07:09:48.047Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 248 seconds","date":"2019-08-05T07:55:47.342Z","type":"quit"}
{"nick":"ephemera_","date":"2019-08-05T08:15:53.334Z","type":"join"}
{"nick":"kpatticha","date":"2019-08-05T08:53:26.571Z","type":"join"}
{"nick":"mgol","date":"2019-08-05T08:55:07.394Z","type":"join"}
{"nick":"hellauer","date":"2019-08-05T08:56:58.457Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-05T09:10:59.670Z","type":"quit"}
{"nick":"mgol","date":"2019-08-05T09:17:34.059Z","type":"join"}
{"nick":"MylesBorins","reason":"Read error: Connection reset by peer","date":"2019-08-05T09:20:36.056Z","type":"quit"}
{"nick":"MylesBorins","date":"2019-08-05T09:25:33.564Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-05T09:39:10.977Z","type":"quit"}
{"nick":"mgol","date":"2019-08-05T10:00:54.354Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-05T10:10:37.651Z","type":"quit"}
{"nick":"cybai","date":"2019-08-05T10:52:30.596Z","type":"join"}
{"nick":"jmdyck","date":"2019-08-05T11:51:20.308Z","type":"join"}
{"nick":"AtumT","date":"2019-08-05T12:47:37.422Z","type":"join"}
{"nick":"underikar","date":"2019-08-05T13:02:19.667Z","type":"join"}
{"nick":"MylesBorins","message":"oh hey. qq. Has there are been a proposal or suggestion for something along the lines of array.protoype.difference?","date":"2019-08-05T14:54:45.109Z","type":"message"}
{"nick":"devsnek","message":"MylesBorins: comes up on esdiscuss everyone once in a while","date":"2019-08-05T15:05:51.546Z","type":"message"}
{"nick":"MylesBorins","message":"devsnek do you have a link?","date":"2019-08-05T15:11:01.727Z","type":"message"}
{"nick":"MylesBorins","message":"someone from the node project was pinging me about wanting to push forward a proposal for it... but wasn't able to find prior discussion","date":"2019-08-05T15:11:57.218Z","type":"message"}
{"nick":"devsnek","message":"I could find them in a bit","date":"2019-08-05T15:14:08.864Z","type":"message"}
{"nick":"devsnek","message":"iirc esdiscuss.org is searchable","date":"2019-08-05T15:14:16.847Z","type":"message"}
{"nick":"devsnek","message":"I wish we could translate old threads into discourse","date":"2019-08-05T15:14:47.054Z","type":"message"}
{"nick":"Nimelrian","date":"2019-08-05T15:27:16.031Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-08-05T15:38:59.789Z","type":"quit"}
{"nick":"TabAtkins","message":"MylesBorins: What's the semantics of an array difference? Diffing has a lot of possible impls...","date":"2019-08-05T15:41:21.823Z","type":"message"}
{"nick":"MylesBorins","message":"TabAtkins what was pitched to me is a function that would return items that don't exist in both arrays","date":"2019-08-05T15:44:31.146Z","type":"message"}
{"nick":"MylesBorins","message":"e.g. [1, 'a', 3.14].difference([2, 'a', 3.145]) // returns [1, 3.14]","date":"2019-08-05T15:44:37.652Z","type":"message"}
{"nick":"MylesBorins","message":"[1, null].difference([2, null]) // returns [1]","date":"2019-08-05T15:44:44.304Z","type":"message"}
{"nick":"TabAtkins","message":"So that's a Set difference","date":"2019-08-05T15:44:45.322Z","type":"message"}
{"nick":"MylesBorins","message":"slightly different","date":"2019-08-05T15:45:07.348Z","type":"message"}
{"nick":"MylesBorins","message":"as per example 2","date":"2019-08-05T15:45:10.820Z","type":"message"}
{"nick":"TabAtkins","message":"Ah, that's a Set minus.","date":"2019-08-05T15:45:21.700Z","type":"message"}
{"nick":"devsnek","message":"if those set methods happen, engines can probably optimize new Set(x).difference and new Set(x).minus","date":"2019-08-05T15:47:38.786Z","type":"message"}
{"nick":"howdoi","date":"2019-08-05T15:59:09.090Z","type":"join"}
