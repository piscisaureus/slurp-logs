{"nick":"keith_miller","date":"2019-01-25T00:03:26.472Z","type":"join"}
{"nick":"devsnek","message":"littledan: why can't numberformat just explicitly work with bigints","date":"2019-01-25T00:19:21.068Z","type":"message"}
{"nick":"devsnek","message":"its a separate primitive type, checking which was passed is pretty easy","date":"2019-01-25T00:19:34.999Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T00:20:09.424Z","type":"quit"}
{"nick":"littledan","message":"devsnek: How do you read so quickly?!","date":"2019-01-25T00:20:24.372Z","type":"message"}
{"nick":"devsnek","message":"ðŸ¤·","date":"2019-01-25T00:20:36.140Z","type":"message"}
{"nick":"littledan","message":"yeah, it can, and that's what the open PR does, but I explained why I'm now coming around to the thought that this isn't a good pattern to do in general","date":"2019-01-25T00:20:54.399Z","type":"message"}
{"nick":"devsnek","message":"is this whole issue popping up from the idl changes?","date":"2019-01-25T00:23:30.136Z","type":"message"}
{"nick":"devsnek","message":"seems like the solution would be new apis get to throw on string, old apis have to continue coercing to number","date":"2019-01-25T00:23:56.869Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-25T00:42:56.589Z","type":"quit"}
{"nick":"akirose","date":"2019-01-25T00:44:49.367Z","type":"join"}
{"nick":"gibson042","date":"2019-01-25T00:57:15.588Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-25T00:58:42.918Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T01:06:47.149Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T01:10:46.436Z","type":"join"}
{"nick":"keith_m__","date":"2019-01-25T01:29:56.228Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 250 seconds","date":"2019-01-25T01:30:59.679Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-25T02:52:47.336Z","type":"quit"}
{"nick":"aki_","date":"2019-01-25T02:52:52.540Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T02:53:16.529Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T03:13:52.928Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T03:15:09.703Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-25T03:16:35.854Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T03:17:54.313Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T03:37:09.294Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-01-25T04:01:49.535Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T04:07:25.364Z","type":"join"}
{"nick":"aki_","date":"2019-01-25T04:59:32.328Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2019-01-25T05:00:26.464Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T05:00:26.618Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T05:12:42.300Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2019-01-25T05:30:50.730Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T05:35:20.371Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T06:47:03.533Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T06:55:23.588Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-25T07:01:31.747Z","type":"quit"}
{"nick":"aki_","date":"2019-01-25T07:05:55.591Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-01-25T07:06:43.319Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T07:06:43.720Z","type":"nick"}
{"nick":"howdoi","date":"2019-01-25T08:55:00.742Z","type":"join"}
{"nick":"aki_","date":"2019-01-25T09:11:01.820Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-25T09:11:56.600Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T09:11:57.023Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T10:49:09.940Z","type":"quit"}
{"nick":"aki_","date":"2019-01-25T11:18:15.776Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-25T11:18:32.791Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T11:18:39.111Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-25T12:03:03.000Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-01-25T12:03:54.389Z","type":"quit"}
{"nick":"keith_miller","reason":"Ping timeout: 246 seconds","date":"2019-01-25T12:07:24.013Z","type":"quit"}
{"nick":"littledan","message":"We considered it for WebIDL, but it's kind of too weird when evolving an API: if you have an existing API that takes a Number, and add a BigInt overload, somehow adding that case makes String arguments throw","date":"2019-01-25T12:53:19.114Z","type":"message"}
{"nick":"littledan","message":"So it would only work for brand new APIs, not evolving existing ones","date":"2019-01-25T12:53:46.713Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-25T12:57:08.157Z","type":"join"}
{"nick":"aki_","date":"2019-01-25T13:24:54.334Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-01-25T13:26:22.757Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T13:26:23.074Z","type":"nick"}
{"nick":"jmdyck","date":"2019-01-25T13:45:04.258Z","type":"join"}
{"nick":"devsnek","message":"littledan: it should continue sending string to bigints","date":"2019-01-25T14:34:44.600Z","type":"message"}
{"nick":"devsnek","message":"er","date":"2019-01-25T14:34:48.886Z","type":"message"}
{"nick":"devsnek","message":"it should continue sending string to number","date":"2019-01-25T14:34:57.227Z","type":"message"}
{"nick":"littledan","message":"right, so that's what the format PR does","date":"2019-01-25T14:35:18.768Z","type":"message"}
{"nick":"devsnek","message":"so what's the problem then","date":"2019-01-25T14:35:31.873Z","type":"message"}
{"nick":"littledan","message":"but, this is unintuitive to some people, and overall overloading may be inappropriately used","date":"2019-01-25T14:35:33.241Z","type":"message"}
{"nick":"annevk","message":"The other problem is that it makes it attractive to add BigInt overloads to cases where it doesn't necessarily make much sense, only as a convenience","date":"2019-01-25T14:35:39.104Z","type":"message"}
{"nick":"littledan","message":"I mean, I wrote slides about these things","date":"2019-01-25T14:35:39.433Z","type":"message"}
{"nick":"serbang","date":"2019-01-25T14:35:49.666Z","type":"join"}
{"nick":"annevk","message":"Which would lead to inconsistencies between the web platform and ECMAScript, which generally doesn't accept BigInt where it accepts Number","date":"2019-01-25T14:36:02.627Z","type":"message"}
{"nick":"devsnek","message":"your slides didn't really explain much, it just showed an example of format returning an implcitly coerced bigint","date":"2019-01-25T14:36:21.719Z","type":"message"}
{"nick":"devsnek","message":"the linked webidl issue was helpful though","date":"2019-01-25T14:36:34.322Z","type":"message"}
{"nick":"littledan","message":"well, I guess the slides are for me to talk about while delivering them","date":"2019-01-25T14:39:47.844Z","type":"message"}
{"nick":"littledan","message":"but, if you can ask questions about what's unclear about the slides, it would be easier for me to give a detailed answer","date":"2019-01-25T14:40:08.409Z","type":"message"}
{"nick":"littledan","message":"annevk: Yeah, we should definitely make the same decision across both contexts, and with Node.js as well","date":"2019-01-25T14:40:29.968Z","type":"message"}
{"nick":"littledan","message":"So far, Joyee has been avoiding this overloading for Node.js, giving APIs an options bag to opt into bigint","date":"2019-01-25T14:40:52.946Z","type":"message"}
{"nick":"annevk","action":"devsnek I think you ought to apologize to littledan as youâ€™ve been a lil rude. He doesnâ€™t owe you an explanation yet is making the time to do so and youâ€™ve been pretty dismissive of that effort.","date":"2019-01-25T14:48:16.065Z","type":"action"}
{"nick":"annevk","message":"That was meant as /msg. Sorry for that ðŸ˜Ÿ","date":"2019-01-25T14:49:09.112Z","type":"message"}
{"nick":"littledan","message":"well, I'm happy to clarify things here; I'm sure I'll be chatting with more people about this topic who take much less initiative to review the materials","date":"2019-01-25T14:49:12.282Z","type":"message"}
{"nick":"littledan","message":"I should make a PR with the formatBigInt version","date":"2019-01-25T14:49:28.362Z","type":"message"}
{"nick":"littledan","message":"there's a segment of TC39 who won't read any of the GitHub threads but will read the discussion here (while others may read neither, or both, or just the other one)","date":"2019-01-25T14:50:16.564Z","type":"message"}
{"nick":"devsnek","message":"annevk: sorry I'm not trying to be dismissive, I'm trying to better understand","date":"2019-01-25T15:11:19.186Z","type":"message"}
{"nick":"gibson042","date":"2019-01-25T15:17:13.616Z","type":"join"}
{"nick":"bradleymeck","message":"guybedford stumbled upon the override mistake while trying to freeze node's core in a PR","date":"2019-01-25T15:26:45.987Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/nodejs/node/pull/25685#issuecomment-457564897","date":"2019-01-25T15:27:40.295Z","type":"message"}
{"nick":"aki_","date":"2019-01-25T15:32:17.722Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-25T15:32:47.334Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T15:32:47.820Z","type":"nick"}
{"nick":"devsnek","message":"bradleymeck: shoulda been using defineProperty","date":"2019-01-25T15:36:19.305Z","type":"message"}
{"nick":"bradleymeck","message":"I would disagree there","date":"2019-01-25T15:36:44.688Z","type":"message"}
{"nick":"devsnek","message":"ðŸ¤·","date":"2019-01-25T15:37:52.689Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: set explicitly interacts with the prototype though","date":"2019-01-25T15:39:17.804Z","type":"message"}
{"nick":"devsnek","message":"I don't understand why this is considered a mistake","date":"2019-01-25T15:39:32.960Z","type":"message"}
{"nick":"bradleymeck","message":"yup, and a non-writable prototype doesn't make the object itself immutable","date":"2019-01-25T15:39:35.188Z","type":"message"}
{"nick":"devsnek","message":"no but the property that you interact with is not writable","date":"2019-01-25T15:40:01.571Z","type":"message"}
{"nick":"devsnek","message":"you should make a new one if you want otherwise","date":"2019-01-25T15:40:08.952Z","type":"message"}
{"nick":"bradleymeck","message":"agreed, and the problem is that JS doesn't make a new one","date":"2019-01-25T15:40:29.881Z","type":"message"}
{"nick":"devsnek","message":"I find the proposed behaviour more surprising than the current","date":"2019-01-25T15:40:37.164Z","type":"message"}
{"nick":"devsnek","message":"I think it would be a problem if it did","date":"2019-01-25T15:40:45.722Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: there are notes and threads on this issue, basically it makes things very confusing if non-writable prototype fields are preventing prop creation","date":"2019-01-25T15:40:58.994Z","type":"message"}
{"nick":"devsnek","message":"yeah I've seen the threads","date":"2019-01-25T15:41:28.744Z","type":"message"}
{"nick":"bradleymeck","message":"there have been multiple people who have presented on why the current behavior is odd (myself included). we can disagree but it does make actually freezing things unrealistic","date":"2019-01-25T15:41:45.204Z","type":"message"}
{"nick":"bradleymeck","message":"which kind of goes against the point of most features","date":"2019-01-25T15:41:57.979Z","type":"message"}
{"nick":"bradleymeck","message":"you make a feature so that it can be used","date":"2019-01-25T15:42:06.024Z","type":"message"}
{"nick":"devsnek","message":"I think it's just a logical part of the design of prototypal inheritance","date":"2019-01-25T15:42:27.077Z","type":"message"}
{"nick":"devsnek","message":"yes it makes freezing things annoying but freezing things is already annoying","date":"2019-01-25T15:42:38.690Z","type":"message"}
{"nick":"devsnek","message":"get and set should be symmetrical","date":"2019-01-25T15:45:43.817Z","type":"message"}
{"nick":"bradleymeck","message":"they are more consistent if you overwrite","date":"2019-01-25T15:47:15.877Z","type":"message"}
{"nick":"bradleymeck","action":"digs about","date":"2019-01-25T15:47:17.855Z","type":"action"}
{"nick":"bradleymeck","message":"https://docs.google.com/presentation/d/17dji3YM5_LeMvdAD3Y3PQoXU1Mgm5e2yN_BraBSTkjo/edit#slide=id.g40dfe85e50_0_81","date":"2019-01-25T15:47:57.951Z","type":"message"}
{"nick":"devsnek","message":"I think I saw this before","date":"2019-01-25T15:49:00.000Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T15:57:18.171Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 240 seconds","date":"2019-01-25T16:06:56.590Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-25T16:22:01.594Z","type":"join"}
{"nick":"gibson042","date":"2019-01-25T16:22:19.217Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-25T16:32:39.114Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-25T16:33:46.340Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T16:34:32.432Z","type":"join"}
{"nick":"AtumT_","date":"2019-01-25T16:35:15.456Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2019-01-25T16:36:56.599Z","type":"quit"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-25T16:38:25.346Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T16:54:20.302Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T17:02:18.790Z","type":"quit"}
{"nick":"serbang","reason":"Quit: Connection closed for inactivity","date":"2019-01-25T17:15:32.696Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-25T17:25:17.367Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 244 seconds","date":"2019-01-25T17:27:32.460Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T17:28:05.365Z","type":"join"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2019-01-25T17:36:59.064Z","type":"quit"}
{"nick":"jmdyck","date":"2019-01-25T17:37:07.784Z","type":"join"}
{"nick":"aki_","date":"2019-01-25T17:39:16.766Z","type":"join"}
{"nick":"jmdyck","reason":"Read error: Connection reset by peer","date":"2019-01-25T17:39:17.114Z","type":"quit"}
{"nick":"jmdyck1","date":"2019-01-25T17:39:17.999Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-01-25T17:41:03.729Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T17:41:04.140Z","type":"nick"}
{"nick":"Bakkot","message":"so, y'all know how the Set contructor first makes an object with the appropriate prototype and then looks up and .calls `add` on it repeatedly? Can we make it not do that when it's just a basic `new Set`?","date":"2019-01-25T18:17:03.066Z","type":"message"}
{"nick":"Bakkot","message":"my understanding is the reason for this behavior is so that `new class Foo extends Set { add(x) { ... } }` invokes Foo's `add`, not to support monkeypatching of `Set.prototype.add` itself.","date":"2019-01-25T18:18:13.250Z","type":"message"}
{"nick":"Bakkot","message":"I ask because in the Set methods proposal Domenic suggests creating Sets directly, i.e. with the appropriate internal slots already set up rather than invoking the Set constructor, and AFAICT the only reason these are observably different is the behavior above","date":"2019-01-25T18:19:13.099Z","type":"message"}
{"nick":"jwalden","date":"2019-01-25T18:22:54.676Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T18:23:10.639Z","type":"quit"}
{"nick":"bradleymeck","message":"Bakkot: I'd love that","date":"2019-01-25T18:23:26.840Z","type":"message"}
{"nick":"bradleymeck","message":"saw that and have odd concerns while dealing with rekey","date":"2019-01-25T18:23:47.576Z","type":"message"}
{"nick":"AtumT","reason":"Ping timeout: 245 seconds","date":"2019-01-25T18:26:18.381Z","type":"quit"}
{"nick":"AtumT_","date":"2019-01-25T18:26:20.604Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 240 seconds","date":"2019-01-25T18:32:56.614Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-25T18:32:57.453Z","type":"join"}
{"nick":"AtumT_","date":"2019-01-25T18:49:55.621Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-25T18:49:56.520Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2019-01-25T18:52:27.349Z","type":"quit"}
{"nick":"AtumT_","reason":"Ping timeout: 240 seconds","date":"2019-01-25T18:54:56.597Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-25T18:58:47.879Z","type":"join"}
{"nick":"ljharb","message":"Bakkot: it looks it up repeatedly too?","date":"2019-01-25T19:32:23.072Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: if so i think the easy change is to make it only look it up once - we've made that change with iterators next before iirc","date":"2019-01-25T19:32:40.956Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: i'd worry about the web compat of skipping the lookup for %Set%, but i'd be stoked to see it go in","date":"2019-01-25T19:33:02.306Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: no, just once","date":"2019-01-25T19:33:18.249Z","type":"message"}
{"nick":"ljharb","message":"ah ok","date":"2019-01-25T19:33:47.070Z","type":"message"}
{"nick":"gsathya","message":"+1 to removing this call","date":"2019-01-25T19:33:50.711Z","type":"message"}
{"nick":"ljharb","message":"so then yeah it'd be about the web compat part","date":"2019-01-25T19:33:52.542Z","type":"message"}
{"nick":"ljharb","message":"and i'd want to do the same for Map","date":"2019-01-25T19:33:56.334Z","type":"message"}
{"nick":"Bakkot","message":"and weakset and weakmap of course, yeah","date":"2019-01-25T19:34:04.737Z","type":"message"}
{"nick":"ljharb","message":"seems like a great needs consensus needs data needs tests PR :-p","date":"2019-01-25T19:34:25.134Z","type":"message"}
{"nick":"Bakkot","message":"to be clear, I'd still want it to be there when the Set constructor is being invoked from a subclass (or Reflect.construct I guess)","date":"2019-01-25T19:34:32.021Z","type":"message"}
{"nick":"ljharb","message":"ofc","date":"2019-01-25T19:34:41.192Z","type":"message"}
{"nick":"Bakkot","message":"ok, well, we are well passed advancement deadline, but I can at least bring it up this meeting","date":"2019-01-25T19:35:13.603Z","type":"message"}
{"nick":"Bakkot","message":"does npm have a code search thing they can do?","date":"2019-01-25T19:35:49.811Z","type":"message"}
{"nick":"gsathya","message":"Bakkot, will you switch on newtarget before looking up \"add\"?","date":"2019-01-25T19:36:05.114Z","type":"message"}
{"nick":"Bakkot","message":"I would love to know what if any code on npm does `Set.prototype.add =`","date":"2019-01-25T19:36:05.367Z","type":"message"}
{"nick":"Bakkot","message":"gsathya: yeah, exactly that","date":"2019-01-25T19:36:12.593Z","type":"message"}
{"nick":"gsathya","message":"ah ok","date":"2019-01-25T19:36:31.950Z","type":"message"}
{"nick":"Bakkot","message":"unless there's a better thing to do from an implementation perspective?","date":"2019-01-25T19:36:42.088Z","type":"message"}
{"nick":"gsathya","message":"no, I think this is fine","date":"2019-01-25T19:36:52.873Z","type":"message"}
{"nick":"aki_","date":"2019-01-25T19:46:43.894Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-25T19:47:44.882Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T19:47:45.065Z","type":"nick"}
{"nick":"bradleymeck","message":"Bakkot: Node does, idk if npm uses a separate tool","date":"2019-01-25T19:54:51.547Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/nodejs/Gzemnid","date":"2019-01-25T19:54:57.926Z","type":"message"}
{"nick":"bradleymeck","message":"we also have a set of modules we run tests against https://github.com/nodejs/citgm","date":"2019-01-25T19:55:35.511Z","type":"message"}
{"nick":"Bakkot","message":"gsathya: off the top of your head do you know if it would be possible to add a use-counter for overriding Set.prototype.add?","date":"2019-01-25T19:57:26.756Z","type":"message"}
{"nick":"Bakkot","message":"in case the committee ends up concerned about breakage","date":"2019-01-25T19:57:37.808Z","type":"message"}
{"nick":"Bakkot","message":"I can look into doing it myself if necessary, just wondering about feasibility","date":"2019-01-25T19:57:52.420Z","type":"message"}
{"nick":"Bakkot","message":"added topic to agenda; issue: https://github.com/tc39/ecma262/issues/1430","date":"2019-01-25T19:58:20.272Z","type":"message"}
{"nick":"gsathya","message":"Bakkot, yeah that should be fine","date":"2019-01-25T20:10:24.389Z","type":"message"}
{"nick":"jwalden","reason":"Quit: bdinnou","date":"2019-01-25T20:44:03.915Z","type":"quit"}
{"nick":"ljharb","message":"Bakkot: that's for stages, not needs consensus","date":"2019-01-25T21:03:52.132Z","type":"message"}
{"nick":"Bakkot","message":"/shrug","date":"2019-01-25T21:05:22.099Z","type":"message"}
{"nick":"Bakkot","message":"moved it","date":"2019-01-25T21:05:24.059Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T21:08:56.290Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T21:24:21.347Z","type":"join"}
{"nick":"jwalden","date":"2019-01-25T21:32:36.518Z","type":"join"}
{"nick":"aki_","date":"2019-01-25T21:53:23.999Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-01-25T21:54:21.001Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T21:54:21.289Z","type":"nick"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-25T22:03:21.950Z","type":"quit"}
{"nick":"Bakkot","message":"zenparsing: I am now super confused on what your actual position on subclassability of Set is","date":"2019-01-25T22:04:28.479Z","type":"message"}
{"nick":"Bakkot","message":"and/or ability of user code to hook into the behavior of built-in functions, whether or not subclasses are involved","date":"2019-01-25T22:05:23.725Z","type":"message"}
{"nick":"Bakkot","message":"specifically, do you hold both of 1) `new Set` should use whatever the value of `Set.prototype.add` happens to be right now and 2) `Set.prototype.isSubsetOf` should read from [[SetData]] directly rather than looking up `has`? that seems like a weird pair of opinions to hold simultaneously, so I am worried I have misunderstood something.","date":"2019-01-25T22:08:23.922Z","type":"message"}
{"nick":"bradleymeck","message":"To clarify, no one wants to change `new CustomSet([...foo])` looking up CustomSetInstance (not proto [fun]) and being able to use `CustomSet.prototype.add` to do something diff `from Set.prototype.add`?","date":"2019-01-25T22:10:13.208Z","type":"message"}
{"nick":"devsnek","message":"I agree that set shouldn't have used add here but it's definitely a breaking change","date":"2019-01-25T22:11:54.124Z","type":"message"}
{"nick":"bradleymeck","message":"it needs to delegate to the subclass somehow though","date":"2019-01-25T22:12:25.502Z","type":"message"}
{"nick":"bradleymeck","message":"otherwise the super() call would insert directly into [[SetData]]","date":"2019-01-25T22:12:43.963Z","type":"message"}
{"nick":"devsnek","message":"someone suggested using new.target","date":"2019-01-25T22:12:44.739Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: that's right","date":"2019-01-25T22:13:39.507Z","type":"message"}
{"nick":"Bakkot","message":"only proposing to change what happens when you do `new Set`, not `new CustomSet`","date":"2019-01-25T22:13:58.816Z","type":"message"}
{"nick":"bradleymeck","message":"I can't think of a sane replacement for Set.prototype.add","date":"2019-01-25T22:14:56.572Z","type":"message"}
{"nick":"bradleymeck","message":"i wonder if anyone is doing that","date":"2019-01-25T22:15:03.172Z","type":"message"}
{"nick":"Bakkot","message":"I have been unable to locate any code anywhere which would be affected by this change.","date":"2019-01-25T22:15:12.165Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: did you check gzemnid?","date":"2019-01-25T22:15:23.791Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: yeah, the full set, even! thanks for the link.","date":"2019-01-25T22:15:39.161Z","type":"message"}
{"nick":"Bakkot","message":"lotta people polyfilling, but they wouldn't be affected.","date":"2019-01-25T22:15:46.841Z","type":"message"}
{"nick":"bradleymeck","message":"honestly surprised no one is punching it in odd ways","date":"2019-01-25T22:15:57.900Z","type":"message"}
{"nick":"jmdyck1","reason":"Ping timeout: 246 seconds","date":"2019-01-25T22:16:02.998Z","type":"quit"}
{"nick":"Bakkot","message":"some people defining their own Set type, which again wouldn't be affected.","date":"2019-01-25T22:16:07.466Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: to my knowledge the rekey (now toKey/toValue) wouldn't be affected but if ya could take a glance that would be good","date":"2019-01-25T22:16:40.416Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/tc39/proposal-richer-keys/tree/master/collection-rekey , my only concern is using a Get on the options bag + Object.prototype mutation, but thats true for most things","date":"2019-01-25T22:17:24.848Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: it would not, no. it'd still do the observable lookup on the options bag and all, the only difference would be that instead of `let adder be ? Get(map, \"set\")`, it would be `1. if NewTarget is %Map%, let adder be %MapProto_set%, else let adder be ? Get(map, \"set\")`.","date":"2019-01-25T22:18:44.610Z","type":"message"}
{"nick":"jmdyck","date":"2019-01-25T22:19:16.445Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T22:38:29.705Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T23:50:36.809Z","type":"join"}
