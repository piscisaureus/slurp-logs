{"nick":"keith_miller","date":"2019-01-25T00:03:26.472Z","type":"join"}
{"nick":"devsnek","message":"littledan: why can't numberformat just explicitly work with bigints","date":"2019-01-25T00:19:21.068Z","type":"message"}
{"nick":"devsnek","message":"its a separate primitive type, checking which was passed is pretty easy","date":"2019-01-25T00:19:34.999Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T00:20:09.424Z","type":"quit"}
{"nick":"littledan","message":"devsnek: How do you read so quickly?!","date":"2019-01-25T00:20:24.372Z","type":"message"}
{"nick":"devsnek","message":"ðŸ¤·","date":"2019-01-25T00:20:36.140Z","type":"message"}
{"nick":"littledan","message":"yeah, it can, and that's what the open PR does, but I explained why I'm now coming around to the thought that this isn't a good pattern to do in general","date":"2019-01-25T00:20:54.399Z","type":"message"}
{"nick":"devsnek","message":"is this whole issue popping up from the idl changes?","date":"2019-01-25T00:23:30.136Z","type":"message"}
{"nick":"devsnek","message":"seems like the solution would be new apis get to throw on string, old apis have to continue coercing to number","date":"2019-01-25T00:23:56.869Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-25T00:42:56.589Z","type":"quit"}
{"nick":"akirose","date":"2019-01-25T00:44:49.367Z","type":"join"}
{"nick":"gibson042","date":"2019-01-25T00:57:15.588Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-25T00:58:42.918Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T01:06:47.149Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T01:10:46.436Z","type":"join"}
{"nick":"keith_m__","date":"2019-01-25T01:29:56.228Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 250 seconds","date":"2019-01-25T01:30:59.679Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-25T02:52:47.336Z","type":"quit"}
{"nick":"aki_","date":"2019-01-25T02:52:52.540Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T02:53:16.529Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T03:13:52.928Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T03:15:09.703Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-25T03:16:35.854Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T03:17:54.313Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T03:37:09.294Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-01-25T04:01:49.535Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T04:07:25.364Z","type":"join"}
{"nick":"aki_","date":"2019-01-25T04:59:32.328Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2019-01-25T05:00:26.464Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T05:00:26.618Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T05:12:42.300Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2019-01-25T05:30:50.730Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T05:35:20.371Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T06:47:03.533Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-25T06:55:23.588Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-25T07:01:31.747Z","type":"quit"}
{"nick":"aki_","date":"2019-01-25T07:05:55.591Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-01-25T07:06:43.319Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T07:06:43.720Z","type":"nick"}
{"nick":"howdoi","date":"2019-01-25T08:55:00.742Z","type":"join"}
{"nick":"aki_","date":"2019-01-25T09:11:01.820Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-25T09:11:56.600Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T09:11:57.023Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T10:49:09.940Z","type":"quit"}
{"nick":"aki_","date":"2019-01-25T11:18:15.776Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-25T11:18:32.791Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T11:18:39.111Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-25T12:03:03.000Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-01-25T12:03:54.389Z","type":"quit"}
{"nick":"keith_miller","reason":"Ping timeout: 246 seconds","date":"2019-01-25T12:07:24.013Z","type":"quit"}
{"nick":"littledan","message":"We considered it for WebIDL, but it's kind of too weird when evolving an API: if you have an existing API that takes a Number, and add a BigInt overload, somehow adding that case makes String arguments throw","date":"2019-01-25T12:53:19.114Z","type":"message"}
{"nick":"littledan","message":"So it would only work for brand new APIs, not evolving existing ones","date":"2019-01-25T12:53:46.713Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-25T12:57:08.157Z","type":"join"}
{"nick":"aki_","date":"2019-01-25T13:24:54.334Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-01-25T13:26:22.757Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T13:26:23.074Z","type":"nick"}
{"nick":"jmdyck","date":"2019-01-25T13:45:04.258Z","type":"join"}
{"nick":"devsnek","message":"littledan: it should continue sending string to bigints","date":"2019-01-25T14:34:44.600Z","type":"message"}
{"nick":"devsnek","message":"er","date":"2019-01-25T14:34:48.886Z","type":"message"}
{"nick":"devsnek","message":"it should continue sending string to number","date":"2019-01-25T14:34:57.227Z","type":"message"}
{"nick":"littledan","message":"right, so that's what the format PR does","date":"2019-01-25T14:35:18.768Z","type":"message"}
{"nick":"devsnek","message":"so what's the problem then","date":"2019-01-25T14:35:31.873Z","type":"message"}
{"nick":"littledan","message":"but, this is unintuitive to some people, and overall overloading may be inappropriately used","date":"2019-01-25T14:35:33.241Z","type":"message"}
{"nick":"annevk","message":"The other problem is that it makes it attractive to add BigInt overloads to cases where it doesn't necessarily make much sense, only as a convenience","date":"2019-01-25T14:35:39.104Z","type":"message"}
{"nick":"littledan","message":"I mean, I wrote slides about these things","date":"2019-01-25T14:35:39.433Z","type":"message"}
{"nick":"serbang","date":"2019-01-25T14:35:49.666Z","type":"join"}
{"nick":"annevk","message":"Which would lead to inconsistencies between the web platform and ECMAScript, which generally doesn't accept BigInt where it accepts Number","date":"2019-01-25T14:36:02.627Z","type":"message"}
{"nick":"devsnek","message":"your slides didn't really explain much, it just showed an example of format returning an implcitly coerced bigint","date":"2019-01-25T14:36:21.719Z","type":"message"}
{"nick":"devsnek","message":"the linked webidl issue was helpful though","date":"2019-01-25T14:36:34.322Z","type":"message"}
{"nick":"littledan","message":"well, I guess the slides are for me to talk about while delivering them","date":"2019-01-25T14:39:47.844Z","type":"message"}
{"nick":"littledan","message":"but, if you can ask questions about what's unclear about the slides, it would be easier for me to give a detailed answer","date":"2019-01-25T14:40:08.409Z","type":"message"}
{"nick":"littledan","message":"annevk: Yeah, we should definitely make the same decision across both contexts, and with Node.js as well","date":"2019-01-25T14:40:29.968Z","type":"message"}
{"nick":"littledan","message":"So far, Joyee has been avoiding this overloading for Node.js, giving APIs an options bag to opt into bigint","date":"2019-01-25T14:40:52.946Z","type":"message"}
{"nick":"annevk","action":"devsnek I think you ought to apologize to littledan as youâ€™ve been a lil rude. He doesnâ€™t owe you an explanation yet is making the time to do so and youâ€™ve been pretty dismissive of that effort.","date":"2019-01-25T14:48:16.065Z","type":"action"}
{"nick":"annevk","message":"That was meant as /msg. Sorry for that ðŸ˜Ÿ","date":"2019-01-25T14:49:09.112Z","type":"message"}
{"nick":"littledan","message":"well, I'm happy to clarify things here; I'm sure I'll be chatting with more people about this topic who take much less initiative to review the materials","date":"2019-01-25T14:49:12.282Z","type":"message"}
{"nick":"littledan","message":"I should make a PR with the formatBigInt version","date":"2019-01-25T14:49:28.362Z","type":"message"}
{"nick":"littledan","message":"there's a segment of TC39 who won't read any of the GitHub threads but will read the discussion here (while others may read neither, or both, or just the other one)","date":"2019-01-25T14:50:16.564Z","type":"message"}
{"nick":"devsnek","message":"annevk: sorry I'm not trying to be dismissive, I'm trying to better understand","date":"2019-01-25T15:11:19.186Z","type":"message"}
{"nick":"gibson042","date":"2019-01-25T15:17:13.616Z","type":"join"}
{"nick":"bradleymeck","message":"guybedford stumbled upon the override mistake while trying to freeze node's core in a PR","date":"2019-01-25T15:26:45.987Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/nodejs/node/pull/25685#issuecomment-457564897","date":"2019-01-25T15:27:40.295Z","type":"message"}
{"nick":"aki_","date":"2019-01-25T15:32:17.722Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-25T15:32:47.334Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-25T15:32:47.820Z","type":"nick"}
{"nick":"devsnek","message":"bradleymeck: shoulda been using defineProperty","date":"2019-01-25T15:36:19.305Z","type":"message"}
{"nick":"bradleymeck","message":"I would disagree there","date":"2019-01-25T15:36:44.688Z","type":"message"}
{"nick":"devsnek","message":"ðŸ¤·","date":"2019-01-25T15:37:52.689Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: set explicitly interacts with the prototype though","date":"2019-01-25T15:39:17.804Z","type":"message"}
{"nick":"devsnek","message":"I don't understand why this is considered a mistake","date":"2019-01-25T15:39:32.960Z","type":"message"}
{"nick":"bradleymeck","message":"yup, and a non-writable prototype doesn't make the object itself immutable","date":"2019-01-25T15:39:35.188Z","type":"message"}
{"nick":"devsnek","message":"no but the property that you interact with is not writable","date":"2019-01-25T15:40:01.571Z","type":"message"}
{"nick":"devsnek","message":"you should make a new one if you want otherwise","date":"2019-01-25T15:40:08.952Z","type":"message"}
{"nick":"bradleymeck","message":"agreed, and the problem is that JS doesn't make a new one","date":"2019-01-25T15:40:29.881Z","type":"message"}
{"nick":"devsnek","message":"I find the proposed behaviour more surprising than the current","date":"2019-01-25T15:40:37.164Z","type":"message"}
{"nick":"devsnek","message":"I think it would be a problem if it did","date":"2019-01-25T15:40:45.722Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: there are notes and threads on this issue, basically it makes things very confusing if non-writable prototype fields are preventing prop creation","date":"2019-01-25T15:40:58.994Z","type":"message"}
{"nick":"devsnek","message":"yeah I've seen the threads","date":"2019-01-25T15:41:28.744Z","type":"message"}
{"nick":"bradleymeck","message":"there have been multiple people who have presented on why the current behavior is odd (myself included). we can disagree but it does make actually freezing things unrealistic","date":"2019-01-25T15:41:45.204Z","type":"message"}
{"nick":"bradleymeck","message":"which kind of goes against the point of most features","date":"2019-01-25T15:41:57.979Z","type":"message"}
{"nick":"bradleymeck","message":"you make a feature so that it can be used","date":"2019-01-25T15:42:06.024Z","type":"message"}
{"nick":"devsnek","message":"I think it's just a logical part of the design of prototypal inheritance","date":"2019-01-25T15:42:27.077Z","type":"message"}
{"nick":"devsnek","message":"yes it makes freezing things annoying but freezing things is already annoying","date":"2019-01-25T15:42:38.690Z","type":"message"}
{"nick":"devsnek","message":"get and set should be symmetrical","date":"2019-01-25T15:45:43.817Z","type":"message"}
{"nick":"bradleymeck","message":"they are more consistent if you overwrite","date":"2019-01-25T15:47:15.877Z","type":"message"}
{"nick":"bradleymeck","action":"digs about","date":"2019-01-25T15:47:17.855Z","type":"action"}
{"nick":"bradleymeck","message":"https://docs.google.com/presentation/d/17dji3YM5_LeMvdAD3Y3PQoXU1Mgm5e2yN_BraBSTkjo/edit#slide=id.g40dfe85e50_0_81","date":"2019-01-25T15:47:57.951Z","type":"message"}
{"nick":"devsnek","message":"I think I saw this before","date":"2019-01-25T15:49:00.000Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-01-25T15:57:18.171Z","type":"quit"}
