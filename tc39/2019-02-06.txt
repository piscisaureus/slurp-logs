{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-02-06T00:09:10.150Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-06T00:28:33.990Z","type":"quit"}
{"nick":"keith_miller","date":"2019-02-06T00:30:09.598Z","type":"join"}
{"nick":"Domenic","message":"TabAtkins: why do you think proxies result in overloaded = operator?","date":"2019-02-06T00:39:38.334Z","type":"message"}
{"nick":"TabAtkins","message":"`foo.bar = 1` does a specific thing, normally. When a proxy is involved, it instead calls  a user-defined function that can do anything.","date":"2019-02-06T00:40:24.633Z","type":"message"}
{"nick":"TabAtkins","message":"That seems like the same thing, more or less, as overloading the = operator?","date":"2019-02-06T00:40:45.070Z","type":"message"}
{"nick":"devsnek","message":"technically its just always overloaded","date":"2019-02-06T00:44:25.875Z","type":"message"}
{"nick":"devsnek","message":"proxies are just another exotic object","date":"2019-02-06T00:44:35.991Z","type":"message"}
{"nick":"Domenic","message":"I see, I think of that as changing how . works, not =","date":"2019-02-06T00:49:20.542Z","type":"message"}
{"nick":"ljharb","message":"TabAtkins: that's the same for setters tho, right?","date":"2019-02-06T00:49:20.775Z","type":"message"}
{"nick":"devsnek","message":"accessors are a subset of object behaviour","date":"2019-02-06T00:51:00.607Z","type":"message"}
{"nick":"rmarkins","reason":"Remote host closed the connection","date":"2019-02-06T01:18:47.675Z","type":"quit"}
{"nick":"TabAtkins","message":"ljharb: yup, same deal","date":"2019-02-06T01:22:23.246Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-06T01:25:20.997Z","type":"quit"}
{"nick":"TabAtkins","message":"Domenic: overloading an operator either way, sure","date":"2019-02-06T01:27:11.193Z","type":"message"}
{"nick":"keith_miller","date":"2019-02-06T01:29:04.950Z","type":"join"}
{"nick":"aki_","date":"2019-02-06T01:35:13.587Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-02-06T01:36:10.774Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-06T01:36:11.188Z","type":"nick"}
{"nick":"Jessidhia","reason":"Disconnected by services","date":"2019-02-06T02:08:47.034Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-02-06T02:09:01.101Z","type":"join"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-02-06T02:30:47.810Z","type":"quit"}
{"nick":"rmarkins","date":"2019-02-06T02:43:05.089Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 245 seconds","date":"2019-02-06T02:47:33.307Z","type":"quit"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-06T02:58:16.726Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-02-06T02:59:13.920Z","type":"join"}
{"nick":"Jessidhia","reason":"Client Quit","date":"2019-02-06T02:59:41.351Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-06T03:01:19.014Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-02-06T03:02:40.799Z","type":"join"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-06T03:17:59.847Z","type":"quit"}
{"nick":"Sirisian__","date":"2019-02-06T03:18:39.738Z","type":"part"}
{"nick":"Sirisian","date":"2019-02-06T03:18:48.861Z","type":"join"}
{"nick":"keith_miller","date":"2019-02-06T03:30:36.531Z","type":"join"}
{"nick":"aki_","date":"2019-02-06T03:41:25.818Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-02-06T03:42:26.591Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-06T03:42:27.051Z","type":"nick"}
{"nick":"Jessidhia","date":"2019-02-06T03:43:35.018Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-02-06T04:08:09.649Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-02-06T04:08:15.332Z","type":"join"}
{"nick":"jwalden","reason":"Quit: back tomorrow","date":"2019-02-06T04:08:36.624Z","type":"quit"}
{"nick":"jmdyck","reason":"Ping timeout: 252 seconds","date":"2019-02-06T04:15:12.896Z","type":"quit"}
{"nick":"jmdyck","date":"2019-02-06T04:17:31.298Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-06T04:20:12.264Z","type":"quit"}
{"nick":"rmarkins","date":"2019-02-06T04:43:55.776Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 250 seconds","date":"2019-02-06T04:48:08.776Z","type":"quit"}
{"nick":"cybai_","reason":"Ping timeout: 246 seconds","date":"2019-02-06T05:26:09.046Z","type":"quit"}
{"nick":"cybai","date":"2019-02-06T05:33:36.824Z","type":"join"}
{"nick":"devsnek","message":"shouldn't this change x, not add a new property to y https://gc.gy/17136350.png","date":"2019-02-06T05:36:12.996Z","type":"message"}
{"nick":"aki_","date":"2019-02-06T05:47:35.588Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-02-06T05:49:02.726Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-06T05:49:03.171Z","type":"nick"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2019-02-06T06:05:22.399Z","type":"quit"}
{"nick":"howdoi","date":"2019-02-06T06:12:08.585Z","type":"join"}
{"nick":"rmarkins","date":"2019-02-06T06:44:46.397Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 240 seconds","date":"2019-02-06T06:48:47.334Z","type":"quit"}
{"nick":"aki_","date":"2019-02-06T07:53:22.362Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-02-06T07:54:26.631Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-06T07:54:27.102Z","type":"nick"}
{"nick":"obensource","reason":"Ping timeout: 250 seconds","date":"2019-02-06T08:05:44.787Z","type":"quit"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-06T08:09:48.547Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-02-06T08:11:58.436Z","type":"join"}
{"nick":"Jessidhia","reason":"Client Quit","date":"2019-02-06T08:14:57.123Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-02-06T08:15:46.508Z","type":"join"}
{"nick":"obensource","date":"2019-02-06T08:19:26.015Z","type":"join"}
{"nick":"rmarkins","date":"2019-02-06T08:45:39.787Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 250 seconds","date":"2019-02-06T08:49:56.783Z","type":"quit"}
{"nick":"aki_","date":"2019-02-06T10:00:02.443Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-02-06T10:00:53.319Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-06T10:00:53.657Z","type":"nick"}
{"nick":"rmarkins","date":"2019-02-06T10:46:27.704Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 268 seconds","date":"2019-02-06T10:51:12.705Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 268 seconds","date":"2019-02-06T11:57:11.742Z","type":"quit"}
{"nick":"aki_","date":"2019-02-06T12:06:45.591Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2019-02-06T12:07:38.445Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-06T12:07:38.915Z","type":"nick"}
{"nick":"cybai","date":"2019-02-06T12:21:09.997Z","type":"join"}
{"nick":"jmdyck","date":"2019-02-06T12:45:43.824Z","type":"join"}
{"nick":"rmarkins","date":"2019-02-06T12:47:19.708Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 268 seconds","date":"2019-02-06T12:52:05.021Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-02-06T12:57:04.004Z","type":"quit"}
{"nick":"cybai","date":"2019-02-06T13:03:04.879Z","type":"join"}
{"nick":"littledan","message":"Personally, I could go either way on user-level operator overloading vs adding more built-in types with overloaded operators, but I think TC39 is in a funny middle state where we don't have consensus on the future plans, which makes it hard for CSS units to be ergonomic either one way or the other way","date":"2019-02-06T13:08:17.431Z","type":"message"}
{"nick":"AtumT","date":"2019-02-06T13:54:15.906Z","type":"join"}
{"nick":"aki_","date":"2019-02-06T14:12:55.259Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-02-06T14:13:56.612Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-06T14:13:56.888Z","type":"nick"}
{"nick":"bradleymeck","message":"littledan: I think allowing hosts to overload is different from JS hooks though, so a 3rd option!","date":"2019-02-06T14:30:45.647Z","type":"message"}
{"nick":"littledan","message":"yeah, that'd be interesting, so we could have Decimal in TC39, CSS units through host hooks, but no JS-defined stuff, and no ability to polyfill those two","date":"2019-02-06T14:31:37.791Z","type":"message"}
{"nick":"surma__","date":"2019-02-06T14:31:50.261Z","type":"part"}
{"nick":"littledan","message":"however, when Andrew Paprocki presented on Decimal, some people said, \"this must be through JS-level operator overloading\"","date":"2019-02-06T14:32:02.244Z","type":"message"}
{"nick":"littledan","message":"so, I wanted to think through what that would mean, to understand whether we should go that way, or one of these other ways","date":"2019-02-06T14:32:20.611Z","type":"message"}
{"nick":"devsnek","message":"i don't think host hooks would be a practical solution, at least thinking of the relationship between chromium and v8","date":"2019-02-06T14:38:40.841Z","type":"message"}
{"nick":"devsnek","message":"probably worse than a pure js api","date":"2019-02-06T14:39:02.197Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: lots of people want to keep virtualization ;p","date":"2019-02-06T14:43:25.819Z","type":"message"}
{"nick":"devsnek","message":"i'm also hopeful that now that v8 is working on a jitless mode there will be more focus on how things impact pure interpreters","date":"2019-02-06T14:44:39.477Z","type":"message"}
{"nick":"rmarkins","date":"2019-02-06T14:48:10.452Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 250 seconds","date":"2019-02-06T14:52:38.438Z","type":"quit"}
{"nick":"littledan","message":"bradleymeck: I think my operator overloading proposal should be good with virtualization. Do you see problems?","date":"2019-02-06T15:10:33.689Z","type":"message"}
{"nick":"littledan","message":"at the same time, you can't write your own Number or BigInt today, so I don't understand what the argument is that you must be able to write your own Decimal if it exists","date":"2019-02-06T15:11:09.657Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: nope, but the virtualization invalidates a lot of my stuff around minification XD","date":"2019-02-06T15:11:13.889Z","type":"message"}
{"nick":"littledan","message":"which stuff?","date":"2019-02-06T15:11:24.619Z","type":"message"}
{"nick":"bradleymeck","message":"folding +b into a number then making other things folded based upon that","date":"2019-02-06T15:11:49.374Z","type":"message"}
{"nick":"bradleymeck","message":"like `typeof +b`","date":"2019-02-06T15:11:55.316Z","type":"message"}
{"nick":"bradleymeck","message":"idk if unary plus actually is overloadable in your proposal (goes to check)","date":"2019-02-06T15:13:11.028Z","type":"message"}
{"nick":"devsnek","message":"unary plus has to throw if ToNumber fails","date":"2019-02-06T15:45:21.838Z","type":"message"}
{"nick":"devsnek","message":"for asm.js reasons","date":"2019-02-06T15:45:23.984Z","type":"message"}
{"nick":"devsnek","message":":(","date":"2019-02-06T15:45:25.023Z","type":"message"}
