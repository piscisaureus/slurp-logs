{"nick":"arai","date":"2018-04-16T00:49:36.477Z","type":"join"}
{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2018-04-16T01:53:16.894Z","type":"quit"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-16T05:00:52.460Z","type":"quit"}
{"nick":"arai","date":"2018-04-16T06:21:03.759Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-04-16T07:04:26.121Z","type":"quit"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-16T07:19:25.732Z","type":"quit"}
{"nick":"arai","date":"2018-04-16T07:35:01.346Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-16T07:52:45.995Z","type":"quit"}
{"nick":"arai","date":"2018-04-16T08:00:28.980Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-16T08:13:28.267Z","type":"quit"}
{"nick":"arai","date":"2018-04-16T08:13:46.685Z","type":"join"}
{"nick":"arai_","date":"2018-04-16T08:15:29.685Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 256 seconds","date":"2018-04-16T08:18:28.685Z","type":"quit"}
{"nick":"arai_","new_nick":"arai","date":"2018-04-16T08:38:20.989Z","type":"nick"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-04-16T10:25:19.789Z","type":"quit"}
{"nick":"mylesborins","date":"2018-04-16T10:25:44.003Z","type":"join"}
{"nick":"jwalden","date":"2018-04-16T13:39:22.683Z","type":"join"}
{"nick":"AtumT","date":"2018-04-16T14:38:51.790Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-16T16:17:23.959Z","type":"quit"}
{"nick":"arai","date":"2018-04-16T16:34:15.280Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-04-16T16:48:20.520Z","type":"quit"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-16T16:49:21.705Z","type":"quit"}
{"nick":"arai","date":"2018-04-16T16:49:48.621Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-16T16:52:09.986Z","type":"quit"}
{"nick":"caitp","message":"is `with (new class C { #x = 1; }) { console.log(#x); }` supposed to log `1`?","date":"2018-04-16T17:28:01.937Z","type":"message"}
{"nick":"caitp","message":"i guess it's a syntax error because #x is out of scope","date":"2018-04-16T17:28:40.864Z","type":"message"}
{"nick":"ljharb","message":"i would hope it's a syntax error :-)","date":"2018-04-16T17:31:35.244Z","type":"message"}
{"nick":"caitp","message":"or reference error? one of those","date":"2018-04-16T17:32:31.385Z","type":"message"}
{"nick":"ljharb","message":"i think syntax if it's not inside a class body","date":"2018-04-16T17:33:18.688Z","type":"message"}
{"nick":"ljharb","message":"caitp: but also the shorthand access doesn't exist atm, so i'd think syntax error always","date":"2018-04-16T17:33:53.567Z","type":"message"}
{"nick":"caitp","message":"afaik you can still reference private names outside of classes, but it only really makes sense in a member expression","date":"2018-04-16T17:34:08.130Z","type":"message"}
{"nick":"caitp","message":"even if there's no outer class scope","date":"2018-04-16T17:34:21.377Z","type":"message"}
{"nick":"caitp","message":"maybe that's incorrect","date":"2018-04-16T17:34:26.741Z","type":"message"}
{"nick":"JaseW","date":"2018-04-16T17:48:48.947Z","type":"join"}
{"nick":"JaseW","reason":"Changing host","date":"2018-04-16T17:48:49.169Z","type":"quit"}
{"nick":"JaseW","date":"2018-04-16T17:48:49.348Z","type":"join"}
{"nick":"cloudshu","date":"2018-04-16T17:51:09.397Z","type":"join"}
{"nick":"gsathya","message":"caitp: you can't reference private names outside of classes","date":"2018-04-16T18:44:03.757Z","type":"message"}
{"nick":"arai","date":"2018-04-16T19:16:32.412Z","type":"join"}
{"nick":"zkat","message":"what about `class C { constructor () { this.#x = 1; with (this) { console.log(#x) } } }`","date":"2018-04-16T20:11:59.750Z","type":"message"}
{"nick":"ljharb","message":"`with` doesn't work in strict code, and class bodies are auto-strict","date":"2018-04-16T20:12:37.609Z","type":"message"}
{"nick":"ljharb","message":"otherwise i think i'd expect that to work","date":"2018-04-16T20:12:46.488Z","type":"message"}
{"nick":"zkat","message":"aha cool","date":"2018-04-16T20:12:50.851Z","type":"message"}
{"nick":"zkat","message":"part of me thinks it'd be neat to have a strict-mode `with` that destructures lexically, like http://clhs.lisp.se/Body/m_w_slts.htm","date":"2018-04-16T20:15:25.149Z","type":"message"}
{"nick":"zkat","message":"but that is... probably not worth the trouble. It's just how I always wished `with` actually worked (specially since it's statically-optimizable and avoids a lot of the pitfalls of `with`)","date":"2018-04-16T20:16:00.272Z","type":"message"}
{"nick":"JaseW","reason":"Quit: Leaving","date":"2018-04-16T22:41:44.888Z","type":"quit"}
{"nick":"gkatsev","date":"2018-04-16T22:47:18.649Z","type":"join"}
