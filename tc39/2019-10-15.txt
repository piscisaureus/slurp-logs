{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T00:06:07.449Z","type":"quit"}
{"nick":"drousso_","date":"2019-10-15T00:20:37.783Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 245 seconds","date":"2019-10-15T00:21:58.408Z","type":"quit"}
{"nick":"jwalden","date":"2019-10-15T00:26:38.817Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-10-15T00:57:39.300Z","type":"quit"}
{"nick":"drousso_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T00:58:06.059Z","type":"quit"}
{"nick":"drousso","date":"2019-10-15T00:58:37.680Z","type":"join"}
{"nick":"keith_miller","date":"2019-10-15T01:19:39.736Z","type":"join"}
{"nick":"haxjs","reason":"Quit: This computer has gone to sleep","date":"2019-10-15T01:30:03.368Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T02:15:57.118Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T02:22:26.794Z","type":"join"}
{"nick":"haxjs","reason":"Ping timeout: 268 seconds","date":"2019-10-15T02:34:50.702Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T02:35:44.657Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T03:07:22.777Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-15T03:23:01.046Z","type":"quit"}
{"nick":"cybai","date":"2019-10-15T03:23:40.621Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-10-15T03:28:33.927Z","type":"quit"}
{"nick":"haxjs","reason":"Quit: Leaving","date":"2019-10-15T03:30:04.539Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T03:33:03.946Z","type":"join"}
{"nick":"haxjs","reason":"Client Quit","date":"2019-10-15T03:34:56.056Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-10-15T03:42:48.077Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T03:44:13.343Z","type":"join"}
{"nick":"haxjs","reason":"Quit: Leaving","date":"2019-10-15T03:50:59.642Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T03:51:30.916Z","type":"join"}
{"nick":"haxjs","reason":"Quit: Leaving","date":"2019-10-15T03:58:57.408Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T03:59:19.776Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-10-15T04:02:11.329Z","type":"quit"}
{"nick":"haxjs","reason":"Ping timeout: 240 seconds","date":"2019-10-15T04:11:38.935Z","type":"quit"}
{"nick":"cybai","date":"2019-10-15T04:11:54.037Z","type":"join"}
{"nick":"haxjs","date":"2019-10-15T04:12:04.681Z","type":"join"}
{"nick":"cybai_","date":"2019-10-15T04:15:58.032Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-10-15T04:16:52.053Z","type":"quit"}
{"nick":"cybai_","new_nick":"cybai","date":"2019-10-15T04:17:16.264Z","type":"nick"}
{"nick":"haxjs","reason":"Quit: Leaving","date":"2019-10-15T04:17:49.027Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T04:18:14.924Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 268 seconds","date":"2019-10-15T04:24:36.962Z","type":"quit"}
{"nick":"haxjs","reason":"Quit: Leaving","date":"2019-10-15T04:25:20.787Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T04:25:43.450Z","type":"join"}
{"nick":"haxjs","reason":"Quit: Leaving","date":"2019-10-15T04:30:51.892Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T04:31:11.927Z","type":"join"}
{"nick":"devsnek","message":"bradleymeck: were you the one who had a repl parse goal proposal","date":"2019-10-15T04:35:41.785Z","type":"message"}
{"nick":"Havvy","reason":"Ping timeout: 268 seconds","date":"2019-10-15T04:38:10.736Z","type":"quit"}
{"nick":"Havvy","date":"2019-10-15T04:45:24.968Z","type":"join"}
{"nick":"haxjs","reason":"Ping timeout: 268 seconds","date":"2019-10-15T04:47:26.349Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T04:48:32.216Z","type":"join"}
{"nick":"isHavvy","date":"2019-10-15T04:50:35.921Z","type":"join"}
{"nick":"Havvy","reason":"Ping timeout: 240 seconds","date":"2019-10-15T04:52:26.930Z","type":"quit"}
{"nick":"isHavvyGhosting","date":"2019-10-15T04:53:20.020Z","type":"join"}
{"nick":"isHavvy","reason":"Ping timeout: 240 seconds","date":"2019-10-15T04:54:56.922Z","type":"quit"}
{"nick":"ljharb","message":"yes","date":"2019-10-15T04:55:59.147Z","type":"message"}
{"nick":"haxjs","reason":"Ping timeout: 268 seconds","date":"2019-10-15T05:00:59.701Z","type":"quit"}
{"nick":"haxjs","date":"2019-10-15T05:02:01.593Z","type":"join"}
{"nick":"devsnek","message":"when does GetBindingValue() with S (strict) set to false happen?","date":"2019-10-15T05:39:21.309Z","type":"message"}
{"nick":"devsnek","message":"or rather, when does it happen such that it matters","date":"2019-10-15T05:39:30.324Z","type":"message"}
{"nick":"devsnek","message":"i see it branched in object environment records","date":"2019-10-15T05:39:51.364Z","type":"message"}
{"nick":"devsnek","message":"if strict is false, it should return undefined instead of throwing a reference error","date":"2019-10-15T05:40:02.912Z","type":"message"}
{"nick":"devsnek","message":"but i have no idea in what circumstance this happens","date":"2019-10-15T05:40:09.230Z","type":"message"}
{"nick":"titanbiscuit","reason":"Ping timeout: 268 seconds","date":"2019-10-15T07:30:50.825Z","type":"quit"}
{"nick":"tbisker8","date":"2019-10-15T07:30:53.675Z","type":"join"}
{"nick":"aqquadro","date":"2019-10-15T07:43:18.918Z","type":"join"}
{"nick":"aqquadro","reason":"Changing host","date":"2019-10-15T07:43:19.025Z","type":"quit"}
{"nick":"aqquadro","date":"2019-10-15T07:43:19.077Z","type":"join"}
{"nick":"aqquadro","reason":"Ping timeout: 240 seconds","date":"2019-10-15T09:32:26.926Z","type":"quit"}
{"nick":"aqquadro","date":"2019-10-15T09:43:16.827Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-10-15T09:55:00.044Z","type":"quit"}
{"nick":"cybai","date":"2019-10-15T09:55:28.611Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-10-15T10:00:29.589Z","type":"quit"}
{"nick":"mgol","date":"2019-10-15T10:55:03.919Z","type":"join"}
{"nick":"cybai","date":"2019-10-15T11:08:21.628Z","type":"join"}
{"nick":"AtumT","date":"2019-10-15T11:32:11.128Z","type":"join"}
{"nick":"aqquadro","reason":"Ping timeout: 268 seconds","date":"2019-10-15T11:33:48.745Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T12:01:54.991Z","type":"quit"}
{"nick":"mgol","date":"2019-10-15T12:03:16.082Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T12:21:31.471Z","type":"quit"}
{"nick":"mgol","date":"2019-10-15T12:22:21.491Z","type":"join"}
{"nick":"aqquadro","date":"2019-10-15T12:36:32.008Z","type":"join"}
{"nick":"aqquadro","reason":"Changing host","date":"2019-10-15T12:36:32.122Z","type":"quit"}
{"nick":"aqquadro","date":"2019-10-15T12:36:32.174Z","type":"join"}
{"nick":"jmdyck","date":"2019-10-15T12:37:27.971Z","type":"join"}
{"nick":"haxjs","reason":"Quit: This computer has gone to sleep","date":"2019-10-15T12:53:07.806Z","type":"quit"}
{"nick":"mgol","reason":"Ping timeout: 245 seconds","date":"2019-10-15T12:53:38.402Z","type":"quit"}
{"nick":"mgol","date":"2019-10-15T12:55:29.776Z","type":"join"}
{"nick":"jmdyck","message":"devsnek: there are 5 places where the _S_ arg is explicitly *false*, plus the call in GetValue where it's false if IsStrictReference(_V_) returns false.","date":"2019-10-15T13:30:37.032Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: if I'm reading that engine262 stuff correctly, this would mean `> let f = () => a; let a = 1;` `> const a = 2; f()` would end up with `f()` returning `2`?","date":"2019-10-15T13:37:36.970Z","type":"message"}
{"nick":"m_gol","date":"2019-10-15T14:10:30.916Z","type":"join"}
{"nick":"mgol","reason":"Ping timeout: 268 seconds","date":"2019-10-15T14:12:17.824Z","type":"quit"}
{"nick":"devsnek","message":"bradleymeck: that matches my understanding as well","date":"2019-10-15T14:18:33.415Z","type":"message"}
{"nick":"bradleymeck","message":"seems fine to me, though some people want this weird undo hack, or to ensure each input is like reading top down in a file","date":"2019-10-15T14:19:06.165Z","type":"message"}
{"nick":"bradleymeck","message":"i'm mostly avoiding that drama while i'm on other things","date":"2019-10-15T14:19:23.371Z","type":"message"}
{"nick":"haxjs","date":"2019-10-15T14:19:32.047Z","type":"join"}
{"nick":"bradleymeck","message":"but i can probably merge the writeup you did","date":"2019-10-15T14:19:33.962Z","type":"message"}
{"nick":"m_gol","reason":"Ping timeout: 240 seconds","date":"2019-10-15T14:30:16.923Z","type":"quit"}
{"nick":"mgol","date":"2019-10-15T14:33:40.179Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T15:12:54.846Z","type":"quit"}
{"nick":"devsnek","message":"jmdyck: is it possible to define something like \"InputCouldContinue\" where it returns true on something like `{ a: 1`","date":"2019-10-15T15:16:06.418Z","type":"message"}
{"nick":"keith_miller","date":"2019-10-15T15:22:10.868Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T15:29:05.016Z","type":"quit"}
{"nick":"keith_miller","date":"2019-10-15T15:54:04.566Z","type":"join"}
{"nick":"keith_mi_","date":"2019-10-15T15:54:55.849Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-10-15T15:56:26.989Z","type":"quit"}
{"nick":"aqquadro","reason":"Ping timeout: 264 seconds","date":"2019-10-15T16:03:04.067Z","type":"quit"}
{"nick":"jwalden","date":"2019-10-15T16:06:27.435Z","type":"join"}
{"nick":"jmdyck","message":"devsnek: hm.","date":"2019-10-15T16:08:35.107Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: in node, we can sort of do this https://gc.gy/38860803.png","date":"2019-10-15T16:10:06.112Z","type":"message"}
{"nick":"devsnek","message":"line continuation","date":"2019-10-15T16:10:12.357Z","type":"message"}
{"nick":"devsnek","message":"by detecting the error message \"unexpected end of input\" or whatever","date":"2019-10-15T16:10:21.025Z","type":"message"}
{"nick":"jmdyck","message":"It seems like the semantics isn't so much that input *could* continue, because input can always continue. Rather input *must* continue, i.e. this is not a complete expression/statement/whatever-construct-you're-prepared-to-take.","date":"2019-10-15T16:11:12.137Z","type":"message"}
{"nick":"jmdyck","message":"re whether it's possible to define: probably, but I imagine it'd be fairly prose-y. The existing spec would give you very little to build on/ work with.","date":"2019-10-15T16:14:00.813Z","type":"message"}
{"nick":"haxjs","reason":"Quit: Leaving","date":"2019-10-15T16:14:08.735Z","type":"quit"}
{"nick":"jmdyck","message":"It's not something the current spec needs or has a natural place for. Parsing is pretty much a black box as far as the spec is concerned, so you'd have to invent a new black box.","date":"2019-10-15T16:16:40.686Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: not needed at the moment, i was thinking of maybe defining it with repl","date":"2019-10-15T16:17:39.246Z","type":"message"}
{"nick":"devsnek","message":"so hosts have a standard mechanism to detect that input must continue","date":"2019-10-15T16:17:55.410Z","type":"message"}
{"nick":"bakkot","message":"jmdyck: I think you could do it with a relatively small amount of prose. `if the sequence of tokens cannot be recognized with the goal symbol Whatever with no tokens left over, but is the prefix of some such sequence...\"","date":"2019-10-15T16:22:59.047Z","type":"message"}
{"nick":"jmdyck","message":"yup, something like that.","date":"2019-10-15T16:23:57.258Z","type":"message"}
{"nick":"jmdyck","message":"you could also just have HostGetCompleteThing and leave the details of dealing with incomplete things to the implementation","date":"2019-10-15T16:26:07.357Z","type":"message"}
{"nick":"devsnek","message":"could also just not specify it at all","date":"2019-10-15T16:26:34.373Z","type":"message"}
{"nick":"devsnek","message":"but its pretty useful imo","date":"2019-10-15T16:26:42.483Z","type":"message"}
{"nick":"jmdyck","message":"Is there that much you want to require of repls in the face of incomplete input?","date":"2019-10-15T16:27:00.097Z","type":"message"}
{"nick":"devsnek","message":"it would probably be too much to outright require them to do multi-line input","date":"2019-10-15T16:27:27.817Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: does this really differ from early error detection?","date":"2019-10-15T16:40:14.652Z","type":"message"}
{"nick":"devsnek","message":"unsure what you mean","date":"2019-10-15T16:40:25.856Z","type":"message"}
{"nick":"aradesh","date":"2019-10-15T16:41:56.159Z","type":"join"}
{"nick":"drousso","date":"2019-10-15T16:49:48.572Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T17:00:29.298Z","type":"quit"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-10-15T17:05:35.754Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T17:31:22.317Z","type":"quit"}
{"nick":"bradleymeck","message":"devsnek: how does it differ from a REPL etc. just holding onto src and seeing if it parses","date":"2019-10-15T17:32:36.833Z","type":"message"}
{"nick":"bradleymeck","message":"if it doesn't parse, just append next input","date":"2019-10-15T17:33:00.730Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: it rejects things that will never parse correctly","date":"2019-10-15T17:33:02.260Z","type":"message"}
{"nick":"devsnek","message":"like `1 2 3`","date":"2019-10-15T17:33:14.708Z","type":"message"}
{"nick":"bradleymeck","message":"so its just a classifier on early errors?","date":"2019-10-15T17:33:25.085Z","type":"message"}
{"nick":"devsnek","message":"that's how node implements it","date":"2019-10-15T17:33:36.862Z","type":"message"}
{"nick":"devsnek","message":"by error messages","date":"2019-10-15T17:33:42.147Z","type":"message"}
{"nick":"bradleymeck","message":"i'd just add a field to Early errors then? not make spec say input can continue, but that input afterwards will NEVER be valid","date":"2019-10-15T17:34:44.509Z","type":"message"}
{"nick":"drousso","date":"2019-10-15T17:39:35.949Z","type":"join"}
{"nick":"jmdyck","message":"early errors operate on parsed (i.e. syntactically well-formed) input though","date":"2019-10-15T17:45:27.984Z","type":"message"}
{"nick":"aradesh","date":"2019-10-15T17:57:09.040Z","type":"join"}
{"nick":"jwalden","message":"apropos of nothing, what was the good reason to disallow immediately-adjacent numeric separators?  syntactically I can't say I care one way or another, but it appears that forbidding 1__2 does require extra effort on the tokenizing side over just allowing arbitrary numbers of separators be interspersed in numeric literals","date":"2019-10-15T17:58:06.825Z","type":"message"}
{"nick":"laughinghan","date":"2019-10-15T17:58:24.692Z","type":"join"}
{"nick":"jwalden","message":"I want to say C++ has the same no-adjacent requirement, but I'm not certain why they have it that way either","date":"2019-10-15T17:58:26.305Z","type":"message"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-10-15T18:01:16.713Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T18:02:26.769Z","type":"join"}
{"nick":"keith_miller","date":"2019-10-15T18:09:42.709Z","type":"join"}
{"nick":"bradleymeck","message":"jmdyck: but a variety of early errors ensure further tokens won't help e.g. `with({}) {}` in strict mode, so if you parse the syntax until you get to something that doesn't parse, look for the early error and see if it will never be valid, in general this isn't necessarily helpful though with things like `function foo() {` effectively preventing and new input from being within a properly formed construct","date":"2019-10-15T18:19:38.680Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T18:26:45.789Z","type":"quit"}
{"nick":"TabAtkins","message":"jwalden: I'm guessing the main reason is: it looks bad and isn't necessary?","date":"2019-10-15T18:29:11.848Z","type":"message"}
{"nick":"jwalden","action":"shrugs","date":"2019-10-15T18:29:28.025Z","type":"action"}
{"nick":"jwalden","message":"it hardly seems *that* terrible to me, but eh","date":"2019-10-15T18:29:41.038Z","type":"message"}
{"nick":"laughinghan","date":"2019-10-15T18:31:00.632Z","type":"join"}
{"nick":"jmdyck","message":"bradleymeck: If you get to something that doesn't parse (and ASI doesn't rescue you), why would you need to look for an early error to know that it will never be valid?","date":"2019-10-15T18:43:54.253Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T18:47:05.249Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T18:49:02.643Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-10-15T18:49:30.763Z","type":"quit"}
{"nick":"bradleymeck","message":"jmdyck: thats a good question, there might be zero early errors that are reasoned about in this context","date":"2019-10-15T18:52:52.835Z","type":"message"}
{"nick":"bradleymeck","message":"something that is syntactically valid but errors though would be stuff like `> const x = 1; const x = 2;` though at least the REPL goal intentionally is meant to allow that","date":"2019-10-15T18:53:51.030Z","type":"message"}
{"nick":"jmdyck","message":"So the repl 'disables' some early errors?","date":"2019-10-15T18:55:51.634Z","type":"message"}
{"nick":"isHavvyGhosting","reason":"Ping timeout: 250 seconds","date":"2019-10-15T18:56:57.718Z","type":"quit"}
{"nick":"jwalden","message":"some repls (SpiderMonkey is one) will \"undo\" the effects of a subsequent redeclaration in a separate line entered, warn, and just not do anything","date":"2019-10-15T18:57:05.304Z","type":"message"}
{"nick":"bradleymeck","message":"jmdyck: effectively","date":"2019-10-15T18:57:21.185Z","type":"message"}
{"nick":"jwalden","message":"I do believe they all will complain about redeclarations that are in the same entered line (i.e. the same Script)","date":"2019-10-15T18:57:29.379Z","type":"message"}
{"nick":"bradleymeck","message":"it specifies what happens though","date":"2019-10-15T18:57:38.378Z","type":"message"}
{"nick":"bradleymeck","message":"repls vary and a lot even ship JS parsers and don't directly put input into their VMs and do source transforms ahead of time","date":"2019-10-15T18:58:00.968Z","type":"message"}
{"nick":"bradleymeck","message":"i know top level await in some REPLs disables const because of it","date":"2019-10-15T18:58:14.899Z","type":"message"}
{"nick":"bradleymeck","message":"which is :magic:","date":"2019-10-15T18:58:19.496Z","type":"message"}
{"nick":"Havvy","date":"2019-10-15T18:58:24.381Z","type":"join"}
{"nick":"bradleymeck","message":"the main point of when I proposed a REPL goal is to just give expectable behavior, even if it seems a bit odd","date":"2019-10-15T18:59:26.820Z","type":"message"}
{"nick":"bradleymeck","message":"what that behavior is can be shifted around a bit","date":"2019-10-15T18:59:52.544Z","type":"message"}
{"nick":"isHavvy","date":"2019-10-15T19:02:18.164Z","type":"join"}
{"nick":"Havvy","reason":"Ping timeout: 265 seconds","date":"2019-10-15T19:02:53.355Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T19:06:13.184Z","type":"join"}
{"nick":"aqquadro","date":"2019-10-15T19:07:32.485Z","type":"join"}
{"nick":"aqquadro","reason":"Changing host","date":"2019-10-15T19:07:32.694Z","type":"quit"}
{"nick":"aqquadro","date":"2019-10-15T19:07:32.694Z","type":"join"}
{"nick":"devsnek","message":"jmdyck: i found that with one change, the spec works pretty well for rels","date":"2019-10-15T19:10:00.849Z","type":"message"}
{"nick":"devsnek","message":"repls*","date":"2019-10-15T19:10:04.732Z","type":"message"}
{"nick":"devsnek","message":"in particular, an environment where HasLexicalDeclaration always returns false","date":"2019-10-15T19:10:13.698Z","type":"message"}
{"nick":"devsnek","message":"so its not really disabling early errors","date":"2019-10-15T19:10:33.841Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T19:15:03.304Z","type":"quit"}
{"nick":"aqquadro","reason":"Ping timeout: 276 seconds","date":"2019-10-15T19:16:53.599Z","type":"quit"}
{"nick":"jmdyck","message":"cool","date":"2019-10-15T19:18:38.661Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-10-15T19:30:33.660Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T20:03:17.732Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T20:04:57.131Z","type":"join"}
{"nick":"mgol","date":"2019-10-15T20:26:27.497Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T20:47:49.332Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T21:02:55.362Z","type":"join"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-10-15T21:11:10.340Z","type":"quit"}
{"nick":"aradesh","date":"2019-10-15T21:11:38.567Z","type":"join"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-10-15T21:39:54.383Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T21:54:57.424Z","type":"quit"}
{"nick":"drousso","date":"2019-10-15T22:04:29.852Z","type":"join"}
{"nick":"jwalden","reason":"Ping timeout: 245 seconds","date":"2019-10-15T22:07:48.430Z","type":"quit"}
{"nick":"jwalden","date":"2019-10-15T22:13:44.172Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T22:51:30.588Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T22:52:56.894Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T22:55:11.222Z","type":"join"}
{"nick":"drousso","date":"2019-10-15T22:55:24.856Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-10-15T22:58:49.135Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T22:59:59.304Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T23:09:05.629Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T23:17:21.913Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T23:19:35.098Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T23:20:14.464Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-10-15T23:25:51.172Z","type":"quit"}
{"nick":"laughinghan","date":"2019-10-15T23:27:26.211Z","type":"join"}
