{"nick":"arai","date":"2018-05-02T00:15:14.450Z","type":"join"}
{"nick":"isHavvyGhosting","date":"2018-05-02T00:48:52.411Z","type":"join"}
{"nick":"ephemera__","reason":"Quit: No Ping reply in 180 seconds.","date":"2018-05-02T00:51:21.881Z","type":"quit"}
{"nick":"isHavvy","reason":"Ping timeout: 240 seconds","date":"2018-05-02T00:51:57.793Z","type":"quit"}
{"nick":"ephemera_","date":"2018-05-02T00:52:47.989Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-02T01:06:30.177Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-02T02:16:33.071Z","type":"quit"}
{"nick":"jdalton_","date":"2018-05-02T02:35:40.823Z","type":"join"}
{"nick":"ephemera_","reason":"Quit: No Ping reply in 180 seconds.","date":"2018-05-02T02:47:06.533Z","type":"quit"}
{"nick":"ephemera_","date":"2018-05-02T02:48:38.629Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-02T03:09:38.725Z","type":"join"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2018-05-02T03:33:05.887Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: g'bye before I snipe myself even further","date":"2018-05-02T03:56:16.662Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-02T04:09:16.718Z","type":"quit"}
{"nick":"howdoi","date":"2018-05-02T04:45:57.600Z","type":"join"}
{"nick":"jdalton_","reason":"Quit: Connection closed for inactivity","date":"2018-05-02T04:54:57.609Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-05-02T04:55:51.903Z","type":"quit"}
{"nick":"rwaldron","reason":"Quit: ZNC 1.6.6 - http://znc.in","date":"2018-05-02T06:01:48.631Z","type":"quit"}
{"nick":"seishun","date":"2018-05-02T06:24:01.511Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-02T06:44:46.547Z","type":"join"}
{"nick":"seishun","reason":"Disconnected by services","date":"2018-05-02T07:11:27.232Z","type":"quit"}
{"nick":"seishun","date":"2018-05-02T07:11:33.345Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 248 seconds","date":"2018-05-02T07:16:17.461Z","type":"quit"}
{"nick":"seishun","date":"2018-05-02T07:16:56.806Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-05-02T07:21:31.044Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 255 seconds","date":"2018-05-02T07:25:51.197Z","type":"quit"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-05-02T07:50:41.772Z","type":"quit"}
{"nick":"arai","date":"2018-05-02T09:11:28.820Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-05-02T09:15:40.142Z","type":"quit"}
{"nick":"vikash-afk","reason":"Remote host closed the connection","date":"2018-05-02T10:17:05.927Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-02T10:25:08.006Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-02T10:25:38.379Z","type":"join"}
{"nick":"AtumT","date":"2018-05-02T10:53:43.685Z","type":"join"}
{"nick":"vikash-afk","date":"2018-05-02T11:21:48.669Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-02T11:26:04.332Z","type":"quit"}
{"nick":"jmdyck","date":"2018-05-02T12:12:57.684Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-05-02T13:25:18.485Z","type":"quit"}
{"nick":"srl295","date":"2018-05-02T13:51:56.606Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-02T13:56:37.127Z","type":"join"}
{"nick":"rwaldron","date":"2018-05-02T14:00:59.414Z","type":"join"}
{"nick":"jdalton_","date":"2018-05-02T14:12:25.865Z","type":"join"}
{"nick":"devsnek","message":"it would be cool if there was something like Object.getOwnProperty","date":"2018-05-02T15:15:46.274Z","type":"message"}
{"nick":"devsnek","message":"accessing without walking up the prototype chain","date":"2018-05-02T15:16:15.492Z","type":"message"}
{"nick":"ljharb","message":"devsnek: you can do getOwnPropertyDescriptor, but then you have to call the getter conditionally, so yeah that would be nice","date":"2018-05-02T15:32:13.835Z","type":"message"}
{"nick":"devsnek","message":"something like how Reflect.get works","date":"2018-05-02T15:32:32.373Z","type":"message"}
{"nick":"devsnek","message":"Reflect.getButNoPrototypes","date":"2018-05-02T15:32:51.142Z","type":"message"}
{"nick":"ljharb","message":"I’d also love a keyword for hasOwnProperty :-)","date":"2018-05-02T15:34:42.112Z","type":"message"}
{"nick":"devsnek","message":"`has`","date":"2018-05-02T15:36:08.950Z","type":"message"}
{"nick":"bradleymeck_","message":"`has` might be problematic since `has` trap on Proxy is for `in`","date":"2018-05-02T15:53:46.429Z","type":"message"}
{"nick":"bradleymeck_","message":"I'd be lazy enough to just reuse `hasOwnProperty` : `o hasOwnProperty 'foo'`","date":"2018-05-02T15:54:35.831Z","type":"message"}
{"nick":"caitp","message":"getOwn, hasOwn, putOwn","date":"2018-05-02T15:55:11.149Z","type":"message"}
{"nick":"bradleymeck_","message":"caitp putOwn would have 2 operands though wouldn't it? XD","date":"2018-05-02T16:00:38.514Z","type":"message"}
{"nick":"caitp","message":"Reflect.putOwn(target, name, value), I would think","date":"2018-05-02T16:01:39.743Z","type":"message"}
{"nick":"caitp","message":"or setOwn","date":"2018-05-02T16:01:41.962Z","type":"message"}
{"nick":"bradleymeck_","message":"oh, on Reflect","date":"2018-05-02T16:04:29.349Z","type":"message"}
{"nick":"caitp","message":"if you wanted a cute syntax version, maybe something like `own a.b` -> \"own\" reference, so GetValue() and assignment don't traverse the prototype chain","date":"2018-05-02T16:04:30.614Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-02T16:04:48.641Z","type":"quit"}
{"nick":"ljharb","message":"reflect is only for proxy traps, ofc","date":"2018-05-02T16:05:10.669Z","type":"message"}
{"nick":"bradleymeck_","message":"syntax gets some nice things by not being virtualizable so you don't have to deal w/ taint possibilities. the virtualizability requirement of APIs makes things hard to lock down vs other languages","date":"2018-05-02T16:05:57.018Z","type":"message"}
{"nick":"bradleymeck_","message":"at least in my opinion","date":"2018-05-02T16:06:17.348Z","type":"message"}
{"nick":"caitp","message":"own ({ __proto__: thingWithFooSetter }).foo = \"setter not called\";","date":"2018-05-02T16:09:33.721Z","type":"message"}
{"nick":"caitp","message":"just have to find a way to make that not uh","date":"2018-05-02T16:10:19.558Z","type":"message"}
{"nick":"caitp","message":"not break existing syntax","date":"2018-05-02T16:10:28.794Z","type":"message"}
{"nick":"howdoi","date":"2018-05-02T16:11:51.578Z","type":"join"}
{"nick":"devsnek","message":"who needs existing syntax","date":"2018-05-02T16:25:12.919Z","type":"message"}
{"nick":"rkirsling","message":"I think if you had just `own` there'd be too much temptation to read it as a verb :)","date":"2018-05-02T16:25:55.953Z","type":"message"}
{"nick":"caitp","message":"well I guess you could use an operator instead of a keyword, but I think a keyword is easier to read","date":"2018-05-02T16:28:18.555Z","type":"message"}
{"nick":"caitp","message":"not sure which operator would really say \"own\", other than $ maybe","date":"2018-05-02T16:29:06.866Z","type":"message"}
{"nick":"caitp","message":"and I don't think that ones going to fly","date":"2018-05-02T16:29:14.012Z","type":"message"}
{"nick":"devsnek","message":"{ own foo: bar }","date":"2018-05-02T16:36:40.271Z","type":"message"}
{"nick":"devsnek","message":"lol that makes no sense ignore me","date":"2018-05-02T16:36:55.364Z","type":"message"}
{"nick":"Domenic","message":"When would you ever use this?","date":"2018-05-02T16:37:54.149Z","type":"message"}
{"nick":"devsnek","message":"getting a property without walking the prototype?","date":"2018-05-02T16:39:05.269Z","type":"message"}
{"nick":"caitp","message":"defensive programming, assigning to a property if the prototype may have been modified","date":"2018-05-02T16:39:30.941Z","type":"message"}
{"nick":"devsnek","message":"i could see it being used a lot in node core","date":"2018-05-02T16:39:33.805Z","type":"message"}
{"nick":"Domenic","message":"I mean it's never used in the standard library","date":"2018-05-02T16:40:15.124Z","type":"message"}
{"nick":"caitp","message":"sure it is","date":"2018-05-02T16:40:22.908Z","type":"message"}
{"nick":"caitp","message":"CreateDataProperty","date":"2018-05-02T16:40:43.356Z","type":"message"}
{"nick":"caitp","message":"probably most uses of [[DefineOwnProperty]]","date":"2018-05-02T16:41:37.951Z","type":"message"}
{"nick":"devsnek","message":"i don't see the own set thing as much but","date":"2018-05-02T16:42:10.443Z","type":"message"}
{"nick":"devsnek","message":"the want for not walking up prototypes on get is great","date":"2018-05-02T16:42:26.367Z","type":"message"}
{"nick":"keith_miller","date":"2018-05-02T16:48:21.484Z","type":"join"}
{"nick":"keith_miller","reason":"Read error: Connection reset by peer","date":"2018-05-02T16:49:08.647Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-05-02T16:49:14.376Z","type":"join"}
{"nick":"seishun","date":"2018-05-02T16:50:02.777Z","type":"join"}
{"nick":"Domenic","message":"I thought we were talking about get","date":"2018-05-02T16:55:01.821Z","type":"message"}
{"nick":"Domenic","message":"The standard library never does a no-walking get","date":"2018-05-02T16:55:09.011Z","type":"message"}
{"nick":"Domenic","message":"defineProperty is fine for a no-walking define","date":"2018-05-02T16:55:23.497Z","type":"message"}
{"nick":"devsnek","message":"no-walking get would be useful with proxies","date":"2018-05-02T16:58:17.037Z","type":"message"}
{"nick":"bradleymeck_","action":"reread defineProperty spec after this convo and remembered that `Object.prototype.value = 1` makes lots of things not happy","date":"2018-05-02T17:04:47.468Z","type":"action"}
{"nick":"caitp","message":"the true defensive programming style is probably to freeze intrinsic prototypes","date":"2018-05-02T17:06:42.919Z","type":"message"}
{"nick":"caitp","message":"but in real world vms I think that slows down most accesses","date":"2018-05-02T17:07:12.827Z","type":"message"}
{"nick":"caitp","message":"or at least most accesses which traverse to the top of the prototype chain","date":"2018-05-02T17:07:44.762Z","type":"message"}
{"nick":"bradleymeck_","message":"caitp there are resistances to making defensive programming constraints since that is not how JS historically been evolved","date":"2018-05-02T17:08:31.387Z","type":"message"}
{"nick":"bradleymeck_","message":"I would love a more defensible set of primitives around the object model, I'm not as concerned with overall general API defensibility if I can recreate APIs myself. Without safe ways to do this that cannot be virtualized we end up needing preprocessing of some kind / caches of primordials.","date":"2018-05-02T17:10:36.895Z","type":"message"}
{"nick":"bradleymeck_","message":"but since I want to work on JS and not on some variant itself that causes friction. Such as my concerns with PrivateName","date":"2018-05-02T17:11:09.057Z","type":"message"}
{"nick":"bradleymeck_","message":"* itself;","date":"2018-05-02T17:11:27.039Z","type":"message"}
{"nick":"caitp","message":"I'm not really too concerned with this idea, other than more proposed language features and stdlib features -> more job security","date":"2018-05-02T17:12:17.537Z","type":"message"}
{"nick":"caitp","message":"but that's selfish :p","date":"2018-05-02T17:12:26.922Z","type":"message"}
{"nick":"bradleymeck_","message":"I just want to be able to write a sane defensible core for Node at this point. a variety of ways to get there, but without frozen realms or the like being fast/snapshotted etc. I think it is becoming harder as language features that are virtualized and are around the object model are added.","date":"2018-05-02T17:14:58.050Z","type":"message"}
{"nick":"devsnek","message":"i think most people throwing code into the wild want that code to behave predictably","date":"2018-05-02T17:16:10.135Z","type":"message"}
{"nick":"devsnek","message":"not just node core devs :p","date":"2018-05-02T17:16:14.428Z","type":"message"}
{"nick":"bradleymeck_","message":"I mean... I have noticed I can hijack some parts of devtools if I get squirrely with things since they also inject code after stuff loads","date":"2018-05-02T17:18:31.426Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-02T17:20:49.681Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-02T17:27:56.434Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 248 seconds","date":"2018-05-02T17:34:57.536Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-02T17:36:02.456Z","type":"quit"}
{"nick":"seishun","date":"2018-05-02T17:41:09.018Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-02T17:48:52.275Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-02T18:55:07.785Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-02T19:06:10.493Z","type":"join"}
{"nick":"jwalden","date":"2018-05-02T20:20:30.205Z","type":"join"}
{"nick":"linclark","message":"when you're editing spec.html and adding new tables, how do you handle numbering?","date":"2018-05-02T20:35:44.567Z","type":"message"}
{"nick":"linclark","message":"for example, if you want to insert a new section  with a table between table-37 and table-38","date":"2018-05-02T20:36:07.710Z","type":"message"}
{"nick":"linclark","message":"do you have to manually renumber all of the tables after #table-37?","date":"2018-05-02T20:36:32.848Z","type":"message"}
{"nick":"Domenic","message":"linclark: you give them useful IDs, not numbered ones","date":"2018-05-02T20:36:38.082Z","type":"message"}
{"nick":"Domenic","message":"The numbered ones were auto-generated","date":"2018-05-02T20:36:42.721Z","type":"message"}
{"nick":"Domenic","message":"and are already outdated past a certain point","date":"2018-05-02T20:36:50.040Z","type":"message"}
{"nick":"linclark","message":"ah, ok","date":"2018-05-02T20:36:56.751Z","type":"message"}
{"nick":"ljharb","message":"Domenic: Object.assign does a walking get, but only on own keys, so it's effectively a no-walking get","date":"2018-05-02T20:36:57.032Z","type":"message"}
{"nick":"ljharb","message":"as does Reflect.ownKeys","date":"2018-05-02T20:37:10.970Z","type":"message"}
{"nick":"Domenic","message":"ljharb: kind of, not really in the face of proxies","date":"2018-05-02T20:37:13.545Z","type":"message"}
{"nick":"Domenic","message":"You can always decide ahead of time what you're willing to do a walking get on","date":"2018-05-02T20:37:32.236Z","type":"message"}
{"nick":"ljharb","message":"i mean, a proxy can override that, but a proxy would override a no-walking get too by returning a custom property descriptor","date":"2018-05-02T20:37:34.653Z","type":"message"}
{"nick":"Domenic","message":"Yeah #table-40 is already Table 41","date":"2018-05-02T20:37:59.040Z","type":"message"}
{"nick":"Domenic","message":"ljharb: what I'm saying is that a non-walking get is not a real operation; inventing it is very different from just deciding to only do walking gets on some subset of properties","date":"2018-05-02T20:38:23.092Z","type":"message"}
{"nick":"ljharb","message":"Domenic: hm, maybe so. but it'd basically be GetOwnPropertyDescriptor + if accessor, call the getter, else return the value","date":"2018-05-02T20:38:55.658Z","type":"message"}
{"nick":"Domenic","message":"Yeah, which is a completely unprecedented operation ;)","date":"2018-05-02T20:39:07.696Z","type":"message"}
{"nick":"ljharb","message":"i feel like if it was available, it would have been used in Reflect.ownKeys and Object.assign and Object.entries/values, etc","date":"2018-05-02T20:39:30.048Z","type":"message"}
{"nick":"ljharb","message":"it's unprecedented but that doesn't mean it wouldn't make more sense","date":"2018-05-02T20:39:41.811Z","type":"message"}
{"nick":"Domenic","message":"I don't think we would have used a new type of get","date":"2018-05-02T20:42:29.228Z","type":"message"}
{"nick":"Domenic","message":"One type of get is enough for a language, I think","date":"2018-05-02T20:42:37.048Z","type":"message"}
{"nick":"ljharb","message":"that's what getOwnPropertyDescriptor is, tho","date":"2018-05-02T20:42:53.167Z","type":"message"}
{"nick":"devsnek","message":"where is the specification for actually getting a property","date":"2018-05-02T20:42:57.696Z","type":"message"}
{"nick":"devsnek","message":"the abstract operation just defers to O.[[Get]]","date":"2018-05-02T20:43:05.927Z","type":"message"}
{"nick":"ljharb","message":"there's already two types of get, it's just that there's no abstract operation to wrap around the \"accessor ? get() : value\" logic","date":"2018-05-02T20:43:20.826Z","type":"message"}
{"nick":"devsnek","message":"aha OrdinaryGet","date":"2018-05-02T20:44:04.838Z","type":"message"}
{"nick":"ljharb","message":"actually https://tc39.github.io/ecma262/#sec-ordinaryget is almost that operation, lol","date":"2018-05-02T20:44:07.998Z","type":"message"}
{"nick":"ljharb","message":"so \"GetOwn\" would just be \"if hasOwn, OrdinaryGet, else return undefined\"","date":"2018-05-02T20:44:24.891Z","type":"message"}
{"nick":"devsnek","message":"OrdinaryGet is what [[Get]] calls though right?","date":"2018-05-02T20:44:35.652Z","type":"message"}
{"nick":"devsnek","message":"thats like object[key]","date":"2018-05-02T20:44:39.822Z","type":"message"}
{"nick":"ljharb","message":"yeah it wouldn't be that simple because of proxies","date":"2018-05-02T20:44:42.668Z","type":"message"}
{"nick":"ljharb","message":"but something like that.","date":"2018-05-02T20:44:53.050Z","type":"message"}
{"nick":"devsnek","message":"i'm very confused now","date":"2018-05-02T20:44:54.293Z","type":"message"}
{"nick":"ljharb","message":"devsnek: https://tc39.github.io/ecma262/#sec-get-o-p is the typical Get abstract op","date":"2018-05-02T20:45:25.841Z","type":"message"}
{"nick":"devsnek","message":"thats like a loop now","date":"2018-05-02T20:45:42.378Z","type":"message"}
{"nick":"devsnek","message":"Get(o, p) calls o[[Get]]","date":"2018-05-02T20:45:55.302Z","type":"message"}
{"nick":"devsnek","message":"which calls Get(o, p)","date":"2018-05-02T20:45:58.559Z","type":"message"}
{"nick":"devsnek","message":"what is going on","date":"2018-05-02T20:46:00.395Z","type":"message"}
{"nick":"ljharb","message":"devsnek: iirc O.[[Get]] calls the [[Get]] method, which defaults to calling OrdinaryGet","date":"2018-05-02T20:46:00.999Z","type":"message"}
{"nick":"ljharb","message":"devsnek: https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver","date":"2018-05-02T20:46:31.351Z","type":"message"}
{"nick":"devsnek","message":"i'm trying to figure out where the spec talks about walking up prototypes","date":"2018-05-02T20:46:36.415Z","type":"message"}
{"nick":"devsnek","message":"i'm at that part now","date":"2018-05-02T20:46:48.972Z","type":"message"}
{"nick":"ljharb","message":"devsnek: https://tc39.github.io/ecma262/#sec-ordinaryget line 3","date":"2018-05-02T20:46:51.606Z","type":"message"}
{"nick":"ljharb","message":"that's where it's recursive until the parent is null","date":"2018-05-02T20:47:07.273Z","type":"message"}
{"nick":"devsnek","message":"aha ok","date":"2018-05-02T20:47:09.959Z","type":"message"}
{"nick":"devsnek","message":"so just add another arg to OrdinaryGet","date":"2018-05-02T20:47:37.188Z","type":"message"}
{"nick":"devsnek","message":"if desc is undefined and walk is true","date":"2018-05-02T20:47:52.212Z","type":"message"}
{"nick":"ljharb","message":"there's a number of ways that it could be done in the spec, that's certainly one","date":"2018-05-02T20:48:46.081Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-05-02T21:42:02.739Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-05-02T22:41:21.339Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-05-02T23:13:12.842Z","type":"join"}
{"nick":"joyee","reason":"*.net *.split","date":"2018-05-02T23:16:47.789Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-05-02T23:19:40.253Z","type":"quit"}
