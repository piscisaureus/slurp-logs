{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T00:05:36.927Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-23T00:30:07.610Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T01:26:15.322Z","type":"join"}
{"nick":"devsnek","message":"what do RFTG and RFTC stand for","date":"2019-01-23T02:20:14.555Z","type":"message"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-01-23T02:30:01.021Z","type":"quit"}
{"nick":"rkirsling","message":"royalty-free task group / tech committee","date":"2019-01-23T02:30:58.472Z","type":"message"}
{"nick":"devsnek","message":"is there a source on the definitions of those","date":"2019-01-23T02:31:31.190Z","type":"message"}
{"nick":"rkirsling","message":"yes, will link in other channel","date":"2019-01-23T02:31:45.564Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T02:42:38.732Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T02:56:55.409Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-01-23T02:59:27.209Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T03:18:16.843Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2019-01-23T04:26:43.963Z","type":"quit"}
{"nick":"jmdyck","date":"2019-01-23T04:27:03.432Z","type":"join"}
{"nick":"jmdyck1","date":"2019-01-23T04:28:46.292Z","type":"join"}
{"nick":"jmdyck","reason":"Read error: Connection reset by peer","date":"2019-01-23T04:28:46.484Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T05:07:50.303Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T05:13:47.703Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T05:29:10.363Z","type":"join"}
{"nick":"jmdyck1","reason":"Remote host closed the connection","date":"2019-01-23T05:38:51.179Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T05:43:32.675Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T06:26:59.343Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T06:32:39.735Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T07:21:59.925Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-23T07:22:44.653Z","type":"quit"}
{"nick":"littledan","message":"they are ECMA-specific IP terms. It's about whether we, as a whole, have a royalty-free patent policy, or just a certain sub-group does (where that sub-group happens to contain all of our activities....)","date":"2019-01-23T08:51:56.404Z","type":"message"}
{"nick":"littledan","message":"Becoming a royalty-free committee as a whole will let us establish official sub-groups, which could be useful for ECMA-402","date":"2019-01-23T08:52:25.561Z","type":"message"}
{"nick":"ljharb","message":"what does an official sub-group get to do that it couldn't do otherwise?","date":"2019-01-23T08:52:52.239Z","type":"message"}
{"nick":"akoserwa","date":"2019-01-23T10:09:35.493Z","type":"join"}
{"nick":"obensource","reason":"Ping timeout: 245 seconds","date":"2019-01-23T10:29:13.811Z","type":"quit"}
{"nick":"obensource","date":"2019-01-23T10:43:01.031Z","type":"join"}
{"nick":"littledan","message":"well, Allen was often saying that ECMA-402 should be an official TG, rather than an informal call that has no particular status","date":"2019-01-23T12:08:41.901Z","type":"message"}
{"nick":"littledan","message":"this gives us the infrastructure to do that","date":"2019-01-23T12:08:46.031Z","type":"message"}
{"nick":"littledan","message":"tbh I was treating this as somewhat lower priority than making sure we had publicized meetings, published notes, and attendees signed the IP form","date":"2019-01-23T12:09:15.974Z","type":"message"}
{"nick":"jmdyck","date":"2019-01-23T12:47:24.262Z","type":"join"}
{"nick":"gibson042","date":"2019-01-23T14:12:13.498Z","type":"join"}
{"nick":"akoserwa","reason":"Quit: Leaving","date":"2019-01-23T15:32:30.236Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T17:06:52.175Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-23T17:28:17.368Z","type":"join"}
{"nick":"cloudshu","date":"2019-01-23T17:54:43.757Z","type":"join"}
{"nick":"ljharb","message":"makes sense","date":"2019-01-23T18:18:00.078Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T18:31:32.118Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T18:40:44.684Z","type":"join"}
{"nick":"bradleymeck","message":"ljharb: I have no clue what behavior you are expecting in that issue, I'm quite confused as it seems to conflict with other comments","date":"2019-01-23T18:46:51.133Z","type":"message"}
{"nick":"bradleymeck","message":".has / .delete / .get / .set being hooked seems to be ok, but .keys() appears to be being hooked since (rekeyOps === 3) but it is unclear what that means","date":"2019-01-23T18:48:21.811Z","type":"message"}
{"nick":"bradleymeck","message":"since you have to hold onto bobA or bobB to do that?","date":"2019-01-23T18:48:31.134Z","type":"message"}
{"nick":"bradleymeck","message":"and that means it could vary if someone mutated bobA or bobB","date":"2019-01-23T18:48:45.371Z","type":"message"}
{"nick":"bradleymeck","message":"cause map.set(bob, 1); bob.name = 'alice'; shouldn't mutate the .keys() of map","date":"2019-01-23T18:50:58.701Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: yeah when i typed out my rekey i realized what i need is both input and output","date":"2019-01-23T18:56:11.563Z","type":"message"}
{"nick":"bradleymeck","message":"i think output is actually super hard","date":"2019-01-23T18:56:29.589Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: and yeah definitely rekeyOps would have to be 2 there :-/","date":"2019-01-23T18:56:33.226Z","type":"message"}
{"nick":"ljharb","message":"i guess i'm envisioning mostly being able to use rekey to store my *actual* data in a separate weakmap or something","date":"2019-01-23T18:56:57.907Z","type":"message"}
{"nick":"bradleymeck","message":"for your use, maybe an operation for just enforcing a .is operation for things that === eachother might work","date":"2019-01-23T18:57:12.914Z","type":"message"}
{"nick":"ljharb","message":"ie, i'd keep a weak ref to the original key, and also my transformed key, and be able to do both conversions","date":"2019-01-23T18:57:14.564Z","type":"message"}
{"nick":"bradleymeck","message":"mutations like setting the rekey to depend on mutable state makes .keys() change","date":"2019-01-23T18:57:43.783Z","type":"message"}
{"nick":"ljharb","message":"maybe my use case is better served with a way to override the comparison function from SameValueZero","date":"2019-01-23T18:57:47.017Z","type":"message"}
{"nick":"ljharb","message":"ie, to override how uniqueness is determined","date":"2019-01-23T18:57:58.964Z","type":"message"}
{"nick":"ljharb","message":"rather than rekeying","date":"2019-01-23T18:58:02.585Z","type":"message"}
{"nick":"bradleymeck","message":"might work, ya","date":"2019-01-23T18:58:14.589Z","type":"message"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-01-23T18:58:22.066Z","type":"quit"}
{"nick":"ljharb","message":"bradleymeck: what use cases of rekey would \"reCompare\" not address for you?","date":"2019-01-23T18:59:01.859Z","type":"message"}
{"nick":"ljharb","message":"assuming it would also throw, and then, it would be ran on any operation that currently did SameValueZero","date":"2019-01-23T18:59:41.520Z","type":"message"}
{"nick":"AtumT","date":"2019-01-23T18:59:49.585Z","type":"join"}
{"nick":"bradleymeck","message":"ljharb: i'm not sure how recompare would work in a performant fashion","date":"2019-01-23T19:01:17.586Z","type":"message"}
{"nick":"bradleymeck","message":"iterating all keys wouldn't be good","date":"2019-01-23T19:01:29.084Z","type":"message"}
{"nick":"bradleymeck","message":"you still need to produce a comparable identity for fast ops, you only need this compare operation for when identities appear equal but shouldn't be treated as such","date":"2019-01-23T19:02:43.429Z","type":"message"}
{"nick":"ljharb","message":"hmm","date":"2019-01-23T19:06:06.425Z","type":"message"}
{"nick":"ljharb","message":"ok so maybe instead of a two-arg compare function, a one-arg \"give me the value with which I'll perform SameValueZero\" - that way internally, the engine can cache the \"compare value\" for each key, and the callback would only ever be called one per key?","date":"2019-01-23T19:06:45.796Z","type":"message"}
{"nick":"ljharb","message":"*once per key","date":"2019-01-23T19:07:01.644Z","type":"message"}
{"nick":"bradleymeck","message":"idk, i'd ask implementors","date":"2019-01-23T19:07:52.804Z","type":"message"}
{"nick":"ljharb","message":"so, assuming that would be performant, and that you could still throw in it, would it solve your use cases?","date":"2019-01-23T19:08:43.808Z","type":"message"}
{"nick":"ljharb","message":"i'd be happy to drive or help drive a modified proposal if there's a way to meet all our use cases :-)","date":"2019-01-23T19:09:16.519Z","type":"message"}
{"nick":"bradleymeck","message":"for swapping out the values? maybe, but i don't fully see the affects of this","date":"2019-01-23T19:09:47.643Z","type":"message"}
{"nick":"bradleymeck","message":"this is pretty complex vs just doing input sanitization","date":"2019-01-23T19:09:58.389Z","type":"message"}
{"nick":"bradleymeck","message":"like idk what I would even expect the .keys() to return","date":"2019-01-23T19:10:13.289Z","type":"message"}
{"nick":"ljharb","message":"oh no what i'm suggesting won't swap out the values","date":"2019-01-23T19:10:20.928Z","type":"message"}
{"nick":"bradleymeck","message":"well i do want to allow GC of objects","date":"2019-01-23T19:10:59.822Z","type":"message"}
{"nick":"ljharb","message":"if you added `{ name: 'bob', id: 1 }` and `{ name: 'bob', id: 2 }`, and the compare value was `key.name`, it'd only add the first object","date":"2019-01-23T19:11:01.986Z","type":"message"}
{"nick":"bradleymeck","message":"idk what that means for map keys, cause i want the obj to GC","date":"2019-01-23T19:11:27.754Z","type":"message"}
{"nick":"ljharb","message":"hmm","date":"2019-01-23T19:11:30.370Z","type":"message"}
{"nick":"bradleymeck","message":"for sets it seems ok?","date":"2019-01-23T19:11:37.244Z","type":"message"}
{"nick":"ljharb","message":"why not a WeakMap then?","date":"2019-01-23T19:11:39.371Z","type":"message"}
{"nick":"ljharb","message":"perhaps with this compareValue thing","date":"2019-01-23T19:11:45.209Z","type":"message"}
{"nick":"ljharb","message":"or is it literally because you want the \"name\" string only as well as discarding the object?","date":"2019-01-23T19:11:58.978Z","type":"message"}
{"nick":"AtumT_","date":"2019-01-23T19:12:00.732Z","type":"join"}
{"nick":"bradleymeck","message":"i don't know why we would want to hold onto the object, discarding it allows some free'd up memory and leaves us only holding onto the identity values","date":"2019-01-23T19:12:32.684Z","type":"message"}
{"nick":"bradleymeck","message":"which is what we will be comparing in the future","date":"2019-01-23T19:12:40.749Z","type":"message"}
{"nick":"AtumT","reason":"Ping timeout: 244 seconds","date":"2019-01-23T19:13:02.532Z","type":"quit"}
{"nick":"ljharb","message":"because collections aren't just for testing membership; they're also for being able to extract values","date":"2019-01-23T19:13:31.751Z","type":"message"}
{"nick":"bradleymeck","message":"a simple separate identity comparator hook that is used instead of SameValueZero seems to be fine, and less complicated","date":"2019-01-23T19:13:42.641Z","type":"message"}
{"nick":"ljharb","message":"and either way it's a weird inconsistency if the thing i put into the collection doesn't come out in some form","date":"2019-01-23T19:13:46.365Z","type":"message"}
{"nick":"ljharb","message":"yeah talking it out, that seems way simpler than an actual comparator function","date":"2019-01-23T19:14:04.552Z","type":"message"}
{"nick":"bradleymeck","message":"i don't understand that statement","date":"2019-01-23T19:14:08.475Z","type":"message"}
{"nick":"bradleymeck","message":"the point of these hooks is to sanitize what is put in, so what comes out / is compared differs from what is put in","date":"2019-01-23T19:14:34.498Z","type":"message"}
{"nick":"ljharb","message":"yeah that's weirdly worded, let me think how to rephhrae","date":"2019-01-23T19:14:39.292Z","type":"message"}
{"nick":"ljharb","message":"*rephrase","date":"2019-01-23T19:14:41.028Z","type":"message"}
{"nick":"AtumT","date":"2019-01-23T19:15:37.885Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 240 seconds","date":"2019-01-23T19:17:26.661Z","type":"quit"}
{"nick":"ljharb","message":"ok so maybe what would cover all our wants is these things: 1) a \"compareValue\" function, that takes one key arg and returns a single value to SameValueZero with; 2) a \"mapKey\" function, that does what rekey does; and perhaps 3) a future \"mapValue\" function, that takes one value and returns a replacement value, but ofc mapKey and mapValue only both make sense on Maps, and you'd only want one of them on Sets ? does that seem like a reasonable summary?","date":"2019-01-23T19:17:52.156Z","type":"message"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-01-23T19:18:03.603Z","type":"quit"}
{"nick":"ljharb","message":"(separate from whether any of those are a proposal you want to drive; just trying to think about the problems and possible solutions)","date":"2019-01-23T19:18:22.718Z","type":"message"}
{"nick":"bradleymeck","message":"mapKey and mapValue probably both need to exist","date":"2019-01-23T19:18:50.665Z","type":"message"}
{"nick":"bradleymeck","message":"Sets are phrases as collections of values, so use mapValue","date":"2019-01-23T19:19:03.207Z","type":"message"}
{"nick":"AtumT","date":"2019-01-23T19:19:06.061Z","type":"join"}
{"nick":"ljharb","message":"right","date":"2019-01-23T19:20:00.346Z","type":"message"}
{"nick":"bradleymeck","message":"but a compareValue seems ok as a separate hook, i don't have usage for it though and need to think on it. probably won't be moving forward with that, and it seems like it can be done separate of the mapping hooks","date":"2019-01-23T19:20:01.226Z","type":"message"}
{"nick":"ljharb","message":"sure","date":"2019-01-23T19:20:07.590Z","type":"message"}
{"nick":"ljharb","message":"ok so if you're proposing `mapKey` for maps and `mapValue` for sets (irrespective of the name), there seems room to add a comparison value function alongside it as a followon/parallel","date":"2019-01-23T19:20:37.927Z","type":"message"}
{"nick":"ljharb","message":"i like that","date":"2019-01-23T19:20:43.589Z","type":"message"}
{"nick":"AtumT","reason":"Ping timeout: 246 seconds","date":"2019-01-23T19:38:24.009Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T19:44:05.614Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-01-23T19:47:00.189Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T19:47:14.806Z","type":"join"}
{"nick":"jwalden","date":"2019-01-23T20:31:19.226Z","type":"join"}
{"nick":"TimothyGu","message":"Question: what makes `function a() {} var a;` legal?","date":"2019-01-23T20:34:05.825Z","type":"message"}
{"nick":"TimothyGu","message":"one of the early errors for Script is \"It is a Syntax Error if any element of the LexicallyDeclaredNames of ScriptBody also occurs in the VarDeclaredNames of ScriptBody.\"","date":"2019-01-23T20:34:39.122Z","type":"message"}
{"nick":"TimothyGu","message":"couldn't find anything in Annex B either","date":"2019-01-23T20:34:56.362Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T20:48:16.209Z","type":"quit"}
{"nick":"devsnek","message":"TimothyGu: is there a test262 test for it","date":"2019-01-23T20:57:19.175Z","type":"message"}
{"nick":"TimothyGu","message":"ah never mind found it","date":"2019-01-23T20:57:26.767Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: yeah, a bunch","date":"2019-01-23T20:57:30.880Z","type":"message"}
{"nick":"TimothyGu","message":"basically LexicallyDeclaredNames of ScriptBody is redirected to TopLevelLexicallyDeclaredNames of the StatementList, which treats FunctionDeclaration like a var-declared name","date":"2019-01-23T20:58:01.970Z","type":"message"}
{"nick":"devsnek","message":"👌","date":"2019-01-23T20:59:08.418Z","type":"message"}
{"nick":"rkirsling","message":"interesting, I hadn't gathered the explanation there myself","date":"2019-01-23T21:01:59.179Z","type":"message"}
{"nick":"rkirsling","message":"just knew that it's legal at top level and illegal in block","date":"2019-01-23T21:02:13.606Z","type":"message"}
{"nick":"devsnek","message":"this language is too confusing","date":"2019-01-23T21:04:32.053Z","type":"message"}
{"nick":"bradleymeck","message":"https://www.ecma-international.org/ecma-262/#sec-block-static-semantics-toplevellexicallydeclarednames","date":"2019-01-23T21:04:54.209Z","type":"message"}
{"nick":"gibson042","reason":"Ping timeout: 250 seconds","date":"2019-01-23T21:04:54.451Z","type":"quit"}
{"nick":"gibson042","date":"2019-01-23T21:21:33.524Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-23T21:29:03.402Z","type":"join"}
{"nick":"pvinis","date":"2019-01-23T21:35:37.169Z","type":"join"}
{"nick":"pvinis","reason":"Client Quit","date":"2019-01-23T21:36:25.905Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T21:36:26.718Z","type":"quit"}
{"nick":"pvinis","date":"2019-01-23T21:36:49.171Z","type":"join"}
{"nick":"pvinis","message":"hello","date":"2019-01-23T21:36:52.085Z","type":"message"}
{"nick":"pvinis","message":"id like to make a proposal, and the github repo has as teh first step to share my thoughts here","date":"2019-01-23T21:37:13.202Z","type":"message"}
{"nick":"pvinis","message":"is that alright?","date":"2019-01-23T21:37:28.167Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2019-01-23T21:37:42.196Z","type":"message"}
{"nick":"ljharb","message":"pvinis: sure - also see https://github.com/tc39/ecma262/blob/master/CONTRIBUTING.md#creating-a-new-proposal","date":"2019-01-23T21:37:47.076Z","type":"message"}
{"nick":"pvinis","message":"its a pretty small but useful sugar i think","date":"2019-01-23T21:37:51.468Z","type":"message"}
{"nick":"pvinis","message":"yes. thats where it said to come here","date":"2019-01-23T21:38:13.287Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-23T21:38:21.702Z","type":"join"}
{"nick":"pvinis","message":"so my idea is to create an easier syntax for property getters","date":"2019-01-23T21:38:34.120Z","type":"message"}
{"nick":"pvinis","message":"currently its like `const obj = { a: 1, get b() {return this.a+1}}`","date":"2019-01-23T21:39:04.491Z","type":"message"}
{"nick":"devsnek","message":"seems pretty simple","date":"2019-01-23T21:39:15.291Z","type":"message"}
{"nick":"pvinis","message":"it would be cool to have somehting like `const obj = { a: 1, b: $.a + 1 }`","date":"2019-01-23T21:39:38.273Z","type":"message"}
{"nick":"devsnek","message":"`b: $.a + 1` is already valid","date":"2019-01-23T21:40:04.275Z","type":"message"}
{"nick":"devsnek","message":"assuming you have a variable named `$`","date":"2019-01-23T21:40:11.478Z","type":"message"}
{"nick":"pvinis","message":"and avoid this whole `get return this` stuff","date":"2019-01-23T21:40:13.474Z","type":"message"}
{"nick":"pvinis","message":"of course, but we can choose any other","date":"2019-01-23T21:40:28.171Z","type":"message"}
{"nick":"pvinis","message":"i thought of . in the beginning","date":"2019-01-23T21:40:37.605Z","type":"message"}
{"nick":"pvinis","message":"like { a: 1, b: .a + 1 }","date":"2019-01-23T21:40:55.378Z","type":"message"}
{"nick":"ljharb","message":"are getters commonly used enough that the sugar is worth it? most styleguides i'm familiar with strongly discourage using getters","date":"2019-01-23T21:41:09.060Z","type":"message"}
{"nick":"pvinis","message":"which is fine unless i have a number after","date":"2019-01-23T21:41:20.825Z","type":"message"}
{"nick":"pvinis","message":"oh?","date":"2019-01-23T21:41:34.250Z","type":"message"}
{"nick":"pvinis","message":"i havent see any like that","date":"2019-01-23T21:41:45.102Z","type":"message"}
{"nick":"pvinis","message":"what is their suggestion to use instead of getters?","date":"2019-01-23T21:41:59.156Z","type":"message"}
{"nick":"devsnek","message":"a function?","date":"2019-01-23T21:42:09.452Z","type":"message"}
{"nick":"ljharb","message":"pvinis: explicit functions","date":"2019-01-23T21:42:10.398Z","type":"message"}
{"nick":"pvinis","message":"i guess they are not soooo common, but they might be if it was easier to write :D","date":"2019-01-23T21:42:18.905Z","type":"message"}
{"nick":"ljharb","message":"i think omitting the static `get` keyword would be a bit of a nonstarter thho","date":"2019-01-23T21:42:40.002Z","type":"message"}
{"nick":"pvinis","message":"hm","date":"2019-01-23T21:42:51.769Z","type":"message"}
{"nick":"ljharb","message":"and given that the `this` actually depends on how the getter is used, i'm not sure avoiding that keyword is helpful either","date":"2019-01-23T21:43:00.363Z","type":"message"}
{"nick":"ljharb","message":"(ie, you can do `Object.getOwnPropertyDescriptor(obj, key).get.call(anyReceiver)`","date":"2019-01-23T21:43:16.859Z","type":"message"}
{"nick":"ljharb","message":")","date":"2019-01-23T21:43:18.992Z","type":"message"}
{"nick":"pvinis","message":"you mean for the person writing the code?","date":"2019-01-23T21:43:26.520Z","type":"message"}
{"nick":"ljharb","message":"for the person reading the code later, whose needs are always more important than the one writing it :-)","date":"2019-01-23T21:43:57.127Z","type":"message"}
{"nick":"devsnek","message":"i wish it was easier to tell where a generator came from","date":"2019-01-23T21:44:15.211Z","type":"message"}
{"nick":"pvinis","message":"right, so you think the `get` should be there to signify that its not a hardcoded value but its some calculation?","date":"2019-01-23T21:44:36.845Z","type":"message"}
{"nick":"ljharb","message":"pvinis: yes","date":"2019-01-23T21:47:30.741Z","type":"message"}
{"nick":"ljharb","message":"(also, any such sugar would probably need to apply for both object literals and class bodies)","date":"2019-01-23T21:47:50.356Z","type":"message"}
{"nick":"pvinis","message":"ljharb: sure, but I dont see anything thats bad about that. And the function alternative is pretty verbose too, compared to a possible sugar like `b: .a + 1`","date":"2019-01-23T21:50:23.969Z","type":"message"}
{"nick":"ljharb","message":"pvinis: verbosity often makes writing code a bit harder, but understanding it a bit easier - and since code is read many many more times than it's written, that seems like a worthy tradeoff when needed","date":"2019-01-23T21:58:39.437Z","type":"message"}
{"nick":"ljharb","message":"pvinis: also if `b: .a + 1` were to work, i'd expect `.a` to be sugar for `this.a` in any function - and then, it seems like `b: .a + 1` should be equivalent to `b: this.a + 1` which is already a data property :-/","date":"2019-01-23T21:59:22.342Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T22:03:32.076Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-23T22:04:49.448Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T22:06:00.299Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-23T22:08:21.819Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T22:09:00.252Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-23T22:09:06.210Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-23T22:09:48.610Z","type":"join"}
{"nick":"gibson042","date":"2019-01-23T22:17:26.009Z","type":"join"}
{"nick":"pvinis","reason":"Ping timeout: 256 seconds","date":"2019-01-23T22:20:01.184Z","type":"quit"}
{"nick":"bradleymeck","message":"Domenic: i'm rewording some stuff but i think we might be in alignment for what rekey is intended to do","date":"2019-01-23T22:31:19.484Z","type":"message"}
{"nick":"Domenic","message":"\\o/","date":"2019-01-23T22:35:24.694Z","type":"message"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-23T23:33:08.741Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-23T23:58:05.227Z","type":"quit"}
