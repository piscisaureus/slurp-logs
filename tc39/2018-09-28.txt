{"nick":"dscharrer27","date":"2018-09-28T00:00:00.175Z","type":"join"}
{"nick":"dscharrer27","reason":"Remote host closed the connection","date":"2018-09-28T00:03:48.714Z","type":"quit"}
{"nick":"CoJaBo26","date":"2018-09-28T00:08:10.101Z","type":"join"}
{"nick":"mhayden19","date":"2018-09-28T00:12:22.024Z","type":"join"}
{"nick":"CoJaBo26","reason":"Remote host closed the connection","date":"2018-09-28T00:12:23.053Z","type":"quit"}
{"nick":"mhayden19","reason":"Read error: Connection reset by peer","date":"2018-09-28T00:17:17.747Z","type":"quit"}
{"nick":"sunitknandi15","date":"2018-09-28T00:21:49.091Z","type":"join"}
{"nick":"sunitknandi15","reason":"Read error: Connection reset by peer","date":"2018-09-28T00:22:03.667Z","type":"quit"}
{"nick":"hoho`19","date":"2018-09-28T00:31:54.458Z","type":"join"}
{"nick":"hoho`19","reason":"Remote host closed the connection","date":"2018-09-28T00:34:55.145Z","type":"quit"}
{"nick":"Sirisian","message":"ljharb, I wouldn't know who to speak with about that. Would be nice to get their input though.","date":"2018-09-28T00:56:27.480Z","type":"message"}
{"nick":"rkratky","date":"2018-09-28T01:17:59.635Z","type":"join"}
{"nick":"hw26","date":"2018-09-28T01:20:34.104Z","type":"join"}
{"nick":"rkratky","reason":"Remote host closed the connection","date":"2018-09-28T01:21:42.884Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-09-28T01:24:33.134Z","type":"quit"}
{"nick":"hw26","reason":"Ping timeout: 245 seconds","date":"2018-09-28T01:25:03.293Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-09-28T01:27:13.401Z","type":"quit"}
{"nick":"knaved18","date":"2018-09-28T01:27:39.362Z","type":"join"}
{"nick":"knaved18","reason":"Ping timeout: 252 seconds","date":"2018-09-28T01:35:41.979Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-09-28T01:42:20.852Z","type":"quit"}
{"nick":"aki_","date":"2018-09-28T01:47:26.630Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-09-28T01:48:10.891Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-28T01:48:11.204Z","type":"nick"}
{"nick":"crystalclaw8","date":"2018-09-28T01:50:34.372Z","type":"join"}
{"nick":"ChrisK34","date":"2018-09-28T01:52:01.769Z","type":"join"}
{"nick":"crystalclaw8","reason":"Remote host closed the connection","date":"2018-09-28T01:53:20.337Z","type":"quit"}
{"nick":"ChrisK34","reason":"Remote host closed the connection","date":"2018-09-28T01:56:25.490Z","type":"quit"}
{"nick":"pinnerup26","date":"2018-09-28T02:49:16.543Z","type":"join"}
{"nick":"Kingsy21","date":"2018-09-28T02:54:36.157Z","type":"join"}
{"nick":"Kingsy21","reason":"Remote host closed the connection","date":"2018-09-28T02:56:09.020Z","type":"quit"}
{"nick":"pinnerup26","reason":"K-Lined","date":"2018-09-28T02:56:29.857Z","type":"quit"}
{"nick":"Kamots7","date":"2018-09-28T03:06:56.519Z","type":"join"}
{"nick":"Kamots7","reason":"Ping timeout: 244 seconds","date":"2018-09-28T03:13:45.613Z","type":"quit"}
{"nick":"jorrakay1","date":"2018-09-28T03:23:34.601Z","type":"join"}
{"nick":"jorrakay1","reason":"K-Lined","date":"2018-09-28T03:24:31.737Z","type":"quit"}
{"nick":"devsnek","message":"no memes wtf does @@species actually exist for","date":"2018-09-28T03:31:03.891Z","type":"message"}
{"nick":"ljharb","message":"devsnek: iirc it's so you can subclass something, like Array, and not have to override all the base methods, and they'll produce a `SubArray`","date":"2018-09-28T03:40:35.218Z","type":"message"}
{"nick":"devsnek","message":"couldn't that just happen automatically though","date":"2018-09-28T03:44:11.414Z","type":"message"}
{"nick":"devsnek","message":"`const C = this.constructor; return new C(whatever)`","date":"2018-09-28T03:44:23.265Z","type":"message"}
{"nick":"devsnek","message":"like in userland thats what people do","date":"2018-09-28T03:44:36.912Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: if MyArray extends Array, and I *do not* have MyArray.prototype.map defined on my class (and instead delegate to Array.prototype.map)","date":"2018-09-28T03:45:24.886Z","type":"message"}
{"nick":"bradleymeck","message":"the idea was that Array.prototype.map could return new MyArray types, or in the case of utility classes it could do the opposite and forcibly return Array even though it is a subclass","date":"2018-09-28T03:46:12.623Z","type":"message"}
{"nick":"devsnek","message":"Array.prototype.map could use this.constructor and utility could explicitly construct array though","date":"2018-09-28T03:46:32.159Z","type":"message"}
{"nick":"ljharb","message":"devsnek: `.constructor` isn't reliable, and you couldn't ergonomically override that to be *not* your subclass if you wanted","date":"2018-09-28T03:47:03.109Z","type":"message"}
{"nick":"ljharb","message":"not really defending it tho","date":"2018-09-28T03:47:31.201Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not saying @@species is something i understand the driving desires for","date":"2018-09-28T03:47:40.475Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-09-28T03:47:52.654Z","type":"message"}
{"nick":"bradleymeck","message":"i'm just saying what it was meant to be from my understanding","date":"2018-09-28T03:47:53.794Z","type":"message"}
{"nick":"devsnek","message":"ok","date":"2018-09-28T03:48:00.022Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-09-28T03:54:30.759Z","type":"quit"}
{"nick":"akirose","date":"2018-09-28T03:54:53.352Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-09-28T04:40:30.513Z","type":"quit"}
{"nick":"vikash-afk","reason":"Remote host closed the connection","date":"2018-09-28T04:44:21.551Z","type":"quit"}
{"nick":"howdoi","date":"2018-09-28T04:44:58.599Z","type":"join"}
{"nick":"vikash-afk","date":"2018-09-28T05:01:21.519Z","type":"join"}
{"nick":"siix18","date":"2018-09-28T05:16:33.470Z","type":"join"}
{"nick":"siix18","reason":"Remote host closed the connection","date":"2018-09-28T05:21:00.123Z","type":"quit"}
{"nick":"Domenic","message":"The desired use case was something like: 1) I want to create an X subclass, where X is Array or Promise or ... 2) I want all of its X-returning methods to return Y, where Y is not the subclass (which is the default via this.constructor lookup) but is instead something else.","date":"2018-09-28T05:22:44.165Z","type":"message"}
{"nick":"Domenic","message":"Also, 3) I am not willing to override the methods themselves","date":"2018-09-28T05:23:01.506Z","type":"message"}
{"nick":"Domenic","message":"This use case makes no sense, because there is never a scenario where you want to change the return type of ALL of the X-returning methods in the same way","date":"2018-09-28T05:23:23.912Z","type":"message"}
{"nick":"Domenic","message":"E.g. consider a `class Elements extends Array {}`, which contains methods that operate on an array of `Element` instances. You want `filter()` to return `Elements` instances (which it would by default). But you don't want `map()` to return `Elements` instances, since `els.map(el => el.localName)` should be an `Array` of strings, not an `Elements` of strings.","date":"2018-09-28T05:24:36.555Z","type":"message"}
{"nick":"Domenic","message":"But @@species is useless for this purpose. If you customize it, you can only ever make both `map()` and `filter()` return the same type, either `Elements` or `Array`. You cannot have them return types appropriate for their specific semantics.","date":"2018-09-28T05:25:18.334Z","type":"message"}
{"nick":"Domenic","message":"Instead you should just override the `map()` method to return an `Array`, since that's the semantics that makes sense.","date":"2018-09-28T05:25:50.041Z","type":"message"}
{"nick":"ramsub08","date":"2018-09-28T05:34:58.031Z","type":"join"}
{"nick":"ramsub08","reason":"Read error: Connection reset by peer","date":"2018-09-28T05:38:31.528Z","type":"quit"}
{"nick":"IT_Sean8","date":"2018-09-28T05:42:43.239Z","type":"join"}
{"nick":"IT_Sean8","reason":"Remote host closed the connection","date":"2018-09-28T05:44:49.078Z","type":"quit"}
{"nick":"tadams12083_","date":"2018-09-28T05:58:50.934Z","type":"join"}
{"nick":"tadams12083_","reason":"Remote host closed the connection","date":"2018-09-28T06:00:11.261Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-09-28T06:02:27.353Z","type":"quit"}
{"nick":"akirose","date":"2018-09-28T06:02:40.286Z","type":"join"}
{"nick":"keith_miller","date":"2018-09-28T06:40:12.975Z","type":"join"}
{"nick":"Guest60662","date":"2018-09-28T06:44:06.394Z","type":"join"}
{"nick":"Guest60662","reason":"Remote host closed the connection","date":"2018-09-28T06:45:24.794Z","type":"quit"}
{"nick":"akoserwa","date":"2018-09-28T06:45:57.343Z","type":"join"}
{"nick":"shbst","date":"2018-09-28T06:57:19.947Z","type":"join"}
{"nick":"brouette24","date":"2018-09-28T06:59:19.918Z","type":"join"}
{"nick":"shbst","reason":"Read error: Connection reset by peer","date":"2018-09-28T06:59:20.679Z","type":"quit"}
{"nick":"antonh_","date":"2018-09-28T07:00:43.274Z","type":"join"}
{"nick":"brouette24","reason":"Remote host closed the connection","date":"2018-09-28T07:03:20.333Z","type":"quit"}
{"nick":"antonh_","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-28T07:04:23.308Z","type":"quit"}
{"nick":"opv1","date":"2018-09-28T07:14:38.750Z","type":"join"}
{"nick":"opv1","reason":"Remote host closed the connection","date":"2018-09-28T07:18:55.115Z","type":"quit"}
{"nick":"Nokurn26","date":"2018-09-28T07:19:07.691Z","type":"join"}
{"nick":"Nokurn26","reason":"Remote host closed the connection","date":"2018-09-28T07:23:39.340Z","type":"quit"}
{"nick":"cottongin3","date":"2018-09-28T07:30:28.016Z","type":"join"}
{"nick":"cottongin3","reason":"Remote host closed the connection","date":"2018-09-28T07:32:27.005Z","type":"quit"}
{"nick":"DanQuinney0","date":"2018-09-28T07:35:47.607Z","type":"join"}
{"nick":"DanQuinney0","reason":"Remote host closed the connection","date":"2018-09-28T07:38:27.196Z","type":"quit"}
{"nick":"akirose","reason":"Quit: 👋🏻","date":"2018-09-28T07:45:07.919Z","type":"quit"}
{"nick":"akirose","date":"2018-09-28T07:46:07.960Z","type":"join"}
{"nick":"charlton12","date":"2018-09-28T07:48:03.456Z","type":"join"}
{"nick":"charlton12","reason":"Remote host closed the connection","date":"2018-09-28T07:52:01.817Z","type":"quit"}
