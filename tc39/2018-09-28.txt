{"nick":"dscharrer27","date":"2018-09-28T00:00:00.175Z","type":"join"}
{"nick":"dscharrer27","reason":"Remote host closed the connection","date":"2018-09-28T00:03:48.714Z","type":"quit"}
{"nick":"CoJaBo26","date":"2018-09-28T00:08:10.101Z","type":"join"}
{"nick":"mhayden19","date":"2018-09-28T00:12:22.024Z","type":"join"}
{"nick":"CoJaBo26","reason":"Remote host closed the connection","date":"2018-09-28T00:12:23.053Z","type":"quit"}
{"nick":"mhayden19","reason":"Read error: Connection reset by peer","date":"2018-09-28T00:17:17.747Z","type":"quit"}
{"nick":"sunitknandi15","date":"2018-09-28T00:21:49.091Z","type":"join"}
{"nick":"sunitknandi15","reason":"Read error: Connection reset by peer","date":"2018-09-28T00:22:03.667Z","type":"quit"}
{"nick":"hoho`19","date":"2018-09-28T00:31:54.458Z","type":"join"}
{"nick":"hoho`19","reason":"Remote host closed the connection","date":"2018-09-28T00:34:55.145Z","type":"quit"}
{"nick":"Sirisian","message":"ljharb, I wouldn't know who to speak with about that. Would be nice to get their input though.","date":"2018-09-28T00:56:27.480Z","type":"message"}
{"nick":"rkratky","date":"2018-09-28T01:17:59.635Z","type":"join"}
{"nick":"hw26","date":"2018-09-28T01:20:34.104Z","type":"join"}
{"nick":"rkratky","reason":"Remote host closed the connection","date":"2018-09-28T01:21:42.884Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-09-28T01:24:33.134Z","type":"quit"}
{"nick":"hw26","reason":"Ping timeout: 245 seconds","date":"2018-09-28T01:25:03.293Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-09-28T01:27:13.401Z","type":"quit"}
{"nick":"knaved18","date":"2018-09-28T01:27:39.362Z","type":"join"}
{"nick":"knaved18","reason":"Ping timeout: 252 seconds","date":"2018-09-28T01:35:41.979Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-09-28T01:42:20.852Z","type":"quit"}
{"nick":"aki_","date":"2018-09-28T01:47:26.630Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-09-28T01:48:10.891Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-28T01:48:11.204Z","type":"nick"}
{"nick":"crystalclaw8","date":"2018-09-28T01:50:34.372Z","type":"join"}
{"nick":"ChrisK34","date":"2018-09-28T01:52:01.769Z","type":"join"}
{"nick":"crystalclaw8","reason":"Remote host closed the connection","date":"2018-09-28T01:53:20.337Z","type":"quit"}
{"nick":"ChrisK34","reason":"Remote host closed the connection","date":"2018-09-28T01:56:25.490Z","type":"quit"}
{"nick":"pinnerup26","date":"2018-09-28T02:49:16.543Z","type":"join"}
{"nick":"Kingsy21","date":"2018-09-28T02:54:36.157Z","type":"join"}
{"nick":"Kingsy21","reason":"Remote host closed the connection","date":"2018-09-28T02:56:09.020Z","type":"quit"}
{"nick":"pinnerup26","reason":"K-Lined","date":"2018-09-28T02:56:29.857Z","type":"quit"}
{"nick":"Kamots7","date":"2018-09-28T03:06:56.519Z","type":"join"}
{"nick":"Kamots7","reason":"Ping timeout: 244 seconds","date":"2018-09-28T03:13:45.613Z","type":"quit"}
{"nick":"jorrakay1","date":"2018-09-28T03:23:34.601Z","type":"join"}
{"nick":"jorrakay1","reason":"K-Lined","date":"2018-09-28T03:24:31.737Z","type":"quit"}
{"nick":"devsnek","message":"no memes wtf does @@species actually exist for","date":"2018-09-28T03:31:03.891Z","type":"message"}
{"nick":"ljharb","message":"devsnek: iirc it's so you can subclass something, like Array, and not have to override all the base methods, and they'll produce a `SubArray`","date":"2018-09-28T03:40:35.218Z","type":"message"}
{"nick":"devsnek","message":"couldn't that just happen automatically though","date":"2018-09-28T03:44:11.414Z","type":"message"}
{"nick":"devsnek","message":"`const C = this.constructor; return new C(whatever)`","date":"2018-09-28T03:44:23.265Z","type":"message"}
{"nick":"devsnek","message":"like in userland thats what people do","date":"2018-09-28T03:44:36.912Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: if MyArray extends Array, and I *do not* have MyArray.prototype.map defined on my class (and instead delegate to Array.prototype.map)","date":"2018-09-28T03:45:24.886Z","type":"message"}
{"nick":"bradleymeck","message":"the idea was that Array.prototype.map could return new MyArray types, or in the case of utility classes it could do the opposite and forcibly return Array even though it is a subclass","date":"2018-09-28T03:46:12.623Z","type":"message"}
{"nick":"devsnek","message":"Array.prototype.map could use this.constructor and utility could explicitly construct array though","date":"2018-09-28T03:46:32.159Z","type":"message"}
{"nick":"ljharb","message":"devsnek: `.constructor` isn't reliable, and you couldn't ergonomically override that to be *not* your subclass if you wanted","date":"2018-09-28T03:47:03.109Z","type":"message"}
{"nick":"ljharb","message":"not really defending it tho","date":"2018-09-28T03:47:31.201Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not saying @@species is something i understand the driving desires for","date":"2018-09-28T03:47:40.475Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-09-28T03:47:52.654Z","type":"message"}
{"nick":"bradleymeck","message":"i'm just saying what it was meant to be from my understanding","date":"2018-09-28T03:47:53.794Z","type":"message"}
{"nick":"devsnek","message":"ok","date":"2018-09-28T03:48:00.022Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-09-28T03:54:30.759Z","type":"quit"}
{"nick":"akirose","date":"2018-09-28T03:54:53.352Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-09-28T04:40:30.513Z","type":"quit"}
{"nick":"vikash-afk","reason":"Remote host closed the connection","date":"2018-09-28T04:44:21.551Z","type":"quit"}
{"nick":"howdoi","date":"2018-09-28T04:44:58.599Z","type":"join"}
{"nick":"vikash-afk","date":"2018-09-28T05:01:21.519Z","type":"join"}
{"nick":"siix18","date":"2018-09-28T05:16:33.470Z","type":"join"}
{"nick":"siix18","reason":"Remote host closed the connection","date":"2018-09-28T05:21:00.123Z","type":"quit"}
{"nick":"Domenic","message":"The desired use case was something like: 1) I want to create an X subclass, where X is Array or Promise or ... 2) I want all of its X-returning methods to return Y, where Y is not the subclass (which is the default via this.constructor lookup) but is instead something else.","date":"2018-09-28T05:22:44.165Z","type":"message"}
{"nick":"Domenic","message":"Also, 3) I am not willing to override the methods themselves","date":"2018-09-28T05:23:01.506Z","type":"message"}
{"nick":"Domenic","message":"This use case makes no sense, because there is never a scenario where you want to change the return type of ALL of the X-returning methods in the same way","date":"2018-09-28T05:23:23.912Z","type":"message"}
{"nick":"Domenic","message":"E.g. consider a `class Elements extends Array {}`, which contains methods that operate on an array of `Element` instances. You want `filter()` to return `Elements` instances (which it would by default). But you don't want `map()` to return `Elements` instances, since `els.map(el => el.localName)` should be an `Array` of strings, not an `Elements` of strings.","date":"2018-09-28T05:24:36.555Z","type":"message"}
{"nick":"Domenic","message":"But @@species is useless for this purpose. If you customize it, you can only ever make both `map()` and `filter()` return the same type, either `Elements` or `Array`. You cannot have them return types appropriate for their specific semantics.","date":"2018-09-28T05:25:18.334Z","type":"message"}
{"nick":"Domenic","message":"Instead you should just override the `map()` method to return an `Array`, since that's the semantics that makes sense.","date":"2018-09-28T05:25:50.041Z","type":"message"}
{"nick":"ramsub08","date":"2018-09-28T05:34:58.031Z","type":"join"}
{"nick":"ramsub08","reason":"Read error: Connection reset by peer","date":"2018-09-28T05:38:31.528Z","type":"quit"}
{"nick":"IT_Sean8","date":"2018-09-28T05:42:43.239Z","type":"join"}
{"nick":"IT_Sean8","reason":"Remote host closed the connection","date":"2018-09-28T05:44:49.078Z","type":"quit"}
{"nick":"tadams12083_","date":"2018-09-28T05:58:50.934Z","type":"join"}
{"nick":"tadams12083_","reason":"Remote host closed the connection","date":"2018-09-28T06:00:11.261Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-09-28T06:02:27.353Z","type":"quit"}
{"nick":"akirose","date":"2018-09-28T06:02:40.286Z","type":"join"}
{"nick":"keith_miller","date":"2018-09-28T06:40:12.975Z","type":"join"}
{"nick":"Guest60662","date":"2018-09-28T06:44:06.394Z","type":"join"}
{"nick":"Guest60662","reason":"Remote host closed the connection","date":"2018-09-28T06:45:24.794Z","type":"quit"}
{"nick":"akoserwa","date":"2018-09-28T06:45:57.343Z","type":"join"}
{"nick":"shbst","date":"2018-09-28T06:57:19.947Z","type":"join"}
{"nick":"brouette24","date":"2018-09-28T06:59:19.918Z","type":"join"}
{"nick":"shbst","reason":"Read error: Connection reset by peer","date":"2018-09-28T06:59:20.679Z","type":"quit"}
{"nick":"antonh_","date":"2018-09-28T07:00:43.274Z","type":"join"}
{"nick":"brouette24","reason":"Remote host closed the connection","date":"2018-09-28T07:03:20.333Z","type":"quit"}
{"nick":"antonh_","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-28T07:04:23.308Z","type":"quit"}
{"nick":"opv1","date":"2018-09-28T07:14:38.750Z","type":"join"}
{"nick":"opv1","reason":"Remote host closed the connection","date":"2018-09-28T07:18:55.115Z","type":"quit"}
{"nick":"Nokurn26","date":"2018-09-28T07:19:07.691Z","type":"join"}
{"nick":"Nokurn26","reason":"Remote host closed the connection","date":"2018-09-28T07:23:39.340Z","type":"quit"}
{"nick":"cottongin3","date":"2018-09-28T07:30:28.016Z","type":"join"}
{"nick":"cottongin3","reason":"Remote host closed the connection","date":"2018-09-28T07:32:27.005Z","type":"quit"}
{"nick":"DanQuinney0","date":"2018-09-28T07:35:47.607Z","type":"join"}
{"nick":"DanQuinney0","reason":"Remote host closed the connection","date":"2018-09-28T07:38:27.196Z","type":"quit"}
{"nick":"akirose","reason":"Quit: 👋🏻","date":"2018-09-28T07:45:07.919Z","type":"quit"}
{"nick":"akirose","date":"2018-09-28T07:46:07.960Z","type":"join"}
{"nick":"charlton12","date":"2018-09-28T07:48:03.456Z","type":"join"}
{"nick":"charlton12","reason":"Remote host closed the connection","date":"2018-09-28T07:52:01.817Z","type":"quit"}
{"nick":"BigE1","date":"2018-09-28T08:02:31.786Z","type":"join"}
{"nick":"BigE1","reason":"Remote host closed the connection","date":"2018-09-28T08:07:14.959Z","type":"quit"}
{"nick":"Ox37b","date":"2018-09-28T08:32:56.989Z","type":"join"}
{"nick":"Ox37b","reason":"Remote host closed the connection","date":"2018-09-28T08:36:09.339Z","type":"quit"}
{"nick":"windsok11","date":"2018-09-28T08:40:33.871Z","type":"join"}
{"nick":"windsok11","reason":"Ping timeout: 252 seconds","date":"2018-09-28T08:47:59.946Z","type":"quit"}
{"nick":"cspotcode2","date":"2018-09-28T09:38:59.856Z","type":"join"}
{"nick":"cspotcode2","reason":"Remote host closed the connection","date":"2018-09-28T09:43:16.860Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-09-28T09:53:59.946Z","type":"quit"}
{"nick":"akirose","date":"2018-09-28T09:55:14.305Z","type":"join"}
{"nick":"atriv","date":"2018-09-28T09:57:31.992Z","type":"join"}
{"nick":"tomeaton179","date":"2018-09-28T10:00:58.821Z","type":"join"}
{"nick":"atriv","reason":"Remote host closed the connection","date":"2018-09-28T10:01:01.470Z","type":"quit"}
{"nick":"tomeaton179","reason":"Read error: Connection reset by peer","date":"2018-09-28T10:02:36.456Z","type":"quit"}
{"nick":"Dead_Body15","date":"2018-09-28T10:15:52.261Z","type":"join"}
{"nick":"Dead_Body15","reason":"Remote host closed the connection","date":"2018-09-28T10:18:36.708Z","type":"quit"}
{"nick":"elf12","date":"2018-09-28T10:40:47.404Z","type":"join"}
{"nick":"elf12","reason":"Remote host closed the connection","date":"2018-09-28T10:42:04.574Z","type":"quit"}
{"nick":"beowulf29","date":"2018-09-28T10:49:41.120Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-09-28T10:52:38.573Z","type":"quit"}
{"nick":"beowulf29","reason":"Read error: Connection reset by peer","date":"2018-09-28T10:57:16.689Z","type":"quit"}
{"nick":"lynxis18","date":"2018-09-28T11:05:08.054Z","type":"join"}
{"nick":"lynxis18","reason":"Remote host closed the connection","date":"2018-09-28T11:07:33.133Z","type":"quit"}
{"nick":"skierpage","date":"2018-09-28T11:11:43.555Z","type":"join"}
{"nick":"CrtxReavr8","date":"2018-09-28T11:16:07.913Z","type":"join"}
{"nick":"CrtxReavr8","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-28T11:17:22.927Z","type":"quit"}
{"nick":"skierpage","reason":"Ping timeout: 252 seconds","date":"2018-09-28T11:17:30.922Z","type":"quit"}
{"nick":"mawe2","date":"2018-09-28T11:25:28.470Z","type":"join"}
{"nick":"Guest47903","date":"2018-09-28T11:27:32.635Z","type":"join"}
{"nick":"mawe2","reason":"Remote host closed the connection","date":"2018-09-28T11:27:42.772Z","type":"quit"}
{"nick":"Guest47903","reason":"Remote host closed the connection","date":"2018-09-28T11:29:10.890Z","type":"quit"}
{"nick":"devsnek","message":"Domenic: that's the conclusion i came to as well","date":"2018-09-28T11:38:33.547Z","type":"message"}
{"nick":"ljharb","message":"is there a use case where you want `.constructor` to be Elements, but \"every method\" to produce \"not an Elements\"?","date":"2018-09-28T11:43:01.805Z","type":"message"}
{"nick":"keith_miller","date":"2018-09-28T11:57:23.607Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-09-28T11:59:11.995Z","type":"quit"}
{"nick":"aki_","date":"2018-09-28T12:02:32.861Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2018-09-28T12:02:58.321Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-28T12:03:00.110Z","type":"nick"}
{"nick":"Liothen24","date":"2018-09-28T12:07:35.211Z","type":"join"}
{"nick":"Liothen24","reason":"Remote host closed the connection","date":"2018-09-28T12:08:28.935Z","type":"quit"}
{"nick":"jmdyck","date":"2018-09-28T12:30:23.409Z","type":"join"}
{"nick":"RJ72218","date":"2018-09-28T12:30:50.518Z","type":"join"}
{"nick":"RJ72218","reason":"Read error: Connection reset by peer","date":"2018-09-28T12:35:21.799Z","type":"quit"}
{"nick":"Lunatrius2","date":"2018-09-28T12:54:42.630Z","type":"join"}
{"nick":"Lunatrius2","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-28T12:56:43.455Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-09-28T13:44:47.247Z","type":"quit"}
{"nick":"yuitimothy0","date":"2018-09-28T13:51:34.244Z","type":"join"}
{"nick":"yuitimothy0","reason":"Remote host closed the connection","date":"2018-09-28T13:53:37.875Z","type":"quit"}
{"nick":"Domenic","message":"That's the imaginary use case where species could be useful, but there's no real world example of such a thing","date":"2018-09-28T14:02:45.989Z","type":"message"}
{"nick":"Mathias3","date":"2018-09-28T14:04:22.026Z","type":"join"}
{"nick":"Mathias3","reason":"Ping timeout: 252 seconds","date":"2018-09-28T14:08:51.616Z","type":"quit"}
{"nick":"aki_","date":"2018-09-28T14:09:18.961Z","type":"join"}
{"nick":"akoserwa_","date":"2018-09-28T14:10:49.389Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-09-28T14:11:04.945Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-28T14:11:05.278Z","type":"nick"}
{"nick":"akoserwa","reason":"Ping timeout: 260 seconds","date":"2018-09-28T14:13:36.329Z","type":"quit"}
{"nick":"mappum__","date":"2018-09-28T14:20:20.090Z","type":"join"}
{"nick":"Poster|n15","date":"2018-09-28T14:22:14.044Z","type":"join"}
{"nick":"mappum__","reason":"Remote host closed the connection","date":"2018-09-28T14:25:58.760Z","type":"quit"}
{"nick":"akoserwa__","date":"2018-09-28T14:27:09.507Z","type":"join"}
{"nick":"Poster|n15","reason":"Remote host closed the connection","date":"2018-09-28T14:27:19.914Z","type":"quit"}
{"nick":"jakogut29","date":"2018-09-28T14:28:30.928Z","type":"join"}
{"nick":"jakogut29","reason":"Remote host closed the connection","date":"2018-09-28T14:29:02.600Z","type":"quit"}
{"nick":"akoserwa_","reason":"Ping timeout: 240 seconds","date":"2018-09-28T14:29:27.358Z","type":"quit"}
{"nick":"akoserwa__","reason":"Quit: Leaving","date":"2018-09-28T14:36:09.716Z","type":"quit"}
{"nick":"rpamely","date":"2018-09-28T15:00:17.014Z","type":"join"}
{"nick":"lost_b0t","date":"2018-09-28T15:52:52.252Z","type":"join"}
{"nick":"lost_b0t","reason":"Remote host closed the connection","date":"2018-09-28T15:57:18.127Z","type":"quit"}
{"nick":"vallor21","date":"2018-09-28T16:07:18.336Z","type":"join"}
{"nick":"vallor21","reason":"Remote host closed the connection","date":"2018-09-28T16:13:21.005Z","type":"quit"}
{"nick":"aki_","date":"2018-09-28T16:16:16.296Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-09-28T16:17:20.984Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-28T16:17:21.285Z","type":"nick"}
{"nick":"gtrs_","date":"2018-09-28T16:58:22.608Z","type":"join"}
{"nick":"gtrs_","reason":"Remote host closed the connection","date":"2018-09-28T16:59:10.333Z","type":"quit"}
{"nick":"devsnek","message":"is there any way to detect if a constructor was called with super() vs with new/Reflect.construct","date":"2018-09-28T17:25:29.807Z","type":"message"}
{"nick":"TabAtkins","message":"Domenic: That makes sense, but doesn't killing @@species entirely just mean that *all* of the methods need to be redefined on subclasses, if you want them to return something other than an Array?","date":"2018-09-28T17:25:32.455Z","type":"message"}
{"nick":"TabAtkins","message":"s/something other than an Array/the subclass rather than an Array/","date":"2018-09-28T17:25:54.594Z","type":"message"}
{"nick":"devsnek","message":"oh new.target !== undefined && new.target !== WhateverConstructor","date":"2018-09-28T17:27:05.655Z","type":"message"}
{"nick":"AtumT","date":"2018-09-28T17:33:42.382Z","type":"join"}
{"nick":"ljharb","message":"TabAtkins: or just the constructor property","date":"2018-09-28T17:34:15.528Z","type":"message"}
{"nick":"TabAtkins","message":"ljharb: I don't understand what that means, in reference to my statement.","date":"2018-09-28T17:34:53.618Z","type":"message"}
{"nick":"ljharb","message":"you can use .constructor instead of Symbol.species and it’ll work the same","date":"2018-09-28T17:35:29.952Z","type":"message"}
{"nick":"TabAtkins","message":"Who is \"you\" in that statement?","date":"2018-09-28T17:35:57.655Z","type":"message"}
{"nick":"ljharb","message":"the author of the subclass","date":"2018-09-28T17:36:10.731Z","type":"message"}
{"nick":"TabAtkins","message":"How is the author of the subclass supposed to use the .constructor property to change what Array methods return?","date":"2018-09-28T17:36:45.197Z","type":"message"}
{"nick":"wchresta","date":"2018-09-28T17:41:59.501Z","type":"join"}
{"nick":"wchresta","reason":"Remote host closed the connection","date":"2018-09-28T17:43:05.853Z","type":"quit"}
{"nick":"devsnek","message":"i think the real problem is that its pretty much never an all or nothing case","date":"2018-09-28T17:45:17.180Z","type":"message"}
{"nick":"Bakkot","message":"ljharb / devsnek: you definitely cannot just use `this.constructor`, because most everything ends up having that, and we cannot make `[].slice.call(arguments)` suddenly start returning Objects instead of Arrays","date":"2018-09-28T17:45:31.764Z","type":"message"}
{"nick":"ljharb","message":"ah true","date":"2018-09-28T17:45:58.984Z","type":"message"}
{"nick":"devsnek","message":"change arguments to an array and this won't be a problem /s","date":"2018-09-28T17:46:10.283Z","type":"message"}
{"nick":"Bakkot","message":"can't do that either :(","date":"2018-09-28T17:46:20.008Z","type":"message"}
{"nick":"ljharb","message":"in general tho i don’t see why it’s reasonable to expect a foo method to return anything but a foo","date":"2018-09-28T17:46:20.740Z","type":"message"}
{"nick":"devsnek","message":"agreed on that point","date":"2018-09-28T17:46:43.114Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: eh, factory methods being heritable makes sense to me","date":"2018-09-28T17:47:38.609Z","type":"message"}
{"nick":"Bakkot","message":"it should never have been a single global name though","date":"2018-09-28T17:47:45.390Z","type":"message"}
{"nick":"ljharb","message":"maybe. But then only proper subclasses should have that","date":"2018-09-28T17:48:07.365Z","type":"message"}
{"nick":"Bakkot","message":"like, it makes sense to have an opt-in way to say \"Array.prototype methods, when invoked on instance of this class, should use the class constructror to produce the result\". and it makes sense to say \"RegExp methods, when [etc]\". but it makes _absolutely no sense_ to have a single flag used for _both of these things_","date":"2018-09-28T17:48:50.184Z","type":"message"}
{"nick":"Bakkot","message":"no sense whatsoever","date":"2018-09-28T17:48:54.724Z","type":"message"}
{"nick":"TabAtkins","message":"ljharb: Because \"a foo method\" doesn't look like a foo method when it's on a SubFoo; it looks like a SubFoo method.","date":"2018-09-28T17:49:03.996Z","type":"message"}
{"nick":"ljharb","message":"sure, again that makes sense on a subclass","date":"2018-09-28T17:49:28.745Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: \"proper subclasses\" is not a particularly-well defined concept in a language as dynamic as JS","date":"2018-09-28T17:49:39.742Z","type":"message"}
{"nick":"ljharb","message":"but if you .call on a nodelist with an array method it should only be an array","date":"2018-09-28T17:49:50.563Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: for builtins it means “has the right slots”","date":"2018-09-28T17:50:04.885Z","type":"message"}
{"nick":"TabAtkins","message":"ljharb: I mean, I'm willing to accept that argument *if* we get equivalents to those methods that are usable on arbitrary iterables, and which return the correct iterable type. (And that are callable in a reasonably usable way, like `foo::filter(fn)` or something.)","date":"2018-09-28T17:51:00.163Z","type":"message"}
{"nick":"ljharb","message":"that’s a separate thing tho. That’s not what array methods are.","date":"2018-09-28T17:51:30.275Z","type":"message"}
{"nick":"TabAtkins","message":"In our current world the Array methods *are* those \"usable on any iterable\" functions, because... they are usable on anything.","date":"2018-09-28T17:51:35.579Z","type":"message"}
{"nick":"ljharb","message":"array methods operate on arraylikes, not on iterables","date":"2018-09-28T17:51:46.498Z","type":"message"}
{"nick":"ljharb","message":"Array.from being an exception.","date":"2018-09-28T17:51:57.653Z","type":"message"}
{"nick":"TabAtkins","message":"Sure, .length and numeric accessors.","date":"2018-09-28T17:52:10.968Z","type":"message"}
{"nick":"TabAtkins","message":"But... array-likes don't have to be Array subclasses, and sometimes *can't* be.","date":"2018-09-28T17:52:25.538Z","type":"message"}
{"nick":"ljharb","message":"sure. But i don’t think it’s a reasonable expectation to get an arraylike out of an array method.","date":"2018-09-28T17:52:49.672Z","type":"message"}
{"nick":"ljharb","message":"arraylike is the input. Array is the output.","date":"2018-09-28T17:53:08.084Z","type":"message"}
{"nick":"devsnek","message":"you can trick them into doing that with a combo of Reflect.construct and Symbol.species anyway","date":"2018-09-28T17:53:23.153Z","type":"message"}
{"nick":"devsnek","message":"i think the bigger question pops up when you're not doing weird reflective stuff","date":"2018-09-28T17:54:15.798Z","type":"message"}
{"nick":"TabAtkins","message":"So you're currently reciting the *definition* of the behavior of the methods. Why do you believe that, tho? You're okay with that meaning that any Array-like has to manually implement all of the array methods, and stay updated as we add new ones?","date":"2018-09-28T17:54:36.774Z","type":"message"}
{"nick":"devsnek","message":"that sounds like a task for the protocols proposal","date":"2018-09-28T17:55:30.231Z","type":"message"}
{"nick":"TabAtkins","message":"devsnek: Indeed.","date":"2018-09-28T17:55:42.030Z","type":"message"}
{"nick":"TabAtkins","message":"I'm fine if there's a path forward for this! Absolutely not wedded in any way to actually using the Array methods themselves; that does indeed sound hacky and weird.","date":"2018-09-28T17:56:05.362Z","type":"message"}
{"nick":"ljharb","message":"yes, i think any arraylike should have to implement the methods themselves","date":"2018-09-28T17:56:09.526Z","type":"message"}
{"nick":"ljharb","message":"an array subclass, tho, I’d expect shouldn’t","date":"2018-09-28T17:56:24.025Z","type":"message"}
{"nick":"TabAtkins","message":"Touching on Domenic's earlier point - do you think an Array subclass's inherited `map` should return the subclass?","date":"2018-09-28T17:57:13.643Z","type":"message"}
{"nick":"devsnek","message":"if you're trying to be X without actually being X you kinda invite the complexity on yourself","date":"2018-09-28T17:57:20.984Z","type":"message"}
{"nick":"devsnek","message":"TabAtkins: i think it depends on what the subclass does and is","date":"2018-09-28T17:57:58.518Z","type":"message"}
{"nick":"TabAtkins","message":"\"it depends\" isn't a usable answer to \"how should we write the spec for this\" ^_^","date":"2018-09-28T17:58:31.744Z","type":"message"}
{"nick":"devsnek","message":"just throw a range error","date":"2018-09-28T17:58:47.022Z","type":"message"}
{"nick":"ljharb","message":"yes, i think it probably should","date":"2018-09-28T17:58:49.303Z","type":"message"}
{"nick":"devsnek","message":"and then if you want something else, manually overrid eit","date":"2018-09-28T17:59:18.807Z","type":"message"}
{"nick":"TabAtkins","message":"The protocols proposal, last I looked, does indeed look like it would be *very* good for this. Two protocols for Array-likes, one that places no restrictions on its contents (and so can return the class from `map`, etc) and one that does (so `filter` can return the class, but `map` returns an Array in the default impl).","date":"2018-09-28T17:59:32.232Z","type":"message"}
{"nick":"devsnek","message":"i don't think it can happen at the whole-thing level though","date":"2018-09-28T17:59:56.404Z","type":"message"}
{"nick":"TabAtkins","message":"ljharb: Okay, so you're implying that Array subclasses must hold to the implicit guarantee that it must place no restrictions on what it can hold. And anything that *does* want to place such restrictions (such as Elements) must instead be an array-like that reimplements everything manually?","date":"2018-09-28T18:00:49.192Z","type":"message"}
{"nick":"TabAtkins","message":"(I'm not playing gotcha, btw, just drawing out the actual positions of other people in the group.)","date":"2018-09-28T18:01:19.770Z","type":"message"}
{"nick":"devsnek","message":"any object value makes that guarantee anyway","date":"2018-09-28T18:02:48.942Z","type":"message"}
{"nick":"devsnek","message":"unless you use proxies or something","date":"2018-09-28T18:02:53.139Z","type":"message"}
{"nick":"TabAtkins","message":"Ignoring the possibility of people monkeying around in the guts, sure.","date":"2018-09-28T18:03:39.417Z","type":"message"}
{"nick":"Domenic","message":"Bakkot: devsnek: ljharb: the general pattern of @@species vs. this.constructor is separate from the web-compat hacks necessary for Array in particular.","date":"2018-09-28T18:04:02.363Z","type":"message"}
{"nick":"devsnek","message":"if you want to limit what the SubArray holds (assuming people only use push/unshift/etc) then yeah i would expect you to manually have to override all those","date":"2018-09-28T18:04:13.522Z","type":"message"}
{"nick":"TabAtkins","message":"A WebIDL Elements object would maintain its internal state in a private symbol, and use a getter/setter to access that symbol; manual monkeying aroudn would just set properties on the object, not on the internal state.","date":"2018-09-28T18:04:35.670Z","type":"message"}
{"nick":"jeremy_carroll16","date":"2018-09-28T18:09:33.868Z","type":"join"}
{"nick":"jeremy_carroll16","reason":"Remote host closed the connection","date":"2018-09-28T18:09:52.354Z","type":"quit"}
{"nick":"AtumT_","date":"2018-09-28T18:18:37.992Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2018-09-28T18:21:27.424Z","type":"quit"}
{"nick":"aki_","date":"2018-09-28T18:22:15.337Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2018-09-28T18:23:04.292Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-28T18:23:04.728Z","type":"nick"}
{"nick":"AtumT","date":"2018-09-28T18:32:22.655Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 272 seconds","date":"2018-09-28T18:33:16.866Z","type":"quit"}
{"nick":"Bakkot","message":"Domenic: yes and no. there are cross-realm web compat reasons that ArraySpeciesCreate in particular is weird, but there are also seperate web compat reasons reasons why `this.constructor` could not be used for the thing Symbol.species does, at least not on array methods","date":"2018-09-28T18:35:30.691Z","type":"message"}
{"nick":"Bakkot","message":"(anyway I think I agree with you, Symbol.species delenda est)","date":"2018-09-28T18:38:21.222Z","type":"message"}
{"nick":"hexingb19","date":"2018-09-28T18:41:26.572Z","type":"join"}
{"nick":"hexingb19","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-28T18:43:29.468Z","type":"quit"}
{"nick":"abi`14","date":"2018-09-28T18:45:01.612Z","type":"join"}
{"nick":"abi`14","reason":"Remote host closed the connection","date":"2018-09-28T18:47:27.598Z","type":"quit"}
{"nick":"Aldem20","date":"2018-09-28T19:10:45.782Z","type":"join"}
{"nick":"Aldem20","reason":"Remote host closed the connection","date":"2018-09-28T19:16:41.703Z","type":"quit"}
{"nick":"jasonaowen23","date":"2018-09-28T20:14:18.022Z","type":"join"}
{"nick":"jasonaowen23","reason":"Remote host closed the connection","date":"2018-09-28T20:18:41.120Z","type":"quit"}
{"nick":"aki_","date":"2018-09-28T20:28:21.284Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 260 seconds","date":"2018-09-28T20:29:16.355Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-28T20:29:16.717Z","type":"nick"}
{"nick":"alpha_sh","date":"2018-09-28T21:00:22.375Z","type":"join"}
{"nick":"Guest52342","date":"2018-09-28T21:00:55.099Z","type":"join"}
{"nick":"Guest52342","reason":"Remote host closed the connection","date":"2018-09-28T21:01:56.096Z","type":"quit"}
{"nick":"alpha_sh","reason":"Remote host closed the connection","date":"2018-09-28T21:06:47.992Z","type":"quit"}
{"nick":"cloudshu","date":"2018-09-28T21:35:12.995Z","type":"join"}
{"nick":"aki_","date":"2018-09-28T22:34:33.954Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2018-09-28T22:35:03.316Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-28T22:35:03.799Z","type":"nick"}
{"nick":"rpamely","reason":"Quit: Connection closed for inactivity","date":"2018-09-28T23:24:53.869Z","type":"quit"}
{"nick":"Acou_Bass9","date":"2018-09-28T23:35:38.700Z","type":"join"}
{"nick":"Acou_Bass9","reason":"Remote host closed the connection","date":"2018-09-28T23:42:24.939Z","type":"quit"}
{"nick":"keith_miller","date":"2018-09-28T23:44:37.082Z","type":"join"}
