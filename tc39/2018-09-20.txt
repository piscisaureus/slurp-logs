{"nick":"kg4cjv_22","date":"2018-09-20T00:04:11.151Z","type":"join"}
{"nick":"kg4cjv_22","reason":"Remote host closed the connection","date":"2018-09-20T00:05:23.931Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-09-20T00:34:33.627Z","type":"quit"}
{"nick":"aki_","date":"2018-09-20T01:49:10.308Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 260 seconds","date":"2018-09-20T01:50:11.334Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-20T01:50:11.736Z","type":"nick"}
{"nick":"mickdermack8","date":"2018-09-20T02:15:14.705Z","type":"join"}
{"nick":"mickdermack8","reason":"Remote host closed the connection","date":"2018-09-20T02:19:58.486Z","type":"quit"}
{"nick":"howdoi","date":"2018-09-20T03:39:27.536Z","type":"join"}
{"nick":"aki_","date":"2018-09-20T03:55:53.988Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 260 seconds","date":"2018-09-20T03:57:21.308Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-20T03:57:21.642Z","type":"nick"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-09-20T04:48:04.883Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-09-20T04:59:24.914Z","type":"quit"}
{"nick":"Sulak9","date":"2018-09-20T05:28:41.429Z","type":"join"}
{"nick":"Sulak9","reason":"Remote host closed the connection","date":"2018-09-20T05:32:05.778Z","type":"quit"}
{"nick":"aki_","date":"2018-09-20T06:01:38.534Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-09-20T06:02:08.999Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-20T06:02:09.282Z","type":"nick"}
{"nick":"Aquazi","date":"2018-09-20T06:04:31.805Z","type":"join"}
{"nick":"rodsmith","date":"2018-09-20T07:17:10.281Z","type":"join"}
{"nick":"rodsmith","reason":"K-Lined","date":"2018-09-20T07:18:40.193Z","type":"quit"}
{"nick":"akoserwa","date":"2018-09-20T07:20:51.282Z","type":"join"}
{"nick":"Jad8","date":"2018-09-20T07:52:27.276Z","type":"join"}
{"nick":"Jad8","reason":"Remote host closed the connection","date":"2018-09-20T07:54:04.003Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2018-09-20T08:08:08.461Z","type":"quit"}
{"nick":"akirose","date":"2018-09-20T08:08:19.347Z","type":"join"}
{"nick":"bendoin4","date":"2018-09-20T08:19:59.861Z","type":"join"}
{"nick":"bendoin4","reason":"Remote host closed the connection","date":"2018-09-20T08:21:06.177Z","type":"quit"}
{"nick":"joze2","date":"2018-09-20T09:09:45.705Z","type":"join"}
{"nick":"joze2","reason":"Remote host closed the connection","date":"2018-09-20T09:11:19.290Z","type":"quit"}
{"nick":"modrobert26","date":"2018-09-20T09:22:02.999Z","type":"join"}
{"nick":"modrobert26","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-20T09:24:31.833Z","type":"quit"}
{"nick":"akoserwa","reason":"Remote host closed the connection","date":"2018-09-20T09:27:06.721Z","type":"quit"}
{"nick":"Belial`","date":"2018-09-20T09:28:15.369Z","type":"join"}
{"nick":"Belial`","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-20T09:29:47.109Z","type":"quit"}
{"nick":"LRN29","date":"2018-09-20T09:55:06.737Z","type":"join"}
{"nick":"LRN29","reason":"Remote host closed the connection","date":"2018-09-20T09:58:20.816Z","type":"quit"}
{"nick":"AtumT","date":"2018-09-20T10:01:45.410Z","type":"join"}
{"nick":"aki_","date":"2018-09-20T10:14:35.791Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 260 seconds","date":"2018-09-20T10:15:56.328Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-20T10:15:56.663Z","type":"nick"}
{"nick":"lightstalker1","date":"2018-09-20T11:36:05.848Z","type":"join"}
{"nick":"lightstalker1","reason":"Remote host closed the connection","date":"2018-09-20T11:38:35.981Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 264 seconds","date":"2018-09-20T12:22:06.862Z","type":"quit"}
{"nick":"akirose","date":"2018-09-20T12:22:19.809Z","type":"join"}
{"nick":"warthog925","date":"2018-09-20T12:33:04.925Z","type":"join"}
{"nick":"warthog925","reason":"Remote host closed the connection","date":"2018-09-20T12:33:15.784Z","type":"quit"}
{"nick":"jmdyck","date":"2018-09-20T12:34:22.905Z","type":"join"}
{"nick":"cheets_","date":"2018-09-20T13:23:32.336Z","type":"join"}
{"nick":"cheets_","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-20T13:25:57.483Z","type":"quit"}
{"nick":"aki_","date":"2018-09-20T14:29:35.277Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-09-20T14:29:44.799Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-20T14:29:46.441Z","type":"nick"}
{"nick":"surrounder11","date":"2018-09-20T14:52:51.548Z","type":"join"}
{"nick":"surrounder11","reason":"Remote host closed the connection","date":"2018-09-20T14:53:40.502Z","type":"quit"}
{"nick":"jwalden","date":"2018-09-20T15:59:10.058Z","type":"join"}
{"nick":"psyhovi","date":"2018-09-20T16:32:58.192Z","type":"join"}
{"nick":"deem13","date":"2018-09-20T16:33:19.330Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2018-09-20T16:36:18.281Z","type":"quit"}
{"nick":"akirose","date":"2018-09-20T16:36:48.695Z","type":"join"}
{"nick":"deem13","reason":"Remote host closed the connection","date":"2018-09-20T16:37:59.538Z","type":"quit"}
{"nick":"Evilham5","date":"2018-09-20T16:58:14.601Z","type":"join"}
{"nick":"Evilham5","reason":"Remote host closed the connection","date":"2018-09-20T16:59:06.525Z","type":"quit"}
{"nick":"cloudshu","date":"2018-09-20T17:02:17.723Z","type":"join"}
{"nick":"cudgel17","date":"2018-09-20T17:04:43.302Z","type":"join"}
{"nick":"isiahmeadows","date":"2018-09-20T17:05:39.087Z","type":"join"}
{"nick":"isiahmeadows","reason":"Client Quit","date":"2018-09-20T17:06:04.122Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-09-20T17:06:26.305Z","type":"join"}
{"nick":"cudgel17","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-20T17:07:52.304Z","type":"quit"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-09-20T17:16:52.412Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-09-20T17:18:45.276Z","type":"join"}
{"nick":"isiahmeadows","message":"So, I like the idea of ESM, but I've got an issue: I need the ability to load them without caching them. https://esdiscuss.org/topic/uncached-modules","date":"2018-09-20T17:19:08.938Z","type":"message"}
{"nick":"devsnek","message":"export a function which you can call a bunch","date":"2018-09-20T17:19:45.971Z","type":"message"}
{"nick":"devsnek","message":"or a class you construct","date":"2018-09-20T17:19:49.576Z","type":"message"}
{"nick":"devsnek","message":"add a random query","date":"2018-09-20T17:20:24.430Z","type":"message"}
{"nick":"isiahmeadows","message":"devsnek: I'm thinking more down the vein of hot loading, JS-based templates, etc.","date":"2018-09-20T17:20:42.171Z","type":"message"}
{"nick":"isiahmeadows","message":"That's another use case for not caching.","date":"2018-09-20T17:20:58.774Z","type":"message"}
{"nick":"devsnek","message":"hot reloading can be done by engines","date":"2018-09-20T17:21:03.521Z","type":"message"}
{"nick":"devsnek","message":"without changing the spec","date":"2018-09-20T17:21:09.658Z","type":"message"}
{"nick":"isiahmeadows","message":"True.","date":"2018-09-20T17:21:13.657Z","type":"message"}
{"nick":"devsnek","message":"leaving debugging stuff out of the spec means implementors can go crazy","date":"2018-09-20T17:21:33.625Z","type":"message"}
{"nick":"isiahmeadows","message":"But I'm also looking at the fact I'd like to export a module that depends on its parent path.","date":"2018-09-20T17:21:34.648Z","type":"message"}
{"nick":"devsnek","message":"export a function that takes a path","date":"2018-09-20T17:21:52.998Z","type":"message"}
{"nick":"devsnek","message":"`import { X } from 'x'; X(import.meta.url);`","date":"2018-09-20T17:22:05.049Z","type":"message"}
{"nick":"isiahmeadows","message":"I know that's possible, but I'd rather avoid forcing that boilerplate upon the user.","date":"2018-09-20T17:22:24.638Z","type":"message"}
{"nick":"isiahmeadows","message":"I have two specific use cases for that proposal: https://github.com/isiahmeadows/invoke-parallel, where I have to dynamically detect based on the parent path, and https://github.com/isiahmeadows/thallium, where I'd rather load the tests *without* caching, so I can dodge the retained memory overhead in, for example, a theoretical \"watch\" mode.","date":"2018-09-20T17:24:06.643Z","type":"message"}
{"nick":"AtumT_","date":"2018-09-20T17:24:33.957Z","type":"join"}
{"nick":"isiahmeadows","message":"I also have a third-ish one, where I'd be developing a hot-reload mechanism for Node, and I'd like to avoid leaking memory in the process.","date":"2018-09-20T17:24:56.677Z","type":"message"}
{"nick":"isiahmeadows","message":"That last one doesn't have any code written yet, but it's something I'd like to try to tackle.","date":"2018-09-20T17:25:20.195Z","type":"message"}
{"nick":"devsnek","message":"for the first one... you can just not do weird require-resolve-magic stuff","date":"2018-09-20T17:26:34.314Z","type":"message"}
{"nick":"devsnek","message":"nothing else in the ecosystem does that because its difficult to reason with","date":"2018-09-20T17:26:57.300Z","type":"message"}
{"nick":"AtumT","reason":"Ping timeout: 260 seconds","date":"2018-09-20T17:27:01.446Z","type":"quit"}
{"nick":"devsnek","message":"as for the second one, you can just keep importing with different queries","date":"2018-09-20T17:27:37.834Z","type":"message"}
{"nick":"isiahmeadows","message":"But that leaks.","date":"2018-09-20T17:27:51.093Z","type":"message"}
{"nick":"devsnek","message":"whatever caching the host does is up to the host","date":"2018-09-20T17:27:51.343Z","type":"message"}
{"nick":"isiahmeadows","message":"And the host doesn't necessarily know it'll never be loaded again with that query.","date":"2018-09-20T17:28:20.665Z","type":"message"}
{"nick":"isiahmeadows","message":"So it'd be solving the halting problem to correctly infer it, when a directive to the engine would be sufficient.","date":"2018-09-20T17:28:45.959Z","type":"message"}
{"nick":"isiahmeadows","message":"Alternatively, for the second, an \"uncached import\" would be enough for that.","date":"2018-09-20T17:29:11.118Z","type":"message"}
{"nick":"devsnek","message":"what does that even mean","date":"2018-09-20T17:29:21.571Z","type":"message"}
{"nick":"isiahmeadows","message":"Maybe something like `import.uncached(...)`","date":"2018-09-20T17:29:24.199Z","type":"message"}
{"nick":"isiahmeadows","message":"devsnek: Here's a gist of something I'm currently using in Node: https://gist.github.com/isiahmeadows/6f983913e9bacd7cf7ddfa4c6e81f80e","date":"2018-09-20T17:31:49.650Z","type":"message"}
{"nick":"isiahmeadows","message":"That's the CJS equivalent of my suggested `import.uncached(...)` above.","date":"2018-09-20T17:32:10.504Z","type":"message"}
{"nick":"devsnek","message":"yeah but cjs and esm don't logically map together like that","date":"2018-09-20T17:32:49.128Z","type":"message"}
{"nick":"isiahmeadows","message":"Alternatively, maybe a `{ignoreCache: true}` option.","date":"2018-09-20T17:32:52.819Z","type":"message"}
{"nick":"isiahmeadows","message":"I'm aware, but the basic concept is to ignore caching the child altogether, and just do resolution.","date":"2018-09-20T17:33:17.116Z","type":"message"}
{"nick":"devsnek","message":"cjs has this parent/child thing which esm has no concept of","date":"2018-09-20T17:33:20.358Z","type":"message"}
{"nick":"isiahmeadows","message":"I'm aware.","date":"2018-09-20T17:33:31.921Z","type":"message"}
{"nick":"devsnek","message":"because the parent/child thing is a terrible way to think about dependency graphs","date":"2018-09-20T17:33:40.264Z","type":"message"}
{"nick":"isiahmeadows","message":"The concept is to avoid caching, and instead just resolve and load.","date":"2018-09-20T17:33:50.695Z","type":"message"}
{"nick":"isiahmeadows","message":"Whatever that caching uses is of course an implementation detail, and that's the point.","date":"2018-09-20T17:34:09.131Z","type":"message"}
{"nick":"isiahmeadows","message":"Another equivalent I could present is `var foo = r.require(\"ns.foo\"); r.unload(\"ns.foo\")`, where `r` is defined here: https://github.com/isiahmeadows/simple-require-loader/blob/master/r.js","date":"2018-09-20T17:36:09.510Z","type":"message"}
{"nick":"isiahmeadows","message":"In that case, there, too, is no concept of a parent or child module, just a global cache.","date":"2018-09-20T17:36:27.513Z","type":"message"}
{"nick":"devsnek","message":"i still would say that certain design patterns just don't translate between cjs and esm","date":"2018-09-20T17:37:05.247Z","type":"message"}
{"nick":"AtumT","date":"2018-09-20T17:37:41.497Z","type":"join"}
{"nick":"devsnek","message":"python might be a good example of how people build things in module systems like this","date":"2018-09-20T17:37:59.504Z","type":"message"}
{"nick":"AtumT_","reason":"Ping timeout: 252 seconds","date":"2018-09-20T17:38:21.961Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-09-20T17:44:27.655Z","type":"part"}
{"nick":"isiahmeadows","date":"2018-09-20T17:44:43.501Z","type":"join"}
{"nick":"isiahmeadows","message":"devsnek: The first one (dynamically calculated imports) might not directly translate (I've been looking into dynamic imports), but for the non-caching import, you could add a third parameter to https://tc39.github.io/ecma262/#sec-hostresolveimportedmodule, modify the third requirement to only require idempotence iff that third parameter is `true`, and update callers accordingly.","date":"2018-09-20T17:44:52.458Z","type":"message"}
{"nick":"devsnek","message":"yeah you *could*","date":"2018-09-20T17:45:09.965Z","type":"message"}
{"nick":"devsnek","message":"i think it would be bad practice though","date":"2018-09-20T17:45:16.520Z","type":"message"}
{"nick":"devsnek","message":"i don't think the problem here is technical feasibility","date":"2018-09-20T17:45:45.251Z","type":"message"}
{"nick":"isiahmeadows","message":"But my suggested verbose syntax of `import.uncached(\"foo\")` would make it *abundantly clear* that it's not really what you want to do 99% of the time.","date":"2018-09-20T17:45:49.552Z","type":"message"}
{"nick":"devsnek","message":"i don't think you ever want to do it","date":"2018-09-20T17:46:09.347Z","type":"message"}
{"nick":"isiahmeadows","message":"My concern is memory, as noted above.","date":"2018-09-20T17:46:22.169Z","type":"message"}
{"nick":"devsnek","message":"node has worker threads now","date":"2018-09-20T17:46:30.531Z","type":"message"}
{"nick":"devsnek","message":"spawn a new one for each series of testing","date":"2018-09-20T17:46:35.218Z","type":"message"}
{"nick":"isiahmeadows","message":"My framework runs in more than just Node, BTW.","date":"2018-09-20T17:46:48.425Z","type":"message"}
{"nick":"isiahmeadows","message":"It also runs in the browser.","date":"2018-09-20T17:46:56.570Z","type":"message"}
{"nick":"devsnek","message":"browsers have web workers","date":"2018-09-20T17:46:56.754Z","type":"message"}
{"nick":"devsnek","message":"spawn a new one for each series of testing","date":"2018-09-20T17:47:01.556Z","type":"message"}
{"nick":"isiahmeadows","message":"But you lack the DOM API.","date":"2018-09-20T17:47:05.767Z","type":"message"}
{"nick":"devsnek","message":"lol if you're messing with some global state import.uncached feels even more dangerous","date":"2018-09-20T17:47:42.836Z","type":"message"}
{"nick":"isiahmeadows","message":"How do you plan to do UI testing? (Not all frameworks run particularly well outside the DOM.)","date":"2018-09-20T17:47:54.361Z","type":"message"}
{"nick":"devsnek","message":"use puppeteer","date":"2018-09-20T17:48:00.224Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: spawn an iframe, not worker if you want dom","date":"2018-09-20T17:48:12.713Z","type":"message"}
{"nick":"devsnek","message":"oh yeah iframes are a thing","date":"2018-09-20T17:48:23.721Z","type":"message"}
{"nick":"isiahmeadows","message":"That solves testing Chrome, but what about Safari/Firefox","date":"2018-09-20T17:48:25.229Z","type":"message"}
{"nick":"isiahmeadows","message":"bradleymeck: Fair enough.","date":"2018-09-20T17:48:39.771Z","type":"message"}
{"nick":"isiahmeadows","message":"What about other environments, like embedded and other server-side stuff?","date":"2018-09-20T17:49:11.563Z","type":"message"}
{"nick":"devsnek","message":"it depends on the host","date":"2018-09-20T17:49:26.656Z","type":"message"}
{"nick":"devsnek","message":"like i've been saying","date":"2018-09-20T17:49:30.232Z","type":"message"}
{"nick":"devsnek","message":"perhaps you spawn a new process for each round of testing","date":"2018-09-20T17:49:50.716Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: run chrome/firefox headless or jsdom it","date":"2018-09-20T17:49:56.019Z","type":"message"}
{"nick":"isiahmeadows","message":"Alternatively, would it make better sense to push implementations to offer the ability to remove a module from its cache via its `import.meta` or exports namespace?","date":"2018-09-20T17:49:57.791Z","type":"message"}
{"nick":"isiahmeadows","message":"*\"and\", not \"or\"","date":"2018-09-20T17:50:11.253Z","type":"message"}
{"nick":"bradleymeck","message":"removing stuff is not as simple as removing from the cache","date":"2018-09-20T17:50:20.021Z","type":"message"}
{"nick":"bradleymeck","message":"lots of things leak references","date":"2018-09-20T17:50:29.863Z","type":"message"}
{"nick":"isiahmeadows","message":"I'm aware. My main concern is that of module leakage, not other references.","date":"2018-09-20T17:50:48.720Z","type":"message"}
{"nick":"devsnek","message":"in theory you can think up a system but in practice it will be much messier","date":"2018-09-20T17:51:07.512Z","type":"message"}
{"nick":"devsnek","message":"and most likely nothing will ever be able to be collected","date":"2018-09-20T17:51:17.664Z","type":"message"}
{"nick":"isiahmeadows","message":"devsnek: You can hack some module systems to properly uncache and collect an entire graph, and although I haven't developed such a thing for Node, I know I could. I'd have to do a mark + sweep to do it with any efficiency, though.","date":"2018-09-20T17:52:42.551Z","type":"message"}
{"nick":"isiahmeadows","message":"A concurrent one, I mean.","date":"2018-09-20T17:52:50.838Z","type":"message"}
{"nick":"isiahmeadows","message":"But a native assist would be helpful here. And where the engine also knows what references what (both modules and normal objects), it could also collect at least *some* things. I know that worst case, you can't collect anything, but I don't see the point in catering to that.","date":"2018-09-20T17:53:54.949Z","type":"message"}
{"nick":"azarus14","date":"2018-09-20T17:54:33.227Z","type":"join"}
{"nick":"isiahmeadows","message":"The main thing they'd have to change is they can't treat modules as fully persistent internally.","date":"2018-09-20T17:54:39.907Z","type":"message"}
{"nick":"devsnek","message":"engines already collect a lot of things, but no one is collecting modules because they represent the environment itself","date":"2018-09-20T17:54:48.488Z","type":"message"}
{"nick":"isiahmeadows","message":"You can already change and manipulate the environment *some* - look at Node's loader hooks.","date":"2018-09-20T17:55:25.039Z","type":"message"}
{"nick":"isiahmeadows","message":"For one ES6 analogy.","date":"2018-09-20T17:56:01.381Z","type":"message"}
{"nick":"devsnek","message":"node has resolve and dynamic instantiate","date":"2018-09-20T17:56:04.948Z","type":"message"}
{"nick":"isiahmeadows","message":"Yep.","date":"2018-09-20T17:56:09.243Z","type":"message"}
{"nick":"devsnek","message":"dynamic instantiate is definitely getting removed","date":"2018-09-20T17:56:11.343Z","type":"message"}
{"nick":"devsnek","message":"and resolve is part of the spec","date":"2018-09-20T17:56:15.595Z","type":"message"}
{"nick":"azarus14","reason":"Remote host closed the connection","date":"2018-09-20T17:56:17.057Z","type":"quit"}
{"nick":"isiahmeadows","message":"devsnek: do you have any idea where the talk about dynamic instantiate being removed is taking place?","date":"2018-09-20T17:56:37.378Z","type":"message"}
{"nick":"devsnek","message":"i don't think there's any formal discussion","date":"2018-09-20T17:56:55.756Z","type":"message"}
{"nick":"devsnek","message":"but its a terrible api and we can do better","date":"2018-09-20T17:57:03.997Z","type":"message"}
{"nick":"isiahmeadows","message":"Fair enough, and I agree the API is terrible.","date":"2018-09-20T17:57:29.244Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: its talked about in various places","date":"2018-09-20T17:57:33.075Z","type":"message"}
{"nick":"bradleymeck","message":"if you join the Realms calls, or look at the youtube for the Modules WG whenever we had that loader presentation","date":"2018-09-20T17:57:53.251Z","type":"message"}
{"nick":"bradleymeck","message":"basically exposing first class value manipution is hard","date":"2018-09-20T17:58:02.669Z","type":"message"}
{"nick":"isiahmeadows","message":"Okay.","date":"2018-09-20T17:58:17.526Z","type":"message"}
{"nick":"isiahmeadows","message":"I like the ES proposal that's written to replace it way better.","date":"2018-09-20T17:58:44.172Z","type":"message"}
{"nick":"devsnek","message":"which proposal to replace what","date":"2018-09-20T17:59:02.005Z","type":"message"}
{"nick":"devsnek","message":"the dynamic namespace one?","date":"2018-09-20T17:59:15.204Z","type":"message"}
{"nick":"isiahmeadows","message":"https://github.com/guybedford/proposal-dynamic-modules","date":"2018-09-20T17:59:22.161Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2018-09-20T17:59:33.255Z","type":"message"}
{"nick":"isiahmeadows","message":"But anyways, I'd still like the ability to load a module without caching it, to cut down on memory issues with reloading files. My two main use cases personally are that of 1. loading and watching large amounts of tests without creating memory issues, and 2. I'd like to experiment with server-side JS view templates (and hot-swapping those).","date":"2018-09-20T18:05:48.978Z","type":"message"}
{"nick":"isiahmeadows","message":"devsnek: I just did a writeup of probably a better way to approach this: https://esdiscuss.org/topic/removing-a-module-from-the-cache","date":"2018-09-20T18:33:58.244Z","type":"message"}
{"nick":"devsnek","message":"we 100% can't modify the cache","date":"2018-09-20T18:34:35.042Z","type":"message"}
{"nick":"isiahmeadows","message":"It doesn't require actual syntax, just host cooperation (which it can always deny).","date":"2018-09-20T18:34:41.137Z","type":"message"}
{"nick":"devsnek","message":"loading without cache is one thing","date":"2018-09-20T18:34:55.891Z","type":"message"}
{"nick":"devsnek","message":"removing from cache is another entirely","date":"2018-09-20T18:35:02.893Z","type":"message"}
{"nick":"isiahmeadows","message":"Fair enough.","date":"2018-09-20T18:35:18.466Z","type":"message"}
{"nick":"isiahmeadows","message":"Either way, loading without cache and removing from cache would be functionally equivalent for my use cases.","date":"2018-09-20T18:35:43.986Z","type":"message"}
{"nick":"isiahmeadows","message":"I just want the ability to override the cache somehow.","date":"2018-09-20T18:36:10.680Z","type":"message"}
{"nick":"isiahmeadows","message":"Ignoring and removing both give me a means to the end.","date":"2018-09-20T18:36:35.553Z","type":"message"}
{"nick":"aki_","date":"2018-09-20T18:42:57.300Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-09-20T18:43:33.692Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-20T18:43:34.024Z","type":"nick"}
{"nick":"ljharb","message":"that def sounds like something outside the language tho","date":"2018-09-20T19:08:24.177Z","type":"message"}
{"nick":"psyhovi","reason":"Quit: Page closed","date":"2018-09-20T19:11:54.916Z","type":"quit"}
{"nick":"s8548a_16","date":"2018-09-20T19:13:32.435Z","type":"join"}
{"nick":"isiahmeadows","message":"The \"removing from cache\" concept is why I suggested only a few extra hooks and minor invariant tweaks, so an implementation + host choosing to allow removing modules from cache don't have to worry about violating the spec in the process.","date":"2018-09-20T19:13:40.331Z","type":"message"}
{"nick":"isiahmeadows","message":"Technically, doing nothing (and not exposing anything) would still be spec-compatible with that change I suggested there - the extra restrictions would just be implementation-specific extensions to restrict that mutability.","date":"2018-09-20T19:14:56.545Z","type":"message"}
{"nick":"s8548a_16","reason":"K-Lined","date":"2018-09-20T19:15:03.474Z","type":"quit"}
{"nick":"isiahmeadows","message":"ljharb:","date":"2018-09-20T19:15:06.248Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: i'm assuming you mean the global cache not the local cache","date":"2018-09-20T19:35:11.156Z","type":"message"}
{"nick":"bradleymeck","message":"the localized cache invariant seems quite important","date":"2018-09-20T19:35:20.815Z","type":"message"}
{"nick":"isiahmeadows","message":"Correct.","date":"2018-09-20T19:35:25.754Z","type":"message"}
{"nick":"isiahmeadows","message":"Although I do need the local cache, too.","date":"2018-09-20T19:35:59.424Z","type":"message"}
{"nick":"bradleymeck","message":"i'm still unsure of a variety of things about removing code though since dangling and gross behavior is easy to fall into","date":"2018-09-20T19:36:09.472Z","type":"message"}
{"nick":"bradleymeck","message":"i would refuse to remove the local cache invariant","date":"2018-09-20T19:36:18.048Z","type":"message"}
{"nick":"bradleymeck","message":"an alternative would be loading modules into an isolated cache","date":"2018-09-20T19:36:29.583Z","type":"message"}
{"nick":"isiahmeadows","message":"But simply dodging the local cache is enough for my use case, because I can always reimplement the caching I need (I need something more complicated than the naive spec version).","date":"2018-09-20T19:36:51.451Z","type":"message"}
{"nick":"bradleymeck","message":"i would not want to allow that","date":"2018-09-20T19:37:05.349Z","type":"message"}
{"nick":"isiahmeadows","message":"This would be only something I would need to manage hot reloading, and I'd only be using absolute paths here.","date":"2018-09-20T19:37:31.191Z","type":"message"}
{"nick":"isiahmeadows","message":"So in reality, I just need the ability to import globally rather than locally.","date":"2018-09-20T19:38:08.037Z","type":"message"}
{"nick":"isiahmeadows","message":"And dodging the global cache in the process.","date":"2018-09-20T19:38:16.339Z","type":"message"}
{"nick":"isiahmeadows","message":"Basically, it's a non-local import \"proxy\" of sorts - I'm not doing it for myself, but on behalf of others.","date":"2018-09-20T19:38:44.665Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: this sounds more like something that devtools would want to provide","date":"2018-09-20T19:39:03.516Z","type":"message"}
{"nick":"bradleymeck","message":"it affects all sorts of things that have been listed before","date":"2018-09-20T19:39:13.987Z","type":"message"}
{"nick":"bradleymeck","message":"mocking and APMs etc.","date":"2018-09-20T19:39:22.267Z","type":"message"}
{"nick":"isiahmeadows","message":"This is for a particular development-oriented tool, yes.","date":"2018-09-20T19:39:29.147Z","type":"message"}
{"nick":"bradleymeck","message":"APMs have been largely fine with the idea of doing these ahead of time","date":"2018-09-20T19:39:35.250Z","type":"message"}
{"nick":"isiahmeadows","message":"It's for a test runner, and I need it for file watching.","date":"2018-09-20T19:39:52.444Z","type":"message"}
{"nick":"bradleymeck","message":"stuff like https://github.com/bmeck/node-apm-loader-example","date":"2018-09-20T19:39:55.356Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: i don't have a good solution for you right now, but deleting seems a bit like the status quo, not necessarily the best approach","date":"2018-09-20T19:40:25.316Z","type":"message"}
{"nick":"bradleymeck","message":"loading some dependency into a separate global module map than the default global one seems saner","date":"2018-09-20T19:40:54.105Z","type":"message"}
{"nick":"isiahmeadows","message":"I don't need the ability to mock (although I could do a lot of mocking). And I agree that deleting isn't ideal - my initial request is for importing ignoring cache.","date":"2018-09-20T19:40:56.924Z","type":"message"}
{"nick":"bradleymeck","message":"ignoring cache is complex as well since you probably don't want to reload *all* the dependencies","date":"2018-09-20T19:41:21.577Z","type":"message"}
{"nick":"bradleymeck","message":"if I reload foo which imports bar, does that intend to completely reload bar","date":"2018-09-20T19:41:43.175Z","type":"message"}
{"nick":"bradleymeck","message":"if so, why not just use a worker or something","date":"2018-09-20T19:41:48.730Z","type":"message"}
{"nick":"isiahmeadows","message":"For a concrete example, if a file changes, I need to re-import it ignoring any cache, and I know I can't rely on the runtime to detect this - I know of none that does that.","date":"2018-09-20T19:41:50.315Z","type":"message"}
{"nick":"bradleymeck","message":"reimport the file, or the entire dep graph that the file is an entrypoint to?","date":"2018-09-20T19:42:19.591Z","type":"message"}
{"nick":"bradleymeck","message":"or something in between","date":"2018-09-20T19:42:45.069Z","type":"message"}
{"nick":"isiahmeadows","message":"And I don't intend on reloading `bar` if it's a dependency (if it's a local module, I *do*).","date":"2018-09-20T19:43:48.765Z","type":"message"}
{"nick":"isiahmeadows","message":"Specifically, I don't plan to reload it unless it changes.","date":"2018-09-20T19:43:52.420Z","type":"message"}
{"nick":"isiahmeadows","message":"And of course, I'd need to reload its dependents.","date":"2018-09-20T19:44:01.641Z","type":"message"}
{"nick":"bradleymeck","message":"what is a \"local module\"?","date":"2018-09-20T19:44:16.496Z","type":"message"}
{"nick":"isiahmeadows","message":"Edit: just ignore that message. I didn't quite have all my thoughts collected when I typed that.","date":"2018-09-20T19:44:45.833Z","type":"message"}
{"nick":"bradleymeck","message":"this isn't ignoring the global module map cache then","date":"2018-09-20T19:44:55.441Z","type":"message"}
{"nick":"isiahmeadows","message":"But I plan to reload only files that changed.","date":"2018-09-20T19:45:02.201Z","type":"message"}
{"nick":"bradleymeck","message":"that would be hard","date":"2018-09-20T19:45:16.749Z","type":"message"}
{"nick":"isiahmeadows","message":"And that's why I'm veering more and more towards global cache manipulation.","date":"2018-09-20T19:45:20.678Z","type":"message"}
{"nick":"bradleymeck","message":"it probably wouldn't help","date":"2018-09-20T19:45:29.169Z","type":"message"}
{"nick":"bradleymeck","message":"if app imports foo and foo is reloaded, app still points to the old foo","date":"2018-09-20T19:45:46.011Z","type":"message"}
{"nick":"isiahmeadows","message":"I know it's hard, but if I can get sufficient engine hooks to read modules' imports, I can build the graph and work from there.","date":"2018-09-20T19:45:49.366Z","type":"message"}
{"nick":"bradleymeck","message":"you need to do more than cache manip is what i'm saying","date":"2018-09-20T19:46:07.631Z","type":"message"}
{"nick":"isiahmeadows","message":"And the issue of dependents is why I need access to the graph (so I can invert it).","date":"2018-09-20T19:46:07.830Z","type":"message"}
{"nick":"bradleymeck","message":"inverting the graph how","date":"2018-09-20T19:46:19.880Z","type":"message"}
{"nick":"isiahmeadows","message":"But my point is I *also* need cache manipulation to help prevent memory leaks.","date":"2018-09-20T19:46:29.140Z","type":"message"}
{"nick":"bradleymeck","message":"you shouldn't reorder evaluation, and you can't change the bindings","date":"2018-09-20T19:46:33.923Z","type":"message"}
{"nick":"isiahmeadows","message":"And what I mean by \"inverting the graph\" is instead of modeling it like what Node does, parent to child, children would be aware of their parents instead. If I reload a child, I have to really reload all the parents first, and they can then just naturally reload the child if necessary.","date":"2018-09-20T19:47:29.147Z","type":"message"}
{"nick":"bradleymeck","message":"you can't have child->parent really","date":"2018-09-20T19:47:49.282Z","type":"message"}
{"nick":"bradleymeck","message":"you can  have child->parent[] for static imports","date":"2018-09-20T19:48:01.717Z","type":"message"}
{"nick":"bradleymeck","message":"and dynamic import gets even harder","date":"2018-09-20T19:48:08.752Z","type":"message"}
{"nick":"isiahmeadows","message":"That's what I meant.","date":"2018-09-20T19:48:11.768Z","type":"message"}
{"nick":"isiahmeadows","message":"And it's also why I want an engine hook, too (although that doesn't require a spec change)","date":"2018-09-20T19:48:24.936Z","type":"message"}
{"nick":"bradleymeck","message":"so, not invert","date":"2018-09-20T19:48:26.568Z","type":"message"}
{"nick":"bradleymeck","message":"just track?","date":"2018-09-20T19:48:29.001Z","type":"message"}
{"nick":"utrack4","date":"2018-09-20T19:48:47.901Z","type":"join"}
{"nick":"isiahmeadows","message":"Probably a better term. I don't come from a CS background, so I don't always have all my terminology in order. :-)","date":"2018-09-20T19:48:49.818Z","type":"message"}
{"nick":"utrack4","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-09-20T19:49:39.306Z","type":"quit"}
{"nick":"bradleymeck","message":"that sounds doable, but under the hood it probably would just be like adding unique query strings and kicking off the entrypoints when loading","date":"2018-09-20T19:50:01.235Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not sure how things like servers would work, since the top node of the module graph likely is spinning up a server that listens to a port","date":"2018-09-20T19:50:25.669Z","type":"message"}
{"nick":"isiahmeadows","message":"Kind of, but unique query strings create a risk of memory leaks if I can't just flat out remove it from the global cache at least.","date":"2018-09-20T19:50:37.019Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: hence the recommendations of workers etc","date":"2018-09-20T19:51:03.137Z","type":"message"}
{"nick":"isiahmeadows","message":"And I do get that it wouldn't always work perfectly, but I do plan to have a limit - it can't propagate outside the manager maintaining all of that mess.","date":"2018-09-20T19:51:10.661Z","type":"message"}
{"nick":"bradleymeck","message":"is there a reason it needs to do all these replacements in the same realm?","date":"2018-09-20T19:51:21.289Z","type":"message"}
{"nick":"bradleymeck","message":"deleting seems to be rather unsafe so taking that approach isn't super appealing","date":"2018-09-20T19:52:38.039Z","type":"message"}
{"nick":"bradleymeck","message":"grouping modules to safe to GC sets seems sane","date":"2018-09-20T19:52:56.185Z","type":"message"}
{"nick":"bradleymeck","message":"your reloading would have an overlap of the new graph and the old graph","date":"2018-09-20T19:53:19.943Z","type":"message"}
{"nick":"isiahmeadows","message":"I'm okay if I have to do it on a dedicated realm, BTW. It doesn't have to be the same realm as the controller. I just want all the managed modules to be on the same realm relative to each other.","date":"2018-09-20T19:54:02.052Z","type":"message"}
{"nick":"bradleymeck","message":"so just make sure that modules cannot GC if they are in a set that isn't marked as safe to delete once some event occurs","date":"2018-09-20T19:54:06.176Z","type":"message"}
{"nick":"isiahmeadows","message":"*Separate, dedicated realm, I mean.","date":"2018-09-20T19:54:36.100Z","type":"message"}
{"nick":"bradleymeck","message":"it seems doable but it seems like it would probably be saner to have `import` let you group modules and then a fn or something that says a group is safe to GC","date":"2018-09-20T19:54:43.342Z","type":"message"}
{"nick":"isiahmeadows","message":"How so?","date":"2018-09-20T19:54:58.153Z","type":"message"}
{"nick":"bradleymeck","message":"that would be interesting, but I'm not really at bandwidth to help","date":"2018-09-20T19:55:03.496Z","type":"message"}
{"nick":"isiahmeadows","message":"I'll try to, if I can find time, prototype this for Node first using its CJS system, then I'll try to ping back with it to see if it could be adapted for ESM.","date":"2018-09-20T19:56:02.163Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: if I have app->b app->c, create a \"module graph\" with [app,b,c], never store it in the global module map","date":"2018-09-20T19:56:12.819Z","type":"message"}
{"nick":"bradleymeck","message":"b updates","date":"2018-09-20T19:56:16.390Z","type":"message"}
{"nick":"bradleymeck","message":"make an entirely new module graph with [updated a, updated b, old c], never store it in the global module map","date":"2018-09-20T19:56:38.090Z","type":"message"}
{"nick":"bradleymeck","message":"mark the original graph as GC-able","date":"2018-09-20T19:56:48.360Z","type":"message"}
{"nick":"isiahmeadows","message":"Fair enough, and that's basically an immutable equivalent to what I was previously thinking of doing.","date":"2018-09-20T19:57:13.969Z","type":"message"}
{"nick":"bradleymeck","message":"old app & old b no longer being in strongly held graph would be able to be GC'd","date":"2018-09-20T19:57:24.649Z","type":"message"}
{"nick":"bradleymeck","message":"isiahmeadows: just be aware that the less static/immutable stuff you do in CJS, the harder to get it to match the design of ESM","date":"2018-09-20T19:58:17.428Z","type":"message"}
{"nick":"isiahmeadows","message":"I might try that at some point, just regenerating an immutable, persistent graph that, every time I \"reload\" a modue, I create a replacement \"current\" graph with all that ready. It's a bit more Erlang-like, and I think that's way better.","date":"2018-09-20T19:58:48.237Z","type":"message"}
{"nick":"bradleymeck","message":"this is probably doable without changes to the spec itself since if you aren't wanting to replace bindings","date":"2018-09-20T19:59:48.779Z","type":"message"}
{"nick":"bradleymeck","message":"the question is mostly how to expose these module graphs that are not directly in the global module map","date":"2018-09-20T20:00:11.146Z","type":"message"}
{"nick":"isiahmeadows","message":"Potentially, but it'd still require some means of loading a module by absolute descriptor, and of course, I'd still need the ability to reference individual modules and create synthetic module graphs to cache.","date":"2018-09-20T20:01:05.432Z","type":"message"}
{"nick":"bradleymeck","message":"to a cache","date":"2018-09-20T20:02:25.655Z","type":"message"}
{"nick":"bradleymeck","message":"the key is you want modules that aren't in the permanent global cache","date":"2018-09-20T20:02:41.853Z","type":"message"}
{"nick":"isiahmeadows","message":"I know, I meant \"to cache locally using my own cache of sorts\"","date":"2018-09-20T20:03:02.757Z","type":"message"}
{"nick":"isiahmeadows","message":"Where that \"cache\" is basically just a `this.currentGraph` property.","date":"2018-09-20T20:03:18.453Z","type":"message"}
{"nick":"isiahmeadows","message":"Sorry for a poor choice of words there.","date":"2018-09-20T20:03:45.471Z","type":"message"}
{"nick":"bradleymeck","message":"i need to think on `import()`/`require()` a bit more","date":"2018-09-20T20:06:46.053Z","type":"message"}
{"nick":"aki_","date":"2018-09-20T20:48:08.921Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2018-09-20T20:49:07.294Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-20T20:49:07.644Z","type":"nick"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-09-20T21:33:07.707Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-09-20T21:33:43.605Z","type":"join"}
{"nick":"isiahmeadows","reason":"Client Quit","date":"2018-09-20T21:33:54.973Z","type":"quit"}
{"nick":"ryzokuken","reason":"Ping timeout: 252 seconds","date":"2018-09-20T22:48:34.115Z","type":"quit"}
{"nick":"ryzokuken","date":"2018-09-20T22:50:20.725Z","type":"join"}
{"nick":"aki_","date":"2018-09-20T22:54:38.931Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-09-20T22:55:15.000Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-20T22:55:15.300Z","type":"nick"}
{"nick":"irclogger_com","date":"2018-09-20T23:14:02.471Z","type":"join"}
{"nick":"irclogger_com","reason":"Killed (Unit193 (Spam is not permitted on freenode.))","date":"2018-09-20T23:16:33.240Z","type":"quit"}
{"nick":"DangerM4","date":"2018-09-20T23:33:12.141Z","type":"join"}
{"nick":"dhtns24","date":"2018-09-20T23:34:23.425Z","type":"join"}
{"nick":"DangerM4","reason":"Read error: Connection reset by peer","date":"2018-09-20T23:35:31.964Z","type":"quit"}
{"nick":"dhtns24","reason":"Remote host closed the connection","date":"2018-09-20T23:36:57.342Z","type":"quit"}
