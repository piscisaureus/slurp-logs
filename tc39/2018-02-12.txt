{"nick":"gibson042","date":"2018-02-12T00:24:05.799Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2018-02-12T00:29:08.727Z","type":"quit"}
{"nick":"Jayflux","reason":"Ping timeout: 260 seconds","date":"2018-02-12T00:41:24.949Z","type":"quit"}
{"nick":"gibson042","date":"2018-02-12T00:43:07.312Z","type":"join"}
{"nick":"Jayflux","date":"2018-02-12T00:43:58.658Z","type":"join"}
{"nick":"Jayflux","reason":"Changing host","date":"2018-02-12T00:43:58.803Z","type":"quit"}
{"nick":"Jayflux","date":"2018-02-12T00:43:58.803Z","type":"join"}
{"nick":"Jayflux","reason":"Quit: Leaving","date":"2018-02-12T00:56:49.455Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-12T01:47:26.695Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 255 seconds","date":"2018-02-12T01:50:50.828Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-02-12T02:08:15.518Z","type":"quit"}
{"nick":"jschoi","message":"Sorry, I have another question about proposal writing, this one about the main specification. I’m trying to understand _In_ in `Expression[In, Yield, Await]`. I understand that it is true as long as the expression is a descendant of parentheses, WithStatement, ReturnStatement, template literals, ExpressionStatement, and so on…But when is it ever false?","date":"2018-02-12T02:10:11.071Z","type":"message"}
{"nick":"jschoi","message":"In other words, what is the function of `In`?","date":"2018-02-12T02:10:50.586Z","type":"message"}
{"nick":"keith_miller","reason":"Read error: Connection reset by peer","date":"2018-02-12T02:20:08.028Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-12T02:20:51.942Z","type":"join"}
{"nick":"jmdyck","message":"jschoi: To find when it's false, scan the spec for ~In.","date":"2018-02-12T02:31:46.485Z","type":"message"}
{"nick":"jmdyck","message":"You'll find it in certain right-hand-sides of IterationStatement.","date":"2018-02-12T02:32:11.317Z","type":"message"}
{"nick":"jschoi","message":"Oh, right; thanks.","date":"2018-02-12T02:32:39.404Z","type":"message"}
{"nick":"jmdyck","message":"To find its function, scan for +In or ~In where it's the first thing in a right-hand-side. I think the only one is a +In in RelationalExpression.","date":"2018-02-12T02:36:06.729Z","type":"message"}
{"nick":"jmdyck","message":"Thus: +In allows RelationalExpressions of the form `X in Y`; ~In disallows them.","date":"2018-02-12T02:37:06.132Z","type":"message"}
{"nick":"gskachkov","reason":"Ping timeout: 256 seconds","date":"2018-02-12T02:44:46.712Z","type":"quit"}
{"nick":"jschoi","message":"Thanks!","date":"2018-02-12T02:45:23.514Z","type":"message"}
{"nick":"jmdyck","message":"no problem.","date":"2018-02-12T02:45:32.353Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-12T03:05:46.366Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-12T03:09:34.839Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-12T03:56:38.895Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-12T04:01:50.941Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-02-12T04:02:29.540Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-12T04:03:58.947Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-02-12T05:05:45.807Z","type":"quit"}
{"nick":"caridy","date":"2018-02-12T05:14:41.480Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-12T05:14:49.487Z","type":"quit"}
{"nick":"caridy","date":"2018-02-12T05:15:18.196Z","type":"join"}
{"nick":"bakkot_","date":"2018-02-12T05:15:55.952Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 260 seconds","date":"2018-02-12T05:20:07.198Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-12T06:08:15.689Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-12T06:11:17.711Z","type":"join"}
{"nick":"gskachkov","date":"2018-02-12T07:43:50.479Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-12T07:53:41.052Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-12T08:28:50.797Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 248 seconds","date":"2018-02-12T08:32:33.386Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-02-12T08:36:44.642Z","type":"quit"}
{"nick":"aklein","date":"2018-02-12T08:57:24.595Z","type":"quit"}
{"nick":"aklein","date":"2018-02-12T08:57:42.203Z","type":"join"}
{"nick":"TabAtkins","date":"2018-02-12T09:09:46.219Z","type":"quit"}
{"nick":"TabAtkins","date":"2018-02-12T09:10:05.447Z","type":"join"}
{"nick":"bret","date":"2018-02-12T09:11:30.730Z","type":"quit"}
{"nick":"bret","date":"2018-02-12T09:13:04.900Z","type":"join"}
{"nick":"samth","date":"2018-02-12T09:16:30.619Z","type":"quit"}
{"nick":"samth","date":"2018-02-12T09:16:54.509Z","type":"join"}
{"nick":"bterlson","date":"2018-02-12T09:24:31.457Z","type":"quit"}
{"nick":"bterlson","date":"2018-02-12T09:24:49.058Z","type":"join"}
{"nick":"flet","date":"2018-02-12T09:48:11.799Z","type":"quit"}
{"nick":"flet","date":"2018-02-12T09:48:35.021Z","type":"join"}
{"nick":"thejameskyle","date":"2018-02-12T11:08:10.491Z","type":"quit"}
{"nick":"thejameskyle","date":"2018-02-12T11:08:27.685Z","type":"join"}
{"nick":"maggiepint","date":"2018-02-12T11:11:11.567Z","type":"quit"}
{"nick":"maggiepint","date":"2018-02-12T11:11:29.681Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-02-12T11:25:08.031Z","type":"quit"}
{"nick":"mylesborins","date":"2018-02-12T11:25:38.624Z","type":"join"}
{"nick":"AtumT","date":"2018-02-12T11:55:25.561Z","type":"join"}
{"nick":"bradleymeck","date":"2018-02-12T13:11:56.173Z","type":"join"}
{"nick":"jmdyck","date":"2018-02-12T13:23:13.659Z","type":"join"}
{"nick":"alextes","reason":"Read error: Connection reset by peer","date":"2018-02-12T13:37:47.316Z","type":"quit"}
{"nick":"wycats","date":"2018-02-12T13:43:41.787Z","type":"quit"}
{"nick":"wycats","date":"2018-02-12T13:44:33.545Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-12T13:47:13.434Z","type":"quit"}
{"nick":"alextes","date":"2018-02-12T14:02:01.686Z","type":"join"}
{"nick":"mathiasbynens","date":"2018-02-12T14:03:13.700Z","type":"quit"}
{"nick":"mathiasbynens","date":"2018-02-12T14:03:37.415Z","type":"join"}
{"nick":"ebryn","date":"2018-02-12T14:06:01.794Z","type":"quit"}
{"nick":"ebryn","date":"2018-02-12T14:06:20.393Z","type":"join"}
{"nick":"bradleymeck","date":"2018-02-12T14:09:18.053Z","type":"join"}
{"nick":"zkat","date":"2018-02-12T14:31:32.190Z","type":"quit"}
{"nick":"zkat","date":"2018-02-12T14:31:56.350Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit:  ","date":"2018-02-12T14:43:10.516Z","type":"quit"}
{"nick":"AtumT_","date":"2018-02-12T15:06:02.358Z","type":"join"}
{"nick":"bradleymeck","date":"2018-02-12T15:08:29.274Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 256 seconds","date":"2018-02-12T15:09:07.585Z","type":"quit"}
{"nick":"AtumT","date":"2018-02-12T15:18:37.937Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 256 seconds","date":"2018-02-12T15:20:15.404Z","type":"quit"}
{"nick":"Wizek","date":"2018-02-12T16:20:35.120Z","type":"quit"}
{"nick":"Wizek","date":"2018-02-12T16:21:46.062Z","type":"join"}
{"nick":"jschoi","message":"The static semantic rule `Contains()` is implicitly defined for many productions (https://tc39.github.io/ecma262/#sec-static-semantic-rules). It is is overridden by certain syntax such as function definitions (https://tc39.github.io/ecma262/#sec-function-definitions-static-semantics-contains), which notes, “Static semantic rules that depend upon substructure generally do not look into function definitions.” But when","date":"2018-02-12T16:21:49.260Z","type":"message"}
{"nick":"jschoi","message":"is `Contains()` actually used? I see many uses for another static semantic rule, `ContainsExpression()`, about whose relationship with `Contains()` I am uncertain. But I can find no such uses for `Contains()` itself.","date":"2018-02-12T16:21:49.404Z","type":"message"}
{"nick":"caridy","date":"2018-02-12T16:31:43.024Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-12T16:31:44.978Z","type":"quit"}
{"nick":"jschoi","date":"2018-02-12T16:49:32.248Z","type":"quit"}
{"nick":"jschoi","date":"2018-02-12T16:49:44.162Z","type":"join"}
{"nick":"jmdyck","message":"'Contains' isn't invoked with prefix-parenthesis syntax.","date":"2018-02-12T16:51:35.263Z","type":"message"}
{"nick":"jmdyck","message":"It's invoked with infix syntax.","date":"2018-02-12T16:52:01.004Z","type":"message"}
{"nick":"jmdyck","message":"E.g. https://tc39.github.io/ecma262/#sec-object-initializer-static-semantics-computedpropertycontains","date":"2018-02-12T16:52:48.850Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-12T16:56:20.066Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-12T17:05:37.272Z","type":"join"}
{"nick":"caridy","date":"2018-02-12T17:12:53.508Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-12T17:13:01.553Z","type":"quit"}
{"nick":"caridy","date":"2018-02-12T17:13:09.794Z","type":"join"}
{"nick":"jschoi","message":"jmdyck: Aha, thank you.","date":"2018-02-12T17:24:54.698Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-12T17:47:05.183Z","type":"quit"}
{"nick":"caridy","date":"2018-02-12T17:47:38.950Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-12T18:17:33.881Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-12T18:25:37.133Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-12T18:50:33.203Z","type":"join"}
{"nick":"keith_miller","date":"2018-02-12T19:27:15.411Z","type":"join"}
{"nick":"jwalden","date":"2018-02-12T19:28:24.377Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-02-12T20:01:58.316Z","type":"quit"}
{"nick":"jwalden","date":"2018-02-12T20:03:06.791Z","type":"join"}
{"nick":"gskachkov","date":"2018-02-12T20:05:57.954Z","type":"join"}
{"nick":"ChanServ","reason":"shutting down","date":"2018-02-12T21:02:41.174Z","type":"quit"}
{"nick":"ChanServ","date":"2018-02-12T21:10:40.000Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-02-12T21:15:57.321Z","type":"quit"}
{"nick":"kverrier","date":"2018-02-12T21:25:37.810Z","type":"join"}
{"nick":"jwalden","date":"2018-02-12T21:29:47.679Z","type":"join"}
{"nick":"not-an-aardvark","date":"2018-02-12T22:02:36.209Z","type":"join"}
{"nick":"jschoi","message":"Are there any other static semantic rules that are invoked with infix syntax, or is this unique to just `Contains`? It might be nice if the specification mentioned that it does this…","date":"2018-02-12T22:12:56.500Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-12T23:14:25.390Z","type":"quit"}
{"nick":"bterlson","message":"jschoi: static semantics are syntax-directed operations, usually(?), so https://tc39.github.io/ecma262/#sec-algorithm-conventions-syntax-directed-operations applies","date":"2018-02-12T23:15:48.643Z","type":"message"}
{"nick":"bterlson","message":"not sure if that covers what you're asking though","date":"2018-02-12T23:15:56.892Z","type":"message"}
{"nick":"jschoi","message":"Yes, I’m referring to that section. I don’t see it mentioning that `Contains` uses infix notation while all other rules use prefix notation…","date":"2018-02-12T23:16:34.911Z","type":"message"}
{"nick":"bterlson","message":"ahh I see what you're saying","date":"2018-02-12T23:17:39.416Z","type":"message"}
{"nick":"bterlson","message":"why `if PROD contains OTHER_PROD` vs `if Contains of Prod passing OTHER_PROD as the parameter`","date":"2018-02-12T23:18:04.913Z","type":"message"}
{"nick":"jschoi","message":"Yes.","date":"2018-02-12T23:18:12.512Z","type":"message"}
{"nick":"bterlson","message":"historical special case","date":"2018-02-12T23:18:20.958Z","type":"message"}
{"nick":"bterlson","message":"I'm looking at unifying that now","date":"2018-02-12T23:18:24.561Z","type":"message"}
{"nick":"bterlson","message":"well once I'm all done with the ES2018 PRs","date":"2018-02-12T23:18:33.243Z","type":"message"}
{"nick":"jschoi","message":"Nice. 👍🏻","date":"2018-02-12T23:18:36.208Z","type":"message"}
{"nick":"bterlson","message":"new syntax will be something like PROD.contains(OTHER_PROD)","date":"2018-02-12T23:18:55.804Z","type":"message"}
{"nick":"bterlson","message":"(and clicking on contains will show a list of all productions which implement an overridden contains definition)","date":"2018-02-12T23:19:20.462Z","type":"message"}
{"nick":"bterlson","message":"so don't worry too much about it in your proposals, there will be changes here in the next cycle","date":"2018-02-12T23:20:09.846Z","type":"message"}
{"nick":"jschoi","message":"Excellent! That’s another point of pain I’ve been having.","date":"2018-02-12T23:21:00.123Z","type":"message"}
{"nick":"jschoi","message":"Er, I mean it solves the pain point.","date":"2018-02-12T23:21:08.811Z","type":"message"}
{"nick":"jschoi","message":"I do have some ideas for other proposals, so this is good to know.","date":"2018-02-12T23:21:59.937Z","type":"message"}
{"nick":"bradleymeck","date":"2018-02-12T23:34:17.274Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-12T23:35:58.625Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-12T23:57:34.389Z","type":"quit"}
