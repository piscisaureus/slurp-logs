{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-09-10T00:04:47.040Z","type":"quit"}
{"nick":"keith_miller","date":"2019-09-10T00:25:59.332Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-09-10T00:49:43.224Z","type":"quit"}
{"nick":"cybai","date":"2019-09-10T00:50:14.042Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-09-10T00:54:40.000Z","type":"quit"}
{"nick":"howdoi","date":"2019-09-10T01:00:17.316Z","type":"join"}
{"nick":"cybai","date":"2019-09-10T01:15:59.039Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 246 seconds","date":"2019-09-10T01:20:09.117Z","type":"quit"}
{"nick":"kpatticha","date":"2019-09-10T01:22:22.059Z","type":"join"}
{"nick":"haxjs","reason":"Quit: This computer has gone to sleep","date":"2019-09-10T01:30:00.543Z","type":"quit"}
{"nick":"cybai","date":"2019-09-10T01:42:16.045Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 246 seconds","date":"2019-09-10T01:50:15.110Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T02:20:30.501Z","type":"quit"}
{"nick":"haxjs","date":"2019-09-10T02:21:02.796Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-09-10T02:33:33.906Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-09-10T02:43:41.947Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-09-10T04:54:43.213Z","type":"quit"}
{"nick":"SferaDev89","date":"2019-09-10T05:33:00.028Z","type":"join"}
{"nick":"kpatticha","date":"2019-09-10T06:37:59.691Z","type":"join"}
{"nick":"keith_miller","date":"2019-09-10T06:55:18.273Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-09-10T06:56:33.884Z","type":"quit"}
{"nick":"keith_miller","date":"2019-09-10T07:22:30.473Z","type":"join"}
{"nick":"kpattich_","date":"2019-09-10T09:17:39.739Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 276 seconds","date":"2019-09-10T09:20:29.660Z","type":"quit"}
{"nick":"kpattich_","reason":"Ping timeout: 268 seconds","date":"2019-09-10T09:27:13.807Z","type":"quit"}
{"nick":"kpattich_","date":"2019-09-10T09:39:44.632Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 276 seconds","date":"2019-09-10T09:47:08.673Z","type":"quit"}
{"nick":"mgol","date":"2019-09-10T09:57:23.341Z","type":"join"}
{"nick":"kpattich_","date":"2019-09-10T09:58:47.973Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 240 seconds","date":"2019-09-10T10:03:15.011Z","type":"quit"}
{"nick":"kpattich_","date":"2019-09-10T10:04:02.945Z","type":"join"}
{"nick":"kpattich__","date":"2019-09-10T10:05:55.496Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 240 seconds","date":"2019-09-10T10:08:26.923Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-09-10T10:17:32.113Z","type":"quit"}
{"nick":"cybai","date":"2019-09-10T10:18:12.689Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-09-10T10:22:53.571Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T10:48:24.360Z","type":"quit"}
{"nick":"cybai","date":"2019-09-10T10:58:25.660Z","type":"join"}
{"nick":"jmdyck","date":"2019-09-10T11:51:17.109Z","type":"join"}
{"nick":"kpattich_","date":"2019-09-10T12:01:02.042Z","type":"join"}
{"nick":"kpattich__","reason":"Ping timeout: 244 seconds","date":"2019-09-10T12:03:33.537Z","type":"quit"}
{"nick":"kpattich_","reason":"Ping timeout: 246 seconds","date":"2019-09-10T12:31:48.114Z","type":"quit"}
{"nick":"mgol","date":"2019-09-10T12:35:14.879Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T12:40:02.397Z","type":"quit"}
{"nick":"kpattich_","date":"2019-09-10T12:46:37.953Z","type":"join"}
{"nick":"gibson042","date":"2019-09-10T13:02:39.641Z","type":"join"}
{"nick":"keith_mi_","date":"2019-09-10T13:36:05.594Z","type":"join"}
{"nick":"haxjs","reason":"Quit: This computer has gone to sleep","date":"2019-09-10T13:36:57.071Z","type":"quit"}
{"nick":"keith_miller","reason":"Ping timeout: 268 seconds","date":"2019-09-10T13:37:35.752Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-09-10T13:59:24.329Z","type":"quit"}
{"nick":"Draggor","reason":"Ping timeout: 258 seconds","date":"2019-09-10T14:38:54.779Z","type":"quit"}
{"nick":"kpattich_","reason":"Remote host closed the connection","date":"2019-09-10T14:49:13.013Z","type":"quit"}
{"nick":"Draggor","date":"2019-09-10T14:50:48.073Z","type":"join"}
{"nick":"haxjs","date":"2019-09-10T14:58:53.347Z","type":"join"}
{"nick":"haxjs","reason":"Ping timeout: 245 seconds","date":"2019-09-10T15:06:43.333Z","type":"quit"}
{"nick":"haxjs","date":"2019-09-10T15:07:36.751Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T15:37:20.857Z","type":"quit"}
{"nick":"littledan_","date":"2019-09-10T15:52:34.842Z","type":"quit"}
{"nick":"littledan_","date":"2019-09-10T15:53:05.791Z","type":"join"}
{"nick":"littledan_","reason":"Client Quit","date":"2019-09-10T15:53:11.345Z","type":"quit"}
{"nick":"Nimelrian","date":"2019-09-10T15:53:12.599Z","type":"join"}
{"nick":"littledan","date":"2019-09-10T15:53:48.079Z","type":"join"}
{"nick":"devsnek","message":"rkirsling: what's the status of optional chaining in jsc?","date":"2019-09-10T16:06:28.771Z","type":"message"}
{"nick":"rkirsling","message":"devsnek: shipping with flag in STP 91","date":"2019-09-10T16:09:20.388Z","type":"message"}
{"nick":"rkirsling","message":"includes that optimization for x?.y ?? z too","date":"2019-09-10T16:09:47.350Z","type":"message"}
{"nick":"devsnek","message":"ok","date":"2019-09-10T16:10:37.738Z","type":"message"}
{"nick":"rkirsling","message":"not sure when the flag will be flipped because it's an Apple decision I'm not privy to ðŸ˜„","date":"2019-09-10T16:10:53.883Z","type":"message"}
{"nick":"rkirsling","message":"how come?","date":"2019-09-10T16:11:08.025Z","type":"message"}
{"nick":"devsnek","message":"rkirsling: just updating some chromestatus stuff","date":"2019-09-10T16:14:36.759Z","type":"message"}
{"nick":"jmdyck","message":"df","date":"2019-09-10T16:21:53.791Z","type":"message"}
{"nick":"rkirsling","message":"cool","date":"2019-09-10T16:21:54.222Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: are your changes for the layering stuff available anywhere","date":"2019-09-10T16:22:33.645Z","type":"message"}
{"nick":"jmdyck","message":"all in my head so far","date":"2019-09-10T16:22:56.803Z","type":"message"}
{"nick":"devsnek","message":"oh ok","date":"2019-09-10T16:23:02.686Z","type":"message"}
{"nick":"jmdyck","message":"gonna try to get to that today, but also have request from ljharb re 1670","date":"2019-09-10T16:24:49.774Z","type":"message"}
{"nick":"jwalden","date":"2019-09-10T16:25:23.662Z","type":"join"}
{"nick":"jmdyck","message":"why do you ask? just want to look?","date":"2019-09-10T16:38:28.554Z","type":"message"}
{"nick":"devsnek","message":"yea","date":"2019-09-10T16:40:12.360Z","type":"message"}
{"nick":"devsnek","message":"i'm sad that we're removing stuff like \"how to run a script\"","date":"2019-09-10T16:40:36.537Z","type":"message"}
{"nick":"keith_miller","date":"2019-09-10T16:46:53.437Z","type":"join"}
{"nick":"AtumT","date":"2019-09-10T17:03:47.385Z","type":"join"}
{"nick":"aradesh","date":"2019-09-10T17:06:04.060Z","type":"join"}
{"nick":"AtumT_","date":"2019-09-10T17:13:32.533Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-09-10T17:14:37.628Z","type":"quit"}
{"nick":"AtumT_","reason":"Quit: AtumT_","date":"2019-09-10T17:29:37.608Z","type":"quit"}
{"nick":"jmdyck","message":"Can 2 different agents operate on a single realm?","date":"2019-09-10T17:36:04.086Z","type":"message"}
{"nick":"devsnek","message":"definitely not at the same time","date":"2019-09-10T17:48:29.339Z","type":"message"}
{"nick":"devsnek","message":"possibly one at a time","date":"2019-09-10T17:48:38.770Z","type":"message"}
{"nick":"jmdyck","message":"yeah, i didn't mean \"at the same time\"","date":"2019-09-10T17:51:02.470Z","type":"message"}
{"nick":"devsnek","message":"i have to modify engine262 slightly to test this lol","date":"2019-09-10T17:54:38.336Z","type":"message"}
{"nick":"jmdyck","message":"it's unclear \"where\" the realm exists, and who creates it, and how it becomes known/available to multiple agents","date":"2019-09-10T17:56:48.987Z","type":"message"}
{"nick":"mgol","date":"2019-09-10T18:07:48.783Z","type":"join"}
{"nick":"laughinghan","date":"2019-09-10T18:09:12.439Z","type":"join"}
{"nick":"devsnek","message":"jmdyck: seems to work so far","date":"2019-09-10T18:13:30.399Z","type":"message"}
{"nick":"devsnek","message":"i set up a repl that changes the agent on every line","date":"2019-09-10T18:13:41.197Z","type":"message"}
{"nick":"devsnek","message":"but reuses the same realm","date":"2019-09-10T18:13:44.474Z","type":"message"}
{"nick":"devsnek","message":"function declarations, promises, instances, etc all working","date":"2019-09-10T18:14:08.997Z","type":"message"}
{"nick":"jmdyck","message":"so how do you tell the agent which realm to use?","date":"2019-09-10T18:15:31.075Z","type":"message"}
{"nick":"devsnek","message":"i'm just changing the \"surrounding agent\"","date":"2019-09-10T18:16:15.196Z","type":"message"}
{"nick":"jmdyck","message":"hm","date":"2019-09-10T18:16:28.310Z","type":"message"}
{"nick":"devsnek","message":"i don't think anything ever holds a reference to the agent","date":"2019-09-10T18:16:55.526Z","type":"message"}
{"nick":"jmdyck","message":"In engine262, \"surrounding agent\" is a 'property' of what?","date":"2019-09-10T18:19:28.770Z","type":"message"}
{"nick":"devsnek","message":"uhh","date":"2019-09-10T18:20:18.550Z","type":"message"}
{"nick":"devsnek","message":"it's a variable exported from engine.mjs","date":"2019-09-10T18:20:24.585Z","type":"message"}
{"nick":"jmdyck","message":"The spec definition says that you can talk about \"the surrounding agent for the code in a job\", whatever that means.","date":"2019-09-10T18:20:34.243Z","type":"message"}
{"nick":"devsnek","message":"and then various things do `import { surroundingAgent } from 'engine.mjs'`","date":"2019-09-10T18:20:41.079Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/engine262/engine262/blob/d7dc6bcb776e0386e370629cc8a559b74520d7aa/src/engine.mjs#L114-L118","date":"2019-09-10T18:21:04.815Z","type":"message"}
{"nick":"rkirsling","message":"whoa I just found something weird","date":"2019-09-10T18:21:22.896Z","type":"message"}
{"nick":"devsnek","message":"javascript?","date":"2019-09-10T18:21:30.946Z","type":"message"}
{"nick":"rkirsling","message":"tehehe","date":"2019-09-10T18:21:43.289Z","type":"message"}
{"nick":"rkirsling","message":"so JSC was failing tests for  `async (a = await => {}) => {}` and `async () => { (x = await /1/g) => x }` being invalid","date":"2019-09-10T18:22:19.780Z","type":"message"}
{"nick":"rkirsling","message":"but then I thought to check non-arrow functions","date":"2019-09-10T18:22:41.476Z","type":"message"}
{"nick":"rkirsling","message":"and only JSC is not complaining for `async function foo (a = await => {}) {}` but","date":"2019-09-10T18:23:34.146Z","type":"message"}
{"nick":"rkirsling","message":"everyone allows `async function foo() { function bar(a = await /1/g) {} }`?","date":"2019-09-10T18:24:02.297Z","type":"message"}
{"nick":"ljharb","message":"you can't use `await` in a function signature afaik; it's surprising to me that it works in the latter case, but it kind of makes sense since it's happening as part of the function declaration's creation","date":"2019-09-10T18:26:57.947Z","type":"message"}
{"nick":"rkirsling","message":"oh geez, that's a division operator","date":"2019-09-10T18:28:06.756Z","type":"message"}
{"nick":"devsnek","message":"await div 1 div g","date":"2019-09-10T18:28:23.030Z","type":"message"}
{"nick":"rkirsling","message":"oof. but it still seems wrong that those are different, no?","date":"2019-09-10T18:28:44.769Z","type":"message"}
{"nick":"ljharb","message":"oh right","date":"2019-09-10T18:29:11.055Z","type":"message"}
{"nick":"ljharb","message":"ha","date":"2019-09-10T18:29:11.890Z","type":"message"}
{"nick":"ljharb","message":"nah, that still seems right","date":"2019-09-10T18:29:22.320Z","type":"message"}
{"nick":"ljharb","message":"because any `await` after `async function` should be an actual await","date":"2019-09-10T18:29:34.768Z","type":"message"}
{"nick":"devsnek","message":"does anyone ever have this problem where sourcemapped stack traces are backward","date":"2019-09-10T18:29:35.491Z","type":"message"}
{"nick":"rkirsling","message":"no I mean why are functions and arrow functions different?","date":"2019-09-10T18:29:54.837Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: lookahead, i assume","date":"2019-09-10T18:30:41.583Z","type":"message"}
{"nick":"rkirsling","message":"I don't care whether both are valid or invalid but `async function foo() { (a = await / 1) => {} }` is invalid","date":"2019-09-10T18:31:01.337Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: `async (a = await` isn't sure it's an async function yet, or a function invocation of the `async` identifier","date":"2019-09-10T18:31:02.517Z","type":"message"}
{"nick":"rkirsling","message":"(based on eshost, at least)","date":"2019-09-10T18:31:34.088Z","type":"message"}
{"nick":"Bakkot","message":"rkirsling: async arrows forbid await in parameter expressions for exactly this reason, IIRC","date":"2019-09-10T18:32:12.562Z","type":"message"}
{"nick":"jmdyck","message":"so in engine262, at any given time, there's one surroundingAgent, and that's the 'surrounding agent' (in the spec sense) for any code that's running at that time?","date":"2019-09-10T18:32:19.026Z","type":"message"}
{"nick":"Bakkot","message":"https://tc39.es/ecma262/#sec-async-arrow-function-definitions-static-semantics-early-errors","date":"2019-09-10T18:32:27.804Z","type":"message"}
{"nick":"Bakkot","message":"It is a Syntax Error if CoverCallExpressionAndAsyncArrowHead Contains AwaitExpression is true.","date":"2019-09-10T18:32:32.466Z","type":"message"}
{"nick":"rkirsling","message":"er right but the issue I'm worried about is non-async-arrow-in-async-context","date":"2019-09-10T18:33:44.656Z","type":"message"}
{"nick":"rkirsling","message":"vs. non-async-`function`-in-async-context","date":"2019-09-10T18:34:08.874Z","type":"message"}
{"nick":"Bakkot","message":"uh","date":"2019-09-10T18:34:25.917Z","type":"message"}
{"nick":"Bakkot","message":"can you spell this out more?","date":"2019-09-10T18:34:28.887Z","type":"message"}
{"nick":"Bakkot","message":"ideally in a gist with code samples?","date":"2019-09-10T18:34:33.519Z","type":"message"}
{"nick":"rkirsling","message":"it's all above :-/","date":"2019-09-10T18:38:18.831Z","type":"message"}
{"nick":"rkirsling","message":"`async () => { (x = await / 1) => {}; }` is a syntax error for everybody but JSC (and there's a test262 test)","date":"2019-09-10T18:38:18.922Z","type":"message"}
{"nick":"rkirsling","message":"`async function foo() { (x = await / 1) => {}; }` is a syntax error for everybody but JSC","date":"2019-09-10T18:38:18.922Z","type":"message"}
{"nick":"rkirsling","message":"`async function foo() { function bar(a = await / 1) {} }` is allowed by everybody","date":"2019-09-10T18:38:18.922Z","type":"message"}
{"nick":"ljharb","message":"sounds like jsc has 2 bugs","date":"2019-09-10T18:38:37.735Z","type":"message"}
{"nick":"ljharb","message":"and the third one, i'm not sure, but it seems weird","date":"2019-09-10T18:38:54.143Z","type":"message"}
{"nick":"Bakkot","message":"rkirsling: yeah I just don't understand what you are asking about this","date":"2019-09-10T18:38:55.050Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: the third one is correct","date":"2019-09-10T18:39:08.142Z","type":"message"}
{"nick":"ljharb","message":"i suppose it makes sense that it'd be the same as `function bar(a = await / 1) {}` by itself.","date":"2019-09-10T18:39:27.287Z","type":"message"}
{"nick":"rkirsling","message":"yeah no it's fine that JSC has bugs; I don't understand why the second and third should differe","date":"2019-09-10T18:39:44.518Z","type":"message"}
{"nick":"rkirsling","message":"*differ","date":"2019-09-10T18:39:47.680Z","type":"message"}
{"nick":"Bakkot","message":"ah, ok","date":"2019-09-10T18:40:00.029Z","type":"message"}
{"nick":"ljharb","message":"because the second case doesn't know it's an arrow function yet when it sees the `await`","date":"2019-09-10T18:40:04.603Z","type":"message"}
{"nick":"ljharb","message":"the third case knows it's in a non-async function already","date":"2019-09-10T18:40:12.908Z","type":"message"}
{"nick":"rkirsling","message":"(the third can be a function expr, doesn't have to be declaration)","date":"2019-09-10T18:40:16.291Z","type":"message"}
{"nick":"Bakkot","message":"rkirsling: wait, is your question about \"how does the spec do this\" or \"why does the spec do this\"?","date":"2019-09-10T18:40:16.801Z","type":"message"}
{"nick":"ljharb","message":"(i think?)","date":"2019-09-10T18:40:18.139Z","type":"message"}
{"nick":"rkirsling","message":"why","date":"2019-09-10T18:40:32.360Z","type":"message"}
{"nick":"rkirsling","message":"or well","date":"2019-09-10T18:40:56.051Z","type":"message"}
{"nick":"Bakkot","message":"the answer is that it is impossible to even tokenize the second thing correctly without re-scanning","date":"2019-09-10T18:41:45.813Z","type":"message"}
{"nick":"rkirsling","message":"first of all I wanted to know whether it's a bug in the spec at all or if it could just be something uncovered by tests and thus the engines have it wrong (although it's weird for them to be uniformly so)","date":"2019-09-10T18:41:50.481Z","type":"message"}
{"nick":"Bakkot","message":"the spec'd behavior is the behavior every engine but JSC follows, and is intentional","date":"2019-09-10T18:42:14.098Z","type":"message"}
{"nick":"rkirsling","message":"gotcha","date":"2019-09-10T18:43:24.098Z","type":"message"}
{"nick":"devsnek","message":"we should get an eshost irc bot","date":"2019-09-10T18:44:06.133Z","type":"message"}
{"nick":"rkirsling","message":"just feels like it would've been more consistent to prohibit await in default expressions across the board, is all","date":"2019-09-10T18:44:41.090Z","type":"message"}
{"nick":"rkirsling","message":"devsnek: that'd be cool","date":"2019-09-10T18:45:10.255Z","type":"message"}
{"nick":"ljharb","message":"devsnek: +1","date":"2019-09-10T18:45:25.278Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: it wouldn't have been back compat tho - arrows are in 2015 and async/await not until 2017","date":"2019-09-10T18:45:43.066Z","type":"message"}
{"nick":"ljharb","message":"sorry, defaults  are in 2015","date":"2019-09-10T18:45:50.204Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: so await would have had to be prohibited in there in 2015 - and anyone using `await` as an identifier pre-2015 would have had a refactoring hazard when migrating to defaults","date":"2019-09-10T18:46:14.872Z","type":"message"}
{"nick":"rkirsling","message":"ah hmm right","date":"2019-09-10T18:46:38.399Z","type":"message"}
{"nick":"Bakkot","message":"rkirsling: do you mean \"prohibit await expressions\" or \"prohibit await identifiers\"?","date":"2019-09-10T18:46:40.091Z","type":"message"}
{"nick":"Bakkot","message":"because it is being interpreted as an await identifier, in your third example","date":"2019-09-10T18:46:54.157Z","type":"message"}
{"nick":"devsnek","message":"if you do `(a = await => ...)`","date":"2019-09-10T18:46:54.992Z","type":"message"}
{"nick":"devsnek","message":"maybe your code deserves to be broken","date":"2019-09-10T18:46:59.328Z","type":"message"}
{"nick":"rkirsling","message":"Bakkot: yeah my brain is partially mixed up on that point because the test262 test is confusing","date":"2019-09-10T18:47:22.254Z","type":"message"}
{"nick":"rkirsling","message":"(one sec)","date":"2019-09-10T18:47:34.269Z","type":"message"}
{"nick":"rkirsling","message":"https://test262.report/browse/language/expressions/async-arrow-function/await-as-param-nested-arrow-body-position.js?date=2019-09-08","date":"2019-09-10T18:47:56.409Z","type":"message"}
{"nick":"rkirsling","message":"(sorry for unnecessary query param)","date":"2019-09-10T18:48:20.224Z","type":"message"}
{"nick":"Bakkot","message":"ah, yeah, I would say that's the wrong error","date":"2019-09-10T18:49:23.903Z","type":"message"}
{"nick":"Bakkot","message":"oh, wait, no","date":"2019-09-10T18:49:50.656Z","type":"message"}
{"nick":"Bakkot","message":"I guess that is the right error","date":"2019-09-10T18:49:56.263Z","type":"message"}
{"nick":"Bakkot","message":"er","date":"2019-09-10T18:49:58.766Z","type":"message"}
{"nick":"Bakkot","message":"err","date":"2019-09-10T18:50:00.268Z","type":"message"}
{"nick":"devsnek","message":"that's the right error","date":"2019-09-10T18:50:18.555Z","type":"message"}
{"nick":"devsnek","message":"thinking from a scanning perspective","date":"2019-09-10T18:50:41.231Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: the error should be for regular arrow expressions","date":"2019-09-10T18:50:52.603Z","type":"message"}
{"nick":"Bakkot","message":"not for async arrows","date":"2019-09-10T18:50:55.782Z","type":"message"}
{"nick":"Bakkot","message":"the right error is https://tc39.es/ecma262/#sec-arrow-function-definitions-static-semantics-early-errors \"It is a Syntax Error if ArrowParameters Contains AwaitExpression is true.\"","date":"2019-09-10T18:52:27.389Z","type":"message"}
{"nick":"Bakkot","message":"that is, I guess the error is right (if out of date), but the esid is wrong","date":"2019-09-10T18:52:53.668Z","type":"message"}
{"nick":"devsnek","message":"oh i wasn't looking at the esid","date":"2019-09-10T18:53:08.290Z","type":"message"}
{"nick":"rkirsling","message":"ah sure","date":"2019-09-10T18:54:19.379Z","type":"message"}
{"nick":"rkirsling","message":"er wait though","date":"2019-09-10T18:54:45.687Z","type":"message"}
{"nick":"rkirsling","message":"my point was that I thought it was testing for await expr but it's not","date":"2019-09-10T18:55:10.785Z","type":"message"}
{"nick":"Bakkot","message":"it is","date":"2019-09-10T18:55:16.204Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T18:55:23.668Z","type":"quit"}
{"nick":"rkirsling","message":"because all day yesterday I thought that was a regex but it's not","date":"2019-09-10T18:55:31.392Z","type":"message"}
{"nick":"Bakkot","message":"the way it works is, you parse it as CoverParenthesizedExpressionAndArrowParameterList, then when you encounter `=>` you refine it with `( UniqueFormalParameters_[?Await] )`, which in this context will pass +Await as the flag","date":"2019-09-10T18:55:37.096Z","type":"message"}
{"nick":"Bakkot","message":"and then the above early error is applied","date":"2019-09-10T18:55:54.786Z","type":"message"}
{"nick":"Bakkot","message":"the \"It is a Syntax Error if ArrowParameters Contains AwaitExpression is true.\" one","date":"2019-09-10T18:56:00.402Z","type":"message"}
{"nick":"rkirsling","message":"so I don't know why we've written it to look like one...","date":"2019-09-10T18:56:02.336Z","type":"message"}
{"nick":"Bakkot","message":"any lunch back in a while","date":"2019-09-10T18:56:07.587Z","type":"message"}
{"nick":"devsnek","message":"i wish there was a way to highlight emu-alg spec steps","date":"2019-09-10T18:57:54.015Z","type":"message"}
{"nick":"Nimelrian","reason":"Ping timeout: 276 seconds","date":"2019-09-10T19:10:41.594Z","type":"quit"}
{"nick":"mpcsh","message":"Just noticed this: https://tc39.es/ecma262/#sec-future-reserved-words","date":"2019-09-10T19:18:44.022Z","type":"message"}
{"nick":"mpcsh","message":"Are there any plans for `enum`? I'd love to bring a proposal but I have a gut feeling there's context here","date":"2019-09-10T19:18:44.126Z","type":"message"}
{"nick":"ljharb","message":"mpcsh: there's two competing proposals in progress that haven't been presented yet","date":"2019-09-10T19:21:42.234Z","type":"message"}
{"nick":"ljharb","message":"mpcsh: https://github.com/rwaldron/proposal-enum-definitions and https://github.com/rbuckton/proposal-enum","date":"2019-09-10T19:22:17.377Z","type":"message"}
{"nick":"devsnek","message":"ron v rick battle to the death","date":"2019-09-10T19:23:22.506Z","type":"message"}
{"nick":"mpcsh","message":"ljharb: do we know if either is being actively worked on?","date":"2019-09-10T19:24:21.473Z","type":"message"}
{"nick":"ljharb","message":"mpcsh: depends on how you define \"active\"; neither is abandoned.","date":"2019-09-10T19:25:39.880Z","type":"message"}
{"nick":"ljharb","message":"mpcsh: meaning, probably best not to make a third :-)","date":"2019-09-10T19:25:56.135Z","type":"message"}
{"nick":"devsnek","message":"i like that they both allow a function to define enum creation","date":"2019-09-10T19:27:16.691Z","type":"message"}
{"nick":"devsnek","message":"although rbuckton's seems a bit more involved with all those symbols","date":"2019-09-10T19:27:41.431Z","type":"message"}
{"nick":"mpcsh","message":"ljharb: sure, just looks like neither has had a commit in a while? is it normal for proposals to linger for a while?","date":"2019-09-10T19:28:06.042Z","type":"message"}
{"nick":"ljharb","message":"mpcsh: yes","date":"2019-09-10T19:28:20.388Z","type":"message"}
{"nick":"devsnek","message":"its up to the champion to present them","date":"2019-09-10T19:28:25.689Z","type":"message"}
{"nick":"mpcsh","message":"cool, I'll ping them to ask what their plans are, thanks :)","date":"2019-09-10T19:30:10.988Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T19:32:10.923Z","type":"quit"}
{"nick":"Bakkot","message":"rkirsling: it's written like a regex because it parses as a regex","date":"2019-09-10T19:50:41.115Z","type":"message"}
{"nick":"Bakkot","message":"if you omit the `=> {}` it will actually be one","date":"2019-09-10T19:51:15.977Z","type":"message"}
{"nick":"Bakkot","message":"it is an AwaitExpression of a regex, and then the early error for ArrowParameters I linked makes that an error","date":"2019-09-10T19:52:02.454Z","type":"message"}
{"nick":"Bakkot","message":"in a non-async context it would not be a regex","date":"2019-09-10T19:52:28.219Z","type":"message"}
{"nick":"rkirsling","message":"Bakkot: I think I figured it had to not be a regex because `async function foo() { function bar(a = await 1) {} }` is an error","date":"2019-09-10T20:08:36.960Z","type":"message"}
{"nick":"Bakkot","message":"yeah, parsing arrows is much much more complicated than parsing function declarations","date":"2019-09-10T20:09:09.834Z","type":"message"}
{"nick":"rkirsling","message":"but `async function foo() { function bar(a = await /1/g) {} }` is not","date":"2019-09-10T20:09:21.183Z","type":"message"}
{"nick":"rkirsling","message":"and neither is `async function foo() { function bar(a = await / 1) {} }`","date":"2019-09-10T20:09:21.235Z","type":"message"}
{"nick":"Bakkot","message":"yeah; in all of those the inner parameters are parsed with the `Async` flag off","date":"2019-09-10T20:10:10.070Z","type":"message"}
{"nick":"devsnek","message":"parsing arrow functions is dreadful","date":"2019-09-10T20:10:42.414Z","type":"message"}
{"nick":"rkirsling","message":"ðŸ˜­","date":"2019-09-10T20:10:52.999Z","type":"message"}
{"nick":"Bakkot","message":"but you can't do that when parsing `async function foo(){ (a = await/r/g)` because the flag needs to be on if you do not then encounter `=>`","date":"2019-09-10T20:11:34.766Z","type":"message"}
{"nick":"devsnek","message":"someone should make an ai powered parser","date":"2019-09-10T20:11:35.257Z","type":"message"}
{"nick":"Bakkot","message":"and the flag affects tokenization","date":"2019-09-10T20:11:40.155Z","type":"message"}
{"nick":"Bakkot","message":"so what happens is that the flag is _on_ when parsing it and when refining the cover grammar, which means it parses as an Await of a regex","date":"2019-09-10T20:12:23.857Z","type":"message"}
{"nick":"Bakkot","message":"but because it shouldn't actually be an async context if you encouter `=>`, there's an early error forbidding await expressions in non-async arrow parameters","date":"2019-09-10T20:13:01.166Z","type":"message"}
{"nick":"rkirsling","message":"wowsers","date":"2019-09-10T20:13:21.491Z","type":"message"}
{"nick":"Bakkot","message":"(you don't need a similar rule for non-async function declaration parameters because you can't end up with one in the first place, because this ambiguity doesn't happen: you can get the flag right when tokenizing it in the first place)","date":"2019-09-10T20:13:33.970Z","type":"message"}
{"nick":"bradleymeck","message":"weren't people doing catastrophic backtracking with arrows a few months ago for some reason?","date":"2019-09-10T20:13:48.847Z","type":"message"}
{"nick":"devsnek","message":"that was with regex","date":"2019-09-10T20:13:56.882Z","type":"message"}
{"nick":"Bakkot","message":"er, by \"you can't end up with [one]\" I mean \"you can't end up with [an await expression in function declaration parameters]\"","date":"2019-09-10T20:14:14.644Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: I don't recall hearing about it","date":"2019-09-10T20:14:29.581Z","type":"message"}
{"nick":"devsnek","message":"a few months ago a v8 dev wrote a blog post about a way of optimizing out backtracking in v8 regular expressions","date":"2019-09-10T20:15:14.662Z","type":"message"}
{"nick":"devsnek","message":"which brought up a bunch of talk about backtracking in regular expressions","date":"2019-09-10T20:15:27.352Z","type":"message"}
{"nick":"Bakkot","message":"sidebar: I have some notes on the difficulty of parsing JS I keep meaning to write up more formally and publish at some point","date":"2019-09-10T20:15:58.767Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: nah, this was something else","date":"2019-09-10T20:16:10.598Z","type":"message"}
{"nick":"devsnek","message":"oh","date":"2019-09-10T20:16:20.367Z","type":"message"}
{"nick":"bradleymeck","message":"it was the same timeframe as https://github.com/microsoft/TypeScript/issues/30833 coming up but i can't find it","date":"2019-09-10T20:19:44.006Z","type":"message"}
{"nick":"mgol","date":"2019-09-10T20:19:55.434Z","type":"join"}
{"nick":"bradleymeck","message":"there was some variation of that which cause catastrophic backtracking","date":"2019-09-10T20:20:04.242Z","type":"message"}
{"nick":"devsnek","message":"i would assume most things don't actually backtrack for parsing","date":"2019-09-10T20:22:02.456Z","type":"message"}
{"nick":"rkirsling","message":"Bakkot: sounds like a good read","date":"2019-09-10T20:22:06.282Z","type":"message"}
{"nick":"devsnek","message":"in slither i have an intermediate form that can be either lowered to parens or parameters","date":"2019-09-10T20:22:32.673Z","type":"message"}
{"nick":"devsnek","message":"i think v8 has something similar","date":"2019-09-10T20:22:41.376Z","type":"message"}
{"nick":"laughinghan","date":"2019-09-10T20:25:06.970Z","type":"join"}
{"nick":"Bakkot","message":"huh; our approach (in Shift) is to just do it as one and then convert it to the other at the point at which it becomes clear which it has to be","date":"2019-09-10T20:25:08.833Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: does it suffer like TS does? https://twitter.com/bterlson/status/1115710324957515776","date":"2019-09-10T20:26:10.586Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: we don't backtrack, so no","date":"2019-09-10T20:26:22.648Z","type":"message"}
{"nick":"bradleymeck","message":"ah","date":"2019-09-10T20:26:38.466Z","type":"message"}
{"nick":"Bakkot","message":"https://shift-ast.org/parser.html?parse_type=module&script=async(async(async(async(async(async(async(async(async(async(async(async(async(async(async(async(async(async(async(async(async(async(async()))))))))))))))))))))))%0A%0A","date":"2019-09-10T20:26:39.950Z","type":"message"}
{"nick":"devsnek","message":"like a = b can either be assignmentexpression or formalparameter = lefthandsideexpression","date":"2019-09-10T20:26:44.731Z","type":"message"}
{"nick":"devsnek","message":"no reason to backtrack, just pick one based on whether there's an arrow","date":"2019-09-10T20:27:03.456Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: can shift parser be extended?","date":"2019-09-10T20:28:11.946Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: in a certain sense, yes? it's implemented as a class and you can extend the class and override any methods you care to (including in the tokenizer). but not all syntax extensions map cleanly to overridden methods.","date":"2019-09-10T20:29:26.927Z","type":"message"}
{"nick":"devsnek","message":"i'm currently writing a new parser for engine262 cuz we've been having layering problems with acorn","date":"2019-09-10T20:29:54.923Z","type":"message"}
{"nick":"devsnek","message":"would rather not write a whole parser though :P","date":"2019-09-10T20:31:02.306Z","type":"message"}
{"nick":"Bakkot","message":"would strongly advise trying other parsers before attempting to roll your own, yes","date":"2019-09-10T20:31:05.989Z","type":"message"}
{"nick":"devsnek","message":"i've looked at so many parsers lol","date":"2019-09-10T20:31:19.985Z","type":"message"}
{"nick":"devsnek","message":"there's this one fellow who has made three js parsers","date":"2019-09-10T20:31:45.414Z","type":"message"}
{"nick":"Bakkot","message":"I remember him, yes","date":"2019-09-10T20:31:55.418Z","type":"message"}
{"nick":"Bakkot","message":"his approach did not inspire confidence","date":"2019-09-10T20:32:00.875Z","type":"message"}
{"nick":"devsnek","message":"cherow, meriyah, and buntis","date":"2019-09-10T20:32:09.102Z","type":"message"}
{"nick":"devsnek","message":"apparently they all confirm to es2020","date":"2019-09-10T20:32:22.531Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: how come shift does a BinaryExpression tree for the comma operator","date":"2019-09-10T20:34:08.218Z","type":"message"}
{"nick":"Bakkot","message":"... what else would it do?","date":"2019-09-10T20:34:35.469Z","type":"message"}
{"nick":"devsnek","message":"i think babel does a \"Sequence Expression\"","date":"2019-09-10T20:35:02.751Z","type":"message"}
{"nick":"devsnek","message":"yeah https://gc.gy/35852727.png","date":"2019-09-10T20:35:27.613Z","type":"message"}
{"nick":"Bakkot","message":"oh, with arbitrarily many children, right","date":"2019-09-10T20:35:43.754Z","type":"message"}
{"nick":"devsnek","message":"it makes sense","date":"2019-09-10T20:36:06.738Z","type":"message"}
{"nick":"devsnek","message":"i had just never though of comma as a binary tree before lol","date":"2019-09-10T20:36:14.469Z","type":"message"}
{"nick":"Bakkot","message":"two answers to that: a.) that's weirdly inconsistent with `x + y + z`, and b.) one of the main goals for Shift is to make impossible programs unrepresentable, and this representation only represents valid programs","date":"2019-09-10T20:37:14.455Z","type":"message"}
{"nick":"Bakkot","message":"whereas esprima's allows sequence-expression-of-zero-items (or one item), which is not a possible program","date":"2019-09-10T20:37:34.559Z","type":"message"}
{"nick":"devsnek","message":"oh interesting","date":"2019-09-10T20:38:08.682Z","type":"message"}
{"nick":"devsnek","message":"i like that","date":"2019-09-10T20:38:10.017Z","type":"message"}
{"nick":"bradleymeck","message":"babel's has all sorts of gross stuff too","date":"2019-09-10T20:40:12.477Z","type":"message"}
{"nick":"bradleymeck","message":"like nested comma sequences","date":"2019-09-10T20:40:17.996Z","type":"message"}
{"nick":"devsnek","message":"estree is rather odd in a lot of ways","date":"2019-09-10T20:40:36.281Z","type":"message"}
{"nick":"ljharb","message":"so given an arbitrary source text that may contain any arbitrary parameter defaults, is there any performant way, short of building a full parser, to reliably determine something is an arrow function?","date":"2019-09-10T20:55:25.421Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T21:01:55.613Z","type":"quit"}
{"nick":"Bakkot","message":"what does 'something' mean?","date":"2019-09-10T21:02:05.550Z","type":"message"}
{"nick":"Bakkot","message":"it is not generally possible to answer the question \"does this string match this grammar\" without building a parser; that's what parsers _are_ (though you can make it somewhat more performant by not constructing an AST)","date":"2019-09-10T21:04:43.224Z","type":"message"}
{"nick":"Bakkot","message":"I guess depending on your definitions you might not consider \"a parser, but it doesn't make an AST\" to be a parser","date":"2019-09-10T21:05:04.336Z","type":"message"}
{"nick":"Bakkot","message":"but it's going to end up looking a lot like one","date":"2019-09-10T21:05:13.535Z","type":"message"}
{"nick":"devsnek","message":"i did something really similar for json","date":"2019-09-10T21:06:24.118Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/engine262/engine262/blob/master/src/intrinsics/JSON.mjs#L39","date":"2019-09-10T21:06:36.716Z","type":"message"}
{"nick":"ljharb","message":"yeah fair","date":"2019-09-10T21:06:39.990Z","type":"message"}
{"nick":"devsnek","message":"the only thing that makes this a \"validator\" is that it doesn't also build up a json structure","date":"2019-09-10T21:06:51.040Z","type":"message"}
{"nick":"laughinghan","date":"2019-09-10T21:17:24.304Z","type":"join"}
{"nick":"AtumT","date":"2019-09-10T21:17:28.076Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T21:32:34.635Z","type":"quit"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-09-10T21:33:06.665Z","type":"quit"}
{"nick":"laughinghan","date":"2019-09-10T21:51:30.525Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2019-09-10T22:07:07.248Z","type":"quit"}
{"nick":"keith_miller","reason":"Ping timeout: 246 seconds","date":"2019-09-10T23:01:06.136Z","type":"quit"}
{"nick":"SferaDev89","reason":"Ping timeout: 240 seconds","date":"2019-09-10T23:02:50.931Z","type":"quit"}
{"nick":"keith_miller","date":"2019-09-10T23:03:29.390Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-09-10T23:30:52.447Z","type":"quit"}
{"nick":"drousso","date":"2019-09-10T23:34:30.730Z","type":"join"}
{"nick":"xkr47","reason":"Ping timeout: 258 seconds","date":"2019-09-10T23:57:48.834Z","type":"quit"}
