{"nick":"drousso","date":"2019-09-19T00:11:17.501Z","type":"join"}
{"nick":"laughinghan","reason":"Ping timeout: 245 seconds","date":"2019-09-19T00:11:58.501Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T00:14:22.281Z","type":"quit"}
{"nick":"keith_miller","date":"2019-09-19T00:25:31.750Z","type":"join"}
{"nick":"keith_mi_","date":"2019-09-19T00:27:06.390Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 268 seconds","date":"2019-09-19T00:30:35.770Z","type":"quit"}
{"nick":"srl295","date":"2019-09-19T00:39:53.226Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-09-19T00:59:33.729Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T01:24:06.337Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T01:48:14.603Z","type":"quit"}
{"nick":"drousso","date":"2019-09-19T01:54:00.980Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-09-19T01:56:36.254Z","type":"quit"}
{"nick":"cybai","date":"2019-09-19T02:09:49.308Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-09-19T02:14:12.151Z","type":"quit"}
{"nick":"cybai","date":"2019-09-19T02:39:43.518Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T03:34:57.619Z","type":"quit"}
{"nick":"howdoi","date":"2019-09-19T04:10:59.300Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 240 seconds","date":"2019-09-19T04:12:51.024Z","type":"quit"}
{"nick":"drousso","date":"2019-09-19T04:40:54.240Z","type":"join"}
{"nick":"jorydotcom","date":"2019-09-19T05:10:09.353Z","type":"join"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T05:21:02.336Z","type":"quit"}
{"nick":"cybai_","date":"2019-09-19T06:01:29.478Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-09-19T06:04:53.496Z","type":"quit"}
{"nick":"jorydotcom","date":"2019-09-19T06:05:12.944Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T06:30:41.189Z","type":"quit"}
{"nick":"cybai","date":"2019-09-19T06:34:52.728Z","type":"join"}
{"nick":"cybai_","reason":"Ping timeout: 245 seconds","date":"2019-09-19T06:37:48.553Z","type":"quit"}
{"nick":"pmdartus","date":"2019-09-19T06:49:08.707Z","type":"join"}
{"nick":"pmdartus","reason":"Client Quit","date":"2019-09-19T06:50:17.842Z","type":"quit"}
{"nick":"drousso","date":"2019-09-19T07:04:47.503Z","type":"join"}
{"nick":"gibson042","reason":"Read error: Connection reset by peer","date":"2019-09-19T07:31:15.070Z","type":"quit"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T07:32:56.398Z","type":"quit"}
{"nick":"gibson042","date":"2019-09-19T07:43:28.752Z","type":"join"}
{"nick":"jorydotcom","date":"2019-09-19T07:55:32.459Z","type":"join"}
{"nick":"kpatticha","date":"2019-09-19T08:06:39.971Z","type":"join"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T08:20:04.385Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T09:04:30.867Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-09-19T10:42:35.361Z","type":"quit"}
{"nick":"drousso","date":"2019-09-19T10:47:14.417Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T11:23:27.759Z","type":"quit"}
{"nick":"drousso","date":"2019-09-19T11:25:59.634Z","type":"join"}
{"nick":"cybai","date":"2019-09-19T11:50:33.101Z","type":"join"}
{"nick":"jmdyck","date":"2019-09-19T11:52:34.918Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T12:03:41.085Z","type":"quit"}
{"nick":"drousso","date":"2019-09-19T12:07:43.428Z","type":"join"}
{"nick":"Nimelrian_","date":"2019-09-19T15:24:21.642Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T15:33:38.312Z","type":"quit"}
{"nick":"keith_miller","date":"2019-09-19T15:43:12.234Z","type":"join"}
{"nick":"jgi","message":"What needs to happen to merge https://github.com/rwaldron/tc39-notes/pull/123 that fixes a missing slides link in the previous meeting's notes?","date":"2019-09-19T15:47:01.078Z","type":"message"}
{"nick":"kpattich_","date":"2019-09-19T15:53:21.764Z","type":"join"}
{"nick":"keith_mi_","date":"2019-09-19T15:55:07.933Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 240 seconds","date":"2019-09-19T15:55:40.614Z","type":"quit"}
{"nick":"keith_miller","reason":"Ping timeout: 250 seconds","date":"2019-09-19T15:58:00.615Z","type":"quit"}
{"nick":"AtumT","date":"2019-09-19T16:02:31.630Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-09-19T16:10:16.992Z","type":"quit"}
{"nick":"AtumT","date":"2019-09-19T16:11:47.105Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T16:48:52.772Z","type":"quit"}
{"nick":"keith_miller","date":"2019-09-19T17:00:02.918Z","type":"join"}
{"nick":"bradleymeck","message":"littledan: i forgot to ask since you were gone when it came up, wasn't there a decorators README for something that had decorators over **MANY** syntactic constructs?","date":"2019-09-19T17:01:52.213Z","type":"message"}
{"nick":"bradleymeck","message":"i don't think it was in the main proposal","date":"2019-09-19T17:01:58.605Z","type":"message"}
{"nick":"kpattich__","date":"2019-09-19T17:09:40.626Z","type":"join"}
{"nick":"Nimelrian_","reason":"Quit: Leaving","date":"2019-09-19T17:11:09.197Z","type":"quit"}
{"nick":"Nimelrian","date":"2019-09-19T17:11:28.851Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 246 seconds","date":"2019-09-19T17:11:37.460Z","type":"quit"}
{"nick":"aradesh","date":"2019-09-19T17:17:58.202Z","type":"join"}
{"nick":"kpattich__","reason":"Ping timeout: 276 seconds","date":"2019-09-19T17:22:30.460Z","type":"quit"}
{"nick":"littledan","message":"bradleymeck: https://github.com/tc39/proposal-decorators/blob/master/NEXTBUILTINS.md#applying-built-in-decorators-to-other-syntactic-forms","date":"2019-09-19T17:35:42.129Z","type":"message"}
{"nick":"bradleymeck","message":"tyty","date":"2019-09-19T17:35:57.046Z","type":"message"}
{"nick":"Nimelrian","reason":"Ping timeout: 276 seconds","date":"2019-09-19T17:40:03.024Z","type":"quit"}
{"nick":"mgol","date":"2019-09-19T17:44:01.788Z","type":"join"}
{"nick":"devsnek","message":"but why do they have to be a new dsl :(","date":"2019-09-19T17:56:21.389Z","type":"message"}
{"nick":"devsnek","message":"we have this whole expressive language","date":"2019-09-19T17:56:27.602Z","type":"message"}
{"nick":"devsnek","message":"is there anything in js that can't be a reified value besides lexical scopes","date":"2019-09-19T18:25:28.793Z","type":"message"}
{"nick":"bradleymeck","message":"i mean... lexical scopes could be reimplemented using values","date":"2019-09-19T18:26:50.581Z","type":"message"}
{"nick":"devsnek","message":"sure, but i mean in live js code","date":"2019-09-19T18:27:07.681Z","type":"message"}
{"nick":"bradleymeck","message":"turing completeness kind of makes the question of if something can/cannot be done lean towards it can","date":"2019-09-19T18:27:10.525Z","type":"message"}
{"nick":"devsnek","message":"like you can capture a variable scope with with(new Proxy())","date":"2019-09-19T18:27:17.893Z","type":"message"}
{"nick":"devsnek","message":"maybe private fields depending on what you think `#x` is","date":"2019-09-19T18:28:26.452Z","type":"message"}
{"nick":"bradleymeck","action":"takes a long drag off his bubble pipe pondering `#x`","date":"2019-09-19T18:29:29.571Z","type":"action"}
{"nick":"devsnek","message":"if you view #x as a fancy identifier that jumps the usual MOP stuff, then it doesn't have to be a value in its own right","date":"2019-09-19T18:30:33.272Z","type":"message"}
{"nick":"devsnek","message":"but its still not reflectable because you can't proxy it so ü§∑üèª","date":"2019-09-19T18:30:48.160Z","type":"message"}
{"nick":"devsnek","message":"i think it goes with lexical scopes","date":"2019-09-19T18:30:57.957Z","type":"message"}
{"nick":"bradleymeck","message":"I dislike viewing `#x` as its own identifier personally `x` under `#` makes my brain less angry","date":"2019-09-19T18:31:28.309Z","type":"message"}
{"nick":"devsnek","message":"its cool how much of js is values you can play with","date":"2019-09-19T18:32:04.395Z","type":"message"}
{"nick":"bradleymeck","message":"`#x` can still be a value just not in the same space as other ones","date":"2019-09-19T18:36:16.629Z","type":"message"}
{"nick":"devsnek","message":"well if you consider it a value","date":"2019-09-19T18:36:26.196Z","type":"message"}
{"nick":"bradleymeck","message":"in particular it having a value is useful for sharing (which isn't a thing right now)","date":"2019-09-19T18:36:30.034Z","type":"message"}
{"nick":"devsnek","message":"some sort of fancy symbol or something","date":"2019-09-19T18:36:31.692Z","type":"message"}
{"nick":"devsnek","message":"its still not reflectable","date":"2019-09-19T18:36:49.329Z","type":"message"}
{"nick":"bradleymeck","message":"doesn't matter what it is, just not in the same value space so it cannot interact with things like strings","date":"2019-09-19T18:37:04.810Z","type":"message"}
{"nick":"devsnek","message":"littledan: aren't almost all of these builtins possible to define in terms of @wrap?","date":"2019-09-19T19:05:02.435Z","type":"message"}
{"nick":"littledan","message":"devsnek: ...no?","date":"2019-09-19T19:05:16.425Z","type":"message"}
{"nick":"littledan","message":"devsnek: I mean, tell me how and I'll be interested in simplifying the proposal","date":"2019-09-19T19:05:42.109Z","type":"message"}
{"nick":"devsnek","message":"how is @register different from @wrap except for timing","date":"2019-09-19T19:05:55.911Z","type":"message"}
{"nick":"devsnek","message":"@expose and @initialize could be @wrap too if there were better reflective properties for class fields","date":"2019-09-19T19:08:24.859Z","type":"message"}
{"nick":"devsnek","message":"as a super contrived example, something like could exist and be modified by an @wrap `someClass[Symbol.fields]`","date":"2019-09-19T19:13:14.159Z","type":"message"}
{"nick":"devsnek","message":"(that codeblock was supposed to be after \"something like\")","date":"2019-09-19T19:13:40.146Z","type":"message"}
{"nick":"devsnek","message":"(not that i'm advocating for Symbol.fields, just pointing out that there are other ways to approach this)","date":"2019-09-19T19:14:05.200Z","type":"message"}
{"nick":"jwalden","date":"2019-09-19T19:58:50.883Z","type":"join"}
{"nick":"laughinghan","date":"2019-09-19T20:01:55.537Z","type":"join"}
{"nick":"laughinghan","reason":"Read error: Connection reset by peer","date":"2019-09-19T20:03:07.959Z","type":"quit"}
{"nick":"laughinghan","date":"2019-09-19T20:04:31.892Z","type":"join"}
{"nick":"littledan","message":"devsnek: tbh the main thing to resolve at this point is whether we do static decorators at all, see #277","date":"2019-09-19T21:00:15.297Z","type":"message"}
{"nick":"littledan","message":"devsnek: I encourage you to file an issue about these ideas for adjusting the details","date":"2019-09-19T21:00:34.033Z","type":"message"}
{"nick":"littledan","message":"We can probably get more engagement that way than we can in this channel","date":"2019-09-19T21:00:50.199Z","type":"message"}
{"nick":"devsnek","message":"nice to hear alternatives to static are being discussed","date":"2019-09-19T21:01:47.376Z","type":"message"}
{"nick":"devsnek","message":"rbuckton seems to have captured pretty well what i was saying above","date":"2019-09-19T21:03:16.334Z","type":"message"}
{"nick":"shu","message":"devsnek: i wonder if you might feel differently if static decorators were named \"limited macros\"?","date":"2019-09-19T21:09:13.249Z","type":"message"}
{"nick":"devsnek","message":"shu: perhaps","date":"2019-09-19T21:09:53.487Z","type":"message"}
{"nick":"shu","message":"when i think about these as fixed-form macros it is not an odd thing that they aren't arbitrary JS functions","date":"2019-09-19T21:10:14.262Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2019-09-19T21:10:20.572Z","type":"message"}
{"nick":"devsnek","message":"but then i have a bunch of other questions","date":"2019-09-19T21:10:25.121Z","type":"message"}
{"nick":"devsnek","message":"like why they have an understanding of runtime semantics","date":"2019-09-19T21:10:34.552Z","type":"message"}
{"nick":"devsnek","message":"they're sort of in limbo at the moment","date":"2019-09-19T21:10:46.030Z","type":"message"}
{"nick":"shu","message":"what is their understanding of runtime semantics?","date":"2019-09-19T21:10:46.064Z","type":"message"}
{"nick":"devsnek","message":"hooking structures at certain times, etc","date":"2019-09-19T21:11:03.661Z","type":"message"}
{"nick":"devsnek","message":"i guess you could say `@initialize` is a macro that explicitly looks for the syntax `a = b`","date":"2019-09-19T21:11:52.532Z","type":"message"}
{"nick":"shu","message":"like @initialize doing something per instance?","date":"2019-09-19T21:12:01.633Z","type":"message"}
{"nick":"devsnek","message":"but then what code does it return","date":"2019-09-19T21:12:05.779Z","type":"message"}
{"nick":"devsnek","message":"generally \"macros\" operate on code, not runtime structures","date":"2019-09-19T21:12:22.129Z","type":"message"}
{"nick":"shu","message":"well, for @initialize, there is a code transform that accomplishes the same task","date":"2019-09-19T21:13:58.676Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-09-19T21:14:03.034Z","type":"message"}
{"nick":"shu","message":"are you saying that that transform is non-local, so it's kinda weird?","date":"2019-09-19T21:14:10.003Z","type":"message"}
{"nick":"shu","message":"like it somehow reaches into the constructor and insert some code","date":"2019-09-19T21:14:18.272Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-09-19T21:14:25.311Z","type":"message"}
{"nick":"shu","message":"instead of doing it at the site where the \"macro\" is applied","date":"2019-09-19T21:14:25.311Z","type":"message"}
{"nick":"shu","message":"i see, that's fair","date":"2019-09-19T21:14:32.890Z","type":"message"}
{"nick":"devsnek","message":"i mean i guess you could turn `a = b` into `a = (() => { return modified_b })()`","date":"2019-09-19T21:14:45.068Z","type":"message"}
{"nick":"devsnek","message":"entirely at the syntax level","date":"2019-09-19T21:15:00.040Z","type":"message"}
{"nick":"devsnek","message":"but then i'd ask where the ability to arbitrarily map other types of syntax is","date":"2019-09-19T21:16:27.381Z","type":"message"}
{"nick":"devsnek","message":"not just `a = b` or `class X {}`","date":"2019-09-19T21:16:41.477Z","type":"message"}
{"nick":"shu","message":"perhaps the non-locality is a real impediment to the macro mental model but i need to think on it some more","date":"2019-09-19T21:16:43.592Z","type":"message"}
{"nick":"shu","message":"right, that's why it's limited","date":"2019-09-19T21:17:04.414Z","type":"message"}
{"nick":"devsnek","message":"i've never expected decorators to be completely no-overhead","date":"2019-09-19T21:17:20.853Z","type":"message"}
{"nick":"shu","message":"with the foundations in place more expressive macros could be built on top","date":"2019-09-19T21:17:31.868Z","type":"message"}
{"nick":"devsnek","message":"i always expected them to be some form of running code, and running code always has overhead","date":"2019-09-19T21:17:38.841Z","type":"message"}
{"nick":"devsnek","message":"shu: well i'd disagree that its foundations, the syntax would be all wrong","date":"2019-09-19T21:18:13.049Z","type":"message"}
{"nick":"devsnek","message":"macros need to define their bounds, like how c uses line endings or rust uses () and {}","date":"2019-09-19T21:18:35.704Z","type":"message"}
{"nick":"shu","message":"it's beyond running vs not running code","date":"2019-09-19T21:18:39.668Z","type":"message"}
{"nick":"shu","message":"the feedback has been it disables optimizations, not just that it might run some code","date":"2019-09-19T21:19:16.421Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2019-09-19T21:19:26.357Z","type":"message"}
{"nick":"devsnek","message":"on a very different note: https://tc39.es/ecma262/#sec-arraysetlength","date":"2019-09-19T21:24:34.130Z","type":"message"}
{"nick":"devsnek","message":"this iterates from current length to new length and deletes everything","date":"2019-09-19T21:24:59.003Z","type":"message"}
{"nick":"devsnek","message":"would it be an observable change to iterate over the actual keys of the object instead?","date":"2019-09-19T21:25:33.032Z","type":"message"}
{"nick":"devsnek","message":"i thought it was doing it the current way because [[Delete]] would bubble up to the prototype or something","date":"2019-09-19T21:25:56.498Z","type":"message"}
{"nick":"devsnek","message":"but it isn't","date":"2019-09-19T21:25:59.397Z","type":"message"}
{"nick":"shu","message":"iterate over the actual keys?","date":"2019-09-19T21:27:19.553Z","type":"message"}
{"nick":"devsnek","message":"most likely EnumerateObjectProperties","date":"2019-09-19T21:27:59.538Z","type":"message"}
{"nick":"devsnek","message":"the reason i bring this up is that something like `new Array(2 ** 32).length = 0` can be debilitating to engines without a lot of fancy optimizations","date":"2019-09-19T21:29:23.111Z","type":"message"}
{"nick":"shu","message":"i'm confused","date":"2019-09-19T21:30:37.335Z","type":"message"}
{"nick":"shu","message":"ArraySetLength is only on array exotic objects right","date":"2019-09-19T21:30:52.612Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2019-09-19T21:30:52.665Z","type":"message"}
{"nick":"shu","message":"so if it's not observable what is the debilitating thing to engines","date":"2019-09-19T21:31:00.502Z","type":"message"}
{"nick":"devsnek","message":"it has to iterate over 2 ** 32 elements","date":"2019-09-19T21:31:08.256Z","type":"message"}
{"nick":"shu","message":"but it can simply not do that because the delete isn't observable?","date":"2019-09-19T21:31:23.267Z","type":"message"}
{"nick":"devsnek","message":"in fact if i plug that code into eshost it just freezes","date":"2019-09-19T21:31:53.194Z","type":"message"}
{"nick":"devsnek","message":"i think because of xs and engine262","date":"2019-09-19T21:32:00.497Z","type":"message"}
{"nick":"devsnek","message":"shu: i'm not entirely sure what's observable at the moment","date":"2019-09-19T21:32:35.504Z","type":"message"}
{"nick":"devsnek","message":"at first i thought it was for something like `Array.prototype[0] = 5; new Array(1).length = 0; Array.prototype[0] === undefined`","date":"2019-09-19T21:32:58.169Z","type":"message"}
{"nick":"devsnek","message":"but it doesn't do that","date":"2019-09-19T21:33:01.025Z","type":"message"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-09-19T21:36:15.357Z","type":"quit"}
{"nick":"devsnek","message":"wow changing ArraySetLength to only delete defined properties doesn't cause any test262 failures","date":"2019-09-19T21:54:09.610Z","type":"message"}
{"nick":"devsnek","message":"wow this isn't even observable if you use a proxy around an array","date":"2019-09-19T22:00:58.062Z","type":"message"}
{"nick":"ljharb","message":"devsnek: does that mean steps can be removed from it?","date":"2019-09-19T23:08:56.068Z","type":"message"}
{"nick":"TimothyGu","message":"ljharb: https://github.com/tc39/ecma262/pull/1702","date":"2019-09-19T23:09:18.690Z","type":"message"}
{"nick":"ljharb","message":"well alrighty","date":"2019-09-19T23:09:39.059Z","type":"message"}
{"nick":"shu","message":"if it's not observable i don't understand the impetus","date":"2019-09-19T23:15:34.935Z","type":"message"}
{"nick":"shu","message":"deleting all properties between newLen and oldLen is pretty clear, why spec an optimization into it?","date":"2019-09-19T23:16:21.960Z","type":"message"}
{"nick":"devsnek","message":"shu: i think its clearer, and it stops implementers from doing a silly algorithm by accident","date":"2019-09-19T23:19:05.257Z","type":"message"}
{"nick":"shu","message":"devsnek: the former is opinion i'll defer to the editor group, but the latter isn't a thing that ecma262 does","date":"2019-09-19T23:24:51.315Z","type":"message"}
{"nick":"devsnek","message":"the algorithms in the spec generally adhere to the spec's guarantees for their time complexities","date":"2019-09-19T23:25:56.196Z","type":"message"}
{"nick":"shu","message":"e.g. all objects are eternal in the spec, but it'd be very silly to implement this","date":"2019-09-19T23:26:02.023Z","type":"message"}
{"nick":"devsnek","message":"at the very least, it doesn't match reality","date":"2019-09-19T23:26:05.737Z","type":"message"}
{"nick":"devsnek","message":"if you don't think it makes it clearer, that would be a valid reason not to merge it","date":"2019-09-19T23:27:05.214Z","type":"message"}
{"nick":"devsnek","message":"i agree that the spec shouldn't be hyper optimized","date":"2019-09-19T23:27:17.588Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T23:36:28.801Z","type":"quit"}
{"nick":"Bakkot","message":"devsnek: \"algorithms in the spec generally adhere to the spec's guarantees for their time complexities\" is not the case; e.g. Maps are spec'd to iterate over lists","date":"2019-09-19T23:52:17.562Z","type":"message"}
{"nick":"Bakkot","message":"also those the algorithm in the spec has the same time complexity as the algorithm in your PR","date":"2019-09-19T23:52:42.911Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: that matches the spec's guarantee, but not implementations","date":"2019-09-19T23:52:51.472Z","type":"message"}
{"nick":"devsnek","message":"fair enough for my pr, although i'm thinking mostly about arrays with holes","date":"2019-09-19T23:54:01.517Z","type":"message"}
{"nick":"devsnek","message":"its very difficult to verify the spec when one of the tests tries to iterate over four million elements","date":"2019-09-19T23:54:17.425Z","type":"message"}
{"nick":"devsnek","message":"billion*","date":"2019-09-19T23:54:57.865Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-09-19T23:55:49.547Z","type":"quit"}
