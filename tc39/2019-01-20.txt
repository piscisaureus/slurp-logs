{"nick":"umpc","reason":"Ping timeout: 252 seconds","date":"2019-01-20T00:15:33.799Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-20T00:23:36.632Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-20T00:25:50.045Z","type":"join"}
{"nick":"keith_miller","reason":"Read error: Connection reset by peer","date":"2019-01-20T00:51:50.268Z","type":"quit"}
{"nick":"keith_m__","date":"2019-01-20T00:51:55.827Z","type":"join"}
{"nick":"keith_m__","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-20T01:14:26.238Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-20T01:56:01.914Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-20T03:21:35.030Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2019-01-20T05:03:58.488Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-01-20T06:46:07.677Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-20T10:10:38.015Z","type":"join"}
{"nick":"linclark","reason":"Ping timeout: 260 seconds","date":"2019-01-20T11:00:26.287Z","type":"quit"}
{"nick":"linclark","date":"2019-01-20T11:06:46.077Z","type":"join"}
{"nick":"jmdyck","date":"2019-01-20T12:42:16.531Z","type":"join"}
{"nick":"howdoi","date":"2019-01-20T13:34:29.780Z","type":"join"}
{"nick":"mgol","date":"2019-01-20T14:08:22.912Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-20T15:00:17.748Z","type":"quit"}
{"nick":"devsnek","message":"littledan: what's the difference between `@thing(x)` and `@thing: x`","date":"2019-01-20T17:35:33.844Z","type":"message"}
{"nick":"littledan","message":"devsnek: they're entirely different constructs?","date":"2019-01-20T18:59:39.235Z","type":"message"}
{"nick":"littledan","message":"@thing(x) is already given semantics by the Stage 2 decorators proposal","date":"2019-01-20T18:59:55.187Z","type":"message"}
{"nick":"littledan","message":"@thing: x would be able to be defined for something different","date":"2019-01-20T19:00:05.336Z","type":"message"}
{"nick":"devsnek","message":"i must just be missing something","date":"2019-01-20T19:00:24.315Z","type":"message"}
{"nick":"devsnek","message":"i read through the explainer but i couldn't figure out what it's actually adding except a different syntax","date":"2019-01-20T19:01:09.206Z","type":"message"}
{"nick":"devsnek","message":"but what does the new syntax do","date":"2019-01-20T19:01:39.957Z","type":"message"}
{"nick":"devsnek","message":"like `@use(tco)` vs `@use: tco`","date":"2019-01-20T19:03:53.265Z","type":"message"}
{"nick":"littledan","message":"I mean, we'd have to define semantics for each thing","date":"2019-01-20T19:08:57.823Z","type":"message"}
{"nick":"littledan","message":"it's a syntax error without a proposal to support it","date":"2019-01-20T19:09:08.165Z","type":"message"}
{"nick":"littledan","message":"a separate proposal would define semantics for the built-in decorator and make it no longer a syntax error","date":"2019-01-20T19:09:21.416Z","type":"message"}
{"nick":"littledan","message":"you're not supposed to read the whole thing on Twitter!","date":"2019-01-20T19:09:36.205Z","type":"message"}
{"nick":"devsnek","message":"littledan: well you're proposing it, what are the semantics you're proposing","date":"2019-01-20T19:14:14.486Z","type":"message"}
{"nick":"littledan","message":"I am proposing that this be a syntactic space for future features","date":"2019-01-20T19:14:37.593Z","type":"message"}
{"nick":"devsnek","message":"is it not already?","date":"2019-01-20T19:14:56.760Z","type":"message"}
{"nick":"littledan","message":"not that it have just one set of semantics ,but that we let a bunch of different features that need syntax use built-in decorators","date":"2019-01-20T19:15:00.978Z","type":"message"}
{"nick":"littledan","message":"well, kinda, but I want to discuss together whether this makes sense, and see if we might align on this","date":"2019-01-20T19:15:18.822Z","type":"message"}
{"nick":"littledan","message":"not for everything, but for places where it makes sense","date":"2019-01-20T19:15:26.646Z","type":"message"}
{"nick":"littledan","message":"for example, it'd be nice to implement the general built-in decorator syntax in Babel and then you can just use a plugin to implement a new feature, rather than needing to hack the parser","date":"2019-01-20T19:15:51.683Z","type":"message"}
{"nick":"littledan","message":"but, this only makes sense if the committee and community are somehow open to the idea","date":"2019-01-20T19:16:02.955Z","type":"message"}
{"nick":"devsnek","message":"but like what's the difference between proposing that `@use(tco)` does something vs proposing that `@use: tco` does something","date":"2019-01-20T19:16:11.982Z","type":"message"}
{"nick":"littledan","message":"so, that's why I want to ask them","date":"2019-01-20T19:16:12.745Z","type":"message"}
{"nick":"littledan","message":"well, they are just different pieces of source code that we could assign different semantics to; I guess I don't understand the question","date":"2019-01-20T19:16:33.335Z","type":"message"}
{"nick":"littledan","message":"I am proposing that @use(tco) have a certain meaning when put in front of a class, so that sort of \"takes the space away\" for built-in decorators there","date":"2019-01-20T19:16:58.858Z","type":"message"}
{"nick":"AtumT","reason":"Ping timeout: 246 seconds","date":"2019-01-20T19:19:48.003Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-20T19:20:18.547Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-01-20T19:38:26.222Z","type":"quit"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-01-20T19:40:41.799Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-20T19:40:57.871Z","type":"join"}
{"nick":"devsnek","message":"do i have to use string representation to get the high and low of a number in js","date":"2019-01-20T19:56:46.473Z","type":"message"}
{"nick":"mgol","date":"2019-01-20T20:00:40.279Z","type":"join"}
{"nick":"AtumT_","date":"2019-01-20T20:23:23.888Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 250 seconds","date":"2019-01-20T20:23:50.914Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-20T20:28:58.439Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 272 seconds","date":"2019-01-20T20:30:26.871Z","type":"quit"}
{"nick":"littledan","message":"Would some other syntax be better, like @[use tco] or @{use: tco} or whatever?","date":"2019-01-20T21:06:54.092Z","type":"message"}
{"nick":"littledan","message":"the syntax after @ is very restrictive, so we have a lot of options open to us","date":"2019-01-20T21:07:05.798Z","type":"message"}
{"nick":"littledan","message":"or @@tco, or @#&^$tco, or...","date":"2019-01-20T21:07:27.950Z","type":"message"}
{"nick":"devsnek","message":"littledan: is `use` a well known identifier, not something being looked up in scope?","date":"2019-01-20T21:17:15.257Z","type":"message"}
{"nick":"littledan","message":"no, the thing before the colon is not looked up in the scope","date":"2019-01-20T21:17:31.083Z","type":"message"}
{"nick":"littledan","message":"it's a syntax error","date":"2019-01-20T21:17:33.709Z","type":"message"}
{"nick":"littledan","message":"it must be handled statically","date":"2019-01-20T21:17:43.578Z","type":"message"}
{"nick":"devsnek","message":"ok that makes more sense","date":"2019-01-20T21:17:52.176Z","type":"message"}
{"nick":"littledan","message":"otherwise, special built-in things would be impossible","date":"2019-01-20T21:17:53.179Z","type":"message"}
{"nick":"littledan","message":"do you think there's something I can write in the explainer to clarify this?","date":"2019-01-20T21:18:01.379Z","type":"message"}
{"nick":"devsnek","message":"🤷 probably just me being slow","date":"2019-01-20T21:18:40.775Z","type":"message"}
{"nick":"devsnek","message":"in any case, i think `@` is probably a bad symbol in that case","date":"2019-01-20T21:18:56.400Z","type":"message"}
{"nick":"littledan","message":"why's that?","date":"2019-01-20T21:20:10.961Z","type":"message"}
{"nick":"littledan","message":"we don't really have a bunch of spare symbols...","date":"2019-01-20T21:20:22.914Z","type":"message"}
{"nick":"littledan","message":"I was thinking of working towards the intuition that @ means modifying something, and # means integrity","date":"2019-01-20T21:20:41.464Z","type":"message"}
{"nick":"devsnek","message":"well @ is already doing decorators","date":"2019-01-20T21:22:36.723Z","type":"message"}
{"nick":"devsnek","message":"plus it leaves out the ability for built in things without an operand","date":"2019-01-20T21:22:59.948Z","type":"message"}
{"nick":"devsnek","message":"for example, rust has a `#[test]`, without arguments","date":"2019-01-20T21:23:30.314Z","type":"message"}
{"nick":"littledan","message":"well, # is private","date":"2019-01-20T21:25:15.440Z","type":"message"}
{"nick":"littledan","message":"the document suggests that built-in things without arguments use something like @use: foo or @def: bar","date":"2019-01-20T21:25:46.797Z","type":"message"}
{"nick":"devsnek","message":"i'm not saying `#` is better","date":"2019-01-20T21:25:55.543Z","type":"message"}
{"nick":"littledan","message":"so, it's sort of two keywords","date":"2019-01-20T21:25:59.578Z","type":"message"}
{"nick":"devsnek","message":"i feel like the solution would to grab well known decorators from somewhere","date":"2019-01-20T21:26:29.550Z","type":"message"}
{"nick":"littledan","message":"I don't think that would lead to something capable of solving any of the use cases in the document. All of those require parse-time knowledge of what built-in decorator is being called","date":"2019-01-20T21:26:58.580Z","type":"message"}
{"nick":"littledan","message":"the only alternatives I see are refraining from adding features (which is the best answer, if we shouldn't add the feature anyway) or more case-by-case syntax hacking when we do have something that we really want to add, as we've been doing.","date":"2019-01-20T21:27:56.549Z","type":"message"}
{"nick":"devsnek","message":"i didn't see where it needing to be static came into play","date":"2019-01-20T21:30:44.104Z","type":"message"}
{"nick":"littledan","message":"oh, I see","date":"2019-01-20T21:33:37.931Z","type":"message"}
{"nick":"littledan","message":"maybe this could be made more clear?","date":"2019-01-20T21:33:45.507Z","type":"message"}
{"nick":"littledan","message":"do you see how the use cases need to be static?","date":"2019-01-20T21:33:58.720Z","type":"message"}
{"nick":"devsnek","message":"nope","date":"2019-01-20T21:34:03.710Z","type":"message"}
{"nick":"devsnek","message":"all the individual examples look useful, but i don't see why they need to be static","date":"2019-01-20T21:34:10.674Z","type":"message"}
{"nick":"littledan","message":"well, as an example of something we have, you know statically whether async functions are declared as async","date":"2019-01-20T21:36:55.138Z","type":"message"}
{"nick":"littledan","message":"and this lets await be used inside of it","date":"2019-01-20T21:36:55.328Z","type":"message"}
{"nick":"littledan","message":"for tail calls, this needs to be static so that the right interpreter bytecode can be defined","date":"2019-01-20T21:36:55.328Z","type":"message"}
{"nick":"devsnek","message":"oh if you put the tco thing on the actual return","date":"2019-01-20T21:38:29.749Z","type":"message"}
{"nick":"devsnek","message":"what if decorators can decorate a LeftHandSideExpression","date":"2019-01-20T21:39:01.701Z","type":"message"}
{"nick":"littledan","message":"well, that would have grammar difficulties, as described in the explainer","date":"2019-01-20T21:41:18.076Z","type":"message"}
{"nick":"littledan","message":"see https://github.com/littledan/proposal-built-in-decorators#no-support-for-decorating-arbitrary-expressions","date":"2019-01-20T21:42:12.593Z","type":"message"}
{"nick":"devsnek","message":"well that's assuming you use the colon syntax","date":"2019-01-20T21:48:45.373Z","type":"message"}
{"nick":"devsnek","message":"actually i guess `@x y` is still ambiguous :(","date":"2019-01-20T21:49:06.121Z","type":"message"}
{"nick":"littledan","message":"Yeah, we need something more than that","date":"2019-01-20T21:49:24.096Z","type":"message"}
{"nick":"devsnek","message":"btw for tco, i'd extend the return grammar","date":"2019-01-20T21:49:34.171Z","type":"message"}
{"nick":"devsnek","message":"`return tail fn()` or something","date":"2019-01-20T21:49:42.913Z","type":"message"}
{"nick":"littledan","message":"that has ASI hazards","date":"2019-01-20T21:49:49.210Z","type":"message"}
{"nick":"littledan","message":"people weren't happy about any of the grammars we thought of","date":"2019-01-20T21:49:56.089Z","type":"message"}
{"nick":"littledan","message":"there are also issues where it should be available within a ternary or ||, it's complicated","date":"2019-01-20T21:50:07.492Z","type":"message"}
{"nick":"devsnek","message":"decorating return is kinda ugly though","date":"2019-01-20T21:50:20.226Z","type":"message"}
{"nick":"devsnek","message":"you know rust kinda got this right by surrounding it in []","date":"2019-01-20T21:50:42.354Z","type":"message"}
{"nick":"devsnek","message":"`@[builtin()]` done","date":"2019-01-20T21:50:51.373Z","type":"message"}
{"nick":"littledan","message":"so, I'm OK with it if some of these examples don't make sense, this is more like an idea for more investigation","date":"2019-01-20T21:51:01.357Z","type":"message"}
{"nick":"littledan","message":"yeah I'd be up for @[], though maybe it's confusing that it's array-like","date":"2019-01-20T21:51:13.513Z","type":"message"}
{"nick":"devsnek","message":"actually surrounding it with brackets is kinda nice","date":"2019-01-20T21:51:18.614Z","type":"message"}
{"nick":"devsnek","message":"since the existing grammar only allows an identifier there","date":"2019-01-20T21:51:26.372Z","type":"message"}
{"nick":"devsnek","message":"clear separation 👌","date":"2019-01-20T21:51:31.436Z","type":"message"}
{"nick":"littledan","message":"https://www.irccloud.com/pastebin/BDNJ1jk7/","date":"2019-01-20T21:53:26.794Z","type":"message"}
{"nick":"devsnek","message":"👍","date":"2019-01-20T21:54:22.471Z","type":"message"}
{"nick":"littledan","message":"FWIW, @[tuple] [1, 2, 3] would be pretty weird","date":"2019-01-20T21:54:22.937Z","type":"message"}
{"nick":"devsnek","message":"any matching characters work in theory","date":"2019-01-20T21:55:00.243Z","type":"message"}
{"nick":"littledan","message":"@/*<< tuple >>*/ [1, 2, 3]","date":"2019-01-20T21:55:45.992Z","type":"message"}
{"nick":"devsnek","message":"👌","date":"2019-01-20T21:56:19.497Z","type":"message"}
{"nick":"littledan","message":"OK, I'll think more about syntax","date":"2019-01-20T21:57:13.235Z","type":"message"}
{"nick":"littledan","message":"it does seem useful to have a well-delimited beginning and end","date":"2019-01-20T21:57:20.929Z","type":"message"}
{"nick":"littledan","message":"it just risks adding some more noise","date":"2019-01-20T21:57:34.099Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-20T22:13:05.256Z","type":"join"}
{"nick":"littledan","message":"yeah, I'm getting more and more convinced that @[] is better than @:. This could be something to bikeshed about at the TC39 meeting","date":"2019-01-20T22:19:54.095Z","type":"message"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-20T22:21:05.980Z","type":"quit"}
{"nick":"Havvy","reason":"Ping timeout: 250 seconds","date":"2019-01-20T23:01:34.464Z","type":"quit"}
{"nick":"isHavvy","date":"2019-01-20T23:01:41.256Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-20T23:06:14.406Z","type":"quit"}
{"nick":"isHavvy","reason":"Ping timeout: 246 seconds","date":"2019-01-20T23:21:46.257Z","type":"quit"}
{"nick":"Havvy","date":"2019-01-20T23:23:04.431Z","type":"join"}
