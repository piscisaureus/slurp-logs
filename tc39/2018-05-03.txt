{"nick":"Draggor","reason":"Read error: Connection reset by peer","date":"2018-05-03T00:25:33.288Z","type":"quit"}
{"nick":"joyee","date":"2018-05-03T01:01:36.788Z","type":"join"}
{"nick":"isHavvyGhosting","new_nick":"isHavvy","date":"2018-05-03T01:03:16.625Z","type":"nick"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-05-03T01:32:56.219Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-05-03T02:05:24.572Z","type":"quit"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2018-05-03T03:31:36.946Z","type":"quit"}
{"nick":"Draggor","date":"2018-05-03T04:00:07.499Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-05-03T04:16:46.613Z","type":"quit"}
{"nick":"seishun","date":"2018-05-03T07:16:09.363Z","type":"join"}
{"nick":"jdalton_","reason":"Quit: Connection closed for inactivity","date":"2018-05-03T09:01:58.968Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-03T10:25:24.863Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-03T10:25:55.254Z","type":"join"}
{"nick":"AtumT","date":"2018-05-03T11:08:19.808Z","type":"join"}
{"nick":"Draggor","reason":"Read error: Connection reset by peer","date":"2018-05-03T11:34:05.557Z","type":"quit"}
{"nick":"jmdyck","date":"2018-05-03T12:42:26.171Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-05-03T13:16:31.625Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-05-03T14:07:50.868Z","type":"join"}
{"nick":"bradleymeck","date":"2018-05-03T14:08:58.089Z","type":"part"}
{"nick":"bradleymeck_","date":"2018-05-03T14:09:17.665Z","type":"quit"}
{"nick":"bradleymeck_","date":"2018-05-03T14:09:48.649Z","type":"join"}
{"nick":"bradleymeck_","reason":"Client Quit","date":"2018-05-03T14:09:51.517Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-05-03T14:12:12.303Z","type":"join"}
{"nick":"Draggor","date":"2018-05-03T14:30:17.467Z","type":"join"}
{"nick":"ljharb","message":"mathiasbynens: isn't the \"groups\" property supposed to only be present on the match object when the regex has groups, to ensure back compat?","date":"2018-05-03T16:11:11.429Z","type":"message"}
{"nick":"ljharb","message":"i'm asking because in node 10, `'groups' in /a/.exec('a')` returns true, and that seems like a bug","date":"2018-05-03T16:12:49.584Z","type":"message"}
{"nick":"ljharb","message":"(and it's breaking one of my packages' tests)","date":"2018-05-03T16:12:57.714Z","type":"message"}
{"nick":"ljharb","message":"i guess i see in https://tc39.github.io/ecma262/#sec-regexpbuiltinexec step 26 that it's supposed to always be present","date":"2018-05-03T16:15:36.472Z","type":"message"}
{"nick":"keith_mi_","date":"2018-05-03T16:29:08.506Z","type":"join"}
{"nick":"Bakkot","message":"ljharb: it was changed to the current state after discussion in committee IIRC","date":"2018-05-03T16:39:40.652Z","type":"message"}
{"nick":"ljharb","message":"lol yeah it's entirely possible i argued for it to be the way it is now","date":"2018-05-03T16:40:05.542Z","type":"message"}
{"nick":"ljharb","message":"\"i do not recall\"","date":"2018-05-03T16:40:15.086Z","type":"message"}
{"nick":"Bakkot","message":"seems to be in https://github.com/rwaldron/tc39-notes/blob/e6644efb75c105f93713301caabf0587230f8a6a/es8/2017-03/mar-21.md#10iib-regexp-named-groups-for-stage-3","date":"2018-05-03T16:42:20.326Z","type":"message"}
{"nick":"Bakkot","message":"er, or the previous meeting","date":"2018-05-03T16:42:36.546Z","type":"message"}
{"nick":"jdalton_","date":"2018-05-03T16:44:06.446Z","type":"join"}
{"nick":"ljharb","message":"aha, that's one of the two meetings i wasn't at","date":"2018-05-03T16:44:19.284Z","type":"message"}
{"nick":"mylesborins","reason":"Ping timeout: 260 seconds","date":"2018-05-03T16:50:29.470Z","type":"quit"}
{"nick":"vikash-afk","reason":"Ping timeout: 240 seconds","date":"2018-05-03T16:50:57.863Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-03T16:51:28.054Z","type":"join"}
{"nick":"vikash-afk","date":"2018-05-03T16:54:52.455Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-03T17:10:30.608Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-05-03T17:11:23.184Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-03T18:07:46.318Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-05-03T18:08:16.515Z","type":"join"}
{"nick":"srl295","date":"2018-05-03T19:10:06.545Z","type":"join"}
{"nick":"caitp","message":"what if you could use private names within object literals within a class scope, so that you could have factory methods which return objects with private state","date":"2018-05-03T19:14:41.093Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: why just class scope? https://gist.github.com/bmeck/baa8f21cb0b33d4c0db3aad05a38473a","date":"2018-05-03T19:17:11.331Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: importing private names gets a bit wonky though but is doable","date":"2018-05-03T19:18:13.342Z","type":"message"}
{"nick":"caitp","message":"well, lets say \"within a valid PNE\"","date":"2018-05-03T19:23:49.450Z","type":"message"}
{"nick":"bradleymeck","message":"\"PNE\"?","date":"2018-05-03T19:24:21.611Z","type":"message"}
{"nick":"caitp","message":"P(rivate)N(ame)(E)nvironment","date":"2018-05-03T19:24:31.762Z","type":"message"}
{"nick":"bradleymeck","message":"ah","date":"2018-05-03T19:24:58.630Z","type":"message"}
{"nick":"bradleymeck","message":"caitp I really want that feature, removes a lot of weakmap pain","date":"2018-05-03T19:25:20.679Z","type":"message"}
{"nick":"caitp","message":"wow i mixed up the acronym conventions half way thru describing the acronym","date":"2018-05-03T19:25:32.822Z","type":"message"}
{"nick":"bradleymeck","message":"cross module is less common and can probably be punted, but in general would remove a fair bit of decorator usage for me as well","date":"2018-05-03T19:26:38.815Z","type":"message"}
{"nick":"caitp","message":"the other thing is, I'm not sure if it should be \"PrivateFieldSet only works if the field has been added via PrivateNameAdd\" --- like, maybe you want to add a private flag to some object passed in through the API to indicate a state of processing it or something","date":"2018-05-03T19:26:57.785Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: not sure I understand that, can't you just add a state field or do some sort of check like in last example file of that gist?","date":"2018-05-03T19:28:08.273Z","type":"message"}
{"nick":"caitp","message":"or is it PrivateFieldAdd, whatever","date":"2018-05-03T19:28:10.619Z","type":"message"}
{"nick":"caitp","message":"step 4 of https://tc39.github.io/proposal-class-fields/#sec-privatefieldset","date":"2018-05-03T19:29:04.958Z","type":"message"}
{"nick":"bradleymeck","message":"ah, yea, that is somewhat an issue if you want to add private fields after construction","date":"2018-05-03T19:31:30.712Z","type":"message"}
{"nick":"ljharb","message":"i don't think you're supposed to be able to add private fields after construction in this proposal","date":"2018-05-03T19:44:41.684Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-05-03T19:46:02.100Z","type":"quit"}
{"nick":"caitp","message":"you aren't. but I'm not sure that's a good thing :p","date":"2018-05-03T19:47:50.024Z","type":"message"}
{"nick":"caitp","message":"but also not sure it's not","date":"2018-05-03T19:48:02.733Z","type":"message"}
{"nick":"ljharb","message":"i think you have WeakMaps if you want to add private data to things you don't own","date":"2018-05-03T19:56:01.492Z","type":"message"}
{"nick":"ljharb","message":"and things you own, you'd create with the private field","date":"2018-05-03T19:56:06.418Z","type":"message"}
{"nick":"jwalden","date":"2018-05-03T19:56:43.777Z","type":"join"}
{"nick":"caitp","message":"i mean, yes, but don't you think private state is a weird use for weak maps","date":"2018-05-03T19:57:07.715Z","type":"message"}
{"nick":"caitp","message":"seems like the wrong abstraction","date":"2018-05-03T19:57:15.655Z","type":"message"}
{"nick":"ljharb","message":"no? that's the main value of weak maps imo - private side channel data","date":"2018-05-03T19:58:22.925Z","type":"message"}
{"nick":"caitp","message":"i see it as an association without retaining the associated key --- that association could hold private data, sure --- but not necessarily","date":"2018-05-03T19:59:19.490Z","type":"message"}
{"nick":"caitp","message":"in my mental model, associating private state isn't the point of it","date":"2018-05-03T19:59:50.821Z","type":"message"}
{"nick":"ljharb","message":"ok, but via closure, it'd be private too","date":"2018-05-03T20:03:52.739Z","type":"message"}
{"nick":"ljharb","message":"and i think the mental model of \"private state\" is something that is only known by the owner of the code","date":"2018-05-03T20:04:07.852Z","type":"message"}
{"nick":"ljharb","message":"meaning, you can't imbue it on something you don't own","date":"2018-05-03T20:04:13.173Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: you are explicitly able to add private fields after construction using the return-override trick, but that's a pattern to encourage","date":"2018-05-03T20:04:52.322Z","type":"message"}
{"nick":"Bakkot","message":"anyway, strongly agreed that weakmaps are the correct abstraction for keeping private information about objects you don't own","date":"2018-05-03T20:05:26.333Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: wait, that doesn't make sense. you mean a return-overridden object can have `.#foo = 3` on it?","date":"2018-05-03T20:05:28.405Z","type":"message"}
{"nick":"ljharb","message":"if i return-override then it shouldn't have any of the private state of `this` or of its superclasses","date":"2018-05-03T20:05:43.697Z","type":"message"}
{"nick":"caitp","message":"performance wise, it's possible (likely even) that weak maps will work better for arbitrary objects instead of adding new fields and causing map migrations for things that don't belong to you --- but it's still a collection of objects associated with some other objects without retaining the \"some other objects\", when what you really want is a way to give some other arbitrary object a boolean field indicating that you've","date":"2018-05-03T20:05:58.700Z","type":"message"}
{"nick":"caitp","message":" already looked at it.","date":"2018-05-03T20:05:58.897Z","type":"message"}
{"nick":"caitp","message":"so it's kind of a weird abstraction for doing that","date":"2018-05-03T20:06:23.773Z","type":"message"}
{"nick":"ljharb","message":"caitp: right but you should never mutate - \"give a field to\" - something you don't own, so i think the separate side channel is the better abstraction.","date":"2018-05-03T20:06:29.072Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not sure i really see the difference in mutation by adding a private field or by adding a weakmapping","date":"2018-05-03T20:07:32.158Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: I mean that you can add things to an object which already exists using return-override:","date":"2018-05-03T20:07:38.321Z","type":"message"}
{"nick":"Bakkot","message":"{ let o = {}; new class extends class { constructor(){ return o; } } { #x = 0; constructor() { super(); console.log(this === o && this.#x == 0); /* true */ } } }","date":"2018-05-03T20:07:40.817Z","type":"message"}
{"nick":"bradleymeck","message":"you can't extract that a weakmap or private field exists on a reference without having the map or field available already","date":"2018-05-03T20:08:00.349Z","type":"message"}
{"nick":"caitp","message":"conceptually, the map is a collection of associations, whereas the private field is a singular association","date":"2018-05-03T20:08:22.391Z","type":"message"}
{"nick":"caitp","message":"it's a conceptual difference","date":"2018-05-03T20:08:38.225Z","type":"message"}
{"nick":"bradleymeck","message":"not sure i agree on that point","date":"2018-05-03T20:08:50.280Z","type":"message"}
{"nick":"Bakkot","message":"caitp: it might just be bias from how I've been in the habit of doing this, but I am really, really used to using side-tables to hold for information about objects I don't own","date":"2018-05-03T20:08:55.245Z","type":"message"}
{"nick":"bradleymeck","message":"a private field is a way of including data/producing a binding not necessarily the bindings themselves","date":"2018-05-03T20:09:21.727Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: ah i see, you mean by extending it. ok, fair","date":"2018-05-03T20:09:44.603Z","type":"message"}
{"nick":"bradleymeck","message":"just like i don't think of strings/symbols as properties","date":"2018-05-03T20:09:52.445Z","type":"message"}
{"nick":"Bakkot","message":"caitp: part of that is just that I am strongly in the habit of treating objects I don't own as immutable, I guess","date":"2018-05-03T20:10:06.431Z","type":"message"}
{"nick":"ljharb","message":"(as are most JS devs, i would hope)","date":"2018-05-03T20:10:16.821Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: dreams","date":"2018-05-03T20:10:26.481Z","type":"message"}
{"nick":"caitp","message":"if they don't know you've mutated them, and it doesn't affect their stuff... did you _really_ mutate them?","date":"2018-05-03T20:10:47.807Z","type":"message"}
{"nick":"caitp","message":"I mean from the engine's PoV yes, but...","date":"2018-05-03T20:10:54.606Z","type":"message"}
{"nick":"ljharb","message":"lol fair, but at that point it's semantically a side channel","date":"2018-05-03T20:11:40.789Z","type":"message"}
{"nick":"bradleymeck","message":"just like a weakmap does","date":"2018-05-03T20:12:01.429Z","type":"message"}
{"nick":"Bakkot","message":"arguably no, but thinking of doing that would require me thinking of them as mutable, even though the mutation isn't observable to anyone else","date":"2018-05-03T20:12:03.470Z","type":"message"}
{"nick":"ljharb","message":"^","date":"2018-05-03T20:12:10.044Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot, not sure I understand that last statement","date":"2018-05-03T20:13:14.066Z","type":"message"}
{"nick":"bradleymeck","message":"if there are any side channels tied to the lifetime of a reference, how is it not seemingly mutation","date":"2018-05-03T20:13:40.277Z","type":"message"}
{"nick":"bradleymeck","message":"for that point even properties are similar just not thought of as \"side\"","date":"2018-05-03T20:14:00.033Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: I mean that if I am treating `o` as immutable, I'm not going to think \"Oh, I can do `o.#x = 0` to mark it\". Didn't mean to reply to the side-channel comment","date":"2018-05-03T20:14:01.203Z","type":"message"}
{"nick":"caitp","message":"we don't have `const& parameter` in JS, so we're forced to imagine it","date":"2018-05-03T20:14:09.043Z","type":"message"}
{"nick":"caitp","message":"which is fair I guess","date":"2018-05-03T20:14:39.087Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: we have a difference in mental model i think","date":"2018-05-03T20:14:44.450Z","type":"message"}
{"nick":"bradleymeck","message":"private fields are not really something i think of as being exactly like properties, i see them more like a special binding type","date":"2018-05-03T20:16:01.265Z","type":"message"}
{"nick":"bradleymeck","message":"they don't do delegation, they don't have reified keys, etc.","date":"2018-05-03T20:16:58.195Z","type":"message"}
{"nick":"Bakkot","message":"I definitely do think of them as being like properties except private.","date":"2018-05-03T20:18:09.620Z","type":"message"}
{"nick":"bradleymeck","message":"they act different enough that i can't think of them like properties without breaking my view of how properties work in JS. even with decorators they aren't reified to act like a key of a property","date":"2018-05-03T20:19:23.348Z","type":"message"}
{"nick":"bradleymeck","message":"the PrivateName#get/set is closer to a WeakMap API thank a key for a property","date":"2018-05-03T20:20:13.111Z","type":"message"}
{"nick":"bradleymeck","message":"than*","date":"2018-05-03T20:20:21.094Z","type":"message"}
{"nick":"ljharb","message":"they're definitely like properties","date":"2018-05-03T20:20:28.069Z","type":"message"}
{"nick":"ljharb","message":"even tho you'd model them with weakmaps","date":"2018-05-03T20:20:34.185Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: I do not think so","date":"2018-05-03T20:20:46.209Z","type":"message"}
{"nick":"bradleymeck","message":"they have a syntax very similar to properties, yes","date":"2018-05-03T20:20:58.375Z","type":"message"}
{"nick":"Bakkot","message":"well, we do have a difference in mental model then, yes!","date":"2018-05-03T20:21:03.581Z","type":"message"}
{"nick":"Bakkot","message":"Neither is objectivel correct","date":"2018-05-03T20:21:12.778Z","type":"message"}
{"nick":"bradleymeck","message":"yup","date":"2018-05-03T20:21:16.731Z","type":"message"}
{"nick":"Bakkot","message":"for me, the important things are \"it's a value stored on the object, and (to a much lesser degree of importance) if I invoke a function via it then it passes the object as the function's receiver\"","date":"2018-05-03T20:22:09.114Z","type":"message"}
{"nick":"Bakkot","message":"which is where my \"it's like a property\" mental model comes from","date":"2018-05-03T20:22:18.092Z","type":"message"}
{"nick":"bradleymeck","message":"i view that as the dispatch mechanism of `.#` not on the private field itself","date":"2018-05-03T20:23:03.582Z","type":"message"}
{"nick":"bradleymeck","message":"it forms the reference from the private field, the function call is separated from that in my mind","date":"2018-05-03T20:24:05.831Z","type":"message"}
{"nick":"ljharb","message":"what about `a.b()`?","date":"2018-05-03T20:24:18.388Z","type":"message"}
{"nick":"ljharb","message":"isn't that the same?","date":"2018-05-03T20:24:25.472Z","type":"message"}
{"nick":"bradleymeck","message":"@ljharb `a.b` forms a reference sure, but `.b` doesn't act like `.#b`","date":"2018-05-03T20:24:49.612Z","type":"message"}
{"nick":"ljharb","message":"in what way is it different?","date":"2018-05-03T20:25:03.727Z","type":"message"}
{"nick":"ljharb","message":"it doesn't walk the prototype chain, sure, but it's still accessing something that belongs to `a`, by name","date":"2018-05-03T20:25:33.279Z","type":"message"}
{"nick":"bradleymeck","message":"lack of delegation, lack of dynamic property in reference formation, lack of #b being a value that can be passed around","date":"2018-05-03T20:25:34.151Z","type":"message"}
{"nick":"Bakkot","message":"I definitely do not think about `a.b()` at a level of precision at whichthe notion of a reference would enter into things, in day to day life","date":"2018-05-03T20:25:38.245Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: `b` isn't a value that can be passed around either","date":"2018-05-03T20:25:45.260Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: it is a shorthand for `['b']`","date":"2018-05-03T20:25:56.232Z","type":"message"}
{"nick":"ljharb","message":"`.b` is syntax that *ends up* being `['b']`, but that's not the same thing","date":"2018-05-03T20:26:04.721Z","type":"message"}
{"nick":"bradleymeck","message":"how do they differ","date":"2018-05-03T20:26:12.912Z","type":"message"}
{"nick":"ljharb","message":"different restrictions","date":"2018-05-03T20:26:19.992Z","type":"message"}
{"nick":"ljharb","message":"identifier vs not","date":"2018-05-03T20:26:31.457Z","type":"message"}
{"nick":"bradleymeck","message":"you mean syntax?","date":"2018-05-03T20:26:38.099Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2018-05-03T20:26:42.198Z","type":"message"}
{"nick":"bradleymeck","message":"my mental problem is with semantics not syntax","date":"2018-05-03T20:26:46.694Z","type":"message"}
{"nick":"ljharb","message":"yes but \"being syntax\" has its own semantics","date":"2018-05-03T20:26:55.308Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not sure i follow that bit","date":"2018-05-03T20:27:06.719Z","type":"message"}
{"nick":"caitp","message":"the only mention of the \"private reference flag\" in the proposal is the part that forbids \"delete\" on private fields","date":"2018-05-03T20:27:07.657Z","type":"message"}
{"nick":"Domenic","message":"bterlson: does Ecmarkup still need manual bibliography updates? I am getting lots of xref errors for async generator stuff","date":"2018-05-03T20:27:28.457Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: it means that the fact that \".b\" and \"['b']\" have the same semantics does *not* mean that dot access has the semantics of \"you can do bracket access with it\"","date":"2018-05-03T20:27:53.286Z","type":"message"}
{"nick":"caitp","message":"well, going through IsPrivateReference it also dictates that you use PrivateValueGet and PrivateValueSet in GetValue and PutValue, but I mean, those aren't super different","date":"2018-05-03T20:28:20.059Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: define \"it\" in that last bit","date":"2018-05-03T20:28:32.972Z","type":"message"}
{"nick":"bradleymeck","message":"when is there a `.` access that doesn't work with `[]` access once converted to a string","date":"2018-05-03T20:29:02.314Z","type":"message"}
{"nick":"caitp","message":"\"throw if base is not an object\", \"don't walk prototype\", \"throw if the field doesn't exist\"","date":"2018-05-03T20:29:09.100Z","type":"message"}
{"nick":"caitp","message":"but those are the key differences?","date":"2018-05-03T20:29:41.259Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: those are differences between private reference and property references yes","date":"2018-05-03T20:30:33.398Z","type":"message"}
{"nick":"caitp","message":"I know that, I was just wondering if those were the semantic differences you were referring to","date":"2018-05-03T20:31:16.485Z","type":"message"}
{"nick":"caitp","message":"because apart from that, what else is there","date":"2018-05-03T20:31:30.004Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: that \"it\" being \"the part after the dot\"","date":"2018-05-03T20:31:32.153Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: the fact that currently there's no \"dot access that doesn't work with bracket access once converted to a string\", does not mean that's part of the definition of \"property\"","date":"2018-05-03T20:31:59.462Z","type":"message"}
{"nick":"Bakkot","message":"caitp: is \"throw if base is not an object\" actually distinct from \"throw if the field doesn't exist\"? accessing public properties has `requireObjectCoercible`, so the difference is just in what happens when accessing properties of non-null/undefined primitives. but those always lack the private fields and so the throwy-ness there is already covered","date":"2018-05-03T20:32:09.781Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: the reference has a non-reifiable value as part of it is a big mental shift for me","date":"2018-05-03T20:32:16.608Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: it might be part of the definition of \"public property\", but private properties are different and that's ok","date":"2018-05-03T20:32:21.803Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: interesting; I definitely don't consider the reifiability of public properties to be a bit part of my mental model of them","date":"2018-05-03T20:32:53.183Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: correct, but things like Symbol access also don't work with `.` but are following the same rules as other references","date":"2018-05-03T20:32:56.047Z","type":"message"}
{"nick":"Bakkot","message":"possibly because I write a lot of java/C++/etc","date":"2018-05-03T20:33:04.553Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: it means I can't share that part of the reference","date":"2018-05-03T20:33:23.910Z","type":"message"}
{"nick":"caitp","message":"Bakkot: well in the current proposal, the only things that can ever have private fields are objects declared using class syntax and created with `new <class>`, so in that sense they aren't different","date":"2018-05-03T20:33:28.994Z","type":"message"}
{"nick":"ljharb","message":"JS has bindings but not reified references","date":"2018-05-03T20:34:39.904Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: yeah. that also is not a big part of my mental model of properties.","date":"2018-05-03T20:34:44.815Z","type":"message"}
{"nick":"ljharb","message":"so there's no \"reference\" to share","date":"2018-05-03T20:34:46.819Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: part of reference != reference","date":"2018-05-03T20:34:59.267Z","type":"message"}
{"nick":"bradleymeck","message":"kinda like directory names aren't paths unless you join them into a different thing","date":"2018-05-03T20:35:29.268Z","type":"message"}
{"nick":"caitp","message":"I'm not sure what you mean by \"reifiable\" --- how are you using \"reify\" here? like, it's not a concrete value you can reference in JS the way symbols are?","date":"2018-05-03T20:35:29.887Z","type":"message"}
{"nick":"ljharb","message":"correct","date":"2018-05-03T20:35:36.637Z","type":"message"}
{"nick":"bradleymeck","message":"^","date":"2018-05-03T20:35:41.207Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: by being only lexical instead of being a value to runtime i say that private fields have no reified form, they only have values as a result of their references","date":"2018-05-03T20:37:00.552Z","type":"message"}
{"nick":"bradleymeck","message":"but all this talk is about mental models not matching, nothing is correct/incorrect really","date":"2018-05-03T20:37:34.951Z","type":"message"}
{"nick":"bradleymeck","message":"classes 1.1 had a very similar model to how i think of private fields but just renamed the feature to instance variables instead","date":"2018-05-03T20:39:01.757Z","type":"message"}
{"nick":"Bakkot","message":"er. classes 1.1 had exactly the same model of private fields as the current state of things, no? except that they didn't brand-check methods.","date":"2018-05-03T20:43:14.912Z","type":"message"}
{"nick":"ljharb","message":"it did.","date":"2018-05-03T20:43:32.668Z","type":"message"}
{"nick":"bradleymeck","message":"Bakkot: yep, but their framing as bindings made much more sense to me than trying to treat private fields as the same thing as existing stuff","date":"2018-05-03T20:44:49.882Z","type":"message"}
{"nick":"caitp","message":"bradleymeck: I think that's a reasonable perspective for a JS developer --- engine implementors will probably see it differently. being both, that's why I was a bit confused","date":"2018-05-03T20:44:57.227Z","type":"message"}
{"nick":"caitp","message":"reified can have some different meanings, like \"lazy\" accessors that get turned into data properties in v8 and jsc","date":"2018-05-03T20:45:21.403Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: yea, terminology is very loose in this area","date":"2018-05-03T20:46:05.061Z","type":"message"}
{"nick":"bradleymeck","message":"sorry for the confusion","date":"2018-05-03T20:46:13.620Z","type":"message"}
{"nick":"caitp","message":"all good","date":"2018-05-03T20:46:26.360Z","type":"message"}
{"nick":"caitp","message":"so here's an interesting thing --- if a super constructor returns `Object.freeze(this);`, PrivateFieldAdd doesn't seem to care about if the object is extensible or not. should it?","date":"2018-05-03T20:59:07.098Z","type":"message"}
{"nick":"caitp","message":"and, does Object.freeze make private fields read only?","date":"2018-05-03T20:59:29.212Z","type":"message"}
{"nick":"Bakkot","message":"Nope to both per https://github.com/tc39/proposal-private-fields/issues/69","date":"2018-05-03T20:59:37.615Z","type":"message"}
{"nick":"ljharb","message":"it does not","date":"2018-05-03T20:59:37.792Z","type":"message"}
{"nick":"ljharb","message":"freeze is only \"public property freeze\", and doesn't make things immutable","date":"2018-05-03T20:59:51.628Z","type":"message"}
{"nick":"ljharb","message":"just like `Object.freeze(aMapInstance)` still leaves that map mutable","date":"2018-05-03T21:00:05.469Z","type":"message"}
{"nick":"caitp","message":"it makes them non-extensible, and makes properties read only","date":"2018-05-03T21:00:29.731Z","type":"message"}
{"nick":"caitp","message":"configurable doesn't really matter in the case of privates since you can't configure them anyway currently","date":"2018-05-03T21:00:50.951Z","type":"message"}
{"nick":"caitp","message":"so, extensible doesn't matter, and freeze ignores private fields, got it","date":"2018-05-03T21:01:12.929Z","type":"message"}
{"nick":"bradleymeck","action":"still chuckles at enumerable vs non-enumerable symbols","date":"2018-05-03T21:01:14.333Z","type":"action"}
{"nick":"devsnek","message":"does private property access get affected at all by redefining the function rebinding it etc","date":"2018-05-03T22:11:10.430Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: I don't know what that means","date":"2018-05-03T22:14:16.551Z","type":"message"}
{"nick":"devsnek","message":"like if you have some member function that accesses a private symbol","date":"2018-05-03T22:14:35.617Z","type":"message"}
{"nick":"devsnek","message":"and you call it with a different `this` or something","date":"2018-05-03T22:14:53.959Z","type":"message"}
{"nick":"Bakkot","message":"if you try to access a private property on an object which lacks it, that immediately throws a typeerror","date":"2018-05-03T22:15:29.368Z","type":"message"}
{"nick":"Bakkot","message":"this is true if you `.call` a function which has `this.#x`, but also if you just have something like `foo(a){ a.#x }` and pass in a non-instance","date":"2018-05-03T22:16:08.376Z","type":"message"}
{"nick":"devsnek","message":"oh i never knew you could perform .# accessor on not-this","date":"2018-05-03T22:16:30.067Z","type":"message"}
{"nick":"Bakkot","message":"yup: https://github.com/tc39/proposal-class-fields/blob/master/PRIVATE_SYNTAX_FAQ.md#why-does-this-proposal-allow-accessing-private-fields-of-other-instances-of-the-same-class-dont-other-languages-normally-forbid-that","date":"2018-05-03T22:17:08.404Z","type":"message"}
{"nick":"not-an-aardvark","date":"2018-05-03T22:54:43.423Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 264 seconds","date":"2018-05-03T23:48:58.022Z","type":"quit"}
