{"nick":"cybai","date":"2019-04-23T00:06:16.033Z","type":"join"}
{"nick":"keith_mi_","date":"2019-04-23T00:07:36.795Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 255 seconds","date":"2019-04-23T00:10:48.006Z","type":"quit"}
{"nick":"keith_mi_","reason":"Ping timeout: 246 seconds","date":"2019-04-23T00:12:17.989Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-04-23T00:15:49.707Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 245 seconds","date":"2019-04-23T00:21:18.424Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2019-04-23T00:51:19.862Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-04-23T01:07:13.395Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 240 seconds","date":"2019-04-23T01:23:27.424Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-04-23T01:45:52.017Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T01:54:52.784Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-04-23T02:06:47.804Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-04-23T02:28:45.020Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-04-23T03:21:20.714Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T04:01:21.127Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 246 seconds","date":"2019-04-23T04:05:45.082Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-04-23T04:06:41.886Z","type":"quit"}
{"nick":"Jessidhia","reason":"Disconnected by services","date":"2019-04-23T04:35:00.894Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-04-23T05:07:13.822Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T05:25:38.028Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T06:02:24.113Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 255 seconds","date":"2019-04-23T06:07:12.115Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-04-23T06:33:20.108Z","type":"join"}
{"nick":"kpatticha","date":"2019-04-23T07:11:58.712Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T07:38:05.987Z","type":"quit"}
{"nick":"mgol","date":"2019-04-23T07:58:16.446Z","type":"join"}
{"nick":"cybai","date":"2019-04-23T08:03:13.911Z","type":"join"}
{"nick":"keith_mi_","date":"2019-04-23T08:03:30.645Z","type":"join"}
{"nick":"keith_mi_","reason":"Client Quit","date":"2019-04-23T08:04:30.541Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 258 seconds","date":"2019-04-23T08:07:55.926Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-04-23T08:54:40.948Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T09:32:28.226Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T10:04:16.590Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 244 seconds","date":"2019-04-23T10:08:37.483Z","type":"quit"}
{"nick":"jmdyck","date":"2019-04-23T11:03:09.968Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T11:40:57.197Z","type":"quit"}
{"nick":"mgol","date":"2019-04-23T11:41:47.960Z","type":"join"}
{"nick":"cybai","date":"2019-04-23T12:04:59.060Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-04-23T12:06:02.311Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 246 seconds","date":"2019-04-23T12:09:26.993Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-04-23T13:18:14.389Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T13:41:07.148Z","type":"join"}
{"nick":"howdoi","date":"2019-04-23T13:43:13.345Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 258 seconds","date":"2019-04-23T13:45:39.016Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T13:46:12.965Z","type":"join"}
{"nick":"devsnek","message":"rwaldron: seems like there might be an issue with the jsc runner? https://gc.gy/23732912.png","date":"2019-04-23T13:58:55.183Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T14:25:04.062Z","type":"quit"}
{"nick":"mgol","date":"2019-04-23T14:25:44.396Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-04-23T15:07:42.711Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T15:08:13.996Z","type":"join"}
{"nick":"Nimelrian_","date":"2019-04-23T15:13:22.215Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T15:35:17.436Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-04-23T15:36:57.481Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 240 seconds","date":"2019-04-23T15:37:27.432Z","type":"quit"}
{"nick":"kpatticha","reason":"Quit: Leaving","date":"2019-04-23T16:14:43.483Z","type":"quit"}
{"nick":"cloudshu","date":"2019-04-23T16:23:28.670Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-04-23T16:28:52.542Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T17:05:00.027Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 255 seconds","date":"2019-04-23T17:09:36.034Z","type":"quit"}
{"nick":"AtumT","date":"2019-04-23T17:13:11.898Z","type":"join"}
{"nick":"Nimelrian_","reason":"Ping timeout: 258 seconds","date":"2019-04-23T17:46:26.212Z","type":"quit"}
{"nick":"keith_miller","date":"2019-04-23T18:06:19.938Z","type":"join"}
{"nick":"cybai","date":"2019-04-23T18:12:35.794Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-04-23T18:17:13.589Z","type":"quit"}
{"nick":"cybai","date":"2019-04-23T18:28:23.866Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-04-23T18:32:50.917Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T19:05:55.745Z","type":"quit"}
{"nick":"AtumT","reason":"Ping timeout: 258 seconds","date":"2019-04-23T19:16:05.020Z","type":"quit"}
{"nick":"AtumT","date":"2019-04-23T19:16:41.887Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-04-23T19:23:50.212Z","type":"quit"}
{"nick":"keith_miller","date":"2019-04-23T19:24:12.966Z","type":"join"}
{"nick":"AtumT","date":"2019-04-23T19:24:51.678Z","type":"join"}
{"nick":"caitp","message":"is there an annex B or web compat reason why all vms seem to ignore changes to property `enumerable`-ness during for-in loops?","date":"2019-04-23T19:45:25.383Z","type":"message"}
{"nick":"caitp","message":"e.g. https://jsfiddle.net/y6sdgm2b/","date":"2019-04-23T19:52:25.236Z","type":"message"}
{"nick":"caitp","message":"I mean I know it's \"undefined\", except that afaict all the vms match, but the way they match is incongruent with the example implementation in the spec","date":"2019-04-23T20:00:14.171Z","type":"message"}
{"nick":"mgol","date":"2019-04-23T20:03:34.106Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-04-23T20:16:35.599Z","type":"quit"}
{"nick":"Bakkot","message":"caitp: I don't think that's actually true; Chakra matches the spec","date":"2019-04-23T20:28:38.764Z","type":"message"}
{"nick":"Bakkot","message":"also XS, though I dunno if we're counting it","date":"2019-04-23T20:28:49.721Z","type":"message"}
{"nick":"cybai","date":"2019-04-23T20:29:06.282Z","type":"join"}
{"nick":"Bakkot","message":"I have that case in https://github.com/bakkot/for-in-exploration/blob/master/made-enum.js","date":"2019-04-23T20:29:10.270Z","type":"message"}
{"nick":"caitp","message":"I was thinking \"browsers\", and I dunno if chakra really counts there anymore","date":"2019-04-23T20:29:20.589Z","type":"message"}
{"nick":"gibson042","date":"2019-04-23T20:29:37.102Z","type":"join"}
{"nick":"Bakkot","message":"anyway, in reseaching this a while back I couldn't find any references to people depending on that behavior","date":"2019-04-23T20:30:01.174Z","type":"message"}
{"nick":"caitp","message":"the behaviour of the engines I've tried (v8/jsc/sm) seem pretty consistent, so I thought it would be good if the spec actually reflected it","date":"2019-04-23T20:30:17.529Z","type":"message"}
{"nick":"Bakkot","message":"unlike some other genuinly interop semantics: https://github.com/bakkot/for-in-exploration#real-constraints","date":"2019-04-23T20:30:19.100Z","type":"message"}
{"nick":"Bakkot","message":"I am intending to bring to the committee a proposed spec text for some interop semantics at the June meeting","date":"2019-04-23T20:30:59.268Z","type":"message"}
{"nick":"Bakkot","message":"though that will depend on me actually running it","date":"2019-04-23T20:31:05.294Z","type":"message"}
{"nick":"Bakkot","message":"and also, since Chakra differs here (and that mattered when I was first doing this), I did not consider this particular case to be within the interop semantics","date":"2019-04-23T20:31:35.272Z","type":"message"}
{"nick":"Bakkot","message":"(s/actually running/actually writing/)","date":"2019-04-23T20:32:02.976Z","type":"message"}
{"nick":"cybai","reason":"Ping timeout: 246 seconds","date":"2019-04-23T20:33:27.097Z","type":"quit"}
{"nick":"caitp","message":"interesting, you've done a lot more work on it than me","date":"2019-04-23T20:33:46.684Z","type":"message"}
{"nick":"Bakkot","message":"I'm guessing this is coming from you following up one of my JSC bugs which came out of this process?","date":"2019-04-23T20:34:39.910Z","type":"message"}
{"nick":"Bakkot","message":"if there's some other for-in stuff you're working on I'd be interested in following along","date":"2019-04-23T20:35:04.322Z","type":"message"}
{"nick":"caitp","message":"no it is still your filed bugs --- the JSC behaviour and all the matching VMs seem to pre-filter enumerable properties at the start of the loop, and then do another [[GetOwnProperty]] for each key to see if it exists (but ignore the DontEnum-ness)","date":"2019-04-23T20:38:49.110Z","type":"message"}
{"nick":"caitp","message":"so it's a little awkward to get the expected semantics","date":"2019-04-23T20:39:13.821Z","type":"message"}
{"nick":"caitp","message":"its' weird for proxies because you observably do [[GetOwnProperty]] for each key twice, once during the pre-filtering and again during the loop, which based on what the spec illustrates as an example implementation, shouldn't happen","date":"2019-04-23T20:41:16.301Z","type":"message"}
{"nick":"Bakkot","message":"so, since you're looking at this, can I ask - my plan was to say that engines are required to implement the spec's semantics for proxies in particular","date":"2019-04-23T20:45:37.037Z","type":"message"}
{"nick":"Bakkot","message":"with the thought that they'd just have a special case for proxies","date":"2019-04-23T20:45:58.777Z","type":"message"}
{"nick":"Bakkot","message":"does that seem reasonable?","date":"2019-04-23T20:46:03.968Z","type":"message"}
{"nick":"Bakkot","message":"(the other half of the plan was to somehow nail down the \"normal\" case - no proxies or other exotics, no prototype changes, no enumerability changes, no non-enumerable properties shadowing enumerable properties, etc - and then say that you can do whatever you want as long as it matches the spec algorithm in those cases, which all engines already do)","date":"2019-04-23T20:47:39.498Z","type":"message"}
{"nick":"caitp","message":"in JSC's case it's doable, I don't know if I like them having different semantics since any difference would be observable (e.g. wrt changes to enumerability affecting keys that are handled in the loop)","date":"2019-04-23T20:48:44.070Z","type":"message"}
{"nick":"Bakkot","message":"hm, yeah. my intent was to minimize the observable differences between engines, rather than between similar-ish cases on a single engine, but I don't know how to prioritize those.","date":"2019-04-23T20:51:01.032Z","type":"message"}
{"nick":"Bakkot","message":"currently engines all behave radically differently when for-in'ing a proxy","date":"2019-04-23T20:51:14.932Z","type":"message"}
{"nick":"Bakkot","message":"(the proxy-trapped test in the above repo illustrates this)","date":"2019-04-23T20:52:10.899Z","type":"message"}
{"nick":"caitp","message":"I think https://gist.github.com/caitp/db5eae82a62b27d9e8ee9f7ab6b20a01 comes pretty close to what jsc does, I dunno if that exactly matches other engines","date":"2019-04-23T21:02:28.895Z","type":"message"}
{"nick":"caitp","message":"in the proxy case","date":"2019-04-23T21:03:52.692Z","type":"message"}
{"nick":"Bakkot","message":"no, not quite","date":"2019-04-23T21:06:55.193Z","type":"message"}
{"nick":"Bakkot","message":"though that also doesn't match JSC, at least on my local copy","date":"2019-04-23T21:07:08.195Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-04-23T21:08:14.666Z","type":"quit"}
{"nick":"Bakkot","message":"that gist differs from other engines mainly in that no engine other than JSC will print a non-enumerable property which shadows an enumerable one","date":"2019-04-23T21:08:36.353Z","type":"message"}
{"nick":"caitp","message":"you might not have r244330 locally","date":"2019-04-23T21:08:45.317Z","type":"message"}
{"nick":"Bakkot","message":"i.e. JSC is unique in printing `x` in https://github.com/bakkot/for-in-exploration/blob/master/enumerable-shadowed.js","date":"2019-04-23T21:08:45.773Z","type":"message"}
{"nick":"caitp","message":"yeah, I haven't done a lot of testing with the prototype object","date":"2019-04-23T21:09:50.108Z","type":"message"}
{"nick":"Bakkot","message":"hm. just updated, now on v244563, but still seeing the same proxy traps hit for JSC","date":"2019-04-23T21:13:34.361Z","type":"message"}
{"nick":"caitp","message":"right now upstream:","date":"2019-04-23T21:16:15.464Z","type":"message"}
{"nick":"caitp","message":"if the proxy has no ownKeys handler, we do the normal [[GetOwnPropertyNames]] for the target object, and [[GetOwnProperty]] isn't run through the proxy","date":"2019-04-23T21:17:12.803Z","type":"message"}
{"nick":"caitp","message":"if it does have the ownKeys trap, then...","date":"2019-04-23T21:17:27.834Z","type":"message"}
{"nick":"caitp","message":"ownKeys is called, the returned object is converted into a list, configurable/extensible invariants are performed etc, and at the end, the list is re-filtered, kicking out DontEnum keys, before ever reaching the loop body","date":"2019-04-23T21:20:04.219Z","type":"message"}
{"nick":"caitp","message":"then, in the loop, for each key returned from `ProxyObject::performGetOwnPropertyNames()`, the loop body is evaluated only if `Boolean([[GetOwnProperty]](proxy, key))` is true","date":"2019-04-23T21:21:31.332Z","type":"message"}
{"nick":"caitp","message":"so there should be an ownKeys trap call, and 2 gopd trap calls per key, assuming \"ownKeys\" exists","date":"2019-04-23T21:22:06.681Z","type":"message"}
{"nick":"caitp","message":"and no trap calls (except for the gopd done in the for-in loop) if it does not exist","date":"2019-04-23T21:22:30.047Z","type":"message"}
{"nick":"Bakkot","message":"sounds about right. gets a little weirder in the presence of prototypes.","date":"2019-04-23T21:25:04.934Z","type":"message"}
{"nick":"Bakkot","message":"other engines are consistent about only ever invoking gopd once per key, even when (as in spidermonkey) that leads to spec-prohibited behavior ( https://bugzilla.mozilla.org/show_bug.cgi?id=1486656 )","date":"2019-04-23T21:27:07.689Z","type":"message"}
{"nick":"Bakkot","message":"i'd prefer that, if we spec behavior for proxies, we do it in such a way that gopd is invoked only once per property","date":"2019-04-23T21:28:07.918Z","type":"message"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-04-23T21:31:49.419Z","type":"quit"}
{"nick":"caitp","message":"v8 seems to follow your suggestions (ignoring anything wrt prototype shadowing), so for proxies, filtering is deferred until each loop iteration, and enumerability is checked there, but for non-proxies it's all pre-filtered","date":"2019-04-23T21:38:19.794Z","type":"message"}
{"nick":"caitp","message":"it wouldn't be the worst thing if all impls matched that, but I think it's not great to have the inconsistent behaviour between proxies and non-proxies, so I'd be happier to just forbid pre-filtering when it's observable, and let turbofan/DFG/etc do it if they decide they can","date":"2019-04-23T21:41:08.583Z","type":"message"}
{"nick":"caitp","message":"what's the worst that could happen","date":"2019-04-23T21:41:31.136Z","type":"message"}
{"nick":"Bakkot","message":"I've been trying to avoid doing anything with the case where it's observable","date":"2019-04-23T21:43:47.862Z","type":"message"}
{"nick":"Bakkot","message":"mostly because that would require engines to make changes for non-proxy cases, which historically has been... basically impossible","date":"2019-04-23T21:44:07.405Z","type":"message"}
{"nick":"Bakkot","message":"sorry, for the case where it's observable without proxies; I have higher hopes for getting engines to change where proxies are involved","date":"2019-04-23T21:44:58.218Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T21:54:09.336Z","type":"quit"}
{"nick":"keith_miller","date":"2019-04-23T21:55:25.006Z","type":"join"}
{"nick":"Domenic","message":"> Previous discussions (Yes, I have read every comment in every one of these threads.)","date":"2019-04-23T21:55:35.588Z","type":"message"}
{"nick":"Domenic","message":"I love it","date":"2019-04-23T21:55:38.336Z","type":"message"}
{"nick":"devsnek","message":"`proxy-trapped.js` is pretty crazy","date":"2019-04-23T21:59:47.321Z","type":"message"}
{"nick":"devsnek","message":"nothing except engine262 and XS agree in proxy-trapped.js","date":"2019-04-23T22:00:55.039Z","type":"message"}
{"nick":"devsnek","message":"lmao jsc has an abrupt completion in this what even","date":"2019-04-23T22:03:21.781Z","type":"message"}
{"nick":"Bakkot","message":"wait, where?","date":"2019-04-23T22:04:40.490Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: https://gc.gy/23762126.png","date":"2019-04-23T22:05:27.025Z","type":"message"}
{"nick":"devsnek","message":"x apparently doesn't get bound in the loop iteration","date":"2019-04-23T22:05:50.736Z","type":"message"}
{"nick":"devsnek","message":"actually wait `loop: x` is there","date":"2019-04-23T22:06:49.818Z","type":"message"}
{"nick":"devsnek","message":"i dunno","date":"2019-04-23T22:06:56.273Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: I think this might be an old eshost bug or something","date":"2019-04-23T22:10:56.054Z","type":"message"}
{"nick":"devsnek","message":"oh","date":"2019-04-23T22:11:01.402Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-23T22:49:55.067Z","type":"quit"}
{"nick":"gibson042","date":"2019-04-23T22:58:47.560Z","type":"join"}
{"nick":"cybai","date":"2019-04-23T23:30:54.006Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 258 seconds","date":"2019-04-23T23:35:36.007Z","type":"quit"}
