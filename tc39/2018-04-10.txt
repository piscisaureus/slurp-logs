{"nick":"not-an-aardvark","date":"2018-04-10T00:08:13.683Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-10T00:33:00.625Z","type":"quit"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2018-04-10T00:35:12.336Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-04-10T00:54:41.123Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-04-10T01:34:10.656Z","type":"quit"}
{"nick":"arai","reason":"Ping timeout: 276 seconds","date":"2018-04-10T01:51:44.839Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-04-10T02:17:53.091Z","type":"quit"}
{"nick":"arai","date":"2018-04-10T03:12:31.271Z","type":"join"}
{"nick":"vladi-dev","date":"2018-04-10T03:14:38.622Z","type":"join"}
{"nick":"vladi-dev","message":"hello everyone, i'd like to get some feedback about my proposal to JS syntax. Coming from Python I found that in JS import syntax is not very well suited for IDE's to hint variable/function names that you can import. Basically my proposal is to reverse the keywords in the import statement like so `from 'foo' import { bar}` so that IDE can show me which exports are available in module 'foo'. Please take a look and let me know your th","date":"2018-04-10T03:21:45.129Z","type":"message"}
{"nick":"vladi-dev","message":"https://github.com/vladi-dev/proposal-reverse-import-syntax","date":"2018-04-10T03:21:53.732Z","type":"message"}
{"nick":"ljharb","message":"vladi-dev: `import` is reserved, but `from` is not - i'm not sure it's feasible.","date":"2018-04-10T04:08:26.793Z","type":"message"}
{"nick":"ljharb","message":"vladi-dev: have you looked into https://www.npmjs.com/package/import-js, which lets your IDE do autocompletion with the current syntax?","date":"2018-04-10T04:09:14.721Z","type":"message"}
{"nick":"vladi-dev","message":"ljharb: i created a proof of concept that parses the proposed syntax(https://github.com/vladi-dev/babel/pull/1/files#diff-ceab643e717dca7190cd479a5fabdb1dR8), i know it can be done in a nicer way but im exporing if it is worth the effort. and yes i saw `import-js` plugin but it is not as convenient as it can be (like in Python). thank you for feedback!","date":"2018-04-10T04:17:33.926Z","type":"message"}
{"nick":"ljharb","message":"what about side-effecting imports? would they be `from 'foo' import;`?","date":"2018-04-10T04:19:25.058Z","type":"message"}
{"nick":"jmdyck1","reason":"Remote host closed the connection","date":"2018-04-10T04:29:33.762Z","type":"quit"}
{"nick":"vladi-dev","reason":"Ping timeout: 260 seconds","date":"2018-04-10T04:31:19.975Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-04-10T04:36:48.683Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-10T07:01:44.781Z","type":"quit"}
{"nick":"arai","date":"2018-04-10T09:08:06.877Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-10T09:08:21.994Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-04-10T10:25:09.209Z","type":"quit"}
{"nick":"mylesborins","date":"2018-04-10T10:25:39.788Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-04-10T11:16:31.141Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-04-10T13:19:34.539Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-10T13:29:58.689Z","type":"quit"}
{"nick":"jmdyck","date":"2018-04-10T13:30:49.450Z","type":"join"}
{"nick":"bradleymeck","date":"2018-04-10T13:31:20.471Z","type":"join"}
{"nick":"mmun","reason":"Quit: ~","date":"2018-04-10T14:02:40.517Z","type":"quit"}
{"nick":"mmun","date":"2018-04-10T14:02:52.684Z","type":"join"}
{"nick":"Domenic","reason":"Quit: ~","date":"2018-04-10T14:05:29.635Z","type":"quit"}
{"nick":"Domenic","date":"2018-04-10T14:05:45.573Z","type":"join"}
{"nick":"TabAtkins","reason":"Quit: ~","date":"2018-04-10T14:07:06.063Z","type":"quit"}
{"nick":"TabAtkins","date":"2018-04-10T14:07:18.643Z","type":"join"}
{"nick":"d_run","reason":"Quit: ~","date":"2018-04-10T14:07:52.823Z","type":"quit"}
{"nick":"d_run","date":"2018-04-10T14:08:05.450Z","type":"join"}
{"nick":"samth","reason":"Quit: ~","date":"2018-04-10T14:09:12.133Z","type":"quit"}
{"nick":"samth","date":"2018-04-10T14:09:23.892Z","type":"join"}
{"nick":"bterlson","reason":"Quit: ~","date":"2018-04-10T14:11:54.392Z","type":"quit"}
{"nick":"bterlson","date":"2018-04-10T14:12:06.863Z","type":"join"}
{"nick":"bstoroz_","reason":"Quit: ~","date":"2018-04-10T14:13:53.901Z","type":"quit"}
{"nick":"bstoroz_","date":"2018-04-10T14:14:01.594Z","type":"join"}
{"nick":"jackhorton","reason":"Quit: Connection closed for inactivity","date":"2018-04-10T14:15:34.275Z","type":"quit"}
{"nick":"srl295","date":"2018-04-10T14:16:54.792Z","type":"join"}
{"nick":"flet","reason":"Quit: ~","date":"2018-04-10T14:19:42.684Z","type":"quit"}
{"nick":"pluma","reason":"Quit: ~","date":"2018-04-10T14:19:47.343Z","type":"quit"}
{"nick":"flet","date":"2018-04-10T14:19:54.869Z","type":"join"}
{"nick":"pluma","date":"2018-04-10T14:19:59.886Z","type":"join"}
{"nick":"domfarolino","reason":"Quit: ~","date":"2018-04-10T14:25:54.076Z","type":"quit"}
{"nick":"domfarolino","date":"2018-04-10T14:26:06.312Z","type":"join"}
{"nick":"diervo","reason":"Quit: ~","date":"2018-04-10T14:27:12.876Z","type":"quit"}
{"nick":"diervo","date":"2018-04-10T14:27:21.028Z","type":"join"}
{"nick":"rkirsling","reason":"Quit: ~","date":"2018-04-10T14:29:36.237Z","type":"quit"}
{"nick":"rkirsling","date":"2018-04-10T14:29:48.682Z","type":"join"}
{"nick":"joyee","reason":"Quit: ~","date":"2018-04-10T14:31:57.693Z","type":"quit"}
{"nick":"joyee","date":"2018-04-10T14:32:09.983Z","type":"join"}
{"nick":"thejameskyle","reason":"Quit: ~","date":"2018-04-10T14:33:01.091Z","type":"quit"}
{"nick":"thejameskyle","date":"2018-04-10T14:33:13.360Z","type":"join"}
{"nick":"Wizek","reason":"Quit: ~","date":"2018-04-10T14:33:20.549Z","type":"quit"}
{"nick":"gsathya","reason":"Quit: ~","date":"2018-04-10T14:33:21.729Z","type":"quit"}
{"nick":"maggiepint_","reason":"Quit: ~","date":"2018-04-10T14:33:25.085Z","type":"quit"}
{"nick":"gsathya","date":"2018-04-10T14:33:33.686Z","type":"join"}
{"nick":"maggiepint_","date":"2018-04-10T14:33:41.858Z","type":"join"}
{"nick":"Wizek","date":"2018-04-10T14:34:00.881Z","type":"join"}
{"nick":"jschoi","reason":"Quit: ~","date":"2018-04-10T14:37:08.711Z","type":"quit"}
{"nick":"jschoi","date":"2018-04-10T14:37:17.000Z","type":"join"}
{"nick":"bradleymeck","message":"https://github.com/drufball/layered-apis/issues/6 seems interesting, still hard to use the API, but if it can't be forged that at least gives some easier times","date":"2018-04-10T15:22:32.070Z","type":"message"}
{"nick":"devsnek","message":"layered APIs are pretty interesting","date":"2018-04-10T15:28:29.553Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: I'm still wanting a usability fix for some things though. using arrays is almost always taintable and I'm not clear on how to make that better. making {0: 'value for 0', length: 1} in all the places is a goofy workaround.","date":"2018-04-10T15:30:55.578Z","type":"message"}
{"nick":"devsnek","message":"for issue #6 it sounds like you would have to somehow identify a polyfill as official and host its access to primordials","date":"2018-04-10T15:32:56.939Z","type":"message"}
{"nick":"devsnek","message":"or let everything access them","date":"2018-04-10T15:33:02.351Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: the intent here is something that cannot be added to by userspace","date":"2018-04-10T15:42:04.427Z","type":"message"}
{"nick":"bradleymeck","message":"you can polyfill it / I just posted one, but people could check if something is a polyfill is part of the value","date":"2018-04-10T15:42:30.222Z","type":"message"}
{"nick":"bradleymeck","date":"2018-04-10T16:10:28.826Z","type":"part"}
{"nick":"jwalden","date":"2018-04-10T16:15:53.842Z","type":"join"}
{"nick":"devsnek","message":"bradleymeck: I guess I'm misunderstanding then, the examples all appear to have CDN fallbacks so","date":"2018-04-10T16:30:54.162Z","type":"message"}
{"nick":"bradleymeck","date":"2018-04-10T16:42:14.416Z","type":"join"}
{"nick":"bradleymeck","reason":"Client Quit","date":"2018-04-10T16:42:35.198Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-04-10T16:46:05.815Z","type":"join"}
{"nick":"bradleymeck","message":"devsnek: LayeredAPIs is a bunch of things, part of that is allowing more reliable polyfills but also just how make the platform better in terms of being robust and having low level primitives","date":"2018-04-10T16:47:05.654Z","type":"message"}
{"nick":"devsnek","message":"ic","date":"2018-04-10T16:47:30.698Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-10T17:03:34.718Z","type":"quit"}
{"nick":"jmdyck","reason":"Ping timeout: 265 seconds","date":"2018-04-10T17:16:31.427Z","type":"quit"}
{"nick":"jmdyck","date":"2018-04-10T17:17:19.687Z","type":"join"}
{"nick":"devsnek","message":"does michael ficarra ever come on irc","date":"2018-04-10T17:41:20.430Z","type":"message"}
{"nick":"ljharb","message":"yes! but i only reliably remember seeing him on during the meetings he's present at","date":"2018-04-10T17:55:10.629Z","type":"message"}
{"nick":"devsnek","message":"ljharb: i'm curious about how his protocol proposal can be an alternative to my proposal","date":"2018-04-10T18:41:42.730Z","type":"message"}
{"nick":"devsnek","message":"Promise.Thenable protocol with a \"disabled\" symbol or something similar","date":"2018-04-10T18:44:32.817Z","type":"message"}
{"nick":"bradleymeck","date":"2018-04-10T19:04:55.932Z","type":"join"}
{"nick":"ljharb","message":"devsnek: that would totally work, but the part your proposal that's \"making ModuleRecords not thenable\" is super time-sensitive, so i don't think it can wait on the protocols proposal. it's also possible (i believe) to make an existing symbol be part of a protocol later, so we could later add a \"Thenable\" protocol that used Symbol.thenable or whatever, if it came to that","date":"2018-04-10T19:09:32.006Z","type":"message"}
{"nick":"devsnek","message":"ljharb: if people are willing to go forward with that it sounds great","date":"2018-04-10T19:15:56.208Z","type":"message"}
{"nick":"devsnek","message":"I'm just worried about push-back on yet another symbol modifying behaviour","date":"2018-04-10T19:18:10.480Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-10T19:18:29.366Z","type":"quit"}
{"nick":"JaseW","date":"2018-04-10T19:19:48.290Z","type":"join"}
{"nick":"bradleymeck","date":"2018-04-10T19:21:00.485Z","type":"join"}
{"nick":"ljharb","message":"devsnek: pushback on the symbol is one thing; but the whole motivation of the proposal really seems like Module Records, and it can't go on those if it ends up being web-incompatible to change","date":"2018-04-10T20:01:06.550Z","type":"message"}
{"nick":"devsnek","message":"that is definitely the motivation of the proposal","date":"2018-04-10T20:01:53.452Z","type":"message"}
{"nick":"devsnek","message":"I wish I had gotten involved with this like 9 months ago","date":"2018-04-10T20:02:12.359Z","type":"message"}
{"nick":"Bakkot","message":"dynamic import isn't even stage 4; surely changing the thenable behavior of module imports can't be web-incompatible at this stage?","date":"2018-04-10T20:02:32.596Z","type":"message"}
{"nick":"ljharb","message":"to be fair, the question was raised awhile back and i'm relatively sure that this is the desired behavior","date":"2018-04-10T20:02:35.465Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: `import * as foo from 'path'; Promise.resolve(foo)`","date":"2018-04-10T20:02:45.922Z","type":"message"}
{"nick":"ljharb","message":"(where \"this\" is \"the current behavior\")","date":"2018-04-10T20:02:57.804Z","type":"message"}
{"nick":"ljharb","message":"but i'd still like to see it change","date":"2018-04-10T20:03:09.320Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: sure; just don't think that's a very likely use, whereas `await import('path')` seems much more","date":"2018-04-10T20:03:11.881Z","type":"message"}
{"nick":"ljharb","message":"true","date":"2018-04-10T20:03:17.817Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: can't really read scrollback to see if this has been mentioned, but see https://github.com/tc39/proposal-dynamic-import/issues/47 / https://github.com/tc39/proposal-dynamic-import/issues/48 if you haven't","date":"2018-04-10T20:03:40.571Z","type":"message"}
{"nick":"devsnek","message":"yeah I saw those","date":"2018-04-10T20:06:25.395Z","type":"message"}
{"nick":"devsnek","message":"which is why I tried to make my solution as general as possible","date":"2018-04-10T20:06:56.847Z","type":"message"}
{"nick":"devsnek","message":"s/general/generalised/","date":"2018-04-10T20:07:17.745Z","type":"message"}
{"nick":"ljharb","message":"tbh i think your solution is fine; i'm just not optimistic it will be well-received, but i also don't know what you could do to improve the chances :-/ it's still worth proposing tho","date":"2018-04-10T20:09:29.363Z","type":"message"}
{"nick":"devsnek","message":"I'll add some notes to the readme about futurey stuff like protocols and whatnot and then I guess in terms of stage-0ness it's probably good to go","date":"2018-04-10T20:13:12.663Z","type":"message"}
{"nick":"devsnek","message":"tbh the thing I'm most worried about is my ecmarkup-fu :p","date":"2018-04-10T20:13:52.418Z","type":"message"}
{"nick":"ljharb","message":"that doesn't matter til stage 2 :-p","date":"2018-04-10T20:24:00.388Z","type":"message"}
{"nick":"Bakkot","message":"unrelated: anyone know the justification for `new class A extends B { constructor(){ super(); super(); }` calling `B` a second time before erroring out, rather than erroring out before calling `B`?","date":"2018-04-10T20:30:56.463Z","type":"message"}
{"nick":"Bakkot","message":"that behavior is weird.","date":"2018-04-10T20:31:08.138Z","type":"message"}
{"nick":"bterlson","message":"bakkot: I raised this at one point during ES6 I think? It'll be in the notes. Allen had some justification.","date":"2018-04-10T20:31:34.936Z","type":"message"}
{"nick":"bterlson","message":"I don't remember it","date":"2018-04-10T20:31:41.747Z","type":"message"}
{"nick":"Bakkot","message":"The closest thing I can think of is, you do have to do argument list evaluation before throwing, so maybe it's weird to not then go through with the call.","date":"2018-04-10T20:32:38.989Z","type":"message"}
{"nick":"Bakkot","message":"I'll try to dig it up in the notes.","date":"2018-04-10T20:32:42.480Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: I'd try like 2015 to start with","date":"2018-04-10T20:32:56.947Z","type":"message"}
{"nick":"Bakkot","message":"ah: https://github.com/rwaldron/tc39-notes/blob/61dc2f45829a0663af0b4b1d6690717dc70d30d9/es7/2017-01/jan-24.md#discussing-not-calling-super-multiple-times","date":"2018-04-10T20:33:36.733Z","type":"message"}
{"nick":"bterlson","message":"wow","date":"2018-04-10T20:34:23.286Z","type":"message"}
{"nick":"bterlson","message":"I was way off on the time lol","date":"2018-04-10T20:34:26.165Z","type":"message"}
{"nick":"Bakkot","message":"lol, I have commented on the relevant PR with an example I'd forgotten about","date":"2018-04-10T20:34:31.780Z","type":"message"}
{"nick":"bterlson","message":"I'm re-angry about this so thanks Bakkot","date":"2018-04-10T20:37:44.432Z","type":"message"}
{"nick":"Bakkot","message":"the thing where you can leak a `super()` via an arrow is still baffling to me","date":"2018-04-10T20:38:44.781Z","type":"message"}
{"nick":"ljharb","message":"i definitely agree that `super()` should throw *instantly* when the `this` has been previously bound","date":"2018-04-10T20:39:05.020Z","type":"message"}
{"nick":"Bakkot","message":"like, who wanted that? it causes so much pain","date":"2018-04-10T20:39:20.062Z","type":"message"}
{"nick":"bterlson","message":"I recall broad support for that","date":"2018-04-10T20:39:40.370Z","type":"message"}
{"nick":"bterlson","message":"\"super is like this in arrows\" was a compelling argument?","date":"2018-04-10T20:40:00.598Z","type":"message"}
{"nick":"Bakkot","message":"yeah, but... `let foo; try { new class extends Object { constructor(){ foo = () => super(); } m(){ return 42; } } } catch (e) { } foo().m(); // gives 42`","date":"2018-04-10T20:41:18.292Z","type":"message"}
{"nick":"Bakkot","message":"like, that's terrible","date":"2018-04-10T20:41:21.625Z","type":"message"}
{"nick":"devsnek","message":"weeeeeew","date":"2018-04-10T20:43:56.805Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-10T22:18:42.863Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-04-10T23:06:07.431Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-04-10T23:49:42.959Z","type":"quit"}
