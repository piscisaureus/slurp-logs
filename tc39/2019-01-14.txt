{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-14T00:30:32.457Z","type":"quit"}
{"nick":"Bakkot","message":"ljharb / zenparsing: I forget when I last pinged you about this, but, it would be good to get #1158 and #1137, or equivalents, in for 2019. 1158 needs updated wording but is waiting on 1137.","date":"2019-01-14T01:44:34.241Z","type":"message"}
{"nick":"gibson042","date":"2019-01-14T02:06:10.196Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-14T04:24:18.799Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-14T04:25:36.504Z","type":"join"}
{"nick":"ephemera_","reason":"Remote host closed the connection","date":"2019-01-14T04:55:01.504Z","type":"quit"}
{"nick":"ephemera_","date":"2019-01-14T04:56:15.417Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-01-14T05:35:39.875Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-14T06:08:49.574Z","type":"quit"}
{"nick":"ljharb","message":"Bakkot: i'll add 1137 to the list for next week's meeting; things don't \"transition\" until after may tho, so it's still in bterlson's queue atm","date":"2019-01-14T06:11:20.613Z","type":"message"}
{"nick":"devsnek","message":"have y'all seen that cherow got a makeover","date":"2019-01-14T06:14:35.200Z","type":"message"}
{"nick":"devsnek","message":"(https://github.com/cherow/cherow btw)","date":"2019-01-14T06:14:43.739Z","type":"message"}
{"nick":"ljharb","message":"O.o what is cherow","date":"2019-01-14T06:15:48.358Z","type":"message"}
{"nick":"TimothyGu","message":"a better acorn that passes test262","date":"2019-01-14T06:16:05.385Z","type":"message"}
{"nick":"TimothyGu","message":"just like how acorn was a better esprima","date":"2019-01-14T06:16:19.584Z","type":"message"}
{"nick":"ljharb","message":"if it's better, has there been an attempt to get eslint and/or babel to use it?","date":"2019-01-14T06:16:28.868Z","type":"message"}
{"nick":"devsnek","message":"its still in development","date":"2019-01-14T06:16:34.779Z","type":"message"}
{"nick":"devsnek","message":"two months ago it barely passed es5","date":"2019-01-14T06:16:39.130Z","type":"message"}
{"nick":"devsnek","message":"but its estree compatible so should be good to slide into anything","date":"2019-01-14T06:17:20.038Z","type":"message"}
{"nick":"ljharb","message":"ah k","date":"2019-01-14T06:18:34.514Z","type":"message"}
{"nick":"ljharb","message":"slide it into eslint core then :-p","date":"2019-01-14T06:18:42.740Z","type":"message"}
{"nick":"devsnek","message":"i've become really surprised with how loose all the big parsers are (acorn, babel, etc)","date":"2019-01-14T06:21:20.156Z","type":"message"}
{"nick":"devsnek","message":"they all miss a lot of context and early errors","date":"2019-01-14T06:21:28.739Z","type":"message"}
{"nick":"TimothyGu","message":"in case of Acorn: https://github.com/acornjs/acorn/issues/created_by/TimothyGu","date":"2019-01-14T06:21:57.368Z","type":"message"}
{"nick":"Bakkot","message":"babel has much more work because of all the syntax extensions it has to do","date":"2019-01-14T06:27:49.501Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-14T06:28:03.093Z","type":"join"}
{"nick":"Bakkot","message":"a while back, as part of test262-parser-tests, I started a project to run all the parsers against it and file bugs","date":"2019-01-14T06:28:10.203Z","type":"message"}
{"nick":"Bakkot","message":"but there were so many and I never got back to it","date":"2019-01-14T06:28:30.423Z","type":"message"}
{"nick":"devsnek","message":"its kinda weird how none of them actually run against test262 though","date":"2019-01-14T06:29:40.364Z","type":"message"}
{"nick":"Bakkot","message":"shift does!","date":"2019-01-14T06:29:44.795Z","type":"message"}
{"nick":"Bakkot","message":"https://github.com/shapesecurity/shift-parser-js/tree/8add44f4289b215eac555412d75547f5d2137133/test/test262","date":"2019-01-14T06:29:54.611Z","type":"message"}
{"nick":"devsnek","message":"ok none of the ones with es2019","date":"2019-01-14T06:30:07.314Z","type":"message"}
{"nick":"Bakkot","message":"es2019 isn't a thing yet","date":"2019-01-14T06:30:23.473Z","type":"message"}
{"nick":"devsnek","message":"es2019 draft","date":"2019-01-14T06:30:31.423Z","type":"message"}
{"nick":"devsnek","message":"tc39.github.io is the only good source of truth","date":"2019-01-14T06:31:04.975Z","type":"message"}
{"nick":"Bakkot","message":"we track releases of the spec because AST changes are breaking, and it makes sense to bundle those","date":"2019-01-14T06:31:52.517Z","type":"message"}
{"nick":"devsnek","message":"is shift a cst","date":"2019-01-14T06:32:27.104Z","type":"message"}
{"nick":"ljharb","message":"why are ast changes breaking? aren't they additions?","date":"2019-01-14T06:33:01.035Z","type":"message"}
{"nick":"Bakkot","message":"no, though it has an API which lets you query the location information for an AST node and also get comments with locations","date":"2019-01-14T06:33:01.310Z","type":"message"}
{"nick":"devsnek","message":"yeah if its an ast i don't think there would be breaking changes","date":"2019-01-14T06:33:25.743Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: if I have something which consumes an AST and assumes that e.g. `catch`'s binding is necessarily there, that will break if that stops being the case","date":"2019-01-14T06:33:33.538Z","type":"message"}
{"nick":"devsnek","message":"oh yeah i guess that broke eslint","date":"2019-01-14T06:33:46.279Z","type":"message"}
{"nick":"Bakkot","message":"yes it did!","date":"2019-01-14T06:33:52.654Z","type":"message"}
{"nick":"Bakkot","message":"though this is more obvious in the Java version, where the AST nodes are represented by Java types which of course must match precisely","date":"2019-01-14T06:34:00.278Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: ah, true. i suppose if the edition year were an option it'd be fine","date":"2019-01-14T06:34:11.445Z","type":"message"}
{"nick":"Bakkot","message":"we just publish new major versions /shrug","date":"2019-01-14T06:34:27.166Z","type":"message"}
{"nick":"devsnek","message":"oh yeah edition year","date":"2019-01-14T06:35:04.946Z","type":"message"}
{"nick":"devsnek","message":"why did eslint break again","date":"2019-01-14T06:35:15.224Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: seems unfortunate, can't look at multiple editions at once","date":"2019-01-14T06:35:15.483Z","type":"message"}
{"nick":"Bakkot","message":"I think npm will let you depend on multiple versions of a package, these days","date":"2019-01-14T06:35:47.150Z","type":"message"}
{"nick":"devsnek","message":"oh you can add a custom parser to eslint","date":"2019-01-14T06:35:55.887Z","type":"message"}
{"nick":"Bakkot","message":"also though why would you want that","date":"2019-01-14T06:35:59.790Z","type":"message"}
{"nick":"devsnek","message":"so it would have been people with babel-eslint","date":"2019-01-14T06:36:01.187Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: it won't","date":"2019-01-14T06:36:55.207Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: not at the top level","date":"2019-01-14T06:36:58.110Z","type":"message"}
{"nick":"ljharb","message":"you'd want that if you wanted to provide a configuration option to your consumers and have shift as a dep - like eslint, babel, or every other use case for a parser so far :-)","date":"2019-01-14T06:37:28.007Z","type":"message"}
{"nick":"ljharb","message":"why wouldn't you want that?","date":"2019-01-14T06:37:52.883Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-14T06:39:17.906Z","type":"quit"}
{"nick":"Bakkot","message":"Maintanence burden, mainly.","date":"2019-01-14T06:39:19.235Z","type":"message"}
{"nick":"ljharb","message":"well yeah that's why you wouldn't want it, but why wouldn't every user want it","date":"2019-01-14T06:39:32.618Z","type":"message"}
{"nick":"ljharb","message":"i mean, specifically, no extant tool in the ecosystem could switch to shift without it - so it seems a pretty important thing to have if adoption is a goal","date":"2019-01-14T06:40:09.354Z","type":"message"}
{"nick":"Bakkot","message":"because config = bad, just give me the thing which parses the most programs, generally speaking","date":"2019-01-14T06:40:10.018Z","type":"message"}
{"nick":"Bakkot","message":"if we made breaking changes to old parses, which we do occasionally in obscure unicode things but not otherwise, I'd understand","date":"2019-01-14T06:40:34.797Z","type":"message"}
{"nick":"ljharb","message":"config isn't bad, as long as the defaults are reasonable, config id very very good","date":"2019-01-14T06:40:37.380Z","type":"message"}
{"nick":"Bakkot","message":"eh, I mean, I don't want to make absolutist statements, but it certainly is not a universal good","date":"2019-01-14T06:41:11.625Z","type":"message"}
{"nick":"ljharb","message":"nor a universal bad","date":"2019-01-14T06:41:17.516Z","type":"message"}
{"nick":"Bakkot","message":"I think one of the best things prettier has done for the ecosystem is push back on config options","date":"2019-01-14T06:41:26.075Z","type":"message"}
{"nick":"Bakkot","message":"anyway, no, adoption isn't really that much of a goal, at least not into existing projects like eslint","date":"2019-01-14T06:41:55.093Z","type":"message"}
{"nick":"ljharb","message":"and the lack of configs is why its adoption is as low as it is, and prettier has added way more config options than its creator ideologically promised","date":"2019-01-14T06:41:56.053Z","type":"message"}
{"nick":"ljharb","message":"gotcha","date":"2019-01-14T06:41:58.931Z","type":"message"}
{"nick":"devsnek","message":"acorn defaults to es5.1 :(","date":"2019-01-14T06:42:11.069Z","type":"message"}
{"nick":"Bakkot","message":"main goal is providing a correct parser with a sane AST for ourselves and anyone else who wants that, like the binast people","date":"2019-01-14T06:42:27.967Z","type":"message"}
{"nick":"Bakkot","message":"also reducer-style transforms, which are _so_ much nicer than visitors, jeeze","date":"2019-01-14T06:43:03.316Z","type":"message"}
{"nick":"ljharb","message":"devsnek: still the best default, based on most browser support targets","date":"2019-01-14T06:43:04.709Z","type":"message"}
{"nick":"Bakkot","message":"speaking of, just updated the website! http://shift-ast.org/reducer.html","date":"2019-01-14T06:43:14.026Z","type":"message"}
{"nick":"devsnek","message":"ljharb: parsers should support all the way up","date":"2019-01-14T06:43:15.993Z","type":"message"}
{"nick":"devsnek","message":"if acorn generated code i would agree with you","date":"2019-01-14T06:43:23.581Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i agree that it should be possible, but i think es5 is still the proper default, and will be for awhile","date":"2019-01-14T06:43:44.726Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: not sure why \"this JS is targeted for untransformed execution on large companys' browser support targets\" is a good assumption","date":"2019-01-14T06:43:55.790Z","type":"message"}
{"nick":"devsnek","message":"reducer is cool","date":"2019-01-14T06:44:15.260Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: it's the safest","date":"2019-01-14T06:44:47.864Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: because with transforms and old code, it still works. with a default of \"modern\" and no transforms, it breaks.","date":"2019-01-14T06:45:19.835Z","type":"message"}
{"nick":"ljharb","message":"(for users of old browsers, which are still plentiful)","date":"2019-01-14T06:45:29.166Z","type":"message"}
{"nick":"Bakkot","message":"were that the goal it should also refuse programs which parse incorrectly on browers with nontrivial adoption, which I think it absolutely should not do","date":"2019-01-14T06:45:51.691Z","type":"message"}
{"nick":"Bakkot","message":"if that's what you want, write a rule for it","date":"2019-01-14T06:45:57.067Z","type":"message"}
{"nick":"ljharb","message":"tbh i think eslint should do that by default. are you aware of any patterns it parses that fail on browsers?","date":"2019-01-14T06:46:33.222Z","type":"message"}
{"nick":"ljharb","message":"imo the default should be what will maximize \"where it works\"","date":"2019-01-14T06:46:49.363Z","type":"message"}
{"nick":"ljharb","message":"anything that restricts where it can work should be opt-in","date":"2019-01-14T06:47:00.662Z","type":"message"}
{"nick":"ljharb","message":"that doesn't mean the defaults have to work everywhere, ofc.","date":"2019-01-14T06:47:11.012Z","type":"message"}
{"nick":"devsnek","message":"as long as the parser doesn't think `let let = class let {}` is valid","date":"2019-01-14T06:47:23.364Z","type":"message"}
{"nick":"devsnek","message":"i'm happy","date":"2019-01-14T06:47:25.819Z","type":"message"}
{"nick":"Bakkot","message":"({゛: \"゛\"}) failed on safari relatively recently","date":"2019-01-14T06:48:22.560Z","type":"message"}
{"nick":"Bakkot","message":"`!await test()` too","date":"2019-01-14T06:48:43.212Z","type":"message"}
{"nick":"ljharb","message":"then it shouldn't be permitted by eslint nor outputted by babel ¯\\_(ツ)_/¯","date":"2019-01-14T06:48:44.287Z","type":"message"}
{"nick":"Bakkot","message":"there's also a billion comment-parsing bugs old browsers, esp. re: html comments","date":"2019-01-14T06:49:06.912Z","type":"message"}
{"nick":"ljharb","message":"academic correctness isn't important with actual workflow tools; actual correctness is","date":"2019-01-14T06:49:07.164Z","type":"message"}
{"nick":"devsnek","message":"omg that object literal is evil","date":"2019-01-14T06:49:37.858Z","type":"message"}
{"nick":"devsnek","message":"why is that a valid identifier","date":"2019-01-14T06:49:44.200Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: your assumption is that the thing people want from eslint is that code run through it should work on browsers","date":"2019-01-14T06:49:59.757Z","type":"message"}
{"nick":"Bakkot","message":"but, I claim, that is very far from the majority use case","date":"2019-01-14T06:50:10.772Z","type":"message"}
{"nick":"ljharb","message":"i can't conceive of what other use case there is","date":"2019-01-14T06:50:36.658Z","type":"message"}
{"nick":"ljharb","message":"the point is to maximize correctness at later runtime","date":"2019-01-14T06:50:46.788Z","type":"message"}
{"nick":"devsnek","message":"i hear there's this cool thing called node.js","date":"2019-01-14T06:51:09.927Z","type":"message"}
{"nick":"devsnek","message":"which runs code on the server","date":"2019-01-14T06:51:13.012Z","type":"message"}
{"nick":"devsnek","message":"and that it supports like `const` and `class` and stuff","date":"2019-01-14T06:51:28.970Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: more things in heaven and earth etc","date":"2019-01-14T06:51:30.090Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: sure, but what use cases do you think people run eslint for that aren't maximizing runtime correctness?","date":"2019-01-14T06:52:27.788Z","type":"message"}
{"nick":"ljharb","message":"devsnek: ok well, implementations, not just browsers","date":"2019-01-14T06:52:38.921Z","type":"message"}
{"nick":"Bakkot","message":"maximizing correctness after being run through babel and/or uglify","date":"2019-01-14T06:52:42.831Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: i disagree with your usage of that quotation","date":"2019-01-14T06:52:44.397Z","type":"message"}
{"nick":"Bakkot","message":"also some style stuff","date":"2019-01-14T06:52:49.852Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: O.o ok well, running eslint on compiler output is in *no way* a common use case, for one","date":"2019-01-14T06:53:04.489Z","type":"message"}
{"nick":"Bakkot","message":"sorry, no, the other way around:","date":"2019-01-14T06:53:14.546Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: and \"style stuff\", sure, but that overlaps","date":"2019-01-14T06:53:16.278Z","type":"message"}
{"nick":"Bakkot","message":"maximizing correctness of A after A is run through babel","date":"2019-01-14T06:53:36.087Z","type":"message"}
{"nick":"Bakkot","message":"not maximizing correctness of the output of babel on A","date":"2019-01-14T06:53:50.200Z","type":"message"}
{"nick":"ljharb","message":"i agree that babel/uglify/etc output is what actually needs to work, but the presumption is that you can eslint your input, and those tools won't output things that break","date":"2019-01-14T06:53:54.967Z","type":"message"}
{"nick":"ljharb","message":"in no way is it common to run eslint on any code but the code you author (what gets sent to babel)","date":"2019-01-14T06:54:18.942Z","type":"message"}
{"nick":"rkirsling","message":"^ yeah that would be wacky","date":"2019-01-14T06:54:35.911Z","type":"message"}
{"nick":"Bakkot","message":"I didn't mean to imply people were running babel on code comming out of babel","date":"2019-01-14T06:54:36.065Z","type":"message"}
{"nick":"Bakkot","message":"just the opposite","date":"2019-01-14T06:54:37.855Z","type":"message"}
{"nick":"ljharb","message":"i'm sure it's done, but basically nobody actually runs eslint on babel output. if you don't trust babel implicitly, don't use it","date":"2019-01-14T06:54:38.616Z","type":"message"}
{"nick":"ljharb","message":"once you put your code into a tool, you never run anything on it after that, typically","date":"2019-01-14T06:54:54.287Z","type":"message"}
{"nick":"ljharb","message":"babel, uglify, webpack, etc","date":"2019-01-14T06:55:00.632Z","type":"message"}
{"nick":"ljharb","message":"you just implicitly trust irt","date":"2019-01-14T06:55:03.946Z","type":"message"}
{"nick":"ljharb","message":"*it","date":"2019-01-14T06:55:06.103Z","type":"message"}
{"nick":"Bakkot","message":"yes, I know, that is not a point of disagreement","date":"2019-01-14T06:55:07.190Z","type":"message"}
{"nick":"Bakkot","message":"my point is that eslint etc should assume their target is those tools, not browsers","date":"2019-01-14T06:55:35.069Z","type":"message"}
{"nick":"ljharb","message":"ahhh","date":"2019-01-14T06:55:38.391Z","type":"message"}
{"nick":"ljharb","message":"ok sure, perhaps","date":"2019-01-14T06:55:41.427Z","type":"message"}
{"nick":"ljharb","message":"but then the \"no build process\" zealots will pop up","date":"2019-01-14T06:55:47.629Z","type":"message"}
{"nick":"ljharb","message":"and even tho i'm not one, i'd argue that the safe default is not to assume someone is using those tools","date":"2019-01-14T06:56:02.730Z","type":"message"}
{"nick":"ljharb","message":"since there are plenty of people that aren't","date":"2019-01-14T06:56:07.464Z","type":"message"}
{"nick":"Bakkot","message":"\"not to assume someone is using those tools and also that they are intending to target IE9\"","date":"2019-01-14T06:56:21.888Z","type":"message"}
{"nick":"Bakkot","message":"I think this is mostly a disagreement about what \"safe\" means.","date":"2019-01-14T06:56:30.416Z","type":"message"}
{"nick":"ljharb","message":"without explicit info, the safe thing is to assume someone is targeting every browser currently used by anyone","date":"2019-01-14T06:56:50.441Z","type":"message"}
{"nick":"ljharb","message":"IE 6, eg","date":"2019-01-14T06:56:57.354Z","type":"message"}
{"nick":"ljharb","message":"it's reasonable to pick an arbitrary cutoff, tho, and by many metrics that would still include IE 9 for sure, and possibly even IE 8","date":"2019-01-14T06:57:23.800Z","type":"message"}
{"nick":"Bakkot","message":"ok, I guess it is also a disagreement about the extent to which that sense of \"safe\" is a good default for a tool, as opposed to \"useful\"","date":"2019-01-14T06:57:26.424Z","type":"message"}
{"nick":"ljharb","message":"\"works\" is the most useful","date":"2019-01-14T06:57:37.069Z","type":"message"}
{"nick":"ljharb","message":"but sure, those indeed might be points of disagreement :-)","date":"2019-01-14T06:57:54.797Z","type":"message"}
{"nick":"Bakkot","message":"for me, \"eslint works\" means \"eslint will run the linting rules\"","date":"2019-01-14T06:58:03.549Z","type":"message"}
{"nick":"Bakkot","message":"since that is what I want eslint to do; that is how I keep my code correct","date":"2019-01-14T06:58:23.705Z","type":"message"}
{"nick":"devsnek","message":"to me, eslint should consider all the valid js as valid js unless you limit it","date":"2019-01-14T06:58:38.628Z","type":"message"}
{"nick":"Bakkot","message":"if it refuses to parse a valid thing, it does not work","date":"2019-01-14T06:58:51.254Z","type":"message"}
{"nick":"Bakkot","message":"if I want it to say a thing is bad, that is what _its rules_ are for, not the parser which runs before the rules","date":"2019-01-14T06:59:14.635Z","type":"message"}
{"nick":"devsnek","message":"yep","date":"2019-01-14T06:59:24.814Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: what defines \"valid\" tho","date":"2019-01-14T06:59:45.932Z","type":"message"}
{"nick":"ljharb","message":"if it's \"the spec\" then i'd point you to the overflowing \"web reality\" label on ecma262","date":"2019-01-14T07:00:06.437Z","type":"message"}
{"nick":"devsnek","message":"i'd say engines have a lot of bugs","date":"2019-01-14T07:00:31.315Z","type":"message"}
{"nick":"Bakkot","message":"the whole point of having a spec is to have a thing which tools can agree on as the single authority","date":"2019-01-14T07:00:37.701Z","type":"message"}
{"nick":"devsnek","message":"and the spec has a lot of bugs","date":"2019-01-14T07:00:42.407Z","type":"message"}
{"nick":"Bakkot","message":"\"web reality\" label doesn't have too many parsing things in it, IIRC, outside of some B33 bullshit and the `if (false) f() = 0` thing","date":"2019-01-14T07:00:58.061Z","type":"message"}
{"nick":"ljharb","message":"fair","date":"2019-01-14T07:01:06.632Z","type":"message"}
{"nick":"devsnek","message":"and a random subset of those things is what should work","date":"2019-01-14T07:01:14.778Z","type":"message"}
{"nick":"devsnek","message":"leaning towards sane behaviour over engine bugs","date":"2019-01-14T07:01:25.351Z","type":"message"}
{"nick":"ljharb","message":"but in practice the useful thing to consider \"valid\" is \"what *actually* works\", not \"what a spec says\" - it's just hopeful that those two agree","date":"2019-01-14T07:01:34.863Z","type":"message"}
{"nick":"devsnek","message":"like function names","date":"2019-01-14T07:01:58.538Z","type":"message"}
{"nick":"devsnek","message":"bad enough that Function.prototype has name as the empty string","date":"2019-01-14T07:02:05.779Z","type":"message"}
{"nick":"Bakkot","message":"I think for a tool like eslint the right thing to consider \"valid\" is \"what a spec says\", and add rules which will error for valid inputs which are likely to run incorrectly on bugs","date":"2019-01-14T07:02:13.924Z","type":"message"}
{"nick":"Bakkot","message":"*incorrectly on browsers because of bugs","date":"2019-01-14T07:02:24.337Z","type":"message"}
{"nick":"devsnek","message":"but then engines go around putting empty strings on all the anonymous functions 😥","date":"2019-01-14T07:02:26.028Z","type":"message"}
{"nick":"Bakkot","message":"\"have rules which will error for valid inputs which are likely to have bugs\" is after all the point of eslint","date":"2019-01-14T07:02:49.567Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: as long as there's a trivial way to configure that, then it's more of a bikeshed about the defaults","date":"2019-01-14T07:02:58.412Z","type":"message"}
{"nick":"Bakkot","message":"well, yes.","date":"2019-01-14T07:03:10.578Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: but i'd still prefer that with no config, the only allowed code is what will work. the spec is pedantry that isn't useful to most.","date":"2019-01-14T07:03:18.878Z","type":"message"}
{"nick":"Bakkot","message":"that really really seems wrong.","date":"2019-01-14T07:04:01.517Z","type":"message"}
{"nick":"ljharb","message":"why?","date":"2019-01-14T07:04:16.234Z","type":"message"}
{"nick":"Bakkot","message":"that is enforcing a rule at the wrong level.","date":"2019-01-14T07:04:19.648Z","type":"message"}
{"nick":"ljharb","message":"why would the majority of users care about that distinction tho?","date":"2019-01-14T07:04:36.203Z","type":"message"}
{"nick":"devsnek","message":"eslint doesn't know if you're targeting browsers or node or deno or mongoose","date":"2019-01-14T07:04:47.630Z","type":"message"}
{"nick":"Bakkot","message":"because the majority of users do not actually care about that rule","date":"2019-01-14T07:04:58.869Z","type":"message"}
{"nick":"devsnek","message":"so it should just consider all the valid js as valid","date":"2019-01-14T07:05:01.044Z","type":"message"}
{"nick":"ljharb","message":"right. so the safe thing to do is to only allow the things that work on all of them as valid. not any of them.","date":"2019-01-14T07:05:09.177Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: i guess that's where we disagree","date":"2019-01-14T07:05:14.819Z","type":"message"}
{"nick":"Bakkot","message":"specifically, the rule \"will be valid syntax on at least 98% of browsers\" is not a rule the vast majority of users care to enforce","date":"2019-01-14T07:05:18.568Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-01-14T07:05:18.722Z","type":"message"}
{"nick":"Bakkot","message":"because they intend to run through other tools downstream of eslint","date":"2019-01-14T07:05:26.009Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: i think what the majority of users don't care about is \"the spec\"","date":"2019-01-14T07:05:26.830Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: plenty of people don't use babel","date":"2019-01-14T07:05:35.342Z","type":"message"}
{"nick":"devsnek","message":"i think most humans writing js go by mdn","date":"2019-01-14T07:05:53.442Z","type":"message"}
{"nick":"Bakkot","message":"sure, but a majority? of those who a.) care about support for old browsers and also use eslint?","date":"2019-01-14T07:05:55.096Z","type":"message"}
{"nick":"Bakkot","message":"\"*and also b.) use eslint\"; it is getting late, forgive my typos","date":"2019-01-14T07:06:14.111Z","type":"message"}
{"nick":"ljharb","message":"whether they actively care about old browsers isn't relevant","date":"2019-01-14T07:06:34.034Z","type":"message"}
{"nick":"ljharb","message":"that's the point. they should have to care about *breaking* them to break them","date":"2019-01-14T07:06:42.759Z","type":"message"}
{"nick":"ljharb","message":"the default should be to support them","date":"2019-01-14T07:06:47.165Z","type":"message"}
{"nick":"Bakkot","message":"that's a problem you have with users of the tools, not the tools they're using","date":"2019-01-14T07:07:14.900Z","type":"message"}
{"nick":"Bakkot","message":"I do not think eslint ought to enforce that preference on all of its users by default","date":"2019-01-14T07:07:37.271Z","type":"message"}
{"nick":"ljharb","message":"and the tools are working best when they can fix their users' problems :-)","date":"2019-01-14T07:07:39.451Z","type":"message"}
{"nick":"Bakkot","message":"that is a very reasonable rule to enforce, as a configurable rule; it is not a very reasonable default","date":"2019-01-14T07:07:48.489Z","type":"message"}
{"nick":"ljharb","message":"(note that i think we agree that regardless of the default, all of this should be configurable)","date":"2019-01-14T07:07:54.927Z","type":"message"}
{"nick":"ljharb","message":"i think \"breaking a website for any human being that's avoidable\" is not a reasonable default","date":"2019-01-14T07:08:16.541Z","type":"message"}
{"nick":"ljharb","message":"a single user is a person, and a site should work for them by default","date":"2019-01-14T07:08:25.701Z","type":"message"}
{"nick":"devsnek","message":"why's your parse rule only got 98% then","date":"2019-01-14T07:08:50.196Z","type":"message"}
{"nick":"Bakkot","message":"again, that is something you should take up with the users of the tools; the tools themselves should be agnostic to that position","date":"2019-01-14T07:08:53.292Z","type":"message"}
{"nick":"ljharb","message":"i think that's where we disagree","date":"2019-01-14T07:09:27.144Z","type":"message"}
{"nick":"ljharb","message":"and i think it's strange to claim tools should be agnostic while also claiming config is bag","date":"2019-01-14T07:09:42.543Z","type":"message"}
{"nick":"ljharb","message":"agnostic tools allow every single facet to be configured :-)","date":"2019-01-14T07:09:53.101Z","type":"message"}
{"nick":"Bakkot","message":"anyway, also I wouldn't want to configure the parser it uses, except to additionally support non-spec things if I wanted to opt in to those: I would want it to _accept_ those programs and then _emit errors because of rules run against them_.","date":"2019-01-14T07:09:54.632Z","type":"message"}
{"nick":"Bakkot","message":"I don't think eslint having config for the rules it runs is bad, to be clear","date":"2019-01-14T07:10:30.866Z","type":"message"}
{"nick":"Bakkot","message":"I think having config for things users shouldn't care about is bad","date":"2019-01-14T07:10:42.036Z","type":"message"}
{"nick":"Bakkot","message":"e.g. it should not have config for \"what es version does the parser support\"; it should have config for \"do you want a rule which will error for syntax from es2015 and later\"","date":"2019-01-14T07:11:14.094Z","type":"message"}
{"nick":"Bakkot","message":"but that should be a _rule_, exactly like all other rules","date":"2019-01-14T07:11:33.097Z","type":"message"}
{"nick":"Bakkot","message":"because its intent is to catch correctness issues under a particular definition of correctness, exactly like all other rules","date":"2019-01-14T07:12:02.477Z","type":"message"}
{"nick":"ljharb","message":"users don't care about the spec year","date":"2019-01-14T07:12:05.471Z","type":"message"}
{"nick":"ljharb","message":"they care about their supported environments","date":"2019-01-14T07:12:13.301Z","type":"message"}
{"nick":"Bakkot","message":"s/es2015/IE8/","date":"2019-01-14T07:12:15.333Z","type":"message"}
{"nick":"ljharb","message":"sure, so like, babel-preset-env","date":"2019-01-14T07:12:24.731Z","type":"message"}
{"nick":"ljharb","message":"and absent targets, i'm suggesting a broad default. perhaps it could require targets, and then no default would be needed","date":"2019-01-14T07:12:42.367Z","type":"message"}
{"nick":"ljharb","message":"but virtually nobody cares about \"es2015\"; they care about \"X target envs\", modulo maybe running through specific tools","date":"2019-01-14T07:13:13.354Z","type":"message"}
{"nick":"Bakkot","message":"\"broad\" should be wrt the input programs, so it can run rules on as many programs as it can.","date":"2019-01-14T07:13:31.881Z","type":"message"}
{"nick":"Bakkot","message":"if users don't care about the spec year, surely the parser should not be configured by spec year?","date":"2019-01-14T07:13:47.828Z","type":"message"}
{"nick":"ljharb","message":"i agree","date":"2019-01-14T07:13:53.105Z","type":"message"}
{"nick":"Bakkot","message":"or, indeed, configured at all","date":"2019-01-14T07:13:53.454Z","type":"message"}
{"nick":"ljharb","message":"it should be configured by targets","date":"2019-01-14T07:14:00.039Z","type":"message"}
{"nick":"ljharb","message":"spec year is just the very imperfect way eslint is currently configured","date":"2019-01-14T07:14:07.982Z","type":"message"}
{"nick":"Bakkot","message":"why is the parser the correct way to configure that?","date":"2019-01-14T07:14:14.528Z","type":"message"}
{"nick":"ljharb","message":"because the targets have parsers?","date":"2019-01-14T07:14:20.834Z","type":"message"}
{"nick":"Bakkot","message":"so? targets have interpreters too. so does eslint, in an abstract sense.","date":"2019-01-14T07:14:35.168Z","type":"message"}
{"nick":"ljharb","message":"so \"what can parse\" should be the overlap of what will parse on every target","date":"2019-01-14T07:14:46.504Z","type":"message"}
{"nick":"Bakkot","message":"the way you configure eslint's interpreter is with _rules_","date":"2019-01-14T07:14:48.270Z","type":"message"}
{"nick":"ljharb","message":"the rules only get the chance to work if it parses","date":"2019-01-14T07:15:00.704Z","type":"message"}
{"nick":"Bakkot","message":"right!","date":"2019-01-14T07:15:04.633Z","type":"message"}
{"nick":"Bakkot","message":"so it should parse as many things as it can!","date":"2019-01-14T07:15:08.404Z","type":"message"}
{"nick":"Bakkot","message":"so the rules get a chance to work!","date":"2019-01-14T07:15:11.900Z","type":"message"}
{"nick":"Bakkot","message":"since the point of eslint is to run the rules!","date":"2019-01-14T07:15:17.857Z","type":"message"}
{"nick":"ljharb","message":"no, i'm saying the rules don't matter if the code won't parse on your targets","date":"2019-01-14T07:15:22.440Z","type":"message"}
{"nick":"Bakkot","message":"the parsing doesn't matter if the code won't run correctly on your targets because of a semantics issue which a rule would have caught.","date":"2019-01-14T07:15:47.280Z","type":"message"}
{"nick":"Bakkot","message":"there is not meaningful difference between \"wrong because it will fail to parse on your target\" and \"wrong because of other correctness issues of the type caught by rules\"","date":"2019-01-14T07:16:12.223Z","type":"message"}
{"nick":"ljharb","message":"ok, perhaps","date":"2019-01-14T07:16:19.408Z","type":"message"}
{"nick":"ljharb","message":"but then the rules related to \"what works on your targets\" should be enabled by default :-)","date":"2019-01-14T07:16:33.031Z","type":"message"}
{"nick":"Bakkot","message":"my preference would be for no rules to be enabled by default, which means the same thing for all users, whereas \"what works on your targets\" does not mean the same thing for most pairs of users.","date":"2019-01-14T07:17:32.548Z","type":"message"}
{"nick":"Bakkot","message":"but sure, I am fine with that, as long as it parses those programs.","date":"2019-01-14T07:17:59.649Z","type":"message"}
{"nick":"Bakkot","message":"(anyway, point is, I continue to think it's reasonable for parsers to only support es-latest and optionally extensions, in most cases)","date":"2019-01-14T07:20:32.493Z","type":"message"}
{"nick":"Bakkot","message":"(I guess \"error on all programs, because someone might not have javascript\" might actually be a reasonable default too; it means the same thing for everyone and would at least get the point across that you will need to think about and configure which downstream use cases you care to support)","date":"2019-01-14T07:22:36.665Z","type":"message"}
{"nick":"ljharb","message":"lol, i'd be fine with that if it forced everyone to provide targets, and included whatever kind of default-on enforcement to prevent code that won't run on them","date":"2019-01-14T07:25:12.323Z","type":"message"}
{"nick":"howdoi","date":"2019-01-14T09:13:53.726Z","type":"join"}
{"nick":"mgol","date":"2019-01-14T10:08:48.431Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-14T11:44:54.432Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-14T11:55:01.932Z","type":"quit"}
{"nick":"gibson042","date":"2019-01-14T13:25:45.112Z","type":"join"}
{"nick":"jmdyck","date":"2019-01-14T13:39:04.907Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 258 seconds","date":"2019-01-14T14:28:06.150Z","type":"quit"}
{"nick":"bradleymeck","message":"Bakkot: when doing static analysis I try to go for loosest mode with most common syntax extensions. if you force people to use the compiled form you get into weird renaming issues while showing them sources","date":"2019-01-14T14:39:53.308Z","type":"message"}
{"nick":"gibson042","date":"2019-01-14T14:41:46.880Z","type":"join"}
{"nick":"bradleymeck","message":"who was going to propose freezePrototype?","date":"2019-01-14T14:55:28.124Z","type":"message"}
{"nick":"bradleymeck","message":"nm XD","date":"2019-01-14T14:58:14.231Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-14T15:42:23.326Z","type":"join"}
