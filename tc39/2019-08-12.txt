{"nick":"SferaDev","reason":"Ping timeout: 276 seconds","date":"2019-08-12T00:04:07.711Z","type":"quit"}
{"nick":"hellauer","reason":"Quit: WeeChat 2.4","date":"2019-08-12T00:15:32.218Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T00:28:22.079Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-08-12T00:33:04.080Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T00:43:15.593Z","type":"join"}
{"nick":"Bakkot","date":"2019-08-12T00:44:14.560Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T01:22:53.454Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-12T01:45:33.052Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T02:08:06.896Z","type":"quit"}
{"nick":"devsnek","message":"jmdyck: do you know if this note from built-in function's Call slot is ever relevant? \"When _calleeContext_ is removed from the execution context stack it must not be destroyed if it has been suspended and retained by an accessible generator object for later resumption.\"","date":"2019-08-12T02:11:46.214Z","type":"message"}
{"nick":"Guest88309","reason":"Quit: WeeChat 2.5","date":"2019-08-12T02:30:48.829Z","type":"quit"}
{"nick":"khyperia","date":"2019-08-12T02:30:56.318Z","type":"join"}
{"nick":"laughinghan","date":"2019-08-12T03:11:57.326Z","type":"join"}
{"nick":"jmdyck","message":"hm","date":"2019-08-12T03:27:19.719Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T03:30:18.058Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-12T03:34:16.181Z","type":"join"}
{"nick":"jmdyck","message":"devsnek: Sorry, don't know.","date":"2019-08-12T03:36:50.950Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: no worries, i couldn't find anything either","date":"2019-08-12T03:37:05.528Z","type":"message"}
{"nick":"devsnek","message":"but it makes me feel better about my pr :)","date":"2019-08-12T03:37:18.941Z","type":"message"}
{"nick":"jmdyck","message":"Does the condition described in the note not convince you?","date":"2019-08-12T03:37:29.332Z","type":"message"}
{"nick":"devsnek","message":"convince me of what","date":"2019-08-12T03:37:46.992Z","type":"message"}
{"nick":"jmdyck","message":"convinceyou of the relevance of the note, i suppose.","date":"2019-08-12T03:38:20.013Z","type":"message"}
{"nick":"devsnek","message":"i just meant, i couldn't find a condition in the current spec where calleeContext would be suspended and retained by a generator","date":"2019-08-12T03:39:08.007Z","type":"message"}
{"nick":"jmdyck","message":"ah, okay. slightly different question than i thought you meant.","date":"2019-08-12T03:40:20.130Z","type":"message"}
{"nick":"devsnek","message":"perhaps its used in the web spec or something","date":"2019-08-12T03:41:04.965Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T03:44:46.368Z","type":"quit"}
{"nick":"SferaDev","date":"2019-08-12T04:01:36.307Z","type":"join"}
{"nick":"jmdyck","message":"I'm wondering if \"suspend\" is ambiguous in that sentence.","date":"2019-08-12T04:02:13.716Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-12T04:07:07.549Z","type":"quit"}
{"nick":"jmdyck","message":"devsnek: So is this what you're saying?: It's common that a generator object would suspend and retain an execution context for later resumption, but what you're wondering is how such a context could be _calleeContext_ in that [[Call]] method?","date":"2019-08-12T04:16:07.706Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-08-12T04:16:26.108Z","type":"message"}
{"nick":"devsnek","message":"as far as i know that never occurs","date":"2019-08-12T04:16:30.626Z","type":"message"}
{"nick":"devsnek","message":"well with my pr it will happen, but not in the current spec","date":"2019-08-12T04:16:39.884Z","type":"message"}
{"nick":"laughinghan","date":"2019-08-12T04:17:19.751Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-08-12T04:42:16.705Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T05:02:59.213Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-08-12T05:07:32.145Z","type":"quit"}
{"nick":"titanbiscuit","reason":"Quit: ZNC 1.7.3 - https://znc.in","date":"2019-08-12T05:13:04.319Z","type":"quit"}
{"nick":"titanbiscuit","date":"2019-08-12T05:13:21.049Z","type":"join"}
{"nick":"cybai","date":"2019-08-12T05:17:31.666Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T06:32:45.127Z","type":"quit"}
{"nick":"kpatticha","date":"2019-08-12T06:44:04.436Z","type":"join"}
{"nick":"Nimelrian","date":"2019-08-12T06:48:43.726Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-12T07:53:06.566Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T08:28:57.664Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-08-12T08:33:43.580Z","type":"quit"}
{"nick":"Bakkot","reason":"*.net *.split","date":"2019-08-12T08:42:40.548Z","type":"quit"}
{"nick":"ephemera_","reason":"*.net *.split","date":"2019-08-12T08:42:41.199Z","type":"quit"}
{"nick":"JaseW","reason":"*.net *.split","date":"2019-08-12T08:42:41.749Z","type":"quit"}
{"nick":"tomdale","reason":"*.net *.split","date":"2019-08-12T08:42:41.800Z","type":"quit"}
{"nick":"samth","reason":"*.net *.split","date":"2019-08-12T08:42:41.801Z","type":"quit"}
{"nick":"keith_miller","reason":"*.net *.split","date":"2019-08-12T08:42:42.572Z","type":"quit"}
{"nick":"aklein","reason":"*.net *.split","date":"2019-08-12T08:42:42.995Z","type":"quit"}
{"nick":"tobie","reason":"*.net *.split","date":"2019-08-12T08:42:43.046Z","type":"quit"}
{"nick":"JaseW","date":"2019-08-12T08:42:56.713Z","type":"join"}
{"nick":"ephemera_","date":"2019-08-12T08:42:57.781Z","type":"join"}
{"nick":"Bakkot","date":"2019-08-12T08:43:54.278Z","type":"join"}
{"nick":"tomdale","date":"2019-08-12T08:47:53.374Z","type":"join"}
{"nick":"samth","date":"2019-08-12T08:47:53.466Z","type":"join"}
{"nick":"keith_miller","date":"2019-08-12T08:47:53.466Z","type":"join"}
{"nick":"aklein","date":"2019-08-12T08:47:53.466Z","type":"join"}
{"nick":"tobie","date":"2019-08-12T08:47:53.466Z","type":"join"}
{"nick":"samth","reason":"Changing host","date":"2019-08-12T08:47:57.997Z","type":"quit"}
{"nick":"samth","date":"2019-08-12T08:47:58.049Z","type":"join"}
{"nick":"tomdale","reason":"Changing host","date":"2019-08-12T08:47:58.189Z","type":"quit"}
{"nick":"tomdale","date":"2019-08-12T08:47:58.240Z","type":"join"}
{"nick":"mgol","date":"2019-08-12T09:14:37.904Z","type":"join"}
{"nick":"cybai","date":"2019-08-12T10:20:53.707Z","type":"join"}
{"nick":"jmdyck","date":"2019-08-12T11:41:04.511Z","type":"join"}
{"nick":"rkirsling","reason":"Remote host closed the connection","date":"2019-08-12T12:14:20.881Z","type":"quit"}
{"nick":"rkirsling","date":"2019-08-12T12:14:33.110Z","type":"join"}
{"nick":"Nimelrian","reason":"Ping timeout: 250 seconds","date":"2019-08-12T12:17:49.809Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-12T12:19:07.094Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T12:35:00.740Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-12T12:39:55.697Z","type":"quit"}
{"nick":"gibson042","date":"2019-08-12T12:44:18.720Z","type":"join"}
{"nick":"kpattich_","date":"2019-08-12T12:59:39.404Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 245 seconds","date":"2019-08-12T13:01:18.387Z","type":"quit"}
{"nick":"ephemera_","reason":"Ping timeout: 258 seconds","date":"2019-08-12T13:25:44.777Z","type":"quit"}
{"nick":"ephemera_","date":"2019-08-12T13:27:14.527Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 244 seconds","date":"2019-08-12T13:41:06.522Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T13:45:30.008Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 245 seconds","date":"2019-08-12T13:55:53.384Z","type":"quit"}
{"nick":"kpattich_","date":"2019-08-12T13:57:00.454Z","type":"join"}
{"nick":"kpattich__","date":"2019-08-12T13:58:30.742Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 244 seconds","date":"2019-08-12T14:01:15.518Z","type":"quit"}
{"nick":"ephemera_","date":"2019-08-12T14:02:53.392Z","type":"join"}
{"nick":"devsnek","message":"ljharb: I don't think prototype iterators are compatible with generators","date":"2019-08-12T14:39:24.009Z","type":"message"}
{"nick":"ljharb","message":"devsnek: user ones, sure, but why not builtins?","date":"2019-08-12T14:45:36.664Z","type":"message"}
{"nick":"underikar","date":"2019-08-12T14:46:09.767Z","type":"join"}
{"nick":"devsnek","message":"I guess you could change regexpstringiteratorprototype.next to call GeneratorResume or whatever","date":"2019-08-12T14:46:35.262Z","type":"message"}
{"nick":"devsnek","message":"but that seems like complexity","date":"2019-08-12T14:46:46.921Z","type":"message"}
{"nick":"devsnek","message":"i'm trying to get rid of complexity","date":"2019-08-12T14:46:59.523Z","type":"message"}
{"nick":"ljharb","message":"wait, regular generators tho already make an iterator whose next resumes the generator","date":"2019-08-12T14:47:22.233Z","type":"message"}
{"nick":"ljharb","message":"literally the only difference here is what kind of object IterationResult or whatever creates","date":"2019-08-12T14:47:41.585Z","type":"message"}
{"nick":"devsnek","message":"yeah but regexpstringiteratorprototype has its own next method","date":"2019-08-12T14:47:43.843Z","type":"message"}
{"nick":"ljharb","message":"i guess I’m not clear on why having it call GenratorResume with the receiver would be more complex than the current state","date":"2019-08-12T14:49:05.978Z","type":"message"}
{"nick":"devsnek","message":"I dunno","date":"2019-08-12T14:52:02.095Z","type":"message"}
{"nick":"devsnek","message":"I haven't explored it that much","date":"2019-08-12T14:52:08.229Z","type":"message"}
{"nick":"devsnek","message":"I'll take a look in engine262 and see if it still passes test262","date":"2019-08-12T14:52:47.196Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-12T15:04:36.304Z","type":"quit"}
{"nick":"kpattich__","reason":"Remote host closed the connection","date":"2019-08-12T15:08:21.308Z","type":"quit"}
{"nick":"devsnek","message":"ljharb: the prototype needs to implement both RegExpStringIteratorPrototype and GeneratorPrototype","date":"2019-08-12T15:39:12.100Z","type":"message"}
{"nick":"devsnek","message":"slots of both, etc","date":"2019-08-12T15:39:14.295Z","type":"message"}
{"nick":"cybai","date":"2019-08-12T15:40:07.827Z","type":"join"}
{"nick":"ljharb","message":"sure, resiP could inherit from GP, which inherits from IP?","date":"2019-08-12T15:40:08.248Z","type":"message"}
{"nick":"devsnek","message":"no i mean you need something that has both [[GeneratorState]] and [[IteratingRegExp]]","date":"2019-08-12T15:41:19.800Z","type":"message"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-12T15:44:57.754Z","type":"quit"}
{"nick":"devsnek","message":"maybe you could put a [[RealGenerator]] slot on RegExpStringIteratorPrototype instances","date":"2019-08-12T15:45:29.472Z","type":"message"}
{"nick":"devsnek","message":"and then next does GeneratorResume(this.[[RealGenerator]])","date":"2019-08-12T15:45:40.867Z","type":"message"}
{"nick":"devsnek","message":"this seems really complex though","date":"2019-08-12T15:46:14.772Z","type":"message"}
{"nick":"ljharb","message":"hmm","date":"2019-08-12T15:47:52.965Z","type":"message"}
{"nick":"ljharb","message":"it just seems like the value of this change is to take all the places that make an iterator, and express them more clearly/closer to js","date":"2019-08-12T15:48:12.892Z","type":"message"}
{"nick":"ljharb","message":"and if we can only do that for new cases, it doesn’t seem very compelling","date":"2019-08-12T15:48:27.457Z","type":"message"}
{"nick":"devsnek","message":"i think its still extremely compelling for new cases","date":"2019-08-12T15:48:41.852Z","type":"message"}
{"nick":"devsnek","message":"it turns thousands of new steps into tens of steps","date":"2019-08-12T15:48:52.412Z","type":"message"}
{"nick":"devsnek","message":"and it plays nicely with implementations too","date":"2019-08-12T15:50:01.636Z","type":"message"}
{"nick":"devsnek","message":"here's what i came up with for matchAll, and it works, but its kinda meh https://gc.gy/33330024.png https://gc.gy/33330074.png https://gc.gy/33330109.png","date":"2019-08-12T15:51:51.931Z","type":"message"}
{"nick":"AtumT","date":"2019-08-12T15:52:29.545Z","type":"join"}
{"nick":"Domenic","message":"devsnek: so is the idea that all the iterator-helper functions would use %GeneratorPrototype%?","date":"2019-08-12T15:57:09.787Z","type":"message"}
{"nick":"Domenic","message":"Instead of a new prototype for each kind?","date":"2019-08-12T15:57:16.838Z","type":"message"}
{"nick":"devsnek","message":"Domenic: yes","date":"2019-08-12T15:57:19.525Z","type":"message"}
{"nick":"Domenic","message":"OK","date":"2019-08-12T15:57:24.053Z","type":"message"}
{"nick":"Domenic","message":"I've asked implementers which they would prefer and they never get back to me","date":"2019-08-12T15:57:37.049Z","type":"message"}
{"nick":"Domenic","message":"So I'm OK either way","date":"2019-08-12T15:57:39.130Z","type":"message"}
{"nick":"devsnek","message":"i see it as using less memory, and suspending is a lot easier to lower since you have fewer functions to compare with the state of the prototype","date":"2019-08-12T15:58:08.109Z","type":"message"}
{"nick":"devsnek","message":"ljharb: i could add a third element, \"steps for creating the initial return value of a built-in (async) generator\"","date":"2019-08-12T15:59:26.848Z","type":"message"}
{"nick":"devsnek","message":"but that seems messy","date":"2019-08-12T15:59:38.771Z","type":"message"}
{"nick":"cpplearner","date":"2019-08-12T16:20:01.839Z","type":"join"}
{"nick":"cpplearner","message":"`Await` calls `! PerformPromiseThen(promise, onFulfilled, onRejected)`, but `PerformPromiseThen` never returns a CompletionRecord in that context, i.e., except `undefined`. Then, why is it prefixed with `!`?","date":"2019-08-12T16:27:24.547Z","type":"message"}
{"nick":"Domenic","message":"cpplearner: it's an assertion that PerformPromiseThen never returns an abrupt completion. As you can see, the assertion is correct. Which is good, because incorrect assertions are spec bugs.","date":"2019-08-12T16:28:15.572Z","type":"message"}
{"nick":"cpplearner","message":"Oh, I see. I was a bit worried that I'm missing something. Thanks for the clarification.","date":"2019-08-12T16:29:33.348Z","type":"message"}
{"nick":"cybai","date":"2019-08-12T16:33:05.063Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-08-12T16:37:52.058Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T16:53:57.768Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-12T16:58:37.739Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-12T17:02:13.193Z","type":"join"}
{"nick":"Nimelrian","date":"2019-08-12T17:14:57.088Z","type":"join"}
{"nick":"jwalden","date":"2019-08-12T17:15:50.722Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T17:23:02.479Z","type":"quit"}
{"nick":"ljharb","message":"cpplearner: also, every abstract operation gets automatically wrapped in a complen rtcord","date":"2019-08-12T17:40:48.455Z","type":"message"}
{"nick":"ljharb","message":"*completion record","date":"2019-08-12T17:41:04.700Z","type":"message"}
{"nick":"cpplearner","message":"Oh, that I didn't know. 5.2.3.1 certainly states the implicit case. Thanks for the reminder.","date":"2019-08-12T17:45:31.550Z","type":"message"}
{"nick":"cpplearner","message":"=)","date":"2019-08-12T17:45:45.128Z","type":"message"}
{"nick":"devsnek","message":"ljharb: do you still want to try to migrate old methods that return iterators","date":"2019-08-12T17:46:26.893Z","type":"message"}
{"nick":"ljharb","message":"devsnek: to me that's the primary goal","date":"2019-08-12T17:47:37.956Z","type":"message"}
{"nick":"ljharb","message":"devsnek: as for having GeneratorPrototype over a bunch of new individual kinds, i like that too, but old ones couldn't do that, as you say","date":"2019-08-12T17:48:02.779Z","type":"message"}
{"nick":"devsnek","message":"ok so basically","date":"2019-08-12T17:48:22.230Z","type":"message"}
{"nick":"devsnek","message":"we need some way to override the return value","date":"2019-08-12T17:48:35.423Z","type":"message"}
{"nick":"devsnek","message":"with `ObjectCreate(%RegExpStringIteratorPrototype%, [ [[IteratedRegExp]], [[RealGenerator]] ])`","date":"2019-08-12T17:49:20.590Z","type":"message"}
{"nick":"devsnek","message":"and then some way to set [[RealGenerator]]","date":"2019-08-12T17:49:29.675Z","type":"message"}
{"nick":"mgol","date":"2019-08-12T17:50:21.763Z","type":"join"}
{"nick":"ljharb","message":"you could set that slot and use it unconditionally","date":"2019-08-12T17:55:59.907Z","type":"message"}
{"nick":"ljharb","message":"it's just be cyclic for the ones that didn't have their own prototype","date":"2019-08-12T17:56:09.155Z","type":"message"}
{"nick":"Fishrock123","date":"2019-08-12T17:57:39.777Z","type":"join"}
{"nick":"jwalden","reason":"Ping timeout: 250 seconds","date":"2019-08-12T18:27:01.699Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T18:35:06.789Z","type":"quit"}
{"nick":"drousso","date":"2019-08-12T18:37:26.744Z","type":"join"}
{"nick":"jwalden","date":"2019-08-12T18:41:58.111Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T18:47:48.672Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-12T18:49:18.027Z","type":"join"}
{"nick":"cybai","date":"2019-08-12T18:54:50.078Z","type":"join"}
{"nick":"mgol","date":"2019-08-12T18:58:43.188Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-08-12T18:59:28.017Z","type":"quit"}
{"nick":"laughinghan","reason":"Ping timeout: 245 seconds","date":"2019-08-12T19:03:48.356Z","type":"quit"}
{"nick":"bradleymeck","message":"TDZ doesn't guard against early reads in patterns?","date":"2019-08-12T19:18:42.153Z","type":"message"}
{"nick":"bradleymeck","message":"nm, miswrote the code","date":"2019-08-12T19:19:54.983Z","type":"message"}
{"nick":"devsnek","message":"ok so in `a.b?.c`, `a.b?.c` is an OptionalExpression, and `b?.c` is an OptionalChain, is that right?","date":"2019-08-12T19:41:10.185Z","type":"message"}
{"nick":"rkirsling","message":"devsnek: `?.c` is the OptionalChain","date":"2019-08-12T19:49:09.442Z","type":"message"}
{"nick":"devsnek","message":"what is `b?.c`","date":"2019-08-12T19:50:00.617Z","type":"message"}
{"nick":"rkirsling","message":"nothing at all, actually","date":"2019-08-12T19:50:30.555Z","type":"message"}
{"nick":"rkirsling","message":"`a.b` is a MemberExpression","date":"2019-08-12T19:50:39.080Z","type":"message"}
{"nick":"rkirsling","message":"so you're cutting across the tree","date":"2019-08-12T19:50:57.575Z","type":"message"}
{"nick":"devsnek","message":"so `(a.b)?.c`","date":"2019-08-12T19:51:29.930Z","type":"message"}
{"nick":"devsnek","message":"in terms of tree","date":"2019-08-12T19:51:35.344Z","type":"message"}
{"nick":"rkirsling","message":"the spec grammar works for the spec but it doesn't correspond to something implementable, as it turns out :p","date":"2019-08-12T19:51:40.130Z","type":"message"}
{"nick":"rkirsling","message":"yeah","date":"2019-08-12T19:51:41.233Z","type":"message"}
{"nick":"devsnek","message":"well i'm trying to implement it in engine262","date":"2019-08-12T19:51:56.664Z","type":"message"}
{"nick":"rkirsling","message":"*directly implementable","date":"2019-08-12T19:52:01.655Z","type":"message"}
{"nick":"rkirsling","message":"hmmm","date":"2019-08-12T19:52:04.119Z","type":"message"}
{"nick":"devsnek","message":"which tries to correspond to the actual steps in the spec","date":"2019-08-12T19:52:10.294Z","type":"message"}
{"nick":"rkirsling","message":"right","date":"2019-08-12T19:52:27.885Z","type":"message"}
{"nick":"rkirsling","message":"the reason I said that is purely based on not being able to view `.b` as a thing in itself","date":"2019-08-12T19:53:08.561Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-08-12T19:53:23.355Z","type":"message"}
{"nick":"devsnek","message":"in a.b?.c.d, is that `a.b` member expression, `?.c` and `.d` are optional chains?","date":"2019-08-12T19:53:35.661Z","type":"message"}
{"nick":"rkirsling","message":"`?.c.d` is the OptionalChain there; that's actually the motivation of having OptionalChain be a thing","date":"2019-08-12T19:54:21.605Z","type":"message"}
{"nick":"devsnek","message":"oh and then `?.c` is an optional chain inside that","date":"2019-08-12T19:54:35.533Z","type":"message"}
{"nick":"rkirsling","message":"right","date":"2019-08-12T19:54:49.938Z","type":"message"}
{"nick":"devsnek","message":"this is almost making sense lol","date":"2019-08-12T19:54:58.390Z","type":"message"}
{"nick":"devsnek","message":"i need to get a whiteboard","date":"2019-08-12T19:55:09.934Z","type":"message"}
{"nick":"rkirsling","message":"because in `a?.b.c?.d.e`, there are two optional chains, is the idea","date":"2019-08-12T19:55:14.522Z","type":"message"}
{"nick":"rkirsling","message":"it works well to achieve the short-circuiting behavior in the spec","date":"2019-08-12T19:55:33.820Z","type":"message"}
{"nick":"rkirsling","message":"but it's a bit mind-boggling on very first read","date":"2019-08-12T19:55:51.285Z","type":"message"}
{"nick":"devsnek","message":"https://gc.gy/33344943.png","date":"2019-08-12T19:59:05.889Z","type":"message"}
{"nick":"devsnek","message":"aside from messed up indentation, does this look right?","date":"2019-08-12T19:59:22.080Z","type":"message"}
{"nick":"devsnek","message":"oh i messed up three times","date":"2019-08-12T20:00:17.376Z","type":"message"}
{"nick":"rkirsling","message":"oops yeah OptionalChains on the interior of the latter example","date":"2019-08-12T20:00:58.106Z","type":"message"}
{"nick":"devsnek","message":"https://gc.gy/33345106.png","date":"2019-08-12T20:01:46.650Z","type":"message"}
{"nick":"rkirsling","message":"in the third one there's actually a nested OptionalExpression","date":"2019-08-12T20:02:43.090Z","type":"message"}
{"nick":"devsnek","message":"where's that","date":"2019-08-12T20:02:55.377Z","type":"message"}
{"nick":"rkirsling","message":"since an OptionalChain has exactly one ?","date":"2019-08-12T20:03:09.699Z","type":"message"}
{"nick":"devsnek","message":"connecting `?.c.d` and `?.e.f`?","date":"2019-08-12T20:03:15.008Z","type":"message"}
{"nick":"rkirsling","message":"Yeah exactly","date":"2019-08-12T20:03:20.080Z","type":"message"}
{"nick":"devsnek","message":"is that a sole child of the first OptionalChain","date":"2019-08-12T20:04:04.996Z","type":"message"}
{"nick":"devsnek","message":"or does it replace the first OptionalChain","date":"2019-08-12T20:04:09.383Z","type":"message"}
{"nick":"rkirsling","message":"OptionalExpression","date":"2019-08-12T20:05:45.002Z","type":"message"}
{"nick":"rkirsling","message":"    OptionalExpression","date":"2019-08-12T20:05:45.105Z","type":"message"}
{"nick":"rkirsling","message":"        MemberExpression a.b","date":"2019-08-12T20:05:45.157Z","type":"message"}
{"nick":"rkirsling","message":"        OptionalChain ?.c.d","date":"2019-08-12T20:05:45.157Z","type":"message"}
{"nick":"rkirsling","message":"    OptionalChain ?.e.f","date":"2019-08-12T20:05:45.157Z","type":"message"}
{"nick":"devsnek","message":"oh","date":"2019-08-12T20:06:07.662Z","type":"message"}
{"nick":"rkirsling","message":"I don't blame you for finding it confusing though 😓","date":"2019-08-12T20:07:57.571Z","type":"message"}
{"nick":"devsnek","message":"its funny to know how optional chaining works well enough to implement it but at the same time have no idea how the spec for it works","date":"2019-08-12T20:08:24.465Z","type":"message"}
{"nick":"rkirsling","message":"right?","date":"2019-08-12T20:08:29.033Z","type":"message"}
{"nick":"rkirsling","message":"I tried to make this note clearer: https://tc39.es/proposal-optional-chaining/#sec-optional-chains","date":"2019-08-12T20:08:37.597Z","type":"message"}
{"nick":"rkirsling","message":"but I don't know if it's enough","date":"2019-08-12T20:08:45.841Z","type":"message"}
{"nick":"devsnek","message":"i'm writing out a bunch of AST examples to help myself","date":"2019-08-12T20:09:08.874Z","type":"message"}
{"nick":"rkirsling","message":"seems good","date":"2019-08-12T20:09:18.739Z","type":"message"}
{"nick":"devsnek","message":"so i could have a parseOptionalChain which is a sub of parsing member expressions that stops when it hits a ?","date":"2019-08-12T20:09:50.841Z","type":"message"}
{"nick":"devsnek","message":"and then the caller calls parseOptionalChain again","date":"2019-08-12T20:09:59.274Z","type":"message"}
{"nick":"rkirsling","message":"think so","date":"2019-08-12T20:17:50.479Z","type":"message"}
{"nick":"rkirsling","message":"I guess if you make the refactors for EvaluateStaticPropertyAccess etc. first then it should work out okay","date":"2019-08-12T20:20:28.935Z","type":"message"}
{"nick":"rkirsling","message":"(where by \"it\" I mean \"implementation of the evaluation part as a whole\")","date":"2019-08-12T20:21:32.365Z","type":"message"}
{"nick":"laughinghan","date":"2019-08-12T20:23:36.862Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2019-08-12T20:51:47.921Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T20:55:44.758Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-12T20:59:59.759Z","type":"quit"}
{"nick":"devsnek","message":"rkirsling: what's the grammar for ?.x.y.z","date":"2019-08-12T21:14:22.257Z","type":"message"}
{"nick":"devsnek","message":"oh nvm i'm dumb","date":"2019-08-12T21:14:49.601Z","type":"message"}
{"nick":"devsnek","message":"that's two optional chains","date":"2019-08-12T21:14:55.582Z","type":"message"}
{"nick":"Fishrock123","date":"2019-08-12T21:25:02.332Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 245 seconds","date":"2019-08-12T21:29:38.386Z","type":"quit"}
{"nick":"Fishrock123","date":"2019-08-12T21:33:05.734Z","type":"join"}
{"nick":"Fishrock123","reason":"Ping timeout: 248 seconds","date":"2019-08-12T21:37:39.689Z","type":"quit"}
{"nick":"Nimelrian","reason":"Ping timeout: 252 seconds","date":"2019-08-12T21:40:54.098Z","type":"quit"}
{"nick":"rkirsling","message":"devsnek: it's one OptionalChain but nested three levels deep","date":"2019-08-12T21:54:10.461Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-08-12T21:54:14.379Z","type":"message"}
{"nick":"devsnek","message":"i just couldn't figure out what production covered the `.z`","date":"2019-08-12T21:54:34.439Z","type":"message"}
{"nick":"devsnek","message":"its passing all the tests now :)","date":"2019-08-12T21:54:47.430Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T22:08:04.541Z","type":"quit"}
{"nick":"rkirsling","message":"nice","date":"2019-08-12T22:12:30.225Z","type":"message"}
{"nick":"rkirsling","message":"> Optional chains are hard okay?","date":"2019-08-12T22:13:15.288Z","type":"message"}
{"nick":"rkirsling","message":"lol","date":"2019-08-12T22:13:16.370Z","type":"message"}
{"nick":"rkirsling","message":"I've not dug through the code in engine262 before but `this.eat` made me laugh","date":"2019-08-12T22:14:32.130Z","type":"message"}
{"nick":"rkirsling","message":"so direct compared to `consume`","date":"2019-08-12T22:14:41.487Z","type":"message"}
{"nick":"devsnek","message":"eat comes from acorn","date":"2019-08-12T22:19:26.132Z","type":"message"}
{"nick":"devsnek","message":"so esprima, babel, etc, all use it","date":"2019-08-12T22:19:37.176Z","type":"message"}
{"nick":"rkirsling","message":"that was my guess hehe","date":"2019-08-12T22:27:17.325Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T22:29:30.930Z","type":"quit"}
{"nick":"AtumT_","date":"2019-08-12T22:43:04.301Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 244 seconds","date":"2019-08-12T22:45:40.584Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T22:56:32.977Z","type":"join"}
{"nick":"AtumT","date":"2019-08-12T22:56:39.826Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 246 seconds","date":"2019-08-12T22:56:49.407Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-08-12T23:01:16.044Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-08-12T23:05:16.543Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-12T23:14:45.823Z","type":"join"}
{"nick":"weswigham","date":"2019-08-12T23:16:36.630Z","type":"join"}
{"nick":"weswigham","message":"So, question: Is `const a = {def\\u0061ult: 12}` supposed to have a syntax error or not? In chrome and safari it does, while in firefox and chakra it does not.","date":"2019-08-12T23:21:24.622Z","type":"message"}
{"nick":"weswigham","message":"Secondary question: is there a test262 test covering a keyword with an escape used as an identifier name?","date":"2019-08-12T23:21:51.852Z","type":"message"}
{"nick":"devsnek","message":"in https://tc39.es/ecma262/#sec-source-text it says \"string literals, regular expression literals, template literals and identifiers\"","date":"2019-08-12T23:24:46.256Z","type":"message"}
{"nick":"devsnek","message":"doesn't explicitly call out keywords","date":"2019-08-12T23:24:56.536Z","type":"message"}
{"nick":"devsnek","message":"and then again in https://tc39.es/ecma262/#sec-names-and-keywords","date":"2019-08-12T23:26:10.915Z","type":"message"}
{"nick":"rkirsling","message":"weswigham: I was just about to reply to your WK bug but note that all engines agree on `const a = {def\\u{61}ult: 12}` being an error","date":"2019-08-12T23:27:14.203Z","type":"message"}
{"nick":"rkirsling","message":"I can't find a test262 case for the object key context","date":"2019-08-12T23:28:08.555Z","type":"message"}
{"nick":"Bakkot","message":"those are both allowed by my parser, so I assume it's legal :P","date":"2019-08-12T23:28:09.079Z","type":"message"}
{"nick":"rkirsling","message":"just these for declarations","date":"2019-08-12T23:28:46.864Z","type":"message"}
{"nick":"rkirsling","message":"https://test262.report/browse/language/identifiers/val-default-via-escape-hex.js","date":"2019-08-12T23:28:46.916Z","type":"message"}
{"nick":"rkirsling","message":"https://test262.report/browse/language/identifiers/val-default-via-escape-hex4.js","date":"2019-08-12T23:28:46.916Z","type":"message"}
{"nick":"devsnek","message":"after jumping around the spec, i haven't found anything specifically saying this is allowed or not","date":"2019-08-12T23:28:57.121Z","type":"message"}
{"nick":"devsnek","message":"so i would assume its not allowed","date":"2019-08-12T23:29:12.037Z","type":"message"}
{"nick":"Bakkot","message":"it's allowed; the relevant production is PropertyName -> LiteralPropertyName -> IdentifierName, which allows both kinds of unicode escape sequences","date":"2019-08-12T23:29:36.879Z","type":"message"}
{"nick":"rkirsling","message":"but then the variable declaration calls out IdentifierName but not ReservedWord and object literals don't?","date":"2019-08-12T23:29:38.755Z","type":"message"}
{"nick":"weswigham","message":"rkirsling all engines don't agree, afaik - edge and firefox (chakra and spidermonkey) both don't error","date":"2019-08-12T23:29:44.544Z","type":"message"}
{"nick":"devsnek","message":"oh we're talking about object keys","date":"2019-08-12T23:30:04.359Z","type":"message"}
{"nick":"Bakkot","message":"rkirsling: \"default\" is not a legal variable name, but is a legal property name (as all engines agree)","date":"2019-08-12T23:30:22.653Z","type":"message"}
{"nick":"rkirsling","message":"weswigham: they do, I'm looking at it :p Chakra/SM behave differently with the hex4 notation","date":"2019-08-12T23:30:28.641Z","type":"message"}
{"nick":"rkirsling","message":"Bakkot: yeah I do see that","date":"2019-08-12T23:30:38.586Z","type":"message"}
{"nick":"devsnek","message":"in an object key i would expect this to work","date":"2019-08-12T23:30:43.141Z","type":"message"}
{"nick":"rkirsling","message":"it may well be that all engines are wrong if there's no test for it though","date":"2019-08-12T23:31:07.238Z","type":"message"}
{"nick":"weswigham","message":"ick, irc escaped what I input, but it was supposed to be `\\` `u` `0` `0` `6` `1` - not the extended escape pattern","date":"2019-08-12T23:31:36.395Z","type":"message"}
{"nick":"weswigham","message":"though from what I'm seeing, the extended escape style also doesn't cause an error in firefox...","date":"2019-08-12T23:31:53.391Z","type":"message"}
{"nick":"Bakkot","message":"yeah, I know there's some tests for escape-sequence-in-keywords, but it makes sense that escape-sequence-in-keyword-in-property-name can have been missed","date":"2019-08-12T23:32:04.071Z","type":"message"}
{"nick":"rkirsling","message":"https://www.irccloud.com/pastebin/EAhPZYqO/","date":"2019-08-12T23:32:05.503Z","type":"message"}
{"nick":"rkirsling","message":"argh","date":"2019-08-12T23:32:19.633Z","type":"message"}
{"nick":"rkirsling","message":"wrong ne","date":"2019-08-12T23:32:22.750Z","type":"message"}
{"nick":"rkirsling","message":"*one","date":"2019-08-12T23:32:24.263Z","type":"message"}
{"nick":"gibson042","message":"https://tc39.es/ecma262/#sec-reserved-words : \"A code point in a ReservedWord cannot be expressed by a \\ UnicodeEscapeSequence.\"","date":"2019-08-12T23:32:47.834Z","type":"message"}
{"nick":"weswigham","message":"rkirsling variable name vs object property key","date":"2019-08-12T23:32:49.613Z","type":"message"}
{"nick":"weswigham","message":"object property keys allow `default`","date":"2019-08-12T23:32:57.981Z","type":"message"}
{"nick":"weswigham","message":"that part is important","date":"2019-08-12T23:33:03.707Z","type":"message"}
{"nick":"rkirsling","message":"yeah I understand","date":"2019-08-12T23:33:22.295Z","type":"message"}
{"nick":"rkirsling","message":"apparently I was off on that though","date":"2019-08-12T23:33:38.762Z","type":"message"}
{"nick":"rkirsling","message":"checking too many things at once","date":"2019-08-12T23:33:43.588Z","type":"message"}
{"nick":"gibson042","message":"so `def\\u0061ult` doesn't match ReservedWord, and therefore does match Identifier","date":"2019-08-12T23:33:50.051Z","type":"message"}
{"nick":"weswigham","message":"Propert names use IdentifierName, though","date":"2019-08-12T23:34:12.443Z","type":"message"}
{"nick":"weswigham","message":"which have _no_ ResveredWord restriction","date":"2019-08-12T23:34:23.655Z","type":"message"}
{"nick":"rkirsling","message":"right","date":"2019-08-12T23:34:37.587Z","type":"message"}
{"nick":"devsnek","message":"does anyone know why v8 might have an explicit token for \"enum\"","date":"2019-08-12T23:34:39.106Z","type":"message"}
{"nick":"Bakkot","message":"gibson042: you perhaps meant \"therefore does match IdentifierName\"?","date":"2019-08-12T23:34:54.557Z","type":"message"}
{"nick":"rkirsling","message":"devsnek: because it's future reserved?","date":"2019-08-12T23:34:56.587Z","type":"message"}
{"nick":"gibson042","message":"Identifier is \"IdentifierNamebut not ReservedWord\"","date":"2019-08-12T23:35:01.578Z","type":"message"}
{"nick":"gibson042","message":"so yes to both","date":"2019-08-12T23:35:06.942Z","type":"message"}
{"nick":"Bakkot","message":"(as opposed to \"... does match Identifier\")","date":"2019-08-12T23:35:08.924Z","type":"message"}
{"nick":"devsnek","message":"rkirsling: it has a category for future reserved, but an explicit separate token for enum","date":"2019-08-12T23:35:13.805Z","type":"message"}
{"nick":"rkirsling","message":"wacky","date":"2019-08-12T23:35:32.986Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T23:35:36.727Z","type":"quit"}
{"nick":"Bakkot","message":"weswigham: anyway I think we agree that it is legal per the spec and all the engines you tested just have bugs","date":"2019-08-12T23:36:02.648Z","type":"message"}
{"nick":"devsnek","message":"maybe it used to do something","date":"2019-08-12T23:36:03.767Z","type":"message"}
{"nick":"Bakkot","message":"probably test262 should get some new tests","date":"2019-08-12T23:36:13.130Z","type":"message"}
{"nick":"rkirsling","message":"yeah I would start with test262","date":"2019-08-12T23:36:23.996Z","type":"message"}
{"nick":"rkirsling","message":"because XS is also following JSC/V8","date":"2019-08-12T23:36:32.985Z","type":"message"}
{"nick":"Bakkot","message":"I will open an issue for it","date":"2019-08-12T23:38:48.331Z","type":"message"}
{"nick":"Bakkot","message":"(if no one else is already doing so)","date":"2019-08-12T23:39:05.061Z","type":"message"}
{"nick":"rkirsling","message":"🙇‍♂️","date":"2019-08-12T23:40:11.984Z","type":"message"}
{"nick":"devsnek","message":"so `{ def\\u0061ult: 5 }` should be allowed?","date":"2019-08-12T23:40:43.659Z","type":"message"}
{"nick":"Bakkot","message":"yes.","date":"2019-08-12T23:40:53.043Z","type":"message"}
{"nick":"Bakkot","message":"well, in expression position.","date":"2019-08-12T23:41:00.133Z","type":"message"}
{"nick":"weswigham","message":"aye","date":"2019-08-12T23:41:30.498Z","type":"message"}
{"nick":"weswigham","message":"I can open the issue if you haven't already","date":"2019-08-12T23:42:02.091Z","type":"message"}
{"nick":"Bakkot","message":"rkirsling: `({ def\\u{61}ult: 0 })` appears to work in SM, actually","date":"2019-08-12T23:45:35.867Z","type":"message"}
{"nick":"rkirsling","message":"yeah I was evidently juggling too many cases, sorry","date":"2019-08-12T23:46:00.070Z","type":"message"}
{"nick":"rkirsling","message":"convinced myself of something that wasn't true","date":"2019-08-12T23:46:10.996Z","type":"message"}
{"nick":"Bakkot","message":"weswigham: almost don writing it","date":"2019-08-12T23:46:27.348Z","type":"message"}
{"nick":"weswigham","message":"Too late: https://github.com/tc39/test262/issues/2285","date":"2019-08-12T23:46:31.487Z","type":"message"}
{"nick":"Bakkot","message":"sigh","date":"2019-08-12T23:47:53.996Z","type":"message"}
{"nick":"Bakkot","message":"opened https://github.com/tc39/test262/issues/2286 before seeing your message","date":"2019-08-12T23:48:06.999Z","type":"message"}
{"nick":"rkirsling","message":"Bakkot: I don't see the divergence in behavior between Ch/SM that you mentioned","date":"2019-08-12T23:53:47.551Z","type":"message"}
{"nick":"Bakkot","message":"rkirsling: yeah I can't read","date":"2019-08-12T23:54:06.915Z","type":"message"}
{"nick":"rkirsling","message":"unless I haven't ran `jsvu` in a while","date":"2019-08-12T23:54:10.173Z","type":"message"}
{"nick":"rkirsling","message":"*run","date":"2019-08-12T23:54:19.788Z","type":"message"}
{"nick":"rkirsling","message":"okay cool","date":"2019-08-12T23:54:21.592Z","type":"message"}
