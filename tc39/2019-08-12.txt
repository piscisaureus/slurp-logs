{"nick":"SferaDev","reason":"Ping timeout: 276 seconds","date":"2019-08-12T00:04:07.711Z","type":"quit"}
{"nick":"hellauer","reason":"Quit: WeeChat 2.4","date":"2019-08-12T00:15:32.218Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T00:28:22.079Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-08-12T00:33:04.080Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T00:43:15.593Z","type":"join"}
{"nick":"Bakkot","date":"2019-08-12T00:44:14.560Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T01:22:53.454Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-12T01:45:33.052Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T02:08:06.896Z","type":"quit"}
{"nick":"devsnek","message":"jmdyck: do you know if this note from built-in function's Call slot is ever relevant? \"When _calleeContext_ is removed from the execution context stack it must not be destroyed if it has been suspended and retained by an accessible generator object for later resumption.\"","date":"2019-08-12T02:11:46.214Z","type":"message"}
{"nick":"Guest88309","reason":"Quit: WeeChat 2.5","date":"2019-08-12T02:30:48.829Z","type":"quit"}
{"nick":"khyperia","date":"2019-08-12T02:30:56.318Z","type":"join"}
{"nick":"laughinghan","date":"2019-08-12T03:11:57.326Z","type":"join"}
{"nick":"jmdyck","message":"hm","date":"2019-08-12T03:27:19.719Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T03:30:18.058Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-12T03:34:16.181Z","type":"join"}
{"nick":"jmdyck","message":"devsnek: Sorry, don't know.","date":"2019-08-12T03:36:50.950Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: no worries, i couldn't find anything either","date":"2019-08-12T03:37:05.528Z","type":"message"}
{"nick":"devsnek","message":"but it makes me feel better about my pr :)","date":"2019-08-12T03:37:18.941Z","type":"message"}
{"nick":"jmdyck","message":"Does the condition described in the note not convince you?","date":"2019-08-12T03:37:29.332Z","type":"message"}
{"nick":"devsnek","message":"convince me of what","date":"2019-08-12T03:37:46.992Z","type":"message"}
{"nick":"jmdyck","message":"convinceyou of the relevance of the note, i suppose.","date":"2019-08-12T03:38:20.013Z","type":"message"}
{"nick":"devsnek","message":"i just meant, i couldn't find a condition in the current spec where calleeContext would be suspended and retained by a generator","date":"2019-08-12T03:39:08.007Z","type":"message"}
{"nick":"jmdyck","message":"ah, okay. slightly different question than i thought you meant.","date":"2019-08-12T03:40:20.130Z","type":"message"}
{"nick":"devsnek","message":"perhaps its used in the web spec or something","date":"2019-08-12T03:41:04.965Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T03:44:46.368Z","type":"quit"}
{"nick":"SferaDev","date":"2019-08-12T04:01:36.307Z","type":"join"}
{"nick":"jmdyck","message":"I'm wondering if \"suspend\" is ambiguous in that sentence.","date":"2019-08-12T04:02:13.716Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-12T04:07:07.549Z","type":"quit"}
{"nick":"jmdyck","message":"devsnek: So is this what you're saying?: It's common that a generator object would suspend and retain an execution context for later resumption, but what you're wondering is how such a context could be _calleeContext_ in that [[Call]] method?","date":"2019-08-12T04:16:07.706Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-08-12T04:16:26.108Z","type":"message"}
{"nick":"devsnek","message":"as far as i know that never occurs","date":"2019-08-12T04:16:30.626Z","type":"message"}
{"nick":"devsnek","message":"well with my pr it will happen, but not in the current spec","date":"2019-08-12T04:16:39.884Z","type":"message"}
{"nick":"laughinghan","date":"2019-08-12T04:17:19.751Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-08-12T04:42:16.705Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T05:02:59.213Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-08-12T05:07:32.145Z","type":"quit"}
{"nick":"titanbiscuit","reason":"Quit: ZNC 1.7.3 - https://znc.in","date":"2019-08-12T05:13:04.319Z","type":"quit"}
{"nick":"titanbiscuit","date":"2019-08-12T05:13:21.049Z","type":"join"}
{"nick":"cybai","date":"2019-08-12T05:17:31.666Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-12T06:32:45.127Z","type":"quit"}
{"nick":"kpatticha","date":"2019-08-12T06:44:04.436Z","type":"join"}
{"nick":"Nimelrian","date":"2019-08-12T06:48:43.726Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-12T07:53:06.566Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T08:28:57.664Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-08-12T08:33:43.580Z","type":"quit"}
{"nick":"Bakkot","reason":"*.net *.split","date":"2019-08-12T08:42:40.548Z","type":"quit"}
{"nick":"ephemera_","reason":"*.net *.split","date":"2019-08-12T08:42:41.199Z","type":"quit"}
{"nick":"JaseW","reason":"*.net *.split","date":"2019-08-12T08:42:41.749Z","type":"quit"}
{"nick":"tomdale","reason":"*.net *.split","date":"2019-08-12T08:42:41.800Z","type":"quit"}
{"nick":"samth","reason":"*.net *.split","date":"2019-08-12T08:42:41.801Z","type":"quit"}
{"nick":"keith_miller","reason":"*.net *.split","date":"2019-08-12T08:42:42.572Z","type":"quit"}
{"nick":"aklein","reason":"*.net *.split","date":"2019-08-12T08:42:42.995Z","type":"quit"}
{"nick":"tobie","reason":"*.net *.split","date":"2019-08-12T08:42:43.046Z","type":"quit"}
{"nick":"JaseW","date":"2019-08-12T08:42:56.713Z","type":"join"}
{"nick":"ephemera_","date":"2019-08-12T08:42:57.781Z","type":"join"}
{"nick":"Bakkot","date":"2019-08-12T08:43:54.278Z","type":"join"}
{"nick":"tomdale","date":"2019-08-12T08:47:53.374Z","type":"join"}
{"nick":"samth","date":"2019-08-12T08:47:53.466Z","type":"join"}
{"nick":"keith_miller","date":"2019-08-12T08:47:53.466Z","type":"join"}
{"nick":"aklein","date":"2019-08-12T08:47:53.466Z","type":"join"}
{"nick":"tobie","date":"2019-08-12T08:47:53.466Z","type":"join"}
{"nick":"samth","reason":"Changing host","date":"2019-08-12T08:47:57.997Z","type":"quit"}
{"nick":"samth","date":"2019-08-12T08:47:58.049Z","type":"join"}
{"nick":"tomdale","reason":"Changing host","date":"2019-08-12T08:47:58.189Z","type":"quit"}
{"nick":"tomdale","date":"2019-08-12T08:47:58.240Z","type":"join"}
{"nick":"mgol","date":"2019-08-12T09:14:37.904Z","type":"join"}
{"nick":"cybai","date":"2019-08-12T10:20:53.707Z","type":"join"}
{"nick":"jmdyck","date":"2019-08-12T11:41:04.511Z","type":"join"}
{"nick":"rkirsling","reason":"Remote host closed the connection","date":"2019-08-12T12:14:20.881Z","type":"quit"}
{"nick":"rkirsling","date":"2019-08-12T12:14:33.110Z","type":"join"}
{"nick":"Nimelrian","reason":"Ping timeout: 250 seconds","date":"2019-08-12T12:17:49.809Z","type":"quit"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-12T12:19:07.094Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T12:35:00.740Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-12T12:39:55.697Z","type":"quit"}
{"nick":"gibson042","date":"2019-08-12T12:44:18.720Z","type":"join"}
{"nick":"kpattich_","date":"2019-08-12T12:59:39.404Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 245 seconds","date":"2019-08-12T13:01:18.387Z","type":"quit"}
{"nick":"ephemera_","reason":"Ping timeout: 258 seconds","date":"2019-08-12T13:25:44.777Z","type":"quit"}
{"nick":"ephemera_","date":"2019-08-12T13:27:14.527Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 244 seconds","date":"2019-08-12T13:41:06.522Z","type":"quit"}
{"nick":"cybai","date":"2019-08-12T13:45:30.008Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 245 seconds","date":"2019-08-12T13:55:53.384Z","type":"quit"}
{"nick":"kpattich_","date":"2019-08-12T13:57:00.454Z","type":"join"}
{"nick":"kpattich__","date":"2019-08-12T13:58:30.742Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 244 seconds","date":"2019-08-12T14:01:15.518Z","type":"quit"}
{"nick":"ephemera_","date":"2019-08-12T14:02:53.392Z","type":"join"}
{"nick":"devsnek","message":"ljharb: I don't think prototype iterators are compatible with generators","date":"2019-08-12T14:39:24.009Z","type":"message"}
{"nick":"ljharb","message":"devsnek: user ones, sure, but why not builtins?","date":"2019-08-12T14:45:36.664Z","type":"message"}
{"nick":"underikar","date":"2019-08-12T14:46:09.767Z","type":"join"}
{"nick":"devsnek","message":"I guess you could change regexpstringiteratorprototype.next to call GeneratorResume or whatever","date":"2019-08-12T14:46:35.262Z","type":"message"}
{"nick":"devsnek","message":"but that seems like complexity","date":"2019-08-12T14:46:46.921Z","type":"message"}
{"nick":"devsnek","message":"i'm trying to get rid of complexity","date":"2019-08-12T14:46:59.523Z","type":"message"}
{"nick":"ljharb","message":"wait, regular generators tho already make an iterator whose next resumes the generator","date":"2019-08-12T14:47:22.233Z","type":"message"}
{"nick":"ljharb","message":"literally the only difference here is what kind of object IterationResult or whatever creates","date":"2019-08-12T14:47:41.585Z","type":"message"}
{"nick":"devsnek","message":"yeah but regexpstringiteratorprototype has its own next method","date":"2019-08-12T14:47:43.843Z","type":"message"}
{"nick":"ljharb","message":"i guess I’m not clear on why having it call GenratorResume with the receiver would be more complex than the current state","date":"2019-08-12T14:49:05.978Z","type":"message"}
{"nick":"devsnek","message":"I dunno","date":"2019-08-12T14:52:02.095Z","type":"message"}
{"nick":"devsnek","message":"I haven't explored it that much","date":"2019-08-12T14:52:08.229Z","type":"message"}
{"nick":"devsnek","message":"I'll take a look in engine262 and see if it still passes test262","date":"2019-08-12T14:52:47.196Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-12T15:04:36.304Z","type":"quit"}
{"nick":"kpattich__","reason":"Remote host closed the connection","date":"2019-08-12T15:08:21.308Z","type":"quit"}
{"nick":"devsnek","message":"ljharb: the prototype needs to implement both RegExpStringIteratorPrototype and GeneratorPrototype","date":"2019-08-12T15:39:12.100Z","type":"message"}
{"nick":"devsnek","message":"slots of both, etc","date":"2019-08-12T15:39:14.295Z","type":"message"}
{"nick":"cybai","date":"2019-08-12T15:40:07.827Z","type":"join"}
{"nick":"ljharb","message":"sure, resiP could inherit from GP, which inherits from IP?","date":"2019-08-12T15:40:08.248Z","type":"message"}
{"nick":"devsnek","message":"no i mean you need something that has both [[GeneratorState]] and [[IteratingRegExp]]","date":"2019-08-12T15:41:19.800Z","type":"message"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-12T15:44:57.754Z","type":"quit"}
{"nick":"devsnek","message":"maybe you could put a [[RealGenerator]] slot on RegExpStringIteratorPrototype instances","date":"2019-08-12T15:45:29.472Z","type":"message"}
{"nick":"devsnek","message":"and then next does GeneratorResume(this.[[RealGenerator]])","date":"2019-08-12T15:45:40.867Z","type":"message"}
{"nick":"devsnek","message":"this seems really complex though","date":"2019-08-12T15:46:14.772Z","type":"message"}
{"nick":"ljharb","message":"hmm","date":"2019-08-12T15:47:52.965Z","type":"message"}
{"nick":"ljharb","message":"it just seems like the value of this change is to take all the places that make an iterator, and express them more clearly/closer to js","date":"2019-08-12T15:48:12.892Z","type":"message"}
{"nick":"ljharb","message":"and if we can only do that for new cases, it doesn’t seem very compelling","date":"2019-08-12T15:48:27.457Z","type":"message"}
{"nick":"devsnek","message":"i think its still extremely compelling for new cases","date":"2019-08-12T15:48:41.852Z","type":"message"}
{"nick":"devsnek","message":"it turns thousands of new steps into tens of steps","date":"2019-08-12T15:48:52.412Z","type":"message"}
{"nick":"devsnek","message":"and it plays nicely with implementations too","date":"2019-08-12T15:50:01.636Z","type":"message"}
{"nick":"devsnek","message":"here's what i came up with for matchAll, and it works, but its kinda meh https://gc.gy/33330024.png https://gc.gy/33330074.png https://gc.gy/33330109.png","date":"2019-08-12T15:51:51.931Z","type":"message"}
{"nick":"AtumT","date":"2019-08-12T15:52:29.545Z","type":"join"}
{"nick":"Domenic","message":"devsnek: so is the idea that all the iterator-helper functions would use %GeneratorPrototype%?","date":"2019-08-12T15:57:09.787Z","type":"message"}
{"nick":"Domenic","message":"Instead of a new prototype for each kind?","date":"2019-08-12T15:57:16.838Z","type":"message"}
{"nick":"devsnek","message":"Domenic: yes","date":"2019-08-12T15:57:19.525Z","type":"message"}
{"nick":"Domenic","message":"OK","date":"2019-08-12T15:57:24.053Z","type":"message"}
{"nick":"Domenic","message":"I've asked implementers which they would prefer and they never get back to me","date":"2019-08-12T15:57:37.049Z","type":"message"}
{"nick":"Domenic","message":"So I'm OK either way","date":"2019-08-12T15:57:39.130Z","type":"message"}
{"nick":"devsnek","message":"i see it as using less memory, and suspending is a lot easier to lower since you have fewer functions to compare with the state of the prototype","date":"2019-08-12T15:58:08.109Z","type":"message"}
{"nick":"devsnek","message":"ljharb: i could add a third element, \"steps for creating the initial return value of a built-in (async) generator\"","date":"2019-08-12T15:59:26.848Z","type":"message"}
{"nick":"devsnek","message":"but that seems messy","date":"2019-08-12T15:59:38.771Z","type":"message"}
