{"nick":"cloudshu","date":"2018-05-07T00:21:56.685Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-05-07T00:28:17.940Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-05-07T01:05:50.044Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-05-07T01:17:13.509Z","type":"join"}
{"nick":"ljharb","message":"not just on stack traces (pygy left tho)","date":"2018-05-07T02:13:35.088Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-07T03:14:39.075Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-05-07T03:44:32.400Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-05-07T06:35:52.513Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-07T06:44:21.398Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-05-07T07:00:01.810Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-07T07:46:42.050Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2018-05-07T07:50:58.914Z","type":"quit"}
{"nick":"MylesBorins","reason":"Quit: farewell for now","date":"2018-05-07T10:25:08.223Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-07T10:25:38.644Z","type":"join"}
{"nick":"howdoi","date":"2018-05-07T10:36:48.060Z","type":"join"}
{"nick":"keith_mi_","date":"2018-05-07T10:38:19.866Z","type":"join"}
{"nick":"jmdyck","date":"2018-05-07T11:38:58.533Z","type":"join"}
{"nick":"shachaf","reason":"Ping timeout: 255 seconds","date":"2018-05-07T12:10:42.269Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-05-07T12:12:24.691Z","type":"quit"}
{"nick":"keith_m__","date":"2018-05-07T13:02:12.625Z","type":"join"}
{"nick":"annevk_","date":"2018-05-07T13:07:08.259Z","type":"join"}
{"nick":"keith_mi_","reason":"*.net *.split","date":"2018-05-07T13:11:08.384Z","type":"quit"}
{"nick":"annevk","reason":"*.net *.split","date":"2018-05-07T13:11:08.948Z","type":"quit"}
{"nick":"annevk_","new_nick":"annevk","date":"2018-05-07T13:11:10.317Z","type":"nick"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-05-07T13:25:03.089Z","type":"quit"}
{"nick":"JaseW","message":"Would love to hear what people think about this https://github.com/jasonwilliams/proposal-promise-allSettled","date":"2018-05-07T13:53:38.524Z","type":"message"}
{"nick":"devsnek","message":"apis that eat rejections make me nervous","date":"2018-05-07T13:55:49.861Z","type":"message"}
{"nick":"devsnek","message":"but i like the general idea","date":"2018-05-07T13:56:04.482Z","type":"message"}
{"nick":"devsnek","message":"i also like Maybe, i actually have my own js implementation","date":"2018-05-07T13:57:36.399Z","type":"message"}
{"nick":"devsnek","message":"i don't think it represents the true \"js way\" though","date":"2018-05-07T13:57:58.494Z","type":"message"}
{"nick":"AtumT","date":"2018-05-07T14:17:26.167Z","type":"join"}
{"nick":"keith_m__","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-07T14:40:26.078Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-05-07T15:06:41.523Z","type":"join"}
{"nick":"jwalden","date":"2018-05-07T15:08:10.346Z","type":"join"}
{"nick":"howdoi","date":"2018-05-07T15:57:49.555Z","type":"join"}
{"nick":"jdalton_","date":"2018-05-07T16:32:49.960Z","type":"join"}
{"nick":"cloudshu","date":"2018-05-07T17:31:31.915Z","type":"join"}
{"nick":"shachaf","date":"2018-05-07T17:58:16.768Z","type":"join"}
{"nick":"srl295","date":"2018-05-07T18:25:06.157Z","type":"join"}
{"nick":"ljharb","message":"devsnek: what would?","date":"2018-05-07T18:36:16.098Z","type":"message"}
{"nick":"ljharb","message":"imo a Maybe is like a Promise, just async","date":"2018-05-07T18:36:27.700Z","type":"message"}
{"nick":"ljharb","message":"(also it's probably pretty similar to WeakRefs in terms of the API)","date":"2018-05-07T18:36:40.875Z","type":"message"}
{"nick":"devsnek","message":"ljharb: what would what?","date":"2018-05-07T18:54:06.620Z","type":"message"}
{"nick":"devsnek","message":"you mean what is the true js way?","date":"2018-05-07T18:54:36.778Z","type":"message"}
{"nick":"devsnek","message":"a variable can already represent an empty value by being undefined","date":"2018-05-07T18:54:58.196Z","type":"message"}
{"nick":"devsnek","message":"the only reason a promise exists is to provide a form of notification and flow","date":"2018-05-07T19:02:49.589Z","type":"message"}
{"nick":"TabAtkins","message":"JaseW: +1 to this, I keep thinking about using Promise.all() for some relevant case and forgetting that it bails on the first reject.","date":"2018-05-07T19:05:13.550Z","type":"message"}
{"nick":"TabAtkins","message":"ljharb: You mean \"just sync\", right?","date":"2018-05-07T19:05:43.619Z","type":"message"}
{"nick":"devsnek","message":"i assumed he did","date":"2018-05-07T19:05:53.406Z","type":"message"}
{"nick":"TabAtkins","message":"devsnek: Unless `undefined` is a valid value for your domain, such as in Map.get().","date":"2018-05-07T19:06:08.491Z","type":"message"}
{"nick":"TabAtkins","message":"The value of Maybe is giving a single always-valid way to represent a missing value, regardless of the value-space you might be fetching from.","date":"2018-05-07T19:06:33.355Z","type":"message"}
{"nick":"devsnek","message":"there's obviously some wiggle between the meanings of null and undefined in a project","date":"2018-05-07T19:06:41.413Z","type":"message"}
{"nick":"devsnek","message":"you might like this https://github.com/devsnek/ivan/blob/master/test/Maybe.js#L26","date":"2018-05-07T19:08:30.808Z","type":"message"}
{"nick":"TabAtkins","message":"Why that line in particular?","date":"2018-05-07T19:10:02.867Z","type":"message"}
{"nick":"devsnek","message":"your point about an always-valid way to represent a missing value","date":"2018-05-07T19:10:51.912Z","type":"message"}
{"nick":"TabAtkins","message":"Right, but why *Line 26* in particular? Or was that just an accidental line highlight?","date":"2018-05-07T19:11:30.909Z","type":"message"}
{"nick":"devsnek","message":"nah i just thought it was a funny way of implementing that behaviour","date":"2018-05-07T19:11:54.076Z","type":"message"}
{"nick":"TabAtkins","message":"Oh, of detecting the difference between \"called with 1 `undefined` argument\" and \"called with 0 args\", yeah.","date":"2018-05-07T19:12:35.613Z","type":"message"}
{"nick":"devsnek","message":"thats one thing that makes me sad about default args","date":"2018-05-07T19:13:21.026Z","type":"message"}
{"nick":"devsnek","message":"but i guess it makes sense if you have multiple arguments","date":"2018-05-07T19:13:28.346Z","type":"message"}
{"nick":"TabAtkins","message":"Nah mang, we absolutely made the right choice for default args.","date":"2018-05-07T19:13:34.689Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-05-07T19:13:39.142Z","type":"message"}
{"nick":"TabAtkins","message":"Otherwise pass-thru is *very* annoying.","date":"2018-05-07T19:13:51.073Z","type":"message"}
{"nick":"devsnek","message":"whatwg usually does what i would expect with return values","date":"2018-05-07T19:18:28.431Z","type":"message"}
{"nick":"devsnek","message":"like headers.get('non existent name') returns null","date":"2018-05-07T19:18:44.800Z","type":"message"}
{"nick":"JaseW","message":"@TabAtkins thanks","date":"2018-05-07T19:24:07.069Z","type":"message"}
{"nick":"devsnek","message":"do we call a resolved promise resolved or fulfilled, officially","date":"2018-05-07T19:25:19.831Z","type":"message"}
{"nick":"TabAtkins","message":"Fulfilled.","date":"2018-05-07T19:26:43.987Z","type":"message"}
{"nick":"TabAtkins","message":"\"Resolved\" can mean it's still chained to another (unresolved) promise.","date":"2018-05-07T19:26:59.195Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2018-05-07T19:27:12.922Z","type":"message"}
{"nick":"TabAtkins","message":"The \"resolved\" state just means that it's closed to updates; calling either of the promise-constructor callback args won't do anything any longer.","date":"2018-05-07T19:27:38.331Z","type":"message"}
{"nick":"devsnek","message":"but for the promise at the end of the chain then","date":"2018-05-07T19:27:59.496Z","type":"message"}
{"nick":"devsnek","message":"resolved and fulfilled should be equivalent?","date":"2018-05-07T19:28:13.997Z","type":"message"}
{"nick":"TabAtkins","message":"No, it might be rejected.","date":"2018-05-07T19:28:39.919Z","type":"message"}
{"nick":"devsnek","message":"how can it be resolved and rejected","date":"2018-05-07T19:29:05.052Z","type":"message"}
{"nick":"TabAtkins","message":"A \"resolved\" promise can be \"fulfilled\", \"rejected\", or chained to another promise.","date":"2018-05-07T19:29:28.200Z","type":"message"}
{"nick":"devsnek","message":"but if its already closed how could it reject","date":"2018-05-07T19:29:53.069Z","type":"message"}
{"nick":"TabAtkins","message":"The chained promise rejects.","date":"2018-05-07T19:30:01.904Z","type":"message"}
{"nick":"TabAtkins","message":"Promise.resolve(Promise.reject(\"lol\")) returns a resolved, rejected promise.","date":"2018-05-07T19:30:16.778Z","type":"message"}
{"nick":"devsnek","message":"lol indeed","date":"2018-05-07T19:30:30.389Z","type":"message"}
{"nick":"devsnek","message":"i guess i need to update the terminology i use","date":"2018-05-07T19:30:44.972Z","type":"message"}
{"nick":"TabAtkins","message":"Yeah. ^_^  Promises are either \"pending\", \"fulfilled\", or \"rejected\". Separately, they can be \"unresolved\" or \"resolved\". An unresolved promise is always pending, but a resolved one can be any of the three states, depending on what it was resolved to.  The two sets of states unrelated.","date":"2018-05-07T19:32:59.834Z","type":"message"}
{"nick":"devsnek","message":"brb going back to callbacks :P","date":"2018-05-07T19:33:50.240Z","type":"message"}
{"nick":"TabAtkins","message":"Oh, jumping back a sec, DOM APIs traditionally return `null` from anything, because `undefined` is hard to specify as a return value in WebIDL for legacy reasons (it doesn't exist in Java).","date":"2018-05-07T19:34:42.131Z","type":"message"}
{"nick":"zkat","message":"do we have a standard template for slides for committee?","date":"2018-05-07T19:38:15.150Z","type":"message"}
{"nick":"Bakkot","message":"zkat: nope, everyone rolls their own","date":"2018-05-07T19:40:32.051Z","type":"message"}
{"nick":"TabAtkins","message":"Back to Promises, the states can be somewhat confusing, since we only ever offer the resolved/reject pair of functions (either as Promise statics, or passed to the constructor callback). This is because of the auto-flattening that Promises are specced to do; you're *not allowed* to fulfill a Promise with a Promise (but you are allowed to *reject* with one). Thus, the only promise we can make when giving a Promise a value is","date":"2018-05-07T19:40:47.925Z","type":"message"}
{"nick":"TabAtkins","message":"that it's \"resolved\"; if you happen to give it a promise value it can be any of the three states.","date":"2018-05-07T19:40:48.102Z","type":"message"}
{"nick":"TabAtkins","message":"(I think Domenic called the pending/fulfilled/rejected trio \"states\" and unresolved/resolved \"fates\"?)","date":"2018-05-07T19:41:07.041Z","type":"message"}
{"nick":"Domenic","message":"Indeed","date":"2018-05-07T19:41:13.933Z","type":"message"}
{"nick":"Domenic","message":"https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md","date":"2018-05-07T19:41:20.905Z","type":"message"}
{"nick":"devsnek","message":"it terrifies me that \"something something java\" is a reason for behaviour in js","date":"2018-05-07T19:43:51.058Z","type":"message"}
{"nick":"devsnek","message":"good gist though","date":"2018-05-07T19:44:07.103Z","type":"message"}
{"nick":"zkat","message":"probably no need to terrify you, per se. Java made its own design choices, is massively widely used, and does, in fact, have some good designers behind it, even if the language style isn't the type I go for :)","date":"2018-05-07T19:44:43.569Z","type":"message"}
{"nick":"devsnek","message":"to clarify: it imposing a limitation","date":"2018-05-07T19:45:12.037Z","type":"message"}
{"nick":"TabAtkins","message":"Yeah, pretending that charting a course thru the intersection of syntaxes and capabilities is the terrifying bit, and is the reason so many of our older DOM APIs are terrible.","date":"2018-05-07T19:47:55.283Z","type":"message"}
{"nick":"TabAtkins","message":"*pretending it's a good idea to chart","date":"2018-05-07T19:48:14.347Z","type":"message"}
{"nick":"devsnek","message":"we need to have a y2k for js","date":"2018-05-07T19:55:04.188Z","type":"message"}
{"nick":"devsnek","message":"just get the world to update all the js code","date":"2018-05-07T19:57:03.845Z","type":"message"}
{"nick":"ljharb","message":"TabAtkins: oh yes, sorry, just sync","date":"2018-05-07T20:06:34.250Z","type":"message"}
{"nick":"ljharb","message":"the whole issue is that you can certainly pick any sentinel value for the \"no\" path, but there's no One True Sentinel Value you can pick because needs vary (even if it was a symbol). so you need some kind of wrapper. then the question is, do you have a struct (object), tuple (array), or a type (Maybe/Option/etc)?","date":"2018-05-07T20:07:40.223Z","type":"message"}
{"nick":"ljharb","message":"a tuple is likely confusing because there's no naming, so struct > tuple imo, but a type seems much cleaner than arbitrary objects.","date":"2018-05-07T20:08:03.443Z","type":"message"}
{"nick":"ljharb","message":"altho maybe with `protocol`, a struct that implements a well-known protocol would suffice","date":"2018-05-07T20:08:20.156Z","type":"message"}
{"nick":"TabAtkins","message":"Yup. Tho note that Result is the sync version of Promise, not Maybe. 😀","date":"2018-05-07T20:08:35.789Z","type":"message"}
{"nick":"ljharb","message":"ok sure, Result","date":"2018-05-07T20:09:20.487Z","type":"message"}
{"nick":"ljharb","message":":-p","date":"2018-05-07T20:09:22.134Z","type":"message"}
{"nick":"ljharb","message":"i just mean more, a synchronous type that holds *any* value in its yes or its no path","date":"2018-05-07T20:09:42.171Z","type":"message"}
{"nick":"devsnek","message":"what is this capital-r Result you mentioned","date":"2018-05-07T20:27:51.238Z","type":"message"}
{"nick":"Bakkot","message":"a Result is either a Success with an associated value or an Error with an associated error object","date":"2018-05-07T20:30:43.100Z","type":"message"}
{"nick":"devsnek","message":"where does it come from though, it's not exactly googlable","date":"2018-05-07T20:34:46.523Z","type":"message"}
{"nick":"Bakkot","message":"uhhh no idea where it was popularized","date":"2018-05-07T20:39:30.238Z","type":"message"}
{"nick":"Bakkot","message":"Rust has it in the stdlib","date":"2018-05-07T20:39:35.529Z","type":"message"}
{"nick":"rkirsling","message":"think that's also gets called an Either","date":"2018-05-07T20:40:14.638Z","type":"message"}
{"nick":"rkirsling","message":"*that","date":"2018-05-07T20:40:18.572Z","type":"message"}
{"nick":"Bakkot","message":"yeah, it's just an alias for either which specifies which side is what","date":"2018-05-07T20:40:40.080Z","type":"message"}
{"nick":"jschoi_","date":"2018-05-07T20:45:03.688Z","type":"join"}
{"nick":"jdalton__","date":"2018-05-07T20:45:17.883Z","type":"join"}
{"nick":"gskachkov_","date":"2018-05-07T20:45:25.746Z","type":"join"}
{"nick":"zkat_","date":"2018-05-07T20:45:57.884Z","type":"join"}
{"nick":"jdalton_","reason":"*.net *.split","date":"2018-05-07T20:53:21.860Z","type":"quit"}
{"nick":"jschoi","reason":"*.net *.split","date":"2018-05-07T20:53:25.070Z","type":"quit"}
{"nick":"zkat","reason":"*.net *.split","date":"2018-05-07T20:53:25.266Z","type":"quit"}
{"nick":"gskachkov","reason":"*.net *.split","date":"2018-05-07T20:53:25.558Z","type":"quit"}
{"nick":"jdalton__","new_nick":"jdalton_","date":"2018-05-07T20:53:26.166Z","type":"nick"}
{"nick":"jschoi_","new_nick":"jschoi","date":"2018-05-07T20:53:26.871Z","type":"nick"}
{"nick":"gskachkov_","new_nick":"gskachkov","date":"2018-05-07T20:53:29.330Z","type":"nick"}
{"nick":"zkat_","new_nick":"zkat","date":"2018-05-07T20:53:48.795Z","type":"nick"}
{"nick":"vikash-afk","reason":"Ping timeout: 260 seconds","date":"2018-05-07T20:55:54.695Z","type":"quit"}
{"nick":"vikash-afk","date":"2018-05-07T21:00:47.331Z","type":"join"}
