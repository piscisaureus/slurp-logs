{"nick":"keith_m__","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T00:06:34.509Z","type":"quit"}
{"nick":"m_gol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T00:07:10.762Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-08T00:11:07.315Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T00:24:06.522Z","type":"quit"}
{"nick":"zenparsing","reason":"Quit: Connection closed for inactivity","date":"2019-08-08T00:31:28.939Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-08T00:43:49.903Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-08T00:55:39.133Z","type":"quit"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-08-08T01:13:08.030Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-08T01:14:27.664Z","type":"join"}
{"nick":"cybai","date":"2019-08-08T01:41:19.975Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T01:48:54.389Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T02:47:29.636Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T03:01:51.966Z","type":"quit"}
{"nick":"jmdyck","message":"ljharb?","date":"2019-08-08T03:11:21.364Z","type":"message"}
{"nick":"ljharb","message":"hi","date":"2019-08-08T03:11:59.766Z","type":"message"}
{"nick":"jmdyck","message":"In 1376 you changed lots of old-style intrinsics to new-style, but didn't change all.","date":"2019-08-08T03:12:58.962Z","type":"message"}
{"nick":"jmdyck","message":"I was wondering why not all, what the criterion was.","date":"2019-08-08T03:13:38.599Z","type":"message"}
{"nick":"ljharb","message":"jmdyck: i changed all the ones that were accessible off of other ones - which did i miss?","date":"2019-08-08T03:14:29.710Z","type":"message"}
{"nick":"ljharb","message":"jmdyck: like, `%ArrayPrototype%` is `%Array.prototype` because `%Array%` exists, but i didn't change things like IteratorPrototype etc","date":"2019-08-08T03:15:05.520Z","type":"message"}
{"nick":"ljharb","message":"if there's more that can be changed to use the new style, that'd be great","date":"2019-08-08T03:15:14.705Z","type":"message"}
{"nick":"jmdyck","message":"I found about 67","date":"2019-08-08T03:15:34.040Z","type":"message"}
{"nick":"jmdyck","message":"E.g., a bunch of %GeneratorPrototype% that could be %Generator.prototype%","date":"2019-08-08T03:16:48.431Z","type":"message"}
{"nick":"ljharb","message":"basically i was only thinking about the user-observable ones","date":"2019-08-08T03:17:18.964Z","type":"message"}
{"nick":"ljharb","message":"but yeah you're right, those should be changed too","date":"2019-08-08T03:17:29.791Z","type":"message"}
{"nick":"ljharb","message":"if you make a PR, great, otherwise i'll do it tomorrow :-)","date":"2019-08-08T03:17:35.488Z","type":"message"}
{"nick":"jmdyck","message":"yeah, I've got the search-and-replace commands set up.","date":"2019-08-08T03:18:03.913Z","type":"message"}
{"nick":"ljharb","message":"sweet, appreciate it","date":"2019-08-08T03:18:13.020Z","type":"message"}
{"nick":"ljharb","message":"just need to be sure to keep the old style ones for layered specs; i'll remove all of those once i've updated html and intl to use the new style.","date":"2019-08-08T03:18:37.698Z","type":"message"}
{"nick":"jmdyck","message":"There are some where the new-style is a bit round-about, e.g. %AsyncGenerator% -> %AsyncGeneratorFunction.prototype%, you still want those to change?","date":"2019-08-08T03:19:08.983Z","type":"message"}
{"nick":"rkirsling","message":"hey while you two are here -- is https://github.com/tc39/ecma262/pull/1658 actually meant to be normative? I thought it was just making explicit what was already assumed","date":"2019-08-08T03:19:11.133Z","type":"message"}
{"nick":"rkirsling","message":"(oops, come back to me if I'm interrupting)","date":"2019-08-08T03:19:38.950Z","type":"message"}
{"nick":"ljharb","message":"jmdyck: its about making them more readable, so im fine with your judgement call there","date":"2019-08-08T03:20:09.382Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: i’m not really sure","date":"2019-08-08T03:20:30.156Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: if it changes observable requirements, even if it’s a spec bug that nobody we know about has implemented spiritually wrong, it’s still normative","date":"2019-08-08T03:21:00.037Z","type":"message"}
{"nick":"jmdyck","message":"re old style for layered specs: sure, they're all in table 7, I'm not touching that.","date":"2019-08-08T03:21:13.468Z","type":"message"}
{"nick":"rkirsling","message":"right that's fair","date":"2019-08-08T03:21:13.852Z","type":"message"}
{"nick":"jmdyck","message":"ljharb: turns out %AsyncGenerator% was the only such example. I'll leave it as is.","date":"2019-08-08T03:25:31.783Z","type":"message"}
{"nick":"ljharb","message":"sgtm","date":"2019-08-08T03:29:43.865Z","type":"message"}
{"nick":"laughinghan","date":"2019-08-08T03:30:09.971Z","type":"join"}
{"nick":"jmdyck","message":"ljharb: I also found some things that shouldn't have been changed, so have commits to change them back.","date":"2019-08-08T03:34:30.548Z","type":"message"}
{"nick":"ljharb","message":"O.o like what?","date":"2019-08-08T03:34:42.590Z","type":"message"}
{"nick":"jmdyck","message":"%AsyncIteratorPrototype% -> %AsyncIterator.prototype%","date":"2019-08-08T03:35:40.450Z","type":"message"}
{"nick":"jmdyck","message":"latter assumes %AsyncIterator%, which doesn't exist","date":"2019-08-08T03:36:02.940Z","type":"message"}
{"nick":"ljharb","message":"oops, thanks then","date":"2019-08-08T03:36:08.687Z","type":"message"}
{"nick":"jmdyck","message":"(Maybe it should exist, I don't know.)","date":"2019-08-08T03:36:52.417Z","type":"message"}
{"nick":"ljharb","message":"the iterator helper proposal can address that :-)","date":"2019-08-08T03:37:14.060Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T03:39:38.323Z","type":"quit"}
{"nick":"devsnek","message":"^ iterator methods poposal says it exists","date":"2019-08-08T03:41:26.969Z","type":"message"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2019-08-08T03:46:07.584Z","type":"quit"}
{"nick":"jmdyck","message":"Dang.","date":"2019-08-08T03:54:20.206Z","type":"message"}
{"nick":"jmdyck","message":"E.g., if I change \"This function is the <dfn>%Promise_all%</dfn> intrinsic object.\" to new-style, then the %Promise_all% in Table 7 won't get auto-linked.","date":"2019-08-08T03:56:29.403Z","type":"message"}
{"nick":"howdoi","date":"2019-08-08T04:04:28.079Z","type":"join"}
{"nick":"ljharb","message":"right, that’s why i left those","date":"2019-08-08T04:21:54.137Z","type":"message"}
{"nick":"jmdyck","message":"Although it's weird, some get linked correctly anyway.","date":"2019-08-08T04:23:50.244Z","type":"message"}
{"nick":"jmdyck","message":"E.g. FunctionPrototype and ObjectPrototype in table 7 link to the right place, even though the <dfn> has the new-style reference.","date":"2019-08-08T04:24:38.172Z","type":"message"}
{"nick":"jmdyck","message":"So if I keep the <dfn>s to old-style, then the old-style refs (in table 7) get auto-linked, but new-style references (anywhere) don't.","date":"2019-08-08T04:31:00.277Z","type":"message"}
{"nick":"jmdyck","message":"Given that trade-off, I think I'd vote the other way.","date":"2019-08-08T04:33:56.362Z","type":"message"}
{"nick":"jmdyck","message":"i.e., let the old-style refs in Table 7 go unlinked. (The new-style ref in column 3 will get linked, so there's still a link on the row.)","date":"2019-08-08T04:35:58.637Z","type":"message"}
{"nick":"jmdyck","message":"Note that this is only talking about cases where old-style and new-style differ, not the 'base' ones like %Array%' and '%String%'.","date":"2019-08-08T04:37:15.302Z","type":"message"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-08-08T05:09:53.589Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-08T05:51:01.364Z","type":"join"}
{"nick":"rkirsling","message":"devsnek: does Chrome Canary give you a way to pass your V8 feature flag, btw?","date":"2019-08-08T06:05:31.529Z","type":"message"}
{"nick":"hellauer","reason":"Ping timeout: 252 seconds","date":"2019-08-08T06:11:04.050Z","type":"quit"}
{"nick":"hellauer","date":"2019-08-08T06:13:41.026Z","type":"join"}
{"nick":"drousso","date":"2019-08-08T07:09:30.657Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-08-08T07:12:29.670Z","type":"quit"}
{"nick":"mgol","date":"2019-08-08T07:14:32.912Z","type":"join"}
{"nick":"kpatticha","date":"2019-08-08T07:39:29.778Z","type":"join"}
{"nick":"cybai_","date":"2019-08-08T08:00:38.573Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T08:03:14.403Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 264 seconds","date":"2019-08-08T08:04:16.042Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-08T08:07:23.407Z","type":"join"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-08-08T08:14:06.195Z","type":"quit"}
{"nick":"drousso","date":"2019-08-08T08:19:16.632Z","type":"join"}
{"nick":"kpattich_","date":"2019-08-08T08:30:26.304Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 258 seconds","date":"2019-08-08T08:32:54.784Z","type":"quit"}
{"nick":"gsathya","message":"rkirsling, yeah, --js-flags=\"\"","date":"2019-08-08T08:37:43.904Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T08:41:31.818Z","type":"quit"}
{"nick":"drousso","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-08-08T08:41:49.581Z","type":"quit"}
{"nick":"cybai_","reason":"Remote host closed the connection","date":"2019-08-08T08:56:22.143Z","type":"quit"}
{"nick":"cybai","date":"2019-08-08T08:57:02.756Z","type":"join"}
{"nick":"cybai_","date":"2019-08-08T09:01:29.790Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-08-08T09:03:22.488Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-08T09:04:15.679Z","type":"quit"}
{"nick":"kpattich__","date":"2019-08-08T09:04:59.758Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 245 seconds","date":"2019-08-08T09:07:08.483Z","type":"quit"}
{"nick":"howdoi","date":"2019-08-08T09:13:27.038Z","type":"join"}
{"nick":"underikar","reason":"Quit: Connection closed for inactivity","date":"2019-08-08T09:18:29.953Z","type":"quit"}
{"nick":"cybai_","reason":"Remote host closed the connection","date":"2019-08-08T10:09:38.469Z","type":"quit"}
{"nick":"cybai","date":"2019-08-08T10:39:57.775Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 258 seconds","date":"2019-08-08T10:44:23.776Z","type":"quit"}
{"nick":"jmdyck","date":"2019-08-08T11:26:59.618Z","type":"join"}
{"nick":"cybai","date":"2019-08-08T11:31:21.710Z","type":"join"}
{"nick":"cybai","reason":"Read error: Connection reset by peer","date":"2019-08-08T11:34:08.468Z","type":"quit"}
{"nick":"cybai_","date":"2019-08-08T11:34:15.728Z","type":"join"}
{"nick":"AtumT","date":"2019-08-08T13:16:58.762Z","type":"join"}
{"nick":"gibson042","date":"2019-08-08T13:31:25.292Z","type":"join"}
{"nick":"jorydotcom","date":"2019-08-08T13:59:09.775Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-08-08T14:15:53.949Z","type":"quit"}
{"nick":"cybai_","reason":"Remote host closed the connection","date":"2019-08-08T15:16:56.527Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-08T15:24:48.496Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-08-08T15:24:49.482Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-08T15:25:14.605Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-08-08T15:26:35.501Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-08T15:27:12.472Z","type":"join"}
{"nick":"kpattich__","reason":"Ping timeout: 268 seconds","date":"2019-08-08T15:44:17.851Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T15:45:10.347Z","type":"quit"}
{"nick":"cybai","date":"2019-08-08T15:49:34.767Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-08-08T15:54:46.659Z","type":"quit"}
{"nick":"Domenic","message":"Does the language have any built-in setters","date":"2019-08-08T15:57:43.386Z","type":"message"}
{"nick":"devsnek","message":"Domenic: __proto__","date":"2019-08-08T15:58:48.926Z","type":"message"}
{"nick":"Domenic","message":"lol --_--","date":"2019-08-08T15:58:57.828Z","type":"message"}
{"nick":"devsnek","message":"Domenic: also function.prototype.caller and function.prototype.arguments","date":"2019-08-08T15:59:26.105Z","type":"message"}
{"nick":"devsnek","message":"oh and arguments.callee","date":"2019-08-08T15:59:41.522Z","type":"message"}
{"nick":"devsnek","message":"oh and all the properties of a mapped arguments object","date":"2019-08-08T15:59:54.373Z","type":"message"}
{"nick":"devsnek","message":"i think that's everything","date":"2019-08-08T16:00:06.466Z","type":"message"}
{"nick":"devsnek","message":"so its basically all legacy stuff","date":"2019-08-08T16:00:12.155Z","type":"message"}
{"nick":"Domenic","message":"Yeah","date":"2019-08-08T16:04:07.129Z","type":"message"}
{"nick":"gibson042","date":"2019-08-08T16:06:17.842Z","type":"join"}
{"nick":"rkirsling","message":"gsathya: cool! seems like Safari TP might not have an equivalent thing 😥","date":"2019-08-08T16:24:12.382Z","type":"message"}
{"nick":"devsnek","message":"does nullish coalescing have the restriction requiring parens","date":"2019-08-08T16:29:51.691Z","type":"message"}
{"nick":"bradleymeck","message":"Don't forget RegExp friends $0-$9","date":"2019-08-08T16:39:46.101Z","type":"message"}
{"nick":"bradleymeck","message":"RegExp in general...","date":"2019-08-08T16:40:03.122Z","type":"message"}
{"nick":"rkirsling","message":"devsnek: yes","date":"2019-08-08T16:41:35.127Z","type":"message"}
{"nick":"drousso","date":"2019-08-08T16:41:50.595Z","type":"join"}
{"nick":"devsnek","message":"bradleymeck: is that in the spec?","date":"2019-08-08T16:42:05.434Z","type":"message"}
{"nick":"devsnek","message":"like i know it exist","date":"2019-08-08T16:42:10.749Z","type":"message"}
{"nick":"devsnek","message":"exists*","date":"2019-08-08T16:42:12.776Z","type":"message"}
{"nick":"devsnek","message":"but i can't find it","date":"2019-08-08T16:42:15.820Z","type":"message"}
{"nick":"Nimelrian","date":"2019-08-08T16:42:43.093Z","type":"join"}
{"nick":"satoriprints","message":"whats this channel about","date":"2019-08-08T16:44:01.621Z","type":"message"}
{"nick":"satoriprints","message":"I know tc39","date":"2019-08-08T16:44:11.832Z","type":"message"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-08-08T16:45:36.410Z","type":"quit"}
{"nick":"bradleymeck","message":"devsnek: it doesn't seem so, but it probably should be listed XD","date":"2019-08-08T16:46:44.481Z","type":"message"}
{"nick":"devsnek","message":"satoriprints: we discuss javascript here","date":"2019-08-08T16:47:07.750Z","type":"message"}
{"nick":"gibson042","date":"2019-08-08T16:49:18.593Z","type":"join"}
{"nick":"rkirsling","message":"devsnek: yeah mixing is prevented from being a valid production","date":"2019-08-08T16:49:49.771Z","type":"message"}
{"nick":"rkirsling","message":"see, say, https://github.com/tc39/proposal-nullish-coalescing/issues/44","date":"2019-08-08T16:50:40.050Z","type":"message"}
{"nick":"devsnek","message":"rkirsling: does the grammar in the spec restrict it?","date":"2019-08-08T16:51:49.787Z","type":"message"}
{"nick":"devsnek","message":"i was wondering after referring to the actual text","date":"2019-08-08T16:52:04.079Z","type":"message"}
{"nick":"devsnek","message":"maybe i'm just bad at reading spec text","date":"2019-08-08T16:52:16.404Z","type":"message"}
{"nick":"laughinghan","date":"2019-08-08T16:52:32.946Z","type":"join"}
{"nick":"rkirsling","message":"yeah, notice where it's BitwiseOR","date":"2019-08-08T16:52:46.752Z","type":"message"}
{"nick":"rkirsling","message":"those are blocking logical ops","date":"2019-08-08T16:53:01.692Z","type":"message"}
{"nick":"devsnek","message":"oh i see","date":"2019-08-08T16:53:18.842Z","type":"message"}
{"nick":"devsnek","message":"it can go to LogicalOR or Coalesce","date":"2019-08-08T16:53:28.406Z","type":"message"}
{"nick":"devsnek","message":"it all makes sense now","date":"2019-08-08T16:53:37.753Z","type":"message"}
{"nick":"rkirsling","message":"mhm. was a really nice simplification 😃","date":"2019-08-08T16:54:23.310Z","type":"message"}
{"nick":"Nimelrian","reason":"Read error: Connection reset by peer","date":"2019-08-08T16:55:33.246Z","type":"quit"}
{"nick":"rkirsling","message":"one nitpick I'd been meaning to make is that LogicalExpression is an unfortunate name since \"logical\" means \"truth(iness)-oriented\", though the only countersuggestion I can come up with is like ShortCircuitExpression","date":"2019-08-08T16:57:24.404Z","type":"message"}
{"nick":"devsnek","message":"well logicaland and logicalor are truthiness oriented","date":"2019-08-08T16:57:55.042Z","type":"message"}
{"nick":"rkirsling","message":"but coalescing is nullish-oriented, so unless we mean ternary logic... 😛 short circuiting is really the thing that they have in common","date":"2019-08-08T17:03:58.705Z","type":"message"}
{"nick":"rkirsling","message":"I phrased JSC's error message like this: https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/parser/Parser.cpp#L3932","date":"2019-08-08T17:07:52.477Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-08-08T17:13:22.464Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T17:20:08.877Z","type":"quit"}
{"nick":"bradleymeck","message":"does jsc integrate with its own debugger via CLI or just lldb?","date":"2019-08-08T17:31:32.773Z","type":"message"}
{"nick":"underikar","date":"2019-08-08T17:45:29.700Z","type":"join"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T17:45:34.243Z","type":"quit"}
{"nick":"rkirsling","message":"bradleymeck: how do you mean CLI? lldb would be the command-line approach but you can use Xcode or Visual Studio","date":"2019-08-08T17:47:43.987Z","type":"message"}
{"nick":"cybai","date":"2019-08-08T17:50:18.758Z","type":"join"}
{"nick":"jwalden","date":"2019-08-08T17:52:21.667Z","type":"join"}
{"nick":"bradleymeck","message":"rkirsling: d8 for example can be debugged using chrome devtools if you are shifty, XS has XSBug","date":"2019-08-08T17:52:41.323Z","type":"message"}
{"nick":"bradleymeck","message":"gui devtools basically","date":"2019-08-08T17:52:49.577Z","type":"message"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-08T17:54:39.733Z","type":"quit"}
{"nick":"jorydotcom","date":"2019-08-08T17:54:48.329Z","type":"join"}
{"nick":"rkirsling","message":"oh yeah you can inspect a JSContext","date":"2019-08-08T17:55:31.132Z","type":"message"}
{"nick":"rkirsling","message":"you do `run-jsc --remote-debug`, open Safari, and choose Develop > <host name> > JSContext","date":"2019-08-08T17:56:54.381Z","type":"message"}
{"nick":"bradleymeck","message":":huzzah:","date":"2019-08-08T17:57:09.186Z","type":"message"}
{"nick":"rkirsling","message":"🎊","date":"2019-08-08T17:57:22.583Z","type":"message"}
{"nick":"bradleymeck","message":"reading https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/jsc.cpp it doesn't seem to have a \"break-on-start\" flag?","date":"2019-08-08T18:15:23.922Z","type":"message"}
{"nick":"rkirsling","message":"oh yeah I was having trouble with that too","date":"2019-08-08T18:24:43.893Z","type":"message"}
{"nick":"rkirsling","message":"I think there's a bug there but I didn't get to digging super deeply","date":"2019-08-08T18:25:12.684Z","type":"message"}
{"nick":"bradleymeck","message":"also seems i cant actually connect if the code is too tight","date":"2019-08-08T18:25:13.996Z","type":"message"}
{"nick":"rkirsling","message":"tight?","date":"2019-08-08T18:30:13.884Z","type":"message"}
{"nick":"bradleymeck","message":"i can't \"break\" in the debugger","date":"2019-08-08T18:35:23.510Z","type":"message"}
{"nick":"bradleymeck","message":"but loops etc. are still print() ing","date":"2019-08-08T18:35:34.055Z","type":"message"}
{"nick":"keith_miller","date":"2019-08-08T18:52:42.709Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 276 seconds","date":"2019-08-08T18:56:07.652Z","type":"quit"}
{"nick":"kpattich__","date":"2019-08-08T19:28:15.283Z","type":"join"}
{"nick":"rkirsling","message":"hmmmm","date":"2019-08-08T19:29:01.677Z","type":"message"}
{"nick":"rkirsling","message":"fwiw there's a #webkit-inspector channel ;)","date":"2019-08-08T19:29:20.204Z","type":"message"}
{"nick":"gibson042","reason":"Ping timeout: 244 seconds","date":"2019-08-08T19:33:40.557Z","type":"quit"}
{"nick":"drousso_","date":"2019-08-08T20:02:26.517Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 276 seconds","date":"2019-08-08T20:05:01.651Z","type":"quit"}
{"nick":"drousso_","reason":"Client Quit","date":"2019-08-08T20:06:36.179Z","type":"quit"}
{"nick":"jwalden","reason":"Ping timeout: 264 seconds","date":"2019-08-08T20:07:52.022Z","type":"quit"}
{"nick":"AtumT_","date":"2019-08-08T20:08:59.444Z","type":"join"}
{"nick":"jwalden","date":"2019-08-08T20:09:53.855Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 268 seconds","date":"2019-08-08T20:10:41.785Z","type":"quit"}
{"nick":"annevk","reason":"Ping timeout: 276 seconds","date":"2019-08-08T20:14:07.751Z","type":"quit"}
{"nick":"annevk","date":"2019-08-08T20:14:37.165Z","type":"join"}
{"nick":"kpattich__","reason":"Ping timeout: 245 seconds","date":"2019-08-08T20:19:13.387Z","type":"quit"}
{"nick":"AtumT","date":"2019-08-08T20:20:36.778Z","type":"join"}
{"nick":"devsnek","message":"has this sort of thing been discussed/proposed? https://gc.gy/33000678.png","date":"2019-08-08T20:21:27.369Z","type":"message"}
{"nick":"AtumT_","reason":"Ping timeout: 245 seconds","date":"2019-08-08T20:21:43.465Z","type":"quit"}
{"nick":"devsnek","message":"instead of `\\u{2771}`","date":"2019-08-08T20:21:55.482Z","type":"message"}
{"nick":"Bakkot","message":"hmm","date":"2019-08-08T20:26:12.384Z","type":"message"}
{"nick":"rkirsling","message":"hmmm","date":"2019-08-08T20:26:13.703Z","type":"message"}
{"nick":"Bakkot","message":"I don't think so","date":"2019-08-08T20:26:15.115Z","type":"message"}
{"nick":"Bakkot","message":"cc mathiasbynens","date":"2019-08-08T20:26:20.736Z","type":"message"}
{"nick":"rkirsling","message":"are those specified to be usable as identifiers?","date":"2019-08-08T20:26:28.851Z","type":"message"}
{"nick":"rkirsling","message":"like, guaranteed not to change ever?","date":"2019-08-08T20:26:36.232Z","type":"message"}
{"nick":"Bakkot","message":"yeah","date":"2019-08-08T20:27:09.086Z","type":"message"}
{"nick":"Bakkot","message":"https://en.wikipedia.org/wiki/Unicode_character_property#Name","date":"2019-08-08T20:27:11.571Z","type":"message"}
{"nick":"Bakkot","message":"> Starting from Unicode version 2.0, the published name for a code point will never change. In the event of a misspelling in a publication, a correct name will later be assigned to the code point as a Character Name Alias. Within the whole range of names, an alias is unique too.","date":"2019-08-08T20:27:23.230Z","type":"message"}
{"nick":"rkirsling","message":"interesting...that's good to know.","date":"2019-08-08T20:27:39.523Z","type":"message"}
{"nick":"devsnek","message":"yeah they're totally stable, python even uses them for this kind of escape","date":"2019-08-08T20:27:41.500Z","type":"message"}
{"nick":"Bakkot","message":"unicode is usually pretty good about this sort of thing","date":"2019-08-08T20:27:50.483Z","type":"message"}
{"nick":"devsnek","message":"obviously some names are rather long","date":"2019-08-08T20:28:03.067Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T20:38:52.526Z","type":"quit"}
{"nick":"drousso","date":"2019-08-08T20:39:19.586Z","type":"join"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T20:42:53.895Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-08T21:24:33.771Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T21:45:26.954Z","type":"quit"}
{"nick":"cybai","date":"2019-08-08T21:51:45.686Z","type":"join"}
{"nick":"mgol","date":"2019-08-08T21:52:20.156Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-08-08T21:56:49.655Z","type":"quit"}
{"nick":"rkirsling","message":"devsnek: lol I see what you mean about the adding the jump to V8 being simpler","date":"2019-08-08T22:13:30.380Z","type":"message"}
{"nick":"devsnek","message":":D","date":"2019-08-08T22:13:41.185Z","type":"message"}
{"nick":"bradleymeck","message":"wasn't there a decorators proposal that had decorators for like everything, even expressions?","date":"2019-08-08T22:57:31.508Z","type":"message"}
{"nick":"rkirsling","message":"🤢","date":"2019-08-08T22:58:55.659Z","type":"message"}
{"nick":"devsnek","message":"unsure","date":"2019-08-08T22:58:59.803Z","type":"message"}
{"nick":"devsnek","message":"but in theory any `@x y` can become `x(y)`","date":"2019-08-08T22:59:12.379Z","type":"message"}
{"nick":"bradleymeck","message":"rkirsling: oh yes","date":"2019-08-08T23:07:32.836Z","type":"message"}
{"nick":"bradleymeck","message":"gimme that meta programming juice, om nom","date":"2019-08-08T23:07:44.042Z","type":"message"}
{"nick":"bradleymeck","message":"its what the perfs crave","date":"2019-08-08T23:07:56.716Z","type":"message"}
{"nick":"rkirsling","message":"😂","date":"2019-08-08T23:08:11.090Z","type":"message"}
{"nick":"devsnek","message":"i like the composability of the more generalized decorators","date":"2019-08-08T23:08:36.222Z","type":"message"}
{"nick":"rkirsling","message":"electrolytes.js","date":"2019-08-08T23:08:37.962Z","type":"message"}
{"nick":"bradleymeck","message":"cause im looking at infix bang after the realms call and is infix bang really just an expression decorator?","date":"2019-08-08T23:09:30.232Z","type":"message"}
{"nick":"devsnek","message":"infix decorators","date":"2019-08-08T23:09:58.361Z","type":"message"}
{"nick":"bradleymeck","message":"specialized to be remote method objects, but generalizing the problem out a bit","date":"2019-08-08T23:09:58.503Z","type":"message"}
{"nick":"bradleymeck","message":"ugggg","date":"2019-08-08T23:10:03.292Z","type":"message"}
{"nick":"devsnek","message":"i would generalize it to proxies","date":"2019-08-08T23:10:11.856Z","type":"message"}
{"nick":"devsnek","message":"not decorators","date":"2019-08-08T23:10:14.302Z","type":"message"}
{"nick":"bradleymeck","message":"proxies don't work for pipeline","date":"2019-08-08T23:10:32.159Z","type":"message"}
{"nick":"devsnek","message":"neither does infix anything","date":"2019-08-08T23:10:44.131Z","type":"message"}
{"nick":"bradleymeck","message":"x.y.z would need to be converted and eagerly sent off before .z happens","date":"2019-08-08T23:10:47.831Z","type":"message"}
{"nick":"bradleymeck","message":"i'd somewhat agree with infix being a problem with the solution, but the use case is pipelining for remote objects","date":"2019-08-08T23:11:17.533Z","type":"message"}
{"nick":"devsnek","message":"i mean... `a.b.c` works just fine","date":"2019-08-08T23:11:33.042Z","type":"message"}
{"nick":"bradleymeck","message":"and if you could remap all the Meta Object Protocol in an expression seems like that would work","date":"2019-08-08T23:11:41.951Z","type":"message"}
{"nick":"devsnek","message":"are you saying you want to support `a |> b |> c`?","date":"2019-08-08T23:11:46.922Z","type":"message"}
{"nick":"devsnek","message":"or c b a","date":"2019-08-08T23:11:51.907Z","type":"message"}
{"nick":"devsnek","message":"or whatever","date":"2019-08-08T23:11:53.581Z","type":"message"}
{"nick":"bradleymeck","message":"promise pipelining, not pipeline operator","date":"2019-08-08T23:12:03.218Z","type":"message"}
{"nick":"devsnek","message":"pipeline is an overloaded term now","date":"2019-08-08T23:12:04.700Z","type":"message"}
{"nick":"devsnek","message":"like you can do `a.b[c](d)`","date":"2019-08-08T23:12:14.071Z","type":"message"}
{"nick":"devsnek","message":"where those are all your custom graph builders","date":"2019-08-08T23:12:23.438Z","type":"message"}
{"nick":"devsnek","message":"which is how capn proto works today","date":"2019-08-08T23:12:31.823Z","type":"message"}
{"nick":"devsnek","message":"`await rpc.doX(rpc.doY())` as an example","date":"2019-08-08T23:13:26.177Z","type":"message"}
{"nick":"devsnek","message":"thenables + proxies","date":"2019-08-08T23:13:31.381Z","type":"message"}
{"nick":"bradleymeck","message":"kind of, the await bit breaks pipelining","date":"2019-08-08T23:13:42.606Z","type":"message"}
{"nick":"devsnek","message":"how so","date":"2019-08-08T23:13:47.890Z","type":"message"}
{"nick":"devsnek","message":"i pass rpc.doY directly to rpc.doX","date":"2019-08-08T23:14:00.725Z","type":"message"}
{"nick":"devsnek","message":"then await folds that into a request for doY applied to doX","date":"2019-08-08T23:14:24.399Z","type":"message"}
{"nick":"bradleymeck","message":"(await a!b)!c <-- needing the await","date":"2019-08-08T23:14:32.380Z","type":"message"}
{"nick":"devsnek","message":"how is that not just a.b.c","date":"2019-08-08T23:14:54.586Z","type":"message"}
{"nick":"bradleymeck","message":"it is message passing and not doing .gets","date":"2019-08-08T23:15:10.684Z","type":"message"}
{"nick":"bradleymeck","message":"a is a target for messages rather than a direct reference","date":"2019-08-08T23:15:21.986Z","type":"message"}
{"nick":"bradleymeck","message":"or it gets turned into one really","date":"2019-08-08T23:15:27.777Z","type":"message"}
{"nick":"devsnek","message":"i mean i don't understand","date":"2019-08-08T23:15:30.369Z","type":"message"}
{"nick":"devsnek","message":"why a.b is applied out","date":"2019-08-08T23:15:44.672Z","type":"message"}
{"nick":"bradleymeck","message":"what happens if i use .then in capn proto? /reading","date":"2019-08-08T23:16:57.338Z","type":"message"}
{"nick":"bradleymeck","message":"x!then() == ?","date":"2019-08-08T23:17:07.024Z","type":"message"}
{"nick":"devsnek","message":"pipelining doesn't solve that","date":"2019-08-08T23:17:12.500Z","type":"message"}
{"nick":"bradleymeck","message":"x.then would be the commit","date":"2019-08-08T23:17:15.925Z","type":"message"}
{"nick":"bradleymeck","message":"i'm just reading this lib for now","date":"2019-08-08T23:17:20.823Z","type":"message"}
{"nick":"devsnek","message":"nothing on top of promises solves thenables being strings instead of symbols","date":"2019-08-08T23:17:40.484Z","type":"message"}
{"nick":"devsnek","message":"a syntax for applying chains of promises sounds nice though","date":"2019-08-08T23:18:23.571Z","type":"message"}
{"nick":"devsnek","message":"`fetch()!.json()!.something`","date":"2019-08-08T23:19:00.899Z","type":"message"}
{"nick":"bradleymeck","message":"a syntax for dealing with specialized forms of MOP alternatives in general seems to be a lot of proposal","date":"2019-08-08T23:20:19.881Z","type":"message"}
{"nick":"bradleymeck","message":"s","date":"2019-08-08T23:20:23.592Z","type":"message"}
{"nick":"bradleymeck","message":"optional chaining for example","date":"2019-08-08T23:20:39.944Z","type":"message"}
{"nick":"bradleymeck","message":"it seems like a more general problem than we have been treating it","date":"2019-08-08T23:20:54.064Z","type":"message"}
{"nick":"laughinghan","date":"2019-08-08T23:22:36.654Z","type":"join"}
{"nick":"bradleymeck","message":"@awaitAllGets( fetch().json().something )","date":"2019-08-08T23:25:15.294Z","type":"message"}
{"nick":"devsnek","message":"that breaks locality to me","date":"2019-08-08T23:25:51.920Z","type":"message"}
{"nick":"bradleymeck","message":"how so?","date":"2019-08-08T23:30:08.341Z","type":"message"}
{"nick":"bradleymeck","message":"it encapsulates what it meta-programs","date":"2019-08-08T23:30:21.468Z","type":"message"}
{"nick":"bradleymeck","message":"i wouldn't assume it could reach inside of functions","date":"2019-08-08T23:30:31.794Z","type":"message"}
{"nick":"bradleymeck","message":"but the 2 `.`s in it seem fine to modify","date":"2019-08-08T23:30:42.716Z","type":"message"}
{"nick":"devsnek","message":"it makes it feel like the dots are magically awaiting","date":"2019-08-08T23:32:01.854Z","type":"message"}
{"nick":"devsnek","message":"and you can't control which ones","date":"2019-08-08T23:32:05.414Z","type":"message"}
{"nick":"bradleymeck","message":"move it outside the decorated expression?","date":"2019-08-08T23:34:14.089Z","type":"message"}
{"nick":"devsnek","message":"then you might have to nest the decorated expressions","date":"2019-08-08T23:34:36.967Z","type":"message"}
{"nick":"bradleymeck","message":"make a goofy rule like preceding _ awaits and $ doesn't?","date":"2019-08-08T23:34:40.887Z","type":"message"}
{"nick":"bradleymeck","message":"plenty of ways to work around","date":"2019-08-08T23:34:51.135Z","type":"message"}
{"nick":"devsnek","message":"i guess","date":"2019-08-08T23:34:58.301Z","type":"message"}
{"nick":"bradleymeck","message":"nesting expressions is common place though","date":"2019-08-08T23:35:02.293Z","type":"message"}
{"nick":"devsnek","message":"i mean like","date":"2019-08-08T23:35:07.117Z","type":"message"}
{"nick":"devsnek","message":"`@x { @x { a.b }.c }.d","date":"2019-08-08T23:35:31.069Z","type":"message"}
{"nick":"devsnek","message":"does that even work","date":"2019-08-08T23:35:34.921Z","type":"message"}
{"nick":"devsnek","message":"`a!.b.c!.d` is the goal","date":"2019-08-08T23:35:42.743Z","type":"message"}
{"nick":"bradleymeck","message":"idk, don't have a proposal","date":"2019-08-08T23:35:43.206Z","type":"message"}
{"nick":"bradleymeck","message":"could make it so only !. are visible to be altered?","date":"2019-08-08T23:36:03.334Z","type":"message"}
{"nick":"bradleymeck","message":"too much bikeshed in here, I'm off to the dollar movie theater","date":"2019-08-08T23:36:24.459Z","type":"message"}
{"nick":"bradleymeck","action":"flees","date":"2019-08-08T23:36:30.768Z","type":"action"}
{"nick":"devsnek","message":"have fun","date":"2019-08-08T23:39:03.515Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-08T23:57:11.797Z","type":"quit"}
