{"nick":"aki_","date":"2018-08-15T00:08:32.513Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-08-15T00:09:35.468Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T00:09:35.765Z","type":"nick"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-08-15T01:37:52.952Z","type":"quit"}
{"nick":"Guest96698","date":"2018-08-15T01:57:56.013Z","type":"join"}
{"nick":"Guest96698","reason":"Remote host closed the connection","date":"2018-08-15T02:04:06.265Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-08-15T02:16:05.540Z","type":"quit"}
{"nick":"aki_","date":"2018-08-15T02:16:14.843Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T02:16:38.903Z","type":"nick"}
{"nick":"devsnek","message":"jmdyck: nice commit","date":"2018-08-15T03:14:01.633Z","type":"message"}
{"nick":"guntbert9","date":"2018-08-15T03:58:37.137Z","type":"join"}
{"nick":"guntbert9","reason":"Remote host closed the connection","date":"2018-08-15T04:00:29.024Z","type":"quit"}
{"nick":"jmdyck","message":"tx","date":"2018-08-15T04:01:35.640Z","type":"message"}
{"nick":"aki_","date":"2018-08-15T04:24:28.830Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-08-15T04:24:35.043Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T04:24:38.349Z","type":"nick"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-08-15T04:43:49.130Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-08-15T05:06:08.744Z","type":"join"}
{"nick":"moved","date":"2018-08-15T05:08:56.858Z","type":"join"}
{"nick":"moved","reason":"Remote host closed the connection","date":"2018-08-15T05:12:39.249Z","type":"quit"}
{"nick":"cooled","date":"2018-08-15T05:36:51.219Z","type":"join"}
{"nick":"cooled","reason":"Remote host closed the connection","date":"2018-08-15T05:41:15.731Z","type":"quit"}
{"nick":"aki_","date":"2018-08-15T06:30:41.783Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2018-08-15T06:31:54.657Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T06:31:55.061Z","type":"nick"}
{"nick":"aki_","date":"2018-08-15T08:37:51.850Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 256 seconds","date":"2018-08-15T08:38:40.739Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T08:38:41.062Z","type":"nick"}
{"nick":"joyee_","date":"2018-08-15T09:16:48.397Z","type":"join"}
{"nick":"Domenic_","date":"2018-08-15T09:17:00.428Z","type":"join"}
{"nick":"wycats_","date":"2018-08-15T09:17:19.270Z","type":"join"}
{"nick":"wycats","reason":"Ping timeout: 245 seconds","date":"2018-08-15T09:18:05.495Z","type":"quit"}
{"nick":"zbraniecki","reason":"Ping timeout: 245 seconds","date":"2018-08-15T09:18:05.662Z","type":"quit"}
{"nick":"joyee","reason":"Read error: Connection reset by peer","date":"2018-08-15T09:18:06.268Z","type":"quit"}
{"nick":"Domenic","reason":"Read error: Connection reset by peer","date":"2018-08-15T09:18:06.575Z","type":"quit"}
{"nick":"joyee_","new_nick":"joyee","date":"2018-08-15T09:18:07.394Z","type":"nick"}
{"nick":"Domenic_","new_nick":"Domenic","date":"2018-08-15T09:18:07.559Z","type":"nick"}
{"nick":"zbraniecki","date":"2018-08-15T09:22:20.744Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-08-15T10:05:52.170Z","type":"quit"}
{"nick":"aki_","date":"2018-08-15T10:44:46.855Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 260 seconds","date":"2018-08-15T10:45:38.814Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T10:45:39.052Z","type":"nick"}
{"nick":"Sousapro3","date":"2018-08-15T11:11:26.762Z","type":"join"}
{"nick":"Sousapro3","reason":"Remote host closed the connection","date":"2018-08-15T11:14:59.778Z","type":"quit"}
{"nick":"jmdyck","date":"2018-08-15T12:29:35.510Z","type":"join"}
{"nick":"aki_","date":"2018-08-15T12:51:49.847Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-08-15T12:52:30.870Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T12:52:31.035Z","type":"nick"}
{"nick":"AtumT","date":"2018-08-15T12:56:37.303Z","type":"join"}
{"nick":"varesa3","date":"2018-08-15T13:19:59.497Z","type":"join"}
{"nick":"varesa3","reason":"Remote host closed the connection","date":"2018-08-15T13:22:26.536Z","type":"quit"}
{"nick":"cloudshu","date":"2018-08-15T14:19:00.853Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-08-15T14:59:49.031Z","type":"quit"}
{"nick":"akirose","date":"2018-08-15T15:00:01.403Z","type":"join"}
{"nick":"joe_______","date":"2018-08-15T15:29:05.657Z","type":"join"}
{"nick":"joe_______","reason":"Quit: Page closed","date":"2018-08-15T15:38:13.015Z","type":"quit"}
{"nick":"sh4nks9","date":"2018-08-15T16:10:30.649Z","type":"join"}
{"nick":"sh4nks9","reason":"Remote host closed the connection","date":"2018-08-15T16:11:26.634Z","type":"quit"}
{"nick":"arkain","date":"2018-08-15T16:18:06.621Z","type":"join"}
{"nick":"arkain","message":"I know I've asked this before, but I think I logged out after I figured everyone to be afk (it was early in the morning). Is there a complete list of the TC39 use cases and requirements that led to the development of proposal-class-fields?","date":"2018-08-15T16:25:43.784Z","type":"message"}
{"nick":"kg9","date":"2018-08-15T16:35:21.541Z","type":"join"}
{"nick":"Ovius","date":"2018-08-15T16:36:43.431Z","type":"join"}
{"nick":"kg9","reason":"Ping timeout: 268 seconds","date":"2018-08-15T16:40:22.712Z","type":"quit"}
{"nick":"Ovius","reason":"Ping timeout: 240 seconds","date":"2018-08-15T16:44:05.471Z","type":"quit"}
{"nick":"devsnek","message":"arkain: its spread out over a lot of time and space","date":"2018-08-15T16:50:52.384Z","type":"message"}
{"nick":"devsnek","message":"a lot of stuff is in https://github.com/tc39/proposal-class-fields/issues though","date":"2018-08-15T16:51:26.911Z","type":"message"}
{"nick":"arkain","message":"I've been in and out of that over the past few years.","date":"2018-08-15T16:52:30.654Z","type":"message"}
{"nick":"arkain","message":"The problem is that while that proposal works as anticipated, it falls short of the expectations of a non-negligibly sized group of developers. It also falls short of the needs of almost all developers who would want to use such a feature.","date":"2018-08-15T16:54:09.151Z","type":"message"}
{"nick":"devsnek","message":"expectations are meaningless","date":"2018-08-15T16:55:38.213Z","type":"message"}
{"nick":"devsnek","message":"needs are important though","date":"2018-08-15T16:55:44.903Z","type":"message"}
{"nick":"arkain","message":"expectations aren't meaningless, but I do agree that they are of limited value.","date":"2018-08-15T16:56:13.919Z","type":"message"}
{"nick":"devsnek","message":"if you have an issue like that you should open an issue on the repo","date":"2018-08-15T16:56:15.267Z","type":"message"}
{"nick":"arkain","message":"I've done so several times only to be ignored or dismissed. There have been a few occasions when the concern was addressed and rationally shown to be incompatible with the goals of the proposal. Those cases I don't mind.","date":"2018-08-15T16:57:27.452Z","type":"message"}
{"nick":"arkain","message":"However, cases like the need for something similar to \"protected\" which @ljharb in particular doesn't see any need for, is actually a much needed component if any kind of privacy syntax is to be added to the language.","date":"2018-08-15T16:58:51.670Z","type":"message"}
{"nick":"developers","date":"2018-08-15T16:58:56.716Z","type":"join"}
{"nick":"arkain","message":"I understand what his argument is on that issue, however it's only a strawman argument that doesn't address the purpose of having a type of \"protected\" syntax.","date":"2018-08-15T16:59:52.282Z","type":"message"}
{"nick":"arkain","message":"The one occasion where it was addressed was loosely in the Decorators extension proposal. However, that addressing produced non-viable results.","date":"2018-08-15T17:00:54.576Z","type":"message"}
{"nick":"devsnek","message":"you can't really do protected in js","date":"2018-08-15T17:02:01.163Z","type":"message"}
{"nick":"devsnek","message":"well you could but it would be insanely slow and probably have a lot of security issues from edge cases","date":"2018-08-15T17:02:32.175Z","type":"message"}
{"nick":"developers","reason":"Remote host closed the connection","date":"2018-08-15T17:03:23.736Z","type":"quit"}
{"nick":"arkain","message":"Not true.","date":"2018-08-15T17:03:35.913Z","type":"message"}
{"nick":"arkain","message":"There is a way to accomplish it that is neither slow nor subject to major security issues.","date":"2018-08-15T17:04:07.067Z","type":"message"}
{"nick":"arkain","message":"Remember that \"protected\" members are to be thought of a public despite the fact that they won't show on the public externally exposed interface.","date":"2018-08-15T17:04:51.587Z","type":"message"}
{"nick":"bterlson","message":"arkain: you will find that that intuition is not shared by everyone asking for protected (and indeed what protected even means for JS isn't clear)","date":"2018-08-15T17:05:25.503Z","type":"message"}
{"nick":"bterlson","message":"if you know how to accomplish it I suggest writing up a proposal","date":"2018-08-15T17:05:35.808Z","type":"message"}
{"nick":"arkain","message":"I did. https://github.com/rdking/proposal-object-members","date":"2018-08-15T17:06:01.403Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-08-15T17:06:21.335Z","type":"quit"}
{"nick":"arkain","message":"It's a complete proposal as far as I can tell. I've even written up a POC that works in ES6.","date":"2018-08-15T17:06:39.088Z","type":"message"}
{"nick":"akirose","date":"2018-08-15T17:06:53.700Z","type":"join"}
{"nick":"bterlson","message":"I didn't look in detail, but you should definitely justify why you think protected shouldn't be private-like","date":"2018-08-15T17:08:05.045Z","type":"message"}
{"nick":"arkain","message":"Thanks for the advice. I'll add that today.","date":"2018-08-15T17:08:33.948Z","type":"message"}
{"nick":"bterlson","message":"IMO syntax for \"friend classes\" is a much better fit for JS","date":"2018-08-15T17:09:02.474Z","type":"message"}
{"nick":"arkain","message":"\"friend\" while admittedly useful, would require a major rewrite of all ES parsers. Without a 2 pass resolution, mutual friendship would be impossible, but that's one of the major use cases.","date":"2018-08-15T17:10:38.652Z","type":"message"}
{"nick":"arkain","message":"In most cases though, you can get around the need for \"friend\" in already well understood ways.","date":"2018-08-15T17:11:09.716Z","type":"message"}
{"nick":"bterlson","message":"first I've heard of friend requiring a rewrite :-P","date":"2018-08-15T17:11:17.381Z","type":"message"}
{"nick":"arkain","message":"Btw. Here's a link to a rough justification of why \"protected\" isn't private-like.","date":"2018-08-15T17:11:46.636Z","type":"message"}
{"nick":"arkain","message":"https://github.com/tc39/proposal-class-fields/issues/122","date":"2018-08-15T17:11:54.721Z","type":"message"}
{"nick":"arkain","message":"The problem with mutual friendship is that it requires both objects to exist at the same time. Since friendship could only be applied during declaration, one of the 2 friends will need to be able to befriend a non-existent object.","date":"2018-08-15T17:13:05.353Z","type":"message"}
{"nick":"arkain","message":"ES is a top-down language","date":"2018-08-15T17:13:18.883Z","type":"message"}
{"nick":"devsnek","message":"so protected is just private but the symbol is shared between class instances","date":"2018-08-15T17:14:09.943Z","type":"message"}
{"nick":"devsnek","message":"by your proposal","date":"2018-08-15T17:14:15.478Z","type":"message"}
{"nick":"arkain","message":"yes... I need to rewrite that part.","date":"2018-08-15T17:14:39.206Z","type":"message"}
{"nick":"arkain","message":"It's partially true as protected members exist in the private container.","date":"2018-08-15T17:14:56.149Z","type":"message"}
{"nick":"devsnek","message":"i think you need to shave down the words","date":"2018-08-15T17:15:13.322Z","type":"message"}
{"nick":"devsnek","message":"https://i2.wp.com/joannapants.com/wp-content/uploads/2018/06/iu.jpeg","date":"2018-08-15T17:15:32.134Z","type":"message"}
{"nick":"arkain","message":"I can do that... More terse over all?","date":"2018-08-15T17:15:37.290Z","type":"message"}
{"nick":"bterlson","message":"arkain: fwiw I'm well aware that ES is a top-down language. But you'll find that you can work around the issue you find without rewriting the parser. There's also proposals to allow easier forward references e.g. the `ref` proposal from rbuckton.","date":"2018-08-15T17:16:22.766Z","type":"message"}
{"nick":"arkain","message":"If the forward references thing doesn't cause an issue, then friend could be built on top of that. I saw that proposal a while back. Could be very useful.","date":"2018-08-15T17:17:22.807Z","type":"message"}
{"nick":"mt20","date":"2018-08-15T17:18:07.516Z","type":"join"}
{"nick":"mt20","reason":"Remote host closed the connection","date":"2018-08-15T17:22:25.214Z","type":"quit"}
{"nick":"Bakkot","message":"arkain: I do not think that it makes sense to implement concepts like protected and friend in JS without first shipping hard private and allowing the ecosystem to explore what needs it does and does not meet. I expect that it will prove to be the case that `protected` and `friend` as they exist in for example C++ are not actually a natural concept for JS, since JS is so much more dynamic.","date":"2018-08-15T17:22:47.728Z","type":"message"}
{"nick":"bterlson","message":"Bakkot: fwiw when I say friend I don't mean in the sense of any other language, just something approximately like \"syntax for sharing symbols\" :-P","date":"2018-08-15T17:23:47.774Z","type":"message"}
{"nick":"Bakkot","message":"bterlson: yeah; I expect people to implement similar things in userland on top of decorators.","date":"2018-08-15T17:24:26.690Z","type":"message"}
{"nick":"bterlson","message":"sames, and yeah, I'll say it stronger: we must not ship protected/friend without first shipping private + decorators and living with it for a while :-P","date":"2018-08-15T17:25:24.990Z","type":"message"}
{"nick":"arkain","message":"Bakkot: like you, I don't believe friend is natural to JS. I am not proposing it. However, the need for protected exists **because** of the need for private. This is already a well known fact to those of us who have been constructing libraries of class-like objects","date":"2018-08-15T17:25:32.969Z","type":"message"}
{"nick":"TabAtkins","message":"Sorry, unrelated topic: Hm, Array subclassing seems to have been totally fixed since I last looked - `class Foo extends Array` correctly returns a Foo instance from the Array generics, etc. Cool! Now if we could just intercept [] sets, so we could typecheck and prevent hole-creation, without needing to invoke the full weight of Proxy machinery, then the WebIDL array-subclass problem would be finally solved in a great way.","date":"2018-08-15T17:25:59.494Z","type":"message"}
{"nick":"Bakkot","message":"arkain: it is not obviously the case that the need to which you’re referring cannot adequately be met by hard private + decorators.","date":"2018-08-15T17:27:23.697Z","type":"message"}
{"nick":"arkain","message":"Bakkot: you've already attempted it in your Decorators proposal, showing it to be inadequate. Do you have an idea for how to use a decorator in such a way as to insure that @protected members are only visible to derived objects?","date":"2018-08-15T17:28:59.976Z","type":"message"}
{"nick":"arkain","message":"If you had a POC of that, I would love to see it.","date":"2018-08-15T17:29:26.281Z","type":"message"}
{"nick":"Bakkot","message":"arkain: I have something somewhere; give me a second. But note that that was not my claim: I didn’t say “decoratators are definitely good enough”; I said “decorators might be good enough, and we can’t really know without letting the ecosystem sit with them for a while”.","date":"2018-08-15T17:30:41.309Z","type":"message"}
{"nick":"arkain","message":"As it stands, I've been thinking about it since proposal-class-fields is not likely to be usurped. Over the past year, I have yet to find a way.","date":"2018-08-15T17:30:44.521Z","type":"message"}
{"nick":"arkain","message":"The only problem is that once it's out there in the wild, there's no way to fix it if it fails to provide what's needed short of making the language a little more convoluted.","date":"2018-08-15T17:31:41.157Z","type":"message"}
{"nick":"arkain","message":"That's why I raised my own proposal","date":"2018-08-15T17:31:53.383Z","type":"message"}
{"nick":"Bakkot","message":"Private state stands on its own; it does not require fixing.","date":"2018-08-15T17:31:59.356Z","type":"message"}
{"nick":"arkain","message":"The approach I'm proposing will definitely provide exactly whats needed and still allow for your decorator proposal to work.","date":"2018-08-15T17:32:26.675Z","type":"message"}
{"nick":"Bakkot","message":"arkain: https://gist.github.com/bakkot/6924e788ac954fe8302e1c8db429a4af","date":"2018-08-15T17:32:56.576Z","type":"message"}
{"nick":"arkain","message":"Thanks for the link. It'll take me a little while before I can comment about it.","date":"2018-08-15T17:34:30.401Z","type":"message"}
{"nick":"arkain","message":"In either case, I believe that support for protected should have a higher priority than that for decorators as it is a feature that will be needed as soon as some form of declarative private lands in the language.","date":"2018-08-15T17:36:25.969Z","type":"message"}
{"nick":"Bakkot","message":"arkain: re: your proposal: I am extremely strongly against any proposal which allows `private x` as a declaration and which continues to allow `this.x` to refer to a public field named `x`, which yours does. This is basically why I wrote the private syntax FAQ; I’m not sure I can explain it more clearly than is explained there.","date":"2018-08-15T17:38:09.040Z","type":"message"}
{"nick":"Bakkot","message":"arkain: it is not clear to me why the need for protected state would increase with the introduction of private state; can you expand on that?","date":"2018-08-15T17:40:12.083Z","type":"message"}
{"nick":"Bakkot","message":"that is, to be specific, it seems to me that there are some cases where you’d want private, and some where you’d want protected, and currently both have to be met with public (or workaround like WeakMap); with the introduction of private, the first of these would be met but not necessarily the second, but I would not expect the number of cases where you want the second to increase over what it already is.","date":"2018-08-15T17:42:41.955Z","type":"message"}
{"nick":"kepler_mach13","date":"2018-08-15T17:49:33.475Z","type":"join"}
{"nick":"kepler_mach13","reason":"Remote host closed the connection","date":"2018-08-15T17:49:35.668Z","type":"quit"}
{"nick":"arkain","message":"Bakkot: I get your reasoning for being against `private x` without `this.x` and as I've stated many times, \"I agree\". However, that reasoning smells more of emotion than of logic, so I ignore it. Besides, my proposal provides `obj#.x` in its place where `obj#` is the private container. So it essential does give you exactly what you expect once you understand that '#' means \"get the private container\"","date":"2018-08-15T17:53:27.953Z","type":"message"}
{"nick":"arkain","message":"Bakkot: On top of that, the approach you provided breaks access methods unnecessarily.","date":"2018-08-15T17:54:48.583Z","type":"message"}
{"nick":"bterlson","message":"\"smells more of emotion than of logic\" smells more of \"I can't argue the point\" than a useful observation (and also needlessly discounts the role of emotion in design) :-P","date":"2018-08-15T17:55:09.598Z","type":"message"}
{"nick":"arkain","message":"bterlson: I have argued the point on logical grounds many times over the past 2 years only to be met with a response that begins with \"I feel that...\"","date":"2018-08-15T17:56:12.566Z","type":"message"}
{"nick":"arkain","message":"as for emotion in a design, that's best left for the cases where there is no reasonable logical argument.","date":"2018-08-15T17:56:58.280Z","type":"message"}
{"nick":"arkain","message":"The problem with emotion in a logical system is that the logic of the system will not be understood by those who do not share the same emotional view. Hence all the videos about the \"wtf's\" of ES.","date":"2018-08-15T17:58:25.109Z","type":"message"}
{"nick":"devsnek","message":"logically `private x` with `this.x`is a confusing mess","date":"2018-08-15T17:59:38.364Z","type":"message"}
{"nick":"arkain","message":"Confusion is an emotional state.","date":"2018-08-15T18:00:11.752Z","type":"message"}
{"nick":"arkain","message":"logically, there is not conflict between `private x` and `this.x`","date":"2018-08-15T18:00:42.978Z","type":"message"}
{"nick":"devsnek","message":"`this.x` `this['x']` and `this[val]`","date":"2018-08-15T18:01:09.925Z","type":"message"}
{"nick":"devsnek","message":"with `private x`","date":"2018-08-15T18:01:14.592Z","type":"message"}
{"nick":"arkain","message":"especially if `private` means stored in the private container owned by \"this\"","date":"2018-08-15T18:01:15.671Z","type":"message"}
{"nick":"devsnek","message":"or `instance.x`","date":"2018-08-15T18:01:30.749Z","type":"message"}
{"nick":"devsnek","message":"outside the class","date":"2018-08-15T18:01:36.386Z","type":"message"}
{"nick":"arkain","message":"devsnek: all public references. To make them private, add a `#` before the `.`","date":"2018-08-15T18:02:15.981Z","type":"message"}
{"nick":"arkain","message":".. and before the `[`","date":"2018-08-15T18:02:39.494Z","type":"message"}
{"nick":"devsnek","message":"why were you arguing about `private x` and `this.x` then 🤔","date":"2018-08-15T18:02:48.933Z","type":"message"}
{"nick":"devsnek","message":"if we all agree that #. is good","date":"2018-08-15T18:03:01.020Z","type":"message"}
{"nick":"devsnek","message":"or .#","date":"2018-08-15T18:03:15.920Z","type":"message"}
{"nick":"arkain","message":"I thought it was a continuation of Bakkot's argument","date":"2018-08-15T18:03:22.741Z","type":"message"}
{"nick":"TabAtkins","message":"As devsnek pointed out, there is a logical conflict. More importantly, tho, \"no logical conflict\" just means \"this idea isn't logically contradictory\"; it does *not* mean \"this is a reasonable idea that must be considered as a major contender in the discussion\".  There are lots and lots of \"no logical conflict\" possibilities in any API design; many are still not good on design grounds, because design *is* an","date":"2018-08-15T18:03:55.342Z","type":"message"}
{"nick":"TabAtkins","message":"emotional/\"feel\"-based process.","date":"2018-08-15T18:03:55.508Z","type":"message"}
{"nick":"devsnek","message":"also this ^","date":"2018-08-15T18:04:18.553Z","type":"message"}
{"nick":"bterlson","message":"Any design is fundamentally empathy in practice. Just my experience.","date":"2018-08-15T18:04:59.349Z","type":"message"}
{"nick":"arkain","message":"Then can anyone explain precisely what the \"logical conflict\" is such that there can be both a \"logical conflict\" and \"no logical conflict\" concurrently? That very statement is illogical. It would be better if any of you had claimed that this was a \"rational conflict\". I could have accepted that as it is also one for me given my history with other programming languages.","date":"2018-08-15T18:06:20.927Z","type":"message"}
{"nick":"arkain","message":"However, I accept that ES is not the same as those other languages and that the programming paradigm will be a little different.","date":"2018-08-15T18:06:44.791Z","type":"message"}
{"nick":"arkain","message":"My proposal simply minimizes those differences.","date":"2018-08-15T18:07:01.562Z","type":"message"}
{"nick":"ljharb","message":"i don't think minimizing those differences is automatically a good thing.","date":"2018-08-15T18:07:50.700Z","type":"message"}
{"nick":"TabAtkins","message":"The conflict was with the `private x` and `this.x` thing. I'm very confused about that at this point, tho, since you seem to be saying that `this.x` doesn't refer to the private name.","date":"2018-08-15T18:07:52.545Z","type":"message"}
{"nick":"ljharb","message":"different things should look different.","date":"2018-08-15T18:07:57.365Z","type":"message"}
{"nick":"ljharb","message":"put another way, things should only look similar if they are similar.","date":"2018-08-15T18:08:33.923Z","type":"message"}
{"nick":"arkain","message":"ljharb: true. Fundamentally, the meaning of a private field in C++, Java, and my proposal are not different. Likewise true for protected. What is different is how it is to be implemented in the language.","date":"2018-08-15T18:09:41.664Z","type":"message"}
{"nick":"arkain","message":"Hence, it is safe to use the keywords, knowing people will understand the meaning.","date":"2018-08-15T18:10:02.996Z","type":"message"}
{"nick":"arkain","message":"Bakkot, I haven't forgotten to give you a reason. It's coming.","date":"2018-08-15T18:11:13.876Z","type":"message"}
{"nick":"arkain","message":"The class fields proposal explains the use of # as a language backed replacement for the '_' convention.","date":"2018-08-15T18:11:54.188Z","type":"message"}
{"nick":"arkain","message":"This will likely lead some people to do a wholesale find and replace of `_` variable names in their libraries to make them private. Not everyone will do this, but some will.","date":"2018-08-15T18:12:57.043Z","type":"message"}
{"nick":"devsnek","message":"its not because of the underscore convention","date":"2018-08-15T18:13:10.626Z","type":"message"}
{"nick":"arkain","message":"This will cause them to notice that they've broken some of their code.","date":"2018-08-15T18:13:19.813Z","type":"message"}
{"nick":"devsnek","message":"its because there's no performant way to track object privilege on normal accessors","date":"2018-08-15T18:13:29.215Z","type":"message"}
{"nick":"devsnek","message":"all sorts of weird situations come out of them being the same accessor due to javascript being javascript","date":"2018-08-15T18:14:02.954Z","type":"message"}
{"nick":"arkain","message":"devsnek: I never said it was because of the underscore convention. I'm merely recounting how proposal-class-fields describes the meaning of the '#'","date":"2018-08-15T18:14:08.587Z","type":"message"}
{"nick":"devsnek","message":"adding methods to prototypes, computed access, etc","date":"2018-08-15T18:14:12.892Z","type":"message"}
{"nick":"arkain","message":"devsnek: and the usage....","date":"2018-08-15T18:14:35.633Z","type":"message"}
{"nick":"ljharb","message":"arkain: they are different. in java etc, they're access levels","date":"2018-08-15T18:14:41.113Z","type":"message"}
{"nick":"ljharb","message":"arkain: in JS, there's no such thing as access levels. there's only reachable - public - and unreachable - private.","date":"2018-08-15T18:14:53.791Z","type":"message"}
{"nick":"ljharb","message":"and if the `private` keyword makes people think there should be `protected`, then that's a pretty big reason imo to avoid the `private` keyword.","date":"2018-08-15T18:15:18.743Z","type":"message"}
{"nick":"ljharb","message":"because \"access levels\" is simply the wrong mental model to apply in JS","date":"2018-08-15T18:15:41.829Z","type":"message"}
{"nick":"ljharb","message":"(imo)","date":"2018-08-15T18:15:53.907Z","type":"message"}
{"nick":"arkain","message":"ljharb: That's only true given proposal-class-fields. If proposal-object-members goes through instead, there will indeed be access levels whose fundamental meaning and usage match that of Java.","date":"2018-08-15T18:16:06.574Z","type":"message"}
{"nick":"arkain","message":"ljharb: It's not the keyword, it's the feature that will leave people looking for protected support.","date":"2018-08-15T18:16:45.962Z","type":"message"}
{"nick":"ljharb","message":"\"matching java\" is not a good motivation for me.","date":"2018-08-15T18:17:15.558Z","type":"message"}
{"nick":"arkain","message":"It's not a motivation at all for me","date":"2018-08-15T18:17:25.694Z","type":"message"}
{"nick":"ljharb","message":"i think JS should set its sights much much higher than \"how java does it\"","date":"2018-08-15T18:17:28.745Z","type":"message"}
{"nick":"devsnek","message":"i think js has so many fundamental differences from languages with access levels that its not worth doing for the sake of doing","date":"2018-08-15T18:17:32.741Z","type":"message"}
{"nick":"ljharb","message":"that people will think they *want* protected doesn't mean it's appropriate for it to exist","date":"2018-08-15T18:17:57.808Z","type":"message"}
{"nick":"arkain","message":"Then why is it important for some method of declaratively producing private fields to exist?","date":"2018-08-15T18:18:50.141Z","type":"message"}
{"nick":"arkain","message":"The same rationale you would apply to my question also applies to protected fields","date":"2018-08-15T18:19:28.186Z","type":"message"}
{"nick":"ljharb","message":"because private - unreachability - already exists in the language, for everything except class instances","date":"2018-08-15T18:19:30.420Z","type":"message"}
{"nick":"ljharb","message":"thus, the only place it really needs to be added is class instances","date":"2018-08-15T18:19:38.336Z","type":"message"}
{"nick":"ljharb","message":"(variables inside a closure, is the existing mechanism)","date":"2018-08-15T18:19:53.112Z","type":"message"}
{"nick":"arkain","message":"ljharb: not true. class instances can indeed harbor protected fields via a weakmap","date":"2018-08-15T18:20:15.461Z","type":"message"}
{"nick":"ljharb","message":"i think you mean private, but yes, i know","date":"2018-08-15T18:20:27.081Z","type":"message"}
{"nick":"arkain","message":"oops","date":"2018-08-15T18:20:35.767Z","type":"message"}
{"nick":"ljharb","message":"arkain: but that's not a lexical mechanism.","date":"2018-08-15T18:20:41.037Z","type":"message"}
{"nick":"arkain","message":"I know","date":"2018-08-15T18:20:51.940Z","type":"message"}
{"nick":"ljharb","message":"ok so, that's what this adds","date":"2018-08-15T18:20:56.339Z","type":"message"}
{"nick":"ljharb","message":"\"protected\" already exists: stick an underscore in front of your property name, or use a symbol","date":"2018-08-15T18:21:09.789Z","type":"message"}
{"nick":"arkain","message":"The same is true for protected. They can also be implemented via weakmap, and there's no lexical mechanism for that either.","date":"2018-08-15T18:21:27.132Z","type":"message"}
{"nick":"ljharb","message":"i'm confused why you'd bother using a weakmap if you're going to let any subclass access it","date":"2018-08-15T18:21:53.349Z","type":"message"}
{"nick":"ljharb","message":"but either way, there's no lexical mechanism for protected *everywhere else* either","date":"2018-08-15T18:22:08.155Z","type":"message"}
{"nick":"arkain","message":"ljharb: sticking an '_' in front of your property name does not prevent that field from existing on the external interface of the object.","date":"2018-08-15T18:22:10.447Z","type":"message"}
{"nick":"devsnek","message":"anything with an instance of your class can access your protected members","date":"2018-08-15T18:22:27.366Z","type":"message"}
{"nick":"ljharb","message":"the external interface is everything observable. including the existence of protected fields, which can be observed by subclassing it.","date":"2018-08-15T18:22:30.298Z","type":"message"}
{"nick":"devsnek","message":"it would actually be safer to use a weakmap lol","date":"2018-08-15T18:22:42.030Z","type":"message"}
{"nick":"ljharb","message":"making something protected in no way removes it from your public interface, it just makes it slightly harder to fine.","date":"2018-08-15T18:22:44.057Z","type":"message"}
{"nick":"ljharb","message":"*find","date":"2018-08-15T18:22:45.417Z","type":"message"}
{"nick":"NightMonkey0","date":"2018-08-15T18:23:04.586Z","type":"join"}
{"nick":"NightMonkey0","reason":"Remote host closed the connection","date":"2018-08-15T18:24:24.785Z","type":"quit"}
{"nick":"ljharb","message":"basically, any definition of \"public interface\" is one of two things: either it's only the things that are possible, or it's only the subset of possible things you declare are suported","date":"2018-08-15T18:26:26.440Z","type":"message"}
{"nick":"arkain","message":"The external interface of an object is anything I can access without jumping hoops(adding code that doesn't match /\\w+((\\.\\w+)|(\\[([\"'`]).+\\4\\]))*/. Subclassing is jumping hoops.","date":"2018-08-15T18:26:27.558Z","type":"message"}
{"nick":"ljharb","message":"no","date":"2018-08-15T18:26:30.796Z","type":"message"}
{"nick":"ljharb","message":"hoops are irrelevant","date":"2018-08-15T18:26:35.170Z","type":"message"}
{"nick":"arkain","message":"Not true","date":"2018-08-15T18:26:47.301Z","type":"message"}
{"nick":"ljharb","message":"symbols are public too, even tho Object.getOwnPropertySymbols is a hoop","date":"2018-08-15T18:26:50.598Z","type":"message"}
{"nick":"TabAtkins","message":"what... is that regex","date":"2018-08-15T18:26:57.330Z","type":"message"}
{"nick":"ljharb","message":"and if hoops make it not public, then \"use a symbol\" and boom, you're done","date":"2018-08-15T18:26:59.798Z","type":"message"}
{"nick":"ljharb","message":"arkain: so again, either your public interface is \"only reachable\", or it's \"some arbitrary subset of reachable that you decide for yourself\"","date":"2018-08-15T18:27:22.429Z","type":"message"}
{"nick":"arkain","message":"The fact that there is no lexical mechanism for declaring a private field means you have to jump hoops to do so. That doesn't mean it's impossible.","date":"2018-08-15T18:27:32.003Z","type":"message"}
{"nick":"ljharb","message":"if it's the latter, you shouldn't have syntax to support that - it's just your homegrown convention","date":"2018-08-15T18:27:34.979Z","type":"message"}
{"nick":"ljharb","message":"arkain: right, and \"hoops\" are irrelevant to privacy. if it's possible to make it unreachable and unobservable, it's private, if not, it's public.","date":"2018-08-15T18:27:58.733Z","type":"message"}
{"nick":"ljharb","message":"you are more than welcome to invent your own definition of \"public interface\" for any code you write, of course","date":"2018-08-15T18:28:16.948Z","type":"message"}
{"nick":"ljharb","message":"but the language shouldn't be supporting some arbitrary definition","date":"2018-08-15T18:28:26.668Z","type":"message"}
{"nick":"arkain","message":"ljharb: I agree. However, we seem to have differing opinions on what constitutes the \"public interface\" of an object. Let me try again. If all slots of an object beyond the ones that can be found on a default object and added or removed via Object.defineProperty and delete were removed from an object, then all remaining items constitute the public interface of that object.","date":"2018-08-15T18:31:21.930Z","type":"message"}
{"nick":"arkain","message":"A protected field should not appear in the public interface thusly defined.","date":"2018-08-15T18:32:17.592Z","type":"message"}
{"nick":"ljharb","message":"the public interface includes all observable behavior.","date":"2018-08-15T18:32:25.255Z","type":"message"}
{"nick":"ljharb","message":"it's not just \"the property names\", it's \"what the functions do\"","date":"2018-08-15T18:32:33.483Z","type":"message"}
{"nick":"ljharb","message":"also","date":"2018-08-15T18:32:35.487Z","type":"message"}
{"nick":"ilera","date":"2018-08-15T18:32:40.374Z","type":"join"}
{"nick":"bterlson","message":"ljharb: *cough*","date":"2018-08-15T18:32:53.511Z","type":"message"}
{"nick":"ilera","reason":"Remote host closed the connection","date":"2018-08-15T18:33:32.052Z","type":"quit"}
{"nick":"arkain","message":"ljharb: can I take this to mean I should be using a different expression other than \"public interface\"? If so, I can make the appropriate changes in my proposal.","date":"2018-08-15T18:34:03.955Z","type":"message"}
{"nick":"ljharb","message":"arkain: sure, let's stop taking about the interface - \"publicly observable interface and semantics\" imo is the \"public API\"","date":"2018-08-15T18:35:52.307Z","type":"message"}
{"nick":"arkain","message":"Ok, then I'll restate it: While a protected field is a part of the object's public API, it will not be an \"own property\" of the object any more than a private field will be.","date":"2018-08-15T18:37:29.234Z","type":"message"}
{"nick":"arkain","message":"Does that make it clearer?","date":"2018-08-15T18:37:49.818Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2018-08-15T18:37:52.857Z","type":"message"}
{"nick":"devsnek","message":"but \"own property\" is pretty arbitrary","date":"2018-08-15T18:38:01.651Z","type":"message"}
{"nick":"arkain","message":"???","date":"2018-08-15T18:38:11.968Z","type":"message"}
{"nick":"devsnek","message":"own properties don't even make a complete public api","date":"2018-08-15T18:39:25.750Z","type":"message"}
{"nick":"ljharb","message":"public class methods aren't own properties either","date":"2018-08-15T18:40:00.357Z","type":"message"}
{"nick":"arkain","message":"x is an \"own property\" of y iff (Object.getOwnPropertyNames(y).concat(Object.getOwnPropertySymbols(y)).indexOf(x) !== -1)","date":"2018-08-15T18:40:58.796Z","type":"message"}
{"nick":"ljharb","message":"or just `Object.prototype.hasOwnProperty.call(obj, key)`","date":"2018-08-15T18:41:19.794Z","type":"message"}
{"nick":"ljharb","message":"no need to make it overly complex","date":"2018-08-15T18:41:24.426Z","type":"message"}
{"nick":"arkain","message":"&& x != \"__proto__\"","date":"2018-08-15T18:41:31.681Z","type":"message"}
{"nick":"arkain","message":"true","date":"2018-08-15T18:41:43.741Z","type":"message"}
{"nick":"arkain","message":"I thought \"own property\" was a non-arbitrary phrase.","date":"2018-08-15T18:42:12.511Z","type":"message"}
{"nick":"arkain","message":"Does this at least clarify the purpose of \"protected\" as I'm proposing?","date":"2018-08-15T18:43:29.690Z","type":"message"}
{"nick":"devsnek","message":"i don't think there are ambiguity before","date":"2018-08-15T18:43:54.137Z","type":"message"}
{"nick":"arkain","message":"There was due to conflicting meanings of \"public API\"","date":"2018-08-15T18:44:30.630Z","type":"message"}
{"nick":"arkain","message":"What I meant was not what was understood by others. Hence the need for clarification.","date":"2018-08-15T18:44:50.515Z","type":"message"}
{"nick":"devsnek","message":"i think the point was no matter what your own definition of public api is, it has to be generic for all of js, which yours isn't","date":"2018-08-15T18:47:21.680Z","type":"message"}
{"nick":"arkain","message":"fair enough. That's why I won't use \"public API\" in that way anymore","date":"2018-08-15T18:47:51.682Z","type":"message"}
{"nick":"arkain","message":"Now given my restatement above for the meaning of \"protected\" are there still objections?","date":"2018-08-15T18:48:37.459Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2018-08-15T18:48:53.548Z","type":"message"}
{"nick":"ljharb","message":"i see no value in something that's \"public but behind that curtain over there in the corner, just ignore the curtain\"","date":"2018-08-15T18:49:15.150Z","type":"message"}
{"nick":"arkain","message":"Thought so. lets here them.","date":"2018-08-15T18:49:15.764Z","type":"message"}
{"nick":"ljharb","message":"if it is reachable, it is public. full stop.","date":"2018-08-15T18:49:25.027Z","type":"message"}
{"nick":"ljharb","message":"for \"protected\" to exist i'd want to see an explanation of a way to make something unreachable, but somehow different than \"explicitly shared private\"","date":"2018-08-15T18:49:50.037Z","type":"message"}
{"nick":"ljharb","message":"and so far the only \"logic\" i see for protected is \"other languages have it, JS should too\".","date":"2018-08-15T18:50:12.810Z","type":"message"}
{"nick":"bterlson","message":"explicitly shared private and protected can be isomorphic :-P","date":"2018-08-15T18:50:26.689Z","type":"message"}
{"nick":"devsnek","message":"like i can see the jump to accessing private properties of other instances","date":"2018-08-15T18:51:18.027Z","type":"message"}
{"nick":"devsnek","message":"but i don't know what i would actually do with that","date":"2018-08-15T18:51:24.048Z","type":"message"}
{"nick":"arkain","message":"bterlson: They **are** isomorphic","date":"2018-08-15T18:51:24.480Z","type":"message"}
{"nick":"ljharb","message":"sure, i'd love to hear some reasoning for why extra syntax is needed for explicitly shared private","date":"2018-08-15T18:51:25.670Z","type":"message"}
{"nick":"arkain","message":"Class hierarchies are the reason.","date":"2018-08-15T18:52:21.585Z","type":"message"}
{"nick":"ljharb","message":"go on","date":"2018-08-15T18:53:07.955Z","type":"message"}
{"nick":"ljharb","message":"assuming private fields land as-is, can you show me some code that illustrates your use case, and then show me example syntax that is needed to make it easier?","date":"2018-08-15T18:53:38.129Z","type":"message"}
{"nick":"arkain","message":"It is often the case that when writing them, some code from a class needs to be accessible to the subclasses. However, the developer may not want that logic to be openly accessible via the own properties of any such objects.","date":"2018-08-15T18:53:47.305Z","type":"message"}
{"nick":"ljharb","message":"arkain: it can already be accessible via a class instance method, which is on the prototype and not \"own\"","date":"2018-08-15T18:54:44.677Z","type":"message"}
{"nick":"arkain","message":"I can certainly give examples. I write these kind of things all the time.","date":"2018-08-15T18:54:52.117Z","type":"message"}
{"nick":"ljharb","message":"for example, `forEach` is not an own property of `[]`","date":"2018-08-15T18:54:58.765Z","type":"message"}
{"nick":"arkain","message":"nice catch. I need better wording there.","date":"2018-08-15T18:55:22.673Z","type":"message"}
{"nick":"ljharb","message":"regardless, there's no need to put the exposed code directly on anything","date":"2018-08-15T18:55:43.845Z","type":"message"}
{"nick":"ljharb","message":"the base class can have a static method, that takes an instance (of itself or a subclass) as an arg, and can do whatever it likes","date":"2018-08-15T18:55:59.291Z","type":"message"}
{"nick":"ljharb","message":"and it can use private fields to manage all that data","date":"2018-08-15T18:56:09.710Z","type":"message"}
{"nick":"arkain","message":"try \"... via the own properties the object or its prototype chain\"","date":"2018-08-15T18:56:12.707Z","type":"message"}
{"nick":"ljharb","message":"ok, that's \"a property\"","date":"2018-08-15T18:56:22.619Z","type":"message"}
{"nick":"arkain","message":"yeah. I gotta work on being more terse when thinking formally.","date":"2018-08-15T18:56:50.627Z","type":"message"}
{"nick":"ljharb","message":"i'd say think less formally, this is just basic JS terminology","date":"2018-08-15T18:57:04.507Z","type":"message"}
{"nick":"ljharb","message":"so like `class Foo { #id; static compareIDs(a, b) { return a.#id === b.#id; } }` - you can have `class Bar extends Foo { }` and then `Foo.compareIDs(new Foo(), new Bar())` and it will work just fine","date":"2018-08-15T18:57:24.476Z","type":"message"}
{"nick":"ljharb","message":"now the instances don't have a `compareIDs` property anywhere","date":"2018-08-15T18:57:37.761Z","type":"message"}
{"nick":"ljharb","message":"but the code is shared, and works down the entire class hierarchy","date":"2018-08-15T18:57:45.800Z","type":"message"}
{"nick":"arkain","message":"trying \"... via a property of the object or its constructor\"","date":"2018-08-15T18:58:38.899Z","type":"message"}
{"nick":"arkain","message":"I think that covers the whole range I'm considering.","date":"2018-08-15T18:59:20.264Z","type":"message"}
{"nick":"ljharb","message":"ok, so how about this:","date":"2018-08-15T18:59:27.160Z","type":"message"}
{"nick":"ljharb","message":"` export default class Foo { #id; static compareIDs(a, b) { return a.#id === b.#id; } }; const compare = Foo.compareIDs; export { compare } delete Foo.compareIDs;` - you can have `import Foo, { compareIDs } from './foo'; class Bar extends Foo { }` and then `compareIDs(new Foo(), new Bar())` and it will work just fine","date":"2018-08-15T19:00:14.609Z","type":"message"}
{"nick":"ljharb","message":"next constraint?","date":"2018-08-15T19:00:19.566Z","type":"message"}
{"nick":"ljharb","message":"(i messed up my import name there but the gist should be clear)","date":"2018-08-15T19:00:31.767Z","type":"message"}
{"nick":"arkain","message":"correcting... \"... need to be accessible only to the declaring object and sub-objects via prototype extension. ...\"","date":"2018-08-15T19:04:06.259Z","type":"message"}
{"nick":"arkain","message":".... baka.... \"prototype inheritance\". Still fighting myself.","date":"2018-08-15T19:05:34.847Z","type":"message"}
{"nick":"ljharb","message":"that's already the case above","date":"2018-08-15T19:06:47.598Z","type":"message"}
{"nick":"ljharb","message":"only a subclass will have the private field; it will throw on any other object.","date":"2018-08-15T19:06:59.566Z","type":"message"}
{"nick":"arkain","message":"not really. If it is, then the example you gave is a leak.","date":"2018-08-15T19:07:08.691Z","type":"message"}
{"nick":"ljharb","message":"an explicit intentional leak yes, which is permitted","date":"2018-08-15T19:07:20.260Z","type":"message"}
{"nick":"ljharb","message":"the compareIDs function was lexically defined inside Foo's class body, so it has access.","date":"2018-08-15T19:07:44.786Z","type":"message"}
{"nick":"arkain","message":"It fails in that compareIDs is not available on an instance of Foo","date":"2018-08-15T19:09:05.525Z","type":"message"}
{"nick":"arkain","message":"It's about the objects, not the factories that produce them.","date":"2018-08-15T19:09:47.787Z","type":"message"}
{"nick":"ljharb","message":"i'm confused, fails how","date":"2018-08-15T19:10:15.932Z","type":"message"}
{"nick":"ljharb","message":"the constructor is the factory, and you said \"not on the constructor\"","date":"2018-08-15T19:10:26.368Z","type":"message"}
{"nick":"ljharb","message":"so if it's about just the instances, then a static method is sufficient","date":"2018-08-15T19:10:42.431Z","type":"message"}
{"nick":"ljharb","message":"and if not, then extracting and removing the static method, as i showed above, is sufficient.","date":"2018-08-15T19:10:54.135Z","type":"message"}
{"nick":"arkain","message":"You've been giving me a static member. The point of a protected member is to be available on a instance of a class (or on an object instance regardless of factory in my proposal)","date":"2018-08-15T19:11:33.671Z","type":"message"}
{"nick":"ljharb","message":"right but that's not how JS works","date":"2018-08-15T19:12:47.031Z","type":"message"}
{"nick":"ljharb","message":"if it's on the instance, it's observable to everyone","date":"2018-08-15T19:12:51.646Z","type":"message"}
{"nick":"arkain","message":"So compareIDs should be accessible from within a method of Foo, and within a method of Bar since it inherits Foo.","date":"2018-08-15T19:12:59.633Z","type":"message"}
{"nick":"ljharb","message":"or else it's a private field, and it's not :-)","date":"2018-08-15T19:13:01.617Z","type":"message"}
{"nick":"ljharb","message":"ok so i think i understand what you want","date":"2018-08-15T19:13:06.058Z","type":"message"}
{"nick":"ljharb","message":"you want syntax like private fields, but that implicitly makes the fields accessible to subclasses","date":"2018-08-15T19:13:19.088Z","type":"message"}
{"nick":"arkain","message":"yes. That's the meaning of Protected.","date":"2018-08-15T19:13:43.487Z","type":"message"}
{"nick":"ljharb","message":"ie, `class Foo { #private; ##protected; /* both accessible here */ } class Bar extends Foo { /* only protected accessible here */ }`","date":"2018-08-15T19:14:00.313Z","type":"message"}
{"nick":"arkain","message":"Hides like private, shares with children","date":"2018-08-15T19:14:02.144Z","type":"message"}
{"nick":"aki_","date":"2018-08-15T19:14:18.558Z","type":"join"}
{"nick":"arkain","message":"exactly","date":"2018-08-15T19:14:19.179Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-08-15T19:14:24.988Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T19:14:28.016Z","type":"nick"}
{"nick":"ljharb","message":"to me that seems very confusing (unrelated to syntax); how would the author of Bar even know that field was available?","date":"2018-08-15T19:14:29.326Z","type":"message"}
{"nick":"arkain","message":"You can see an example of that in action","date":"2018-08-15T19:14:36.240Z","type":"message"}
{"nick":"arkain","message":"https://github.com/rdking/proposal-object-members/tree/master/POC","date":"2018-08-15T19:15:05.614Z","type":"message"}
{"nick":"arkain","message":"Look at example.js there","date":"2018-08-15T19:15:23.181Z","type":"message"}
{"nick":"arkain","message":"There are detailed tests in the \"tests\" directory.","date":"2018-08-15T19:15:56.338Z","type":"message"}
{"nick":"ljharb","message":"that's pretty confusing; do you have an example that uses syntax?","date":"2018-08-15T19:16:06.080Z","type":"message"}
{"nick":"ljharb","message":"ie, what would the code look like if your proposal landed","date":"2018-08-15T19:16:19.077Z","type":"message"}
{"nick":"arkain","message":"Would it help if I made a copy of example.js with appropriate syntax?","date":"2018-08-15T19:17:01.024Z","type":"message"}
{"nick":"arkain","message":"Give me a few minutes and I'll have it done.","date":"2018-08-15T19:17:51.747Z","type":"message"}
{"nick":"ljharb","message":"sure","date":"2018-08-15T19:18:50.528Z","type":"message"}
{"nick":"Guest12107","date":"2018-08-15T19:18:57.946Z","type":"join"}
{"nick":"Guest12107","reason":"Ping timeout: 244 seconds","date":"2018-08-15T19:25:21.624Z","type":"quit"}
{"nick":"arkain","message":"It's there now","date":"2018-08-15T19:30:54.155Z","type":"message"}
{"nick":"arkain","message":"example.ESNext.js","date":"2018-08-15T19:31:02.061Z","type":"message"}
{"nick":"Havvy","reason":"Read error: Connection reset by peer","date":"2018-08-15T19:33:59.680Z","type":"quit"}
{"nick":"jwalden","date":"2018-08-15T19:38:28.157Z","type":"join"}
{"nick":"arkain","message":"I just added the output of running the POC as \"example.output.txt\"","date":"2018-08-15T19:42:41.845Z","type":"message"}
{"nick":"Sousapro3","date":"2018-08-15T20:24:56.872Z","type":"join"}
{"nick":"Sousapro3","reason":"Remote host closed the connection","date":"2018-08-15T20:29:42.485Z","type":"quit"}
{"nick":"wget18","date":"2018-08-15T20:52:12.580Z","type":"join"}
{"nick":"wget18","reason":"Killed (Unit193 (Spam is not permitted on freenode.))","date":"2018-08-15T20:55:46.711Z","type":"quit"}
{"nick":"ljharb","message":"arkain: i get it, but i think it'd be super weird to have `this#.field3` work when there's no declaration for it lexically, and there's no way to determine it's there via reflection.","date":"2018-08-15T20:57:21.057Z","type":"message"}
{"nick":"arkain","message":"That's just how protected works","date":"2018-08-15T20:59:09.247Z","type":"message"}
{"nick":"ljharb","message":"sure","date":"2018-08-15T20:59:17.849Z","type":"message"}
{"nick":"ljharb","message":"but i find it weird","date":"2018-08-15T20:59:21.951Z","type":"message"}
{"nick":"ljharb","message":"so what's your motivating use case?","date":"2018-08-15T20:59:46.680Z","type":"message"}
{"nick":"ljharb","message":"where it's critical that the info not be on the public interface, but it's acceptable that anyone could subclass and get access to monkey with your protected fields","date":"2018-08-15T21:00:09.321Z","type":"message"}
{"nick":"arkain","message":"Object hierarchy libraries, especially UI type libraries. The notion of a UI \"widget\" often depends on being able to inherit customizable functionality from a superclass","date":"2018-08-15T21:01:28.462Z","type":"message"}
{"nick":"arkain","message":"That customizable functionality is defined by a protected API","date":"2018-08-15T21:01:54.609Z","type":"message"}
{"nick":"Havvy","date":"2018-08-15T21:02:08.796Z","type":"join"}
{"nick":"arkain","message":"The public API is what end-users manipulate.","date":"2018-08-15T21:02:15.057Z","type":"message"}
{"nick":"arkain","message":"In general, the use cases are identical to those found in other languages supporting the keyword.","date":"2018-08-15T21:02:58.346Z","type":"message"}
{"nick":"ljharb","message":"that's already achieved all over the place with an underscore, or with symbols, tho","date":"2018-08-15T21:03:00.327Z","type":"message"}
{"nick":"arkain","message":"The only problem is that developers are manipulating what should be a protected interface without it being very clear that they are doing so. '_' is little more than a hint, and Symbol isn't significantly different than `enumerable: false`","date":"2018-08-15T21:05:04.623Z","type":"message"}
{"nick":"TabAtkins","message":"Yeah, that's handled great by \"don't touch this\" convention. No need for the lexical hiding of `private`.","date":"2018-08-15T21:05:13.800Z","type":"message"}
{"nick":"arkain","message":"... when used like that.","date":"2018-08-15T21:05:19.893Z","type":"message"}
{"nick":"arkain","message":"Symbol's best use is for its unique value, for cases when you need a property name that's 100% certain not to be used by anything else.","date":"2018-08-15T21:06:25.897Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2018-08-15T21:20:34.734Z","type":"quit"}
{"nick":"akirose","date":"2018-08-15T21:21:22.790Z","type":"join"}
{"nick":"arkain","new_nick":"arkain_afk","date":"2018-08-15T21:39:03.142Z","type":"nick"}
{"nick":"mrBlaQ10","date":"2018-08-15T23:15:29.648Z","type":"join"}
{"nick":"mrBlaQ10","reason":"Remote host closed the connection","date":"2018-08-15T23:18:00.330Z","type":"quit"}
{"nick":"aki_","date":"2018-08-15T23:28:19.505Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-08-15T23:28:27.785Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-15T23:28:31.758Z","type":"nick"}
