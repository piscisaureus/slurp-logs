{"nick":"gibson042","date":"2019-03-15T00:27:51.281Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-03-15T00:39:24.203Z","type":"quit"}
{"nick":"aki_","date":"2019-03-15T00:46:19.548Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-03-15T00:47:07.117Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T00:47:07.460Z","type":"nick"}
{"nick":"cybai","date":"2019-03-15T01:01:30.993Z","type":"join"}
{"nick":"Domenic","message":"littledan: I would be against that; it ruins the ability to transparently refactor your work to take on async startup costs","date":"2019-03-15T01:39:35.901Z","type":"message"}
{"nick":"Domenic","message":"If you're willing to rewrite the calling module graph anyway then you can just refactor to put everything inside dynamic imports","date":"2019-03-15T01:40:00.773Z","type":"message"}
{"nick":"gibson042","message":"annevk: https://github.com/tc39/proposal-uniform-interchange-date-parsing is still active, I've just been short on time lately","date":"2019-03-15T01:44:17.646Z","type":"message"}
{"nick":"aki_","date":"2019-03-15T02:52:29.116Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-03-15T02:53:54.764Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T02:53:55.076Z","type":"nick"}
{"nick":"ljharb","message":"that transparent ability is the","date":"2019-03-15T02:58:38.438Z","type":"message"}
{"nick":"ljharb","message":"‚ÄúSpooky action at a distance‚Äù that i have major concerns with :-/","date":"2019-03-15T02:58:50.901Z","type":"message"}
{"nick":"devsnek","message":"littledan: along the same vein as domenic, you'd have to know if what you're importing is async or not, which is an annoying experience","date":"2019-03-15T03:01:53.928Z","type":"message"}
{"nick":"howdoi","date":"2019-03-15T03:22:45.553Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-03-15T03:24:32.758Z","type":"quit"}
{"nick":"ljharb","message":"devsnek: you‚Äôd get an early error about that tho","date":"2019-03-15T03:44:27.496Z","type":"message"}
{"nick":"ljharb","message":"it‚Äôd even be an autofixable lint rule","date":"2019-03-15T03:44:38.302Z","type":"message"}
{"nick":"devsnek","message":"ü§∑","date":"2019-03-15T03:45:28.053Z","type":"message"}
{"nick":"hellauer","reason":"Ping timeout: 252 seconds","date":"2019-03-15T03:50:51.182Z","type":"quit"}
{"nick":"hellauer","date":"2019-03-15T03:52:53.020Z","type":"join"}
{"nick":"hellauer","reason":"Quit: WeeChat 2.4","date":"2019-03-15T04:21:44.419Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-03-15T04:29:23.135Z","type":"quit"}
{"nick":"aki_","date":"2019-03-15T04:58:41.994Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-03-15T04:59:37.118Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T04:59:37.426Z","type":"nick"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-03-15T05:53:43.627Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-03-15T05:56:16.148Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-03-15T06:16:54.850Z","type":"quit"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-03-15T06:44:01.144Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-03-15T07:01:54.370Z","type":"join"}
{"nick":"aki_","date":"2019-03-15T07:05:15.698Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-03-15T07:06:03.015Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T07:06:03.462Z","type":"nick"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-03-15T07:46:04.171Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-03-15T07:47:00.286Z","type":"join"}
{"nick":"aki_","date":"2019-03-15T09:11:41.316Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-03-15T09:13:09.793Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T09:13:10.184Z","type":"nick"}
{"nick":"littledan","message":"ljharb: I thought `import await` would fix those exact spooky action a distance issues. Ultimately, the vitality is analogous to the virality of async/await itself","date":"2019-03-15T09:29:21.582Z","type":"message"}
{"nick":"littledan","message":"Domenic, devsnek: I can see this point abstractly, but isn't this just like async functions, which also require the caller to be adjusted to use a Promise rather than another value? We found it worth it to add async functions even though you could just use generators and Promises.","date":"2019-03-15T09:31:53.877Z","type":"message"}
{"nick":"littledan","message":"What I am missing is usage scenarios where you want to change a deep dependency like that. The current TLA explainer doesn't really have one concretely, making it hard to think about","date":"2019-03-15T09:32:41.031Z","type":"message"}
{"nick":"littledan","message":"I don't see what dynamic imports have to do with any of this, though; why would refactoring to those solve this problem?","date":"2019-03-15T09:33:43.521Z","type":"message"}
{"nick":"kpatticha","date":"2019-03-15T09:35:07.832Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-03-15T09:53:50.981Z","type":"quit"}
{"nick":"cybai","date":"2019-03-15T10:03:40.164Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 246 seconds","date":"2019-03-15T10:07:41.993Z","type":"quit"}
{"nick":"kpatticha","reason":"Ping timeout: 268 seconds","date":"2019-03-15T10:08:02.822Z","type":"quit"}
{"nick":"kpatticha","date":"2019-03-15T10:19:32.561Z","type":"join"}
{"nick":"obensour1","reason":"Ping timeout: 246 seconds","date":"2019-03-15T10:53:40.250Z","type":"quit"}
{"nick":"hellauer","date":"2019-03-15T11:01:21.365Z","type":"join"}
{"nick":"obensour1","date":"2019-03-15T11:08:20.980Z","type":"join"}
{"nick":"aki_","date":"2019-03-15T11:18:20.670Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-03-15T11:19:13.321Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T11:19:13.662Z","type":"nick"}
{"nick":"littledan","message":"s/vitality/virality/","date":"2019-03-15T11:31:02.600Z","type":"message"}
{"nick":"jmdyck","date":"2019-03-15T11:32:30.127Z","type":"join"}
{"nick":"Domenic","message":"littledan: consider a web component whose template you want to move to another file","date":"2019-03-15T12:01:14.652Z","type":"message"}
{"nick":"Domenic","message":"If you are going to change all call sites anyway you can use the import() + export default async antipattern the readme calls out.","date":"2019-03-15T12:01:43.425Z","type":"message"}
{"nick":"Domenic","message":"The whole point of top-level await is to avoid making changes to the caller. I would be opposed to the proposal if it required caller changes.","date":"2019-03-15T12:03:57.197Z","type":"message"}
{"nick":"cybai","date":"2019-03-15T12:22:28.893Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 272 seconds","date":"2019-03-15T12:27:14.752Z","type":"quit"}
{"nick":"cybai","date":"2019-03-15T12:49:35.879Z","type":"join"}
{"nick":"AtumT","date":"2019-03-15T12:53:31.294Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 272 seconds","date":"2019-03-15T12:54:28.752Z","type":"quit"}
{"nick":"cybai","date":"2019-03-15T12:57:23.861Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 268 seconds","date":"2019-03-15T13:01:56.714Z","type":"quit"}
{"nick":"gibson042","date":"2019-03-15T13:13:10.669Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 245 seconds","date":"2019-03-15T13:16:18.349Z","type":"quit"}
{"nick":"aki_","date":"2019-03-15T13:24:31.525Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-03-15T13:25:36.429Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T13:25:36.612Z","type":"nick"}
{"nick":"AtumT","date":"2019-03-15T14:01:16.310Z","type":"join"}
{"nick":"mgol","date":"2019-03-15T14:18:16.663Z","type":"join"}
{"nick":"cybai","date":"2019-03-15T14:43:09.437Z","type":"join"}
{"nick":"aki_","date":"2019-03-15T15:31:16.018Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-03-15T15:32:08.441Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T15:32:08.735Z","type":"nick"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-03-15T16:06:45.765Z","type":"quit"}
{"nick":"akirose","reason":"Quit: üëãüèª","date":"2019-03-15T16:28:17.224Z","type":"quit"}
{"nick":"akirose","date":"2019-03-15T16:29:40.124Z","type":"join"}
{"nick":"littledan","message":"Domenic, I think it's still more ergonomic than nothing. I don't quite understand that other case--why would you export the element rather than defining it (in the background than blocking module loading)?","date":"2019-03-15T16:33:23.123Z","type":"message"}
{"nick":"Domenic","message":"littledan: consider the example at https://github.com/tc39/proposal-top-level-await/issues/58#issuecomment-468749512","date":"2019-03-15T16:33:47.765Z","type":"message"}
{"nick":"Domenic","message":"Consider a \"before\" version which had `const template = .... long string here ...`","date":"2019-03-15T16:34:03.541Z","type":"message"}
{"nick":"Domenic","message":"You're saying I cannot switch to the version in the comment which loads the template from ./template-1.html without changing all my callers","date":"2019-03-15T16:34:22.635Z","type":"message"}
{"nick":"Domenic","message":"I don't think top-level await is worth moving forward as an ergonomics feature","date":"2019-03-15T16:34:32.880Z","type":"message"}
{"nick":"Domenic","message":"It is fundamentally an abstraction boundary feature","date":"2019-03-15T16:34:38.812Z","type":"message"}
{"nick":"Domenic","message":"wycats made this point in previous meetings","date":"2019-03-15T16:34:43.648Z","type":"message"}
{"nick":"Nimelrian","date":"2019-03-15T16:39:29.558Z","type":"join"}
{"nick":"littledan","message":"To be clear, I still think it makes sense to have both imports run in parallel","date":"2019-03-15T16:39:53.089Z","type":"message"}
{"nick":"devsnek","message":"`await import` does also imply some ordering","date":"2019-03-15T16:41:36.730Z","type":"message"}
{"nick":"Domenic","message":"+1 devsnek","date":"2019-03-15T16:41:59.793Z","type":"message"}
{"nick":"Domenic","message":"littledan: I was just using that code sample","date":"2019-03-15T16:42:03.905Z","type":"message"}
{"nick":"Domenic","message":"Let me create a separate one to be clearer","date":"2019-03-15T16:42:07.759Z","type":"message"}
{"nick":"cybai","date":"2019-03-15T16:46:17.690Z","type":"join"}
{"nick":"devsnek","message":"heh the current proposal looks a lot like my implementation of top level await in engine262","date":"2019-03-15T16:46:36.725Z","type":"message"}
{"nick":"cybai","reason":"Ping timeout: 255 seconds","date":"2019-03-15T16:51:10.659Z","type":"quit"}
{"nick":"Domenic","message":"https://github.com/tc39/proposal-top-level-await/pull/60#issuecomment-473362344","date":"2019-03-15T16:52:18.548Z","type":"message"}
{"nick":"littledan","message":"devsnek: Maybe, but I don't think anyone is proposing that","date":"2019-03-15T16:55:19.616Z","type":"message"}
{"nick":"devsnek","message":"i just mean from a design standpoint","date":"2019-03-15T16:55:32.338Z","type":"message"}
{"nick":"devsnek","message":"i didn't assume you were proposing such a thing","date":"2019-03-15T16:55:42.338Z","type":"message"}
{"nick":"littledan","message":"Right, well, I was hoping that `import await` would make it feel like the whole awaiting action is hoisted to the top and done in parallel, just like the fetch for the `import`.","date":"2019-03-15T16:57:33.165Z","type":"message"}
{"nick":"littledan","message":"devsnek: Do you think it achieves that?","date":"2019-03-15T16:57:47.346Z","type":"message"}
{"nick":"devsnek","message":"i am unsure","date":"2019-03-15T16:58:10.868Z","type":"message"}
{"nick":"devsnek","message":"domenic gave me an idea though","date":"2019-03-15T16:58:54.594Z","type":"message"}
{"nick":"devsnek","message":"if all import statements are import await statements","date":"2019-03-15T16:59:09.692Z","type":"message"}
{"nick":"littledan","message":"well, that's basically what you get from #49 or E57","date":"2019-03-15T17:00:46.157Z","type":"message"}
{"nick":"littledan","message":"#57","date":"2019-03-15T17:00:51.258Z","type":"message"}
{"nick":"littledan","message":"the idea of this PR is that import statements stay import statements","date":"2019-03-15T17:01:04.728Z","type":"message"}
{"nick":"kpatticha","reason":"Quit: Leaving","date":"2019-03-15T17:11:19.418Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶","date":"2019-03-15T17:13:33.707Z","type":"quit"}
{"nick":"ljharb","message":"littledan: `import await` fixes it for the modules that add TLA; but it just moves it to the one that adds `import await`","date":"2019-03-15T17:16:14.521Z","type":"message"}
{"nick":"ljharb","message":"to be specific, i don‚Äôt think adding TLA *should* be transparent. Maybe it should be viral, maybe not, but making a sync thing async is always a breaking change so far.","date":"2019-03-15T17:19:10.831Z","type":"message"}
{"nick":"obensour1","reason":"Ping timeout: 272 seconds","date":"2019-03-15T17:23:38.893Z","type":"quit"}
{"nick":"hellauer","reason":"Quit: WeeChat 2.4","date":"2019-03-15T17:35:56.549Z","type":"quit"}
{"nick":"obensour1","date":"2019-03-15T17:37:19.971Z","type":"join"}
{"nick":"littledan","message":"ljharb: I don't understand what you mean by moving it. In particular, if you import a module that contains an import await, it's an error (at linking time)","date":"2019-03-15T17:43:30.629Z","type":"message"}
{"nick":"littledan","message":"so, it remains a breaking change","date":"2019-03-15T17:43:42.402Z","type":"message"}
{"nick":"littledan","message":"it's just like async functions: you need an await all the way up the callstack, if you want to get the value","date":"2019-03-15T17:44:05.611Z","type":"message"}
{"nick":"ljharb","message":"right. But if i import a module that suddenly adds import await, that‚Äôs a breaking change too","date":"2019-03-15T17:44:15.186Z","type":"message"}
{"nick":"ljharb","message":"and in the case of promises, you don‚Äôt - you could mutate a binding when the promise resolves without having to export a promise","date":"2019-03-15T17:44:32.989Z","type":"message"}
{"nick":"ljharb","message":"or you could dispatch to different behavior, etc","date":"2019-03-15T17:44:40.100Z","type":"message"}
{"nick":"ljharb","message":"the actual interface doesn‚Äôt have to change","date":"2019-03-15T17:44:47.717Z","type":"message"}
{"nick":"ljharb","message":"atm there‚Äôs no way to consume a module using TLA that encapsulates that decision from *your* users.","date":"2019-03-15T17:45:11.855Z","type":"message"}
{"nick":"devsnek","message":"i've kinda imagined that TLA is more useful at the entry rather than dependencies","date":"2019-03-15T17:45:22.077Z","type":"message"}
{"nick":"ljharb","message":"hm, i guess dynamic import","date":"2019-03-15T17:45:23.518Z","type":"message"}
{"nick":"Domenic","message":"At the moment consuming a module that uses TLA is ENTIRELY encapsulated from your users","date":"2019-03-15T17:45:33.257Z","type":"message"}
{"nick":"Domenic","message":"The change to use `await import` would break that, which is why I'm objecting ot it","date":"2019-03-15T17:45:42.392Z","type":"message"}
{"nick":"ljharb","message":"yes, my preference would be to only ever allow it in entry points, but there‚Äôs no way to spec that","date":"2019-03-15T17:45:42.935Z","type":"message"}
{"nick":"ljharb","message":"Domenic: using TLA changes ordering and timing semantics tho","date":"2019-03-15T17:45:55.102Z","type":"message"}
{"nick":"ljharb","message":"doesn‚Äôt it?","date":"2019-03-15T17:45:58.394Z","type":"message"}
{"nick":"Domenic","message":"Yes, OK, \"ENTIRELY\" was over-strong","date":"2019-03-15T17:46:03.101Z","type":"message"}
{"nick":"devsnek","message":"\"it is an early error if module includes top level await and export\"","date":"2019-03-15T17:46:04.377Z","type":"message"}
{"nick":"Domenic","message":"If you don't use tick-counting trickery then it's unobservable","date":"2019-03-15T17:46:12.493Z","type":"message"}
{"nick":"ljharb","message":"thus it‚Äôs still a breaking change, just a silent one","date":"2019-03-15T17:46:14.580Z","type":"message"}
{"nick":"ljharb","message":"if it is ever observable then it‚Äôs observable imo","date":"2019-03-15T17:46:20.378Z","type":"message"}
{"nick":"Domenic","message":"Sure. It's an observable change","date":"2019-03-15T17:46:28.046Z","type":"message"}
{"nick":"Domenic","message":"Just one that's highly encapsulated","date":"2019-03-15T17:46:31.917Z","type":"message"}
{"nick":"ljharb","message":"so i either want it to be entirely unobservable, trickery or not, or, i want it to be explicitly and loudly a breaking change","date":"2019-03-15T17:46:45.938Z","type":"message"}
{"nick":"ljharb","message":"the middle is where confusion happens","date":"2019-03-15T17:46:53.260Z","type":"message"}
{"nick":"Domenic","message":"OK. Then I don't think this feature will move forward.","date":"2019-03-15T17:46:53.790Z","type":"message"}
{"nick":"ljharb","message":"what would the downstream consequences of that be?","date":"2019-03-15T17:47:15.953Z","type":"message"}
{"nick":"ljharb","message":"in html, node, wasm, etc","date":"2019-03-15T17:47:32.539Z","type":"message"}
{"nick":"devsnek","message":"i wouldn't agree that the number of ticks something takes is grounds to call it breaking","date":"2019-03-15T17:47:36.420Z","type":"message"}
{"nick":"ljharb","message":"devsnek: when it goes from 1 to > 1, no, but when it goes from effectively 0 to > 0, yes","date":"2019-03-15T17:48:03.063Z","type":"message"}
{"nick":"devsnek","message":"and i don't think anything except js itself wants async during evaluation phase","date":"2019-03-15T17:48:16.917Z","type":"message"}
{"nick":"devsnek","message":"actually scratch that i know nothing about html imports","date":"2019-03-15T17:48:32.637Z","type":"message"}
{"nick":"ljharb","message":"so that‚Äôs my question. Before declaring a feature deadlocked, I‚Äôd like to understand what bad things could happen without it","date":"2019-03-15T17:48:59.894Z","type":"message"}
{"nick":"ljharb","message":"like E.g. if weakrefs died, wasm would ship them anyways, and then js would be forced to use wasm‚Äôs version","date":"2019-03-15T17:49:26.877Z","type":"message"}
{"nick":"ljharb","message":"what happens downstream without TLA, looking far forward?","date":"2019-03-15T17:49:39.990Z","type":"message"}
{"nick":"devsnek","message":"IIFEs continue to exist","date":"2019-03-15T17:49:50.824Z","type":"message"}
{"nick":"devsnek","message":"it looks like importing an html returns that html as an element","date":"2019-03-15T17:51:27.528Z","type":"message"}
{"nick":"Domenic","message":"We're still working moving the web from 0 ticks to >0 ticks","date":"2019-03-15T17:53:18.274Z","type":"message"}
{"nick":"devsnek","message":"looks like importing html isn't hurt by the lack of async either","date":"2019-03-15T17:54:19.377Z","type":"message"}
{"nick":"Domenic","message":"I mean, importing HTML will definitely be async","date":"2019-03-15T17:55:18.226Z","type":"message"}
{"nick":"Domenic","message":"So I guess people could get around lack of top-level await by wrapping their .mjs files in .html files","date":"2019-03-15T17:55:34.831Z","type":"message"}
{"nick":"devsnek","message":"i mean there's nothing imperative about html modules that require fancy async during the evaluation phase","date":"2019-03-15T17:57:04.763Z","type":"message"}
{"nick":"devsnek","message":"not that they should be loaded synchronously :P","date":"2019-03-15T17:57:17.707Z","type":"message"}
{"nick":"annevk","action":"whispers .mhtml*","date":"2019-03-15T17:58:08.236Z","type":"action"}
{"nick":"Domenic","message":"Well they can include <script type=\"module\">","date":"2019-03-15T17:58:12.457Z","type":"message"}
{"nick":"Domenic","message":"Which is loaded async","date":"2019-03-15T17:58:16.269Z","type":"message"}
{"nick":"devsnek","message":"i'd assume that's like having an import()","date":"2019-03-15T17:58:32.563Z","type":"message"}
{"nick":"devsnek","message":"new entry point","date":"2019-03-15T17:58:34.488Z","type":"message"}
{"nick":"Domenic","message":"Nah that's not the current proposal","date":"2019-03-15T17:58:44.387Z","type":"message"}
{"nick":"Domenic","message":"They re-export any <script>s","date":"2019-03-15T17:58:48.830Z","type":"message"}
{"nick":"Domenic","message":"Or maybe just the first one","date":"2019-03-15T17:58:59.286Z","type":"message"}
{"nick":"devsnek","message":"interesting","date":"2019-03-15T17:59:11.099Z","type":"message"}
{"nick":"devsnek","message":"that still fits within the current evaluation rules though right?","date":"2019-03-15T17:59:30.881Z","type":"message"}
{"nick":"Domenic","message":"All of them, it looks like","date":"2019-03-15T17:59:32.845Z","type":"message"}
{"nick":"Domenic","message":"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/html-module-spec-changes.md","date":"2019-03-15T17:59:33.528Z","type":"message"}
{"nick":"Domenic","message":"I mean HTML just evaluates modules on its own","date":"2019-03-15T18:00:14.046Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-03-15T18:00:20.827Z","type":"message"}
{"nick":"Domenic","message":"It currently follows ES's everything-is-sync all-one-graph evaluation but that's changing","date":"2019-03-15T18:00:30.045Z","type":"message"}
{"nick":"mgol","date":"2019-03-15T18:06:21.694Z","type":"join"}
{"nick":"aki_","date":"2019-03-15T18:36:16.714Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-03-15T18:37:07.337Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T18:37:07.518Z","type":"nick"}
{"nick":"hellauer","date":"2019-03-15T18:37:17.588Z","type":"join"}
{"nick":"hellauer","reason":"Ping timeout: 252 seconds","date":"2019-03-15T18:44:39.566Z","type":"quit"}
{"nick":"hellauer","date":"2019-03-15T18:45:49.104Z","type":"join"}
{"nick":"cybai","date":"2019-03-15T19:01:26.304Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-03-15T19:05:52.264Z","type":"quit"}
{"nick":"jwalden","date":"2019-03-15T19:33:21.271Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-03-15T19:59:12.041Z","type":"quit"}
{"nick":"aki_","date":"2019-03-15T20:42:29.993Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 255 seconds","date":"2019-03-15T20:43:49.651Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T20:43:49.941Z","type":"nick"}
{"nick":"jmdyck1","date":"2019-03-15T21:58:13.628Z","type":"join"}
{"nick":"jmdyck","reason":"Ping timeout: 245 seconds","date":"2019-03-15T21:58:47.247Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-03-15T22:03:39.539Z","type":"quit"}
{"nick":"littledan","message":"ljharb, WebAssembly modules also need to be async, as mentioned in the TLA explainer","date":"2019-03-15T22:07:09.389Z","type":"message"}
{"nick":"littledan","message":"Domenic: Where can I find discussion about why HTML modules are async? I missed that.","date":"2019-03-15T22:07:22.451Z","type":"message"}
{"nick":"littledan","message":"ljharb: I still don't understand why `import await` wouldn't meet your goals. I think it's \"explicitly and loudly a breaking change\", as you put it.","date":"2019-03-15T22:08:34.028Z","type":"message"}
{"nick":"devsnek","message":"littledan: why does wasm need async?","date":"2019-03-15T22:08:34.456Z","type":"message"}
{"nick":"devsnek","message":"it doesn't even *do* anything unless you have a start point","date":"2019-03-15T22:08:56.400Z","type":"message"}
{"nick":"littledan","message":"https://github.com/tc39/proposal-top-level-await#webassembly-modules","date":"2019-03-15T22:08:56.867Z","type":"message"}
{"nick":"devsnek","message":"and if you have a start point","date":"2019-03-15T22:09:15.087Z","type":"message"}
{"nick":"littledan","message":"it might have to do compilation during the Evaluate phase, due to what the imports are","date":"2019-03-15T22:09:17.466Z","type":"message"}
{"nick":"devsnek","message":"its not like you can await inside wasm","date":"2019-03-15T22:09:26.875Z","type":"message"}
{"nick":"littledan","message":"these things are hard to reason about from first principles but come from real implementations","date":"2019-03-15T22:09:32.170Z","type":"message"}
{"nick":"devsnek","message":"how is instantiation not part of the linking phase","date":"2019-03-15T22:10:32.939Z","type":"message"}
{"nick":"Nimelrian","reason":"Ping timeout: 252 seconds","date":"2019-03-15T22:11:27.571Z","type":"quit"}
{"nick":"littledan","message":"See a detailed explanation in https://github.com/WebAssembly/esm-integration/tree/master/proposals/esm-integration","date":"2019-03-15T22:11:32.057Z","type":"message"}
{"nick":"devsnek","message":"is this because of \"From HTML, it‚Äôs not observable when parse a WebAssembly module begins, so any work perfomed in compilation may be performed off-thread.\"?","date":"2019-03-15T22:11:32.228Z","type":"message"}
{"nick":"devsnek","message":"reading a file is async too, but we can still export things from source text","date":"2019-03-15T22:12:11.078Z","type":"message"}
{"nick":"littledan","message":"Some compilation work might happen when parsing a WebAssembly module (nothing happens in the linking phase), but some other work might be needed once the imports are known","date":"2019-03-15T22:12:15.286Z","type":"message"}
{"nick":"devsnek","message":"this causes me immense confusion","date":"2019-03-15T22:12:32.293Z","type":"message"}
{"nick":"littledan","message":"in particular, some implementations have multiple types of underlying memory, and need to recompile due to that","date":"2019-03-15T22:12:34.233Z","type":"message"}
{"nick":"littledan","message":"if you import a memory","date":"2019-03-15T22:12:44.222Z","type":"message"}
{"nick":"devsnek","message":"that sounds like it would break the js api","date":"2019-03-15T22:13:07.337Z","type":"message"}
{"nick":"littledan","message":"well, it doesn't, it's just that the JS API isn't very useful...","date":"2019-03-15T22:13:19.510Z","type":"message"}
{"nick":"littledan","message":"you should only use instantiateStreaming for this reason","date":"2019-03-15T22:13:25.922Z","type":"message"}
{"nick":"littledan","message":"probably the Wasm JS API should've been designed very differently, but it's a little too late","date":"2019-03-15T22:13:40.890Z","type":"message"}
{"nick":"littledan","message":"the API just forces compilation work to happen on the main thread when you hold it wrong. Wasm modules will not compile on the main thread.","date":"2019-03-15T22:14:15.406Z","type":"message"}
{"nick":"littledan","message":"the whole point of Wasm/ESM integration is to make the right way easy","date":"2019-03-15T22:14:34.528Z","type":"message"}
{"nick":"devsnek","message":"you can use instantiateStreaming in a module loader today right now","date":"2019-03-15T22:14:36.271Z","type":"message"}
{"nick":"littledan","message":"ype","date":"2019-03-15T22:14:41.849Z","type":"message"}
{"nick":"littledan","message":"yep","date":"2019-03-15T22:14:43.569Z","type":"message"}
{"nick":"devsnek","message":"not that its possible to easily test with cuz node refuses to merge any instantiateStreaming apis","date":"2019-03-15T22:15:23.090Z","type":"message"}
{"nick":"devsnek","message":"but locally i've built all this already which is why i'm confused","date":"2019-03-15T22:15:35.353Z","type":"message"}
{"nick":"littledan","message":"I mean, if you're testing it, the JS API \"just works\". It just might do compilation on the main thread. And these effects are engine-specific--JSC is the one which motivated this current issue.","date":"2019-03-15T22:16:27.152Z","type":"message"}
{"nick":"devsnek","message":"are you saying that instantiation shouldn't happen during linking?","date":"2019-03-15T22:17:11.607Z","type":"message"}
{"nick":"littledan","message":"Anyway, between HTML and WebAssembly, I think we really need modules to be able to be asynchronous. I wouldn't like to see more HTML willful violations governing things here, the way they do with the job/microtask queue; I'd like to find some sort of clean layering. But if the WebAssembly \"do it anyway\" case is motivating for you, that's sort of the risk here.","date":"2019-03-15T22:18:19.112Z","type":"message"}
{"nick":"devsnek","message":"can you give me an example of a wasm module that demonstrates the need for async","date":"2019-03-15T22:20:04.545Z","type":"message"}
{"nick":"AtumT_","date":"2019-03-15T22:24:59.934Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 245 seconds","date":"2019-03-15T22:25:03.344Z","type":"quit"}
{"nick":"littledan","message":"devsnek: No, because any of them may need to do compilation during instantiation. Please read the documents I linked which explain this in detail","date":"2019-03-15T22:33:47.304Z","type":"message"}
{"nick":"devsnek","message":"i am seemingly missing the why from these documents","date":"2019-03-15T22:35:56.923Z","type":"message"}
{"nick":"devsnek","message":"littledan: is this just that you want to allow recompilation to happen off thread?","date":"2019-03-15T22:41:23.021Z","type":"message"}
{"nick":"littledan","message":"yes","date":"2019-03-15T22:41:32.464Z","type":"message"}
{"nick":"littledan","message":"Seems like you understand; I'm wondering if you have ideas for how the documents could be more clear","date":"2019-03-15T22:41:53.002Z","type":"message"}
{"nick":"devsnek","message":"what's the difference between my code needing to wait for something because it blocks vs needing to wait for something because its async","date":"2019-03-15T22:43:19.030Z","type":"message"}
{"nick":"devsnek","message":"like within js code it makes sense to move things to the loop so you can keep going with other things, but your module graph has to wait either way","date":"2019-03-15T22:44:37.449Z","type":"message"}
{"nick":"aki_","date":"2019-03-15T22:49:08.250Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-03-15T22:50:00.133Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-03-15T22:50:00.430Z","type":"nick"}
{"nick":"devsnek","message":"littledan: sorry to answer your question, i'd say the word \"depend\" is the wrong word, i was trying to figure out why it wouldn't be possible to add wasm modules without async when the actual situation was that it was just a bonus for performance","date":"2019-03-15T23:01:12.187Z","type":"message"}
{"nick":"littledan","message":"exactly, but this performance bonus is an architectural thing. If we make them sync now, it will be hard to move compilation into the background in the future.","date":"2019-03-15T23:01:48.391Z","type":"message"}
{"nick":"devsnek","message":"littledan: is the overhead of wasm optimization greater than the overhead of js optimization","date":"2019-03-15T23:04:17.502Z","type":"message"}
{"nick":"devsnek","message":"just as a curiosity","date":"2019-03-15T23:04:25.504Z","type":"message"}
{"nick":"littledan","message":"devsnek: Well, JS parsing and bytecode generation can be done during ParseModule, which can be done in the background, since modules are defer or async","date":"2019-03-15T23:05:56.078Z","type":"message"}
{"nick":"devsnek","message":"an engine may need to readjust the bytecode depending on the values of imports","date":"2019-03-15T23:06:31.648Z","type":"message"}
{"nick":"littledan","message":"Often, Wasm modules are extremely large, making them take a while to load up. That's why engines have been investing in baseline compilers.","date":"2019-03-15T23:06:42.666Z","type":"message"}
{"nick":"littledan","message":"I don't think this comes up in JS the same as it does in Wasm","date":"2019-03-15T23:06:55.785Z","type":"message"}
{"nick":"devsnek","message":"alright","date":"2019-03-15T23:07:18.341Z","type":"message"}
