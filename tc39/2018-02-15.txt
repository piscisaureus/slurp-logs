{"nick":"keith_miller","date":"2018-02-15T00:02:47.727Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 255 seconds","date":"2018-02-15T00:06:26.832Z","type":"quit"}
{"nick":"jwalden","reason":"Ping timeout: 252 seconds","date":"2018-02-15T00:34:10.682Z","type":"quit"}
{"nick":"jwalden","date":"2018-02-15T00:39:33.725Z","type":"join"}
{"nick":"srl295","date":"2018-02-15T01:28:03.771Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2018-02-15T01:41:20.925Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: back later","date":"2018-02-15T02:04:22.024Z","type":"quit"}
{"nick":"jmdyck","message":"bterlson: ok, my commit is ready to go once you merge async-iter","date":"2018-02-15T02:21:03.018Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-15T02:51:45.633Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-02-15T04:52:54.530Z","type":"quit"}
{"nick":"jwalden","date":"2018-02-15T05:07:54.398Z","type":"join"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2018-02-15T05:34:10.849Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-15T05:50:56.012Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T05:51:22.447Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-15T05:55:35.640Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 260 seconds","date":"2018-02-15T05:57:02.200Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: back later","date":"2018-02-15T06:01:10.852Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T06:26:35.550Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 256 seconds","date":"2018-02-15T06:30:53.556Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T06:40:47.678Z","type":"join"}
{"nick":"jwalden","date":"2018-02-15T06:49:07.772Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 252 seconds","date":"2018-02-15T06:49:16.682Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T07:15:36.721Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-15T07:19:57.718Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T07:28:41.827Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 255 seconds","date":"2018-02-15T07:33:17.819Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T08:25:47.778Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 268 seconds","date":"2018-02-15T08:30:24.693Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-15T08:57:56.807Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-02-15T09:02:27.968Z","type":"quit"}
{"nick":"STRML","reason":"Ping timeout: 256 seconds","date":"2018-02-15T09:03:07.437Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-15T09:05:55.890Z","type":"join"}
{"nick":"STRML","date":"2018-02-15T09:07:31.961Z","type":"join"}
{"nick":"boaz","reason":"Ping timeout: 248 seconds","date":"2018-02-15T09:18:55.816Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T09:29:29.379Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 260 seconds","date":"2018-02-15T09:32:24.874Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-15T09:32:32.495Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 265 seconds","date":"2018-02-15T09:36:16.392Z","type":"quit"}
{"nick":"gskachkov","reason":"Quit: gskachkov","date":"2018-02-15T09:51:57.339Z","type":"quit"}
{"nick":"gskachkov","date":"2018-02-15T09:56:03.172Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-15T10:00:21.415Z","type":"quit"}
{"nick":"AtumT","date":"2018-02-15T10:06:14.392Z","type":"join"}
{"nick":"caridy","date":"2018-02-15T10:36:39.224Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-15T10:40:48.181Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T11:01:50.263Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 255 seconds","date":"2018-02-15T11:06:26.181Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T11:11:40.790Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 276 seconds","date":"2018-02-15T11:16:26.800Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-02-15T11:25:11.570Z","type":"quit"}
{"nick":"mylesborins","date":"2018-02-15T11:25:42.253Z","type":"join"}
{"nick":"jwalden","reason":"Quit: g'morning","date":"2018-02-15T12:18:29.215Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T12:23:17.689Z","type":"join"}
{"nick":"jschoi","message":"“Static semantic rules that depend upon substructure generally do not look into function definitions.” The `Contains` Static Semantic Rule is overridden by function/method definitions to hide most their grammatical symbols. Let’s say a proposal would add a new grammatical symbol. Let’s also say that it is also desired, for early-error purposes, to statically determine whether that symbol was contained even in","date":"2018-02-15T12:25:03.095Z","type":"message"}
{"nick":"jschoi","message":"function definitions. In this case, would it be okay for the proposal to edit the `Contains` algorithms for function/method definitions, to add an exception for that new grammatical symbol? Or would doing so be somehow frowned upon?","date":"2018-02-15T12:25:03.279Z","type":"message"}
{"nick":"jschoi","message":"Also, “should ‘Static Semantic Rule’ be capitalized? The algorithm convention section does so, but that informative note on Contains for method/function definitions does not capitalize it.","date":"2018-02-15T12:27:12.955Z","type":"message"}
{"nick":"caridy","reason":"Ping timeout: 256 seconds","date":"2018-02-15T12:28:08.717Z","type":"quit"}
{"nick":"jmdyck","date":"2018-02-15T12:34:06.726Z","type":"join"}
{"nick":"jschoi","message":"One more question: Is there a particular reason why `this`’s runtime semantics are isolated into a `ResolveThisBinding` abstract operation,","date":"2018-02-15T13:02:40.917Z","type":"message"}
{"nick":"jschoi","message":"instead of being inlined into `this`’s section for runtime semantics?","date":"2018-02-15T13:03:10.299Z","type":"message"}
{"nick":"jschoi","message":"Doesn’t look like `ResolveThisBinding` is used anywhere else.","date":"2018-02-15T13:03:29.704Z","type":"message"}
{"nick":"jmdyck","message":"jschoi: re Contains: is there anything that would stop the containment-search for this new symbol?","date":"2018-02-15T13:25:41.604Z","type":"message"}
{"nick":"jmdyck","message":"re capitalization: only the first 2 references use title-case, so you should probably use normal case.","date":"2018-02-15T13:34:27.646Z","type":"message"}
{"nick":"caridy","date":"2018-02-15T13:35:48.783Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 268 seconds","date":"2018-02-15T13:40:35.703Z","type":"quit"}
{"nick":"jmdyck","message":"re ResolveThisBinding: for a while, it was called from more than one place, so having it separated out did make sense.","date":"2018-02-15T13:41:02.756Z","type":"message"}
{"nick":"caridy","date":"2018-02-15T13:42:37.209Z","type":"join"}
{"nick":"jschoi","message":"jmdyck: [capitalization, ResolveThisBinding] Thanks! [Contains] Yes, certain syntax structures would stop the containment search for this symbol (hypothetically call it `#`), which would be a new non-identifier that is lexically bound by those syntax structures.","date":"2018-02-15T13:45:48.546Z","type":"message"}
{"nick":"jschoi","message":"I need to statically detect, for any given syntactic structure, whether the outer lexical context’s `#` is used anywhere within that syntactic structure, except where `#` is shadowed by an inner `#`-binding syntactic structure. I could use Contains directly, or I could create a new static semantic rule and not mess with Contains.","date":"2018-02-15T13:45:51.086Z","type":"message"}
{"nick":"caridy","reason":"Ping timeout: 260 seconds","date":"2018-02-15T13:47:12.205Z","type":"quit"}
{"nick":"jschoi","message":"Background: This is for a proposed “smart pipe operator” `1 |> # + 3`, such that the `1` LHS is first evaluated, then its value is bound to `#` which is lexically scoped only within the RHS expression `# + 3`. The RHS is then evaluated `1 + 3`, and that value is the result of the operation.","date":"2018-02-15T13:47:16.588Z","type":"message"}
{"nick":"jschoi","message":"ljharb wants a degenerate case, `1 |> 3`, to be statically invalid, because it’s useless (always evaluates to `3`) and almost certainly not what the developer intended.","date":"2018-02-15T13:48:56.322Z","type":"message"}
{"nick":"jmdyck","message":"my guess would be, don't mess with Contains, but it'd be the editors' call.","date":"2018-02-15T13:49:57.503Z","type":"message"}
{"nick":"jschoi","message":"This pipe operator is left associative, so that `5 |> # - 2 |> # - 3` is `(5 - 2) - 3)`. But in the current proposal, RHS-nested pipelines are also permitted, such as `5 |> (# - 2 |> - + 3)`; this is actually equivalent to the left-associative version.","date":"2018-02-15T13:50:58.528Z","type":"message"}
{"nick":"jschoi","message":"…That last code was supposed to be `5 |> (# - 2 |> # - 3)`.","date":"2018-02-15T13:51:18.524Z","type":"message"}
{"nick":"jschoi","message":"Anyways, they’re equivalent. The RHS-nested version is such that the `#` in `# - 2` refers to `# - 2`’s outer `#`, which will be `5`. This is because the `# - 2` in `# - 2 |> # - 3` is on the pipe operation’s LHS, whose `#` comes from its outer scope (the outer pipe operation).","date":"2018-02-15T13:52:49.778Z","type":"message"}
{"nick":"jschoi","message":"Okay.","date":"2018-02-15T13:53:01.750Z","type":"message"}
{"nick":"jschoi","message":"So I should make a new static semantic rule.","date":"2018-02-15T13:53:10.297Z","type":"message"}
{"nick":"jschoi","message":"So I want `5 |> (# - 2 |> 3)` to *also* be an error, as a natural extrapolation of ljharb’s desired static rejection. It too is a degenerate case.","date":"2018-02-15T13:54:20.366Z","type":"message"}
{"nick":"jschoi","message":"But I also would want it to work with inner functions.","date":"2018-02-15T13:54:38.241Z","type":"message"}
{"nick":"jschoi","message":"5 |> function () { 3 } should also be a static error.","date":"2018-02-15T13:55:17.850Z","type":"message"}
{"nick":"jschoi","message":"`5 |> function () { 3 }` also never uses the LHS value.","date":"2018-02-15T13:55:40.644Z","type":"message"}
{"nick":"jschoi","message":"So I need to be able to make this new static semantic rule also be able to detect containment of `#` within function definitions.","date":"2018-02-15T13:56:02.794Z","type":"message"}
{"nick":"jschoi","message":"I think this is actually quite simple, but I just want to know whether I should leave `Contains`’s algorithms for function definitions completely alone, even for this new symbol `#`.","date":"2018-02-15T13:56:37.603Z","type":"message"}
{"nick":"jschoi","message":"I’ll go with No, and see how far I can get.","date":"2018-02-15T13:57:28.633Z","type":"message"}
{"nick":"jschoi","message":"Thanks!","date":"2018-02-15T13:57:31.186Z","type":"message"}
{"nick":"bradleymeck","date":"2018-02-15T14:09:28.727Z","type":"join"}
{"nick":"caridy","date":"2018-02-15T14:31:04.654Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-15T14:35:10.659Z","type":"quit"}
{"nick":"caridy","date":"2018-02-15T14:45:22.910Z","type":"join"}
{"nick":"jmdyck","message":"so `5 |> function () { # + 3 }` would be valid?","date":"2018-02-15T14:45:55.277Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-15T14:55:03.088Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-15T15:18:07.897Z","type":"join"}
{"nick":"gskachkov","reason":"Ping timeout: 255 seconds","date":"2018-02-15T15:48:08.167Z","type":"quit"}
{"nick":"jschoi","message":"Yes.","date":"2018-02-15T15:50:58.380Z","type":"message"}
{"nick":"jschoi","message":"I’m currently making a separate “usesOuterTopic” static semantic rule with a special case for function/method definitions.","date":"2018-02-15T15:52:54.475Z","type":"message"}
{"nick":"jschoi","message":"Where “topic” refers to the topic-reference symbol `#`.","date":"2018-02-15T15:53:41.083Z","type":"message"}
