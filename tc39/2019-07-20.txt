{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T00:05:33.178Z","type":"quit"}
{"nick":"drousso","reason":"Ping timeout: 250 seconds","date":"2019-07-20T00:20:33.674Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-07-20T00:24:42.377Z","type":"quit"}
{"nick":"keith_miller","date":"2019-07-20T00:36:27.782Z","type":"join"}
{"nick":"itamarok","date":"2019-07-20T00:49:57.267Z","type":"join"}
{"nick":"jorydotcom","date":"2019-07-20T00:50:36.624Z","type":"join"}
{"nick":"itamarok","reason":"Ping timeout: 268 seconds","date":"2019-07-20T00:54:47.720Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T00:58:01.529Z","type":"quit"}
{"nick":"devsnek","message":"there's no example of how to implement evaluating generic module X when you're dynamic importing","date":"2019-07-20T00:59:24.081Z","type":"message"}
{"nick":"devsnek","message":"shouldn't there be like a `HostEnsureModuleEvaluated(moduleRecord)` that the thing would call or something","date":"2019-07-20T00:59:55.497Z","type":"message"}
{"nick":"devsnek","message":"and like what do i do if i resolve to a module that is evaluating, the spec says i must return a module that is evaluated, do i wait a tick or something?","date":"2019-07-20T01:04:02.439Z","type":"message"}
{"nick":"devsnek","message":"if the module isn't cyclic, how would i even know if its been evaluated or not","date":"2019-07-20T01:06:11.677Z","type":"message"}
{"nick":"keith_miller","date":"2019-07-20T01:09:31.098Z","type":"join"}
{"nick":"Domenic","message":"devsnek: \"evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion\"","date":"2019-07-20T01:52:29.791Z","type":"message"}
{"nick":"devsnek","message":"Domenic: yes that's the line that is giving me trouble","date":"2019-07-20T01:53:32.855Z","type":"message"}
{"nick":"Domenic","message":"How your host ensures modules Evaluate() methods have been called is up to your host.","date":"2019-07-20T01:53:55.374Z","type":"message"}
{"nick":"Domenic","message":"You can see examples of how it's done in browsers by looking at the HTML spec.","date":"2019-07-20T01:54:05.028Z","type":"message"}
{"nick":"devsnek","message":"i mean for an abstract module record","date":"2019-07-20T01:54:13.778Z","type":"message"}
{"nick":"devsnek","message":"its safe to just do `Evaluate()`","date":"2019-07-20T01:54:17.133Z","type":"message"}
{"nick":"devsnek","message":"because its required to return undefined if its already evaluated","date":"2019-07-20T01:54:24.633Z","type":"message"}
{"nick":"Domenic","message":"Abstract module records Evaluate() doesn't exist","date":"2019-07-20T01:54:43.924Z","type":"message"}
{"nick":"Domenic","message":"So it is not safe to do it since it doesn't make sense","date":"2019-07-20T01:54:49.236Z","type":"message"}
{"nick":"devsnek","message":"abstract module records have Link() and Evaluate()","date":"2019-07-20T01:55:08.232Z","type":"message"}
{"nick":"Domenic","message":"They do not","date":"2019-07-20T01:55:13.028Z","type":"message"}
{"nick":"Domenic","message":"Concrete subclasses do","date":"2019-07-20T01:55:17.009Z","type":"message"}
{"nick":"devsnek","message":"test/test262/test/language/expressions/dynamic-import/assignment-expression/unary-expr.js","date":"2019-07-20T01:55:17.352Z","type":"message"}
{"nick":"devsnek","message":"oops","date":"2019-07-20T01:55:23.508Z","type":"message"}
{"nick":"devsnek","message":"ok but i mean","date":"2019-07-20T01:55:26.732Z","type":"message"}
{"nick":"devsnek","message":"the concrete implementations are required to return undefined if its already evaluated","date":"2019-07-20T01:55:42.224Z","type":"message"}
{"nick":"Domenic","message":"Sure but there will usually be a lot more involved in evaluating a module than just calling Evaluate()","date":"2019-07-20T01:56:07.988Z","type":"message"}
{"nick":"devsnek","message":"here's the logic i'm using so far https://gc.gy/31292760.png","date":"2019-07-20T01:56:12.119Z","type":"message"}
{"nick":"devsnek","message":"you'll notice that this can return modules that are `evaluating` or `linking`","date":"2019-07-20T01:56:24.524Z","type":"message"}
{"nick":"devsnek","message":"i've seen at least one example of it returning a module that is `evaluating`","date":"2019-07-20T01:56:35.488Z","type":"message"}
{"nick":"Domenic","message":"I suggest studying https://html.spec.whatwg.org/multipage/webappapis.html#hostimportmoduledynamically(referencingscriptormodule,-specifier,-promisecapability) and linked algorithms.","date":"2019-07-20T01:56:38.401Z","type":"message"}
{"nick":"Domenic","message":"They ensure the result is always evaluated","date":"2019-07-20T01:56:46.492Z","type":"message"}
{"nick":"devsnek","message":"Domenic: i am not doubting that algorithms to do this can exist","date":"2019-07-20T02:00:37.191Z","type":"message"}
{"nick":"devsnek","message":"i'm just confused why the spec doesn't provide one","date":"2019-07-20T02:00:42.841Z","type":"message"}
{"nick":"Domenic","message":"Doing so is intricately entangled in host mechanisms","date":"2019-07-20T02:01:00.661Z","type":"message"}
{"nick":"Domenic","message":"The spec's job is not to provide a host for finding/linking/evaluating modules. That requires a host. If you want engine262 to be a host, you'll need your own algorithms. The algorithms you use will not generally be useful to other hosts.","date":"2019-07-20T02:01:55.183Z","type":"message"}
{"nick":"devsnek","message":"its able to run them not-dynamically without any host algorithms","date":"2019-07-20T02:02:13.474Z","type":"message"}
{"nick":"Domenic","message":"I can't see how that's true. There's no algorithm in the spec to turn specifiers into source text strings (e.g. by reading file contents)","date":"2019-07-20T02:02:41.811Z","type":"message"}
{"nick":"devsnek","message":"no, but once you resolve the modules","date":"2019-07-20T02:02:51.671Z","type":"message"}
{"nick":"devsnek","message":"the spec has all the algorithms to run them","date":"2019-07-20T02:02:58.550Z","type":"message"}
{"nick":"devsnek","message":"for dynamic imports though, the spec is like \"lol figure that out yourself\"","date":"2019-07-20T02:03:11.704Z","type":"message"}
{"nick":"Domenic","message":"The situation is the same here","date":"2019-07-20T02:03:12.060Z","type":"message"}
{"nick":"Domenic","message":"Once you dynamically import the module, the spec has all the algorithms to run them","date":"2019-07-20T02:03:23.584Z","type":"message"}
{"nick":"Domenic","message":"You just need to call them","date":"2019-07-20T02:03:28.548Z","type":"message"}
{"nick":"Domenic","message":"In a way that makes sense for your host","date":"2019-07-20T02:03:38.800Z","type":"message"}
{"nick":"Domenic","message":"Note how HTML uses \"run a module script\" for both static and dynamic cases.","date":"2019-07-20T02:04:28.463Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2019-07-20T02:05:07.795Z","type":"message"}
{"nick":"devsnek","message":"but html spec also disavows the top level module jobs","date":"2019-07-20T02:05:24.471Z","type":"message"}
{"nick":"Domenic","message":"Yes, those are disappearing from the spec soon","date":"2019-07-20T02:05:34.076Z","type":"message"}
{"nick":"Domenic","message":"We have consensus to remove them","date":"2019-07-20T02:05:39.524Z","type":"message"}
{"nick":"devsnek","message":"what happens if HTML has to HostImportModuleDynamically a module that is currently evaluating","date":"2019-07-20T02:06:43.758Z","type":"message"}
{"nick":"Domenic","message":"RTC guarantees this won't happen.","date":"2019-07-20T02:07:06.824Z","type":"message"}
{"nick":"devsnek","message":"rtc?","date":"2019-07-20T02:07:16.729Z","type":"message"}
{"nick":"Domenic","message":"run to completion","date":"2019-07-20T02:07:27.686Z","type":"message"}
{"nick":"devsnek","message":"in theory a sync implementation with `import(x)` from module `x` would have this problem though right?","date":"2019-07-20T02:07:55.308Z","type":"message"}
{"nick":"Domenic","message":"I don't understand the question","date":"2019-07-20T02:08:09.807Z","type":"message"}
{"nick":"devsnek","message":"like if you're in module `x`","date":"2019-07-20T02:08:27.716Z","type":"message"}
{"nick":"devsnek","message":"and `import(x)` is called","date":"2019-07-20T02:08:31.840Z","type":"message"}
{"nick":"devsnek","message":"and that synchronously performs module lookup","date":"2019-07-20T02:08:48.580Z","type":"message"}
{"nick":"devsnek","message":"it ends up with a module record that is evaluating","date":"2019-07-20T02:08:54.328Z","type":"message"}
{"nick":"devsnek","message":"what is it supposed to return","date":"2019-07-20T02:08:58.965Z","type":"message"}
{"nick":"Domenic","message":"That'd be the same as using `import 'x'` I think","date":"2019-07-20T02:09:03.712Z","type":"message"}
{"nick":"Domenic","message":"So it fails","date":"2019-07-20T02:09:09.862Z","type":"message"}
{"nick":"devsnek","message":"if i ignore the assertions about returning an evaluated record it works","date":"2019-07-20T02:09:26.581Z","type":"message"}
{"nick":"Domenic","message":"You mean if your host violates the spec?","date":"2019-07-20T02:09:42.168Z","type":"message"}
{"nick":"devsnek","message":"and `import 'x'` from `x` always works","date":"2019-07-20T02:09:43.560Z","type":"message"}
{"nick":"devsnek","message":"per spec","date":"2019-07-20T02:09:47.871Z","type":"message"}
{"nick":"Domenic","message":"I don't believe that's true...","date":"2019-07-20T02:09:50.431Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2019-07-20T02:09:53.496Z","type":"message"}
{"nick":"Domenic","message":"Oh with no bindings?","date":"2019-07-20T02:09:59.072Z","type":"message"}
{"nick":"devsnek","message":"the test suite even uses that to inspect namespaces before they're complete","date":"2019-07-20T02:10:03.314Z","type":"message"}
{"nick":"Domenic","message":"I guess `Cyclic Module Record's [[status]] is \"evaluated\"` is different from \"abstract module record's Evaluate() has returned a normal completion\"","date":"2019-07-20T02:11:28.684Z","type":"message"}
{"nick":"devsnek","message":"so perhaps this invariant is incorrect?","date":"2019-07-20T02:14:38.839Z","type":"message"}
{"nick":"Domenic","message":"What leads to that conclusion?","date":"2019-07-20T02:15:00.833Z","type":"message"}
{"nick":"devsnek","message":"because its possible to have a module that is still evaluating","date":"2019-07-20T02:15:41.163Z","type":"message"}
{"nick":"devsnek","message":"should i return an abrupt completion or something?","date":"2019-07-20T02:15:50.613Z","type":"message"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-07-20T02:16:30.807Z","type":"quit"}
{"nick":"Domenic","message":"It's [[status]] is \"evaluating\", but it meets the spec's criteria of \"evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion\"","date":"2019-07-20T02:16:38.777Z","type":"message"}
{"nick":"Domenic","message":"It is perhaps confusing that the informal \"evaluated\" phrase is used when talking about AMRs in this way, when CMRs have a specific \"evaluated\" [[status]] that is more narrowly defined. We could remove the \"evaluated, i.e.\"","date":"2019-07-20T02:17:32.076Z","type":"message"}
{"nick":"devsnek","message":"i'm pretty sure by the time Evaluate() returns everything should have [[Status]] of \"evaluated\"","date":"2019-07-20T02:17:48.339Z","type":"message"}
{"nick":"devsnek","message":"like the case i described is definitely within the Evaluate() call","date":"2019-07-20T02:18:52.186Z","type":"message"}
{"nick":"Domenic","message":"Didn't you give a case where that's not true?","date":"2019-07-20T02:18:54.132Z","type":"message"}
{"nick":"devsnek","message":"in my case you're still within the call stack of module.Evaluate()","date":"2019-07-20T02:19:11.892Z","type":"message"}
{"nick":"devsnek","message":"it hasn't returned yet","date":"2019-07-20T02:19:19.622Z","type":"message"}
{"nick":"Domenic","message":"You're also outside the callstack of a different module.Evaluate()","date":"2019-07-20T02:19:30.323Z","type":"message"}
{"nick":"Domenic","message":"on the same module.","date":"2019-07-20T02:19:32.746Z","type":"message"}
{"nick":"devsnek","message":"i am?","date":"2019-07-20T02:19:53.413Z","type":"message"}
{"nick":"devsnek","message":"you can't call Evaluate() on an evaluating module, the assertion will fail","date":"2019-07-20T02:20:21.664Z","type":"message"}
{"nick":"Domenic","message":"I see","date":"2019-07-20T02:20:29.033Z","type":"message"}
{"nick":"devsnek","message":"perhaps that is the issue","date":"2019-07-20T02:20:34.609Z","type":"message"}
{"nick":"Domenic","message":"Then yeah don't do sync import()","date":"2019-07-20T02:20:34.872Z","type":"message"}
{"nick":"Domenic","message":"Because doing sync import() will cause assertion failures","date":"2019-07-20T02:20:53.358Z","type":"message"}
{"nick":"Domenic","message":"Which makes sense because it's async","date":"2019-07-20T02:20:57.224Z","type":"message"}
{"nick":"Domenic","message":"(I've humored this sync import() fantasy long enough!!)","date":"2019-07-20T02:21:14.517Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-07-20T02:21:18.374Z","type":"message"}
{"nick":"devsnek","message":"i'm just trying to hook up HostImportModuleDynamically to HostResolveImportedModule and not do anything complex :(","date":"2019-07-20T02:21:40.142Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T02:22:42.346Z","type":"quit"}
{"nick":"Domenic","message":"If \"being async\" counts as complex, I think you are kind of working against the grain of dynamic import()'s design, and thus causing yourself unanticipated complexity.","date":"2019-07-20T02:22:42.493Z","type":"message"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T02:23:48.225Z","type":"quit"}
{"nick":"devsnek","message":"with TLA, couldn't a module be Evaluate()ing over multiple ticks","date":"2019-07-20T02:24:20.053Z","type":"message"}
{"nick":"Domenic","message":"Yeah I wonder how that gets integrated","date":"2019-07-20T02:24:39.613Z","type":"message"}
{"nick":"Domenic","message":"Hopefully updated to \"the promise is resolved\" or something","date":"2019-07-20T02:24:50.247Z","type":"message"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-07-20T02:28:07.125Z","type":"quit"}
{"nick":"keith_m__","date":"2019-07-20T02:28:21.510Z","type":"join"}
{"nick":"keith_m__","reason":"Client Quit","date":"2019-07-20T02:30:46.725Z","type":"quit"}
{"nick":"itamarok","date":"2019-07-20T02:32:47.441Z","type":"join"}
{"nick":"itamarok","reason":"Ping timeout: 248 seconds","date":"2019-07-20T02:37:22.237Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-20T02:55:31.109Z","type":"join"}
{"nick":"itamarok","date":"2019-07-20T03:14:19.496Z","type":"join"}
{"nick":"itamarok","reason":"Ping timeout: 245 seconds","date":"2019-07-20T03:18:48.330Z","type":"quit"}
{"nick":"devsnek","message":"ljharb: btw my pr doesn't explicitly set the length anymore","date":"2019-07-20T03:36:43.248Z","type":"message"}
{"nick":"devsnek","message":"setting length correctly is probably a battle for another pr","date":"2019-07-20T03:37:15.981Z","type":"message"}
{"nick":"ljharb","message":"devsnek: do the alg steps mention it?","date":"2019-07-20T03:37:26.690Z","type":"message"}
{"nick":"devsnek","message":"wdym","date":"2019-07-20T03:37:33.965Z","type":"message"}
{"nick":"ljharb","message":"like below throwerSteps, there should be a note, like in Promise resolve functions","date":"2019-07-20T03:38:40.481Z","type":"message"}
{"nick":"devsnek","message":"that's only used when there is no explicit `X ( )`","date":"2019-07-20T03:38:54.939Z","type":"message"}
{"nick":"devsnek","message":"like with promise resolve functions","date":"2019-07-20T03:38:59.309Z","type":"message"}
{"nick":"ljharb","message":"is there ever one in this kind of “algorithm steps for a function” thing?","date":"2019-07-20T03:39:25.366Z","type":"message"}
{"nick":"ljharb","message":"I’m reasonably sure that it’s only done for promise functions, and they all have a note.","date":"2019-07-20T03:39:45.427Z","type":"message"}
{"nick":"devsnek","message":"wdym","date":"2019-07-20T03:39:45.573Z","type":"message"}
{"nick":"devsnek","message":"referencing the actual steps for an already created function?","date":"2019-07-20T03:40:13.871Z","type":"message"}
{"nick":"itamarok","date":"2019-07-20T03:51:13.706Z","type":"join"}
{"nick":"itamarok","reason":"Ping timeout: 245 seconds","date":"2019-07-20T03:55:27.295Z","type":"quit"}
{"nick":"itamarok","date":"2019-07-20T04:00:37.537Z","type":"join"}
{"nick":"jmdyck","message":"ljharb: in Promise Resolve Functions, it's not a note, it's just a very short paragraph.","date":"2019-07-20T04:03:04.696Z","type":"message"}
{"nick":"devsnek","message":"what if promises were async iterable","date":"2019-07-20T04:05:57.089Z","type":"message"}
{"nick":"jmdyck","message":"(is this a new topic? because if it's the same topic, i'm not sure how it connects.)","date":"2019-07-20T04:07:15.623Z","type":"message"}
{"nick":"devsnek","message":"oh sorry its a new topic","date":"2019-07-20T04:11:18.476Z","type":"message"}
{"nick":"jmdyck","message":"ljharb: In \"I’m reasonably sure that it’s only done for promise functions\", what do you mean by \"it\" ?","date":"2019-07-20T04:12:15.654Z","type":"message"}
{"nick":"devsnek","message":"does anyone know what the result of the codeblock here will be https://github.com/pemrouz/proposal-emitter#background","date":"2019-07-20T04:12:51.359Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T04:24:45.948Z","type":"quit"}
{"nick":"ljharb","message":"jmdyck: sorry i mean, it seems that other than ThrowTypeError, the only way functions are typically created is by referring to the same section as https://tc39.es/ecma262/#sec-promise-resolve-functions","date":"2019-07-20T04:28:57.232Z","type":"message"}
{"nick":"ljharb","message":"or rather a section formatted that way","date":"2019-07-20T04:29:04.077Z","type":"message"}
{"nick":"ljharb","message":"that’s the model that promise.allsettled and matchAll etc all followed","date":"2019-07-20T04:29:13.126Z","type":"message"}
{"nick":"ljharb","message":"so maybe the real issue is that ThrowTypeError should change to match all the other places that make functions","date":"2019-07-20T04:29:32.374Z","type":"message"}
{"nick":"devsnek","message":"i'm confused","date":"2019-07-20T04:36:26.660Z","type":"message"}
{"nick":"jmdyck","message":"\"only way functions are created\" other than calls to FunctionAllocate, you mean.","date":"2019-07-20T04:36:34.633Z","type":"message"}
{"nick":"jmdyck","message":"Backing up a bit: 2 ways to create a function object: via FunctionAllocate and via CreateBuiltinFunction.","date":"2019-07-20T04:38:02.660Z","type":"message"}
{"nick":"devsnek","message":"really, via FunctionCreate","date":"2019-07-20T04:38:29.886Z","type":"message"}
{"nick":"jmdyck","message":"well FunctionCreate and its brethren","date":"2019-07-20T04:38:42.485Z","type":"message"}
{"nick":"jmdyck","message":"GeneratorFunctionCreate, AsyncFunctionCreate etc","date":"2019-07-20T04:39:07.491Z","type":"message"}
{"nick":"devsnek","message":"yea","date":"2019-07-20T04:39:11.725Z","type":"message"}
{"nick":"jmdyck","message":"but they all go through FunctionAllocate.","date":"2019-07-20T04:39:25.673Z","type":"message"}
{"nick":"jmdyck","message":"(And actually, there are 2 other ways to create a function object, both exotic: ProxyCreate and BoundFunctionCreate)","date":"2019-07-20T04:41:43.784Z","type":"message"}
{"nick":"jmdyck","message":"CreateBuiltinFunction is used to create both named builtins (mostly in CreateIntrinsics step 13) and anonymous builtins (scattered throughout)","date":"2019-07-20T04:44:47.313Z","type":"message"}
{"nick":"jmdyck","message":"the latter are mostly generated in arbitrary numbers by factory-like operations","date":"2019-07-20T04:47:36.763Z","type":"message"}
{"nick":"jmdyck","message":"(e.g., a given realm can have an arbitrarily large set of near-identical promise resolve functions)","date":"2019-07-20T04:49:20.525Z","type":"message"}
{"nick":"devsnek","message":"and yet we have one ThrowTypeError for three different error scenarios","date":"2019-07-20T04:51:03.402Z","type":"message"}
{"nick":"jmdyck","message":"but %ThrowTypeError% is different in that there's exactly one per realm.","date":"2019-07-20T04:51:16.908Z","type":"message"}
{"nick":"devsnek","message":"\"TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them\"","date":"2019-07-20T04:53:05.832Z","type":"message"}
{"nick":"devsnek","message":"good error messages :P","date":"2019-07-20T04:53:20.905Z","type":"message"}
{"nick":"jmdyck","message":"%TypedArray% might be another one-per-realm anonymous built-in function, though it's weird. That might be all.","date":"2019-07-20T05:02:48.893Z","type":"message"}
{"nick":"jmdyck","message":"afk","date":"2019-07-20T05:05:02.881Z","type":"message"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-07-20T05:05:23.667Z","type":"quit"}
{"nick":"jorydotcom","date":"2019-07-20T05:40:10.588Z","type":"join"}
{"nick":"drousso","date":"2019-07-20T07:00:32.285Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 245 seconds","date":"2019-07-20T07:05:02.166Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-07-20T07:33:10.822Z","type":"quit"}
{"nick":"drousso","date":"2019-07-20T07:42:38.999Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 276 seconds","date":"2019-07-20T07:47:28.717Z","type":"quit"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-07-20T07:52:45.593Z","type":"quit"}
{"nick":"drousso","date":"2019-07-20T08:32:40.670Z","type":"join"}
{"nick":"drousso","reason":"Client Quit","date":"2019-07-20T08:34:51.857Z","type":"quit"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-20T09:14:29.053Z","type":"quit"}
{"nick":"howdoi","date":"2019-07-20T10:17:29.806Z","type":"join"}
{"nick":"itamarok","date":"2019-07-20T11:44:03.468Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-07-20T11:46:58.770Z","type":"quit"}
{"nick":"itamarok","date":"2019-07-20T11:48:14.145Z","type":"join"}
{"nick":"jmdyck","date":"2019-07-20T11:52:33.155Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-07-20T11:56:32.762Z","type":"quit"}
{"nick":"itamarok","date":"2019-07-20T11:57:20.404Z","type":"join"}
{"nick":"cpplearner","date":"2019-07-20T12:14:53.433Z","type":"join"}
{"nick":"cpplearner","message":"Guys, function expression (!= arrow function) is a primary expression, but parentheses are necessary to directly call it?","date":"2019-07-20T12:17:16.708Z","type":"message"}
{"nick":"jmdyck","message":"Are you talking about parentheses around the function expression or parentheses around the arguments?","date":"2019-07-20T12:33:42.676Z","type":"message"}
{"nick":"cpplearner","message":"around the function expression.","date":"2019-07-20T12:34:03.465Z","type":"message"}
{"nick":"cpplearner","message":"In my understanding, CallExpression -> MemberExpression () -> PrimaryExpression () -> Function Expression () is possible.","date":"2019-07-20T12:36:26.842Z","type":"message"}
{"nick":"cpplearner","message":"But, node.js rejects it so... I'm a bit curious.","date":"2019-07-20T12:36:50.028Z","type":"message"}
{"nick":"jmdyck","message":"depends on the context","date":"2019-07-20T12:38:02.818Z","type":"message"}
{"nick":"jmdyck","message":"try this: 1 + function () { return 2; }()","date":"2019-07-20T12:38:16.167Z","type":"message"}
{"nick":"cpplearner","message":"wow.","date":"2019-07-20T12:38:50.146Z","type":"message"}
{"nick":"cpplearner","message":"=O","date":"2019-07-20T12:38:52.777Z","type":"message"}
{"nick":"cpplearner","message":"Can you give some hints so that I can dig into it? =)","date":"2019-07-20T12:39:17.405Z","type":"message"}
{"nick":"cpplearner","message":"That's interesting.","date":"2019-07-20T12:39:24.861Z","type":"message"}
{"nick":"jmdyck","message":"to check: that expression returned 3, right?","date":"2019-07-20T12:39:57.924Z","type":"message"}
{"nick":"jmdyck","message":"but if you leave off the \"1+\", you get a syntax error?","date":"2019-07-20T12:40:38.557Z","type":"message"}
{"nick":"cpplearner","message":"Yes. I got the error.","date":"2019-07-20T12:40:55.528Z","type":"message"}
{"nick":"jmdyck","message":"The parser is attempting to parse the input as a Statement, and in particular an ExpressionStatement. But there's a rule that says an ExpressionStatement can't start with the \"function\" keyword.","date":"2019-07-20T12:42:35.606Z","type":"message"}
{"nick":"jmdyck","message":"https://tc39.es/ecma262/#prod-ExpressionStatement","date":"2019-07-20T12:42:40.103Z","type":"message"}
{"nick":"cpplearner","message":"Wow. Thanks for your help.","date":"2019-07-20T12:43:45.262Z","type":"message"}
{"nick":"cpplearner","message":"I really appreciate it. =)","date":"2019-07-20T12:43:50.368Z","type":"message"}
{"nick":"jmdyck","message":"no problem","date":"2019-07-20T12:44:15.120Z","type":"message"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-07-20T12:49:09.677Z","type":"quit"}
{"nick":"itamarok","date":"2019-07-20T12:59:54.417Z","type":"join"}
{"nick":"Nimelrian","date":"2019-07-20T13:11:31.550Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-07-20T13:51:31.125Z","type":"quit"}
{"nick":"AtumT","date":"2019-07-20T14:30:57.316Z","type":"join"}
{"nick":"itamarok","date":"2019-07-20T14:36:31.594Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-07-20T14:44:08.359Z","type":"quit"}
{"nick":"itamarok","date":"2019-07-20T14:44:41.368Z","type":"join"}
{"nick":"itamarok","reason":"Read error: Connection reset by peer","date":"2019-07-20T14:47:49.954Z","type":"quit"}
{"nick":"AtumT","reason":"Ping timeout: 246 seconds","date":"2019-07-20T15:18:10.507Z","type":"quit"}
{"nick":"devsnek","message":"jmdyck: does this look good to you? https://github.com/tc39/ecma262/pull/1635/files","date":"2019-07-20T16:04:24.667Z","type":"message"}
{"nick":"jmdyck","message":"Instead of `_realmRec_.[[Intrinsics]]`, you could just have `_intrinsics_`","date":"2019-07-20T16:09:50.119Z","type":"message"}
{"nick":"devsnek","message":"oops","date":"2019-07-20T16:11:04.854Z","type":"message"}
{"nick":"jmdyck","message":"And it omits setting %ThrowTypeError%'s [[Extensible]] to *false*, but then so does the current spec.","date":"2019-07-20T16:11:48.971Z","type":"message"}
{"nick":"devsnek","message":"jmdyck: if its not explicitly created, the definition is enough","date":"2019-07-20T16:12:15.357Z","type":"message"}
{"nick":"devsnek","message":"at least with the current spec","date":"2019-07-20T16:12:30.621Z","type":"message"}
{"nick":"devsnek","message":"i'd like everything to be more explicit but it seems like something for another pr","date":"2019-07-20T16:12:39.629Z","type":"message"}
{"nick":"jmdyck","message":"yeah, it's currently part of the magic surrounding CreateBuiltinFunction.","date":"2019-07-20T16:13:24.146Z","type":"message"}
{"nick":"jmdyck","message":"But yes, this is what I was describing in my comment (modulo getting rid of AddRestrictedFunctionProperties, which also deserves to be a separate PR).","date":"2019-07-20T16:17:11.125Z","type":"message"}
{"nick":"jmdyck","message":"Now I'm just checking that it all works out the same.","date":"2019-07-20T16:18:00.001Z","type":"message"}
{"nick":"devsnek","message":"works out in engine262","date":"2019-07-20T16:19:51.284Z","type":"message"}
{"nick":"jmdyck","message":"Yup, seems equivalent to me.","date":"2019-07-20T16:27:09.684Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-07-20T18:13:10.817Z","type":"quit"}
{"nick":"drousso","date":"2019-07-20T19:48:29.687Z","type":"join"}
{"nick":"laughinghan","date":"2019-07-20T19:50:51.311Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T20:20:58.577Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T20:23:05.059Z","type":"quit"}
{"nick":"Nimelrian","reason":"Ping timeout: 276 seconds","date":"2019-07-20T20:59:10.599Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-20T21:29:07.901Z","type":"join"}
{"nick":"itamarok","date":"2019-07-20T21:34:02.752Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-07-20T21:34:13.820Z","type":"quit"}
{"nick":"itamarok","date":"2019-07-20T21:34:26.498Z","type":"join"}
{"nick":"AtumT","date":"2019-07-20T22:19:26.366Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T22:27:00.983Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-20T22:53:28.485Z","type":"join"}
{"nick":"mgol","reason":"Ping timeout: 246 seconds","date":"2019-07-20T23:06:07.284Z","type":"quit"}
{"nick":"m_gol","date":"2019-07-20T23:06:07.668Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-07-20T23:22:08.375Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-07-20T23:24:25.504Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-20T23:25:22.991Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-20T23:27:30.653Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-07-20T23:30:14.153Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-20T23:31:07.814Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-07-20T23:35:39.874Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-20T23:53:54.323Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-07-20T23:57:48.611Z","type":"quit"}
