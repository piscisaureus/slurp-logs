{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T00:01:17.745Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-03-28T00:07:28.865Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T00:21:59.775Z","type":"join"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T00:25:17.395Z","type":"quit"}
{"nick":"devsnek","message":"petition to change ECMAScript to EASports on april 1st :P","date":"2018-03-28T00:28:56.045Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-03-28T00:39:44.895Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-03-28T00:49:08.364Z","type":"join"}
{"nick":"gibson042","date":"2018-03-28T00:53:12.140Z","type":"join"}
{"nick":"mylesborins","message":"devsnek 😒","date":"2018-03-28T00:53:39.988Z","type":"message"}
{"nick":"mylesborins","message":"😇","date":"2018-03-28T00:53:41.058Z","type":"message"}
{"nick":"devsnek","message":"❤️","date":"2018-03-28T01:03:21.968Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T01:21:59.007Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-03-28T01:40:01.749Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T01:44:08.541Z","type":"quit"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T02:19:40.844Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-03-28T02:26:53.981Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-03-28T03:55:57.167Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-03-28T04:01:30.531Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T04:29:56.844Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2018-03-28T05:21:08.154Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T05:30:14.803Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T06:15:18.365Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-03-28T08:30:59.729Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T08:31:43.770Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-03-28T08:35:32.950Z","type":"quit"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T08:39:40.335Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T09:04:00.342Z","type":"join"}
{"nick":"isiahmeadows","date":"2018-03-28T09:04:43.351Z","type":"join"}
{"nick":"JaseW_","date":"2018-03-28T09:50:04.465Z","type":"join"}
{"nick":"JaseW_","new_nick":"Jayflux","date":"2018-03-28T09:50:12.019Z","type":"nick"}
{"nick":"Jayflux","reason":"Changing host","date":"2018-03-28T09:50:12.267Z","type":"quit"}
{"nick":"Jayflux","date":"2018-03-28T09:50:12.472Z","type":"join"}
{"nick":"Jayflux","new_nick":"JaseW","date":"2018-03-28T09:50:19.067Z","type":"nick"}
{"nick":"JaseW","new_nick":"Jayflux","date":"2018-03-28T09:50:27.347Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T10:16:58.345Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-03-28T10:25:09.104Z","type":"quit"}
{"nick":"mylesborins","date":"2018-03-28T10:25:39.618Z","type":"join"}
{"nick":"keith_miller","date":"2018-03-28T10:33:20.052Z","type":"join"}
{"nick":"AtumT","date":"2018-03-28T10:39:24.389Z","type":"join"}
{"nick":"bradleymeck","date":"2018-03-28T10:49:22.780Z","type":"join"}
{"nick":"gibson042","date":"2018-03-28T10:51:42.040Z","type":"join"}
{"nick":"zkat","message":"hey littledan can i take ur syntax plz: https://twitter.com/maybekatz/status/978948404352028672","date":"2018-03-28T11:07:35.671Z","type":"message"}
{"nick":"zkat","message":"(I'd really like that #)","date":"2018-03-28T11:07:42.253Z","type":"message"}
{"nick":"Jayflux","new_nick":"JaseW","date":"2018-03-28T11:10:47.139Z","type":"nick"}
{"nick":"bradleymeck","message":"zkat: # seems a bit of an odd choice to me, ! seems nice to me (having come from places that use ! for macros/templates)","date":"2018-03-28T11:12:00.212Z","type":"message"}
{"nick":"bradleymeck","message":"I know D and Rust use that, but not sure I've seen binary ! in other places","date":"2018-03-28T11:13:37.625Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: # has significant precedent","date":"2018-03-28T11:19:29.044Z","type":"message"}
{"nick":"zkat","message":"I'm not sure how \"everyone seems to use this for corresponding constructs\" is an \"odd choice\" but","date":"2018-03-28T11:20:35.801Z","type":"message"}
{"nick":"zkat","message":"as in, I can think of 5 languages that do that, off the top of my head, and I can probably find 5 more of them","date":"2018-03-28T11:21:24.846Z","type":"message"}
{"nick":"zkat","message":"including C-like languages","date":"2018-03-28T11:21:35.208Z","type":"message"}
{"nick":"zkat","message":"# for private property access, otoh, is largely inprecedented?","date":"2018-03-28T11:21:47.909Z","type":"message"}
{"nick":"zkat","message":"so","date":"2018-03-28T11:21:49.587Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: # is what JS is looking at for private, so using it for construction seems odd to me","date":"2018-03-28T11:28:39.718Z","type":"message"}
{"nick":"bradleymeck","message":"I'm not sure I buy into other languages making stylistic choices for JS if it conflicts with other syntax","date":"2018-03-28T11:29:11.293Z","type":"message"}
{"nick":"jmdyck","date":"2018-03-28T11:29:47.367Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-03-28T11:31:43.682Z","type":"quit"}
{"nick":"zkat","message":"I don't intend to let private fields keep that syntax if this lands, so there's no conflict","date":"2018-03-28T11:47:39.671Z","type":"message"}
{"nick":"zkat","message":"But if we want to reuse unaries, ~ could be read at \"object similar to\"","date":"2018-03-28T11:48:05.118Z","type":"message"}
{"nick":"zkat","message":"Map~{}","date":"2018-03-28T11:48:18.514Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: what syntax did you have in mind for private?","date":"2018-03-28T11:49:23.864Z","type":"message"}
{"nick":"zkat","message":"None","date":"2018-03-28T11:50:24.146Z","type":"message"}
{"nick":"zkat","message":"🙊","date":"2018-03-28T11:50:30.567Z","type":"message"}
{"nick":"bradleymeck","message":"also, there is still conflict until it gets changed and changing it would probably need a very similar sigil style","date":"2018-03-28T11:50:31.407Z","type":"message"}
{"nick":"bradleymeck","message":"as long as it doesn't correlate to private I am not of strong opinion","date":"2018-03-28T11:51:16.853Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T11:58:55.478Z","type":"quit"}
{"nick":"JaseW","reason":"Remote host closed the connection","date":"2018-03-28T12:05:02.435Z","type":"quit"}
{"nick":"gibson042","date":"2018-03-28T12:10:07.110Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2018-03-28T12:25:35.106Z","type":"quit"}
{"nick":"devsnek","message":"I'm still a fan of private + ->","date":"2018-03-28T12:51:07.010Z","type":"message"}
{"nick":"devsnek","message":"it also occurs to me that Identifier{ } isn't valid syntax right now","date":"2018-03-28T12:55:52.964Z","type":"message"}
{"nick":"devsnek","message":"just asi hazard I guess","date":"2018-03-28T12:56:30.765Z","type":"message"}
{"nick":"devsnek","message":"but I think the overall effect is rather appealing","date":"2018-03-28T12:58:03.787Z","type":"message"}
{"nick":"bradleymeck","date":"2018-03-28T13:02:28.355Z","type":"join"}
{"nick":"pouwerkerk","reason":"Quit: Connection closed for inactivity","date":"2018-03-28T13:16:16.270Z","type":"quit"}
{"nick":"bradleymeck","message":"devsnek: -> gets really awkward when you start thinking of `private #foo;`","date":"2018-03-28T13:20:16.074Z","type":"message"}
{"nick":"bradleymeck","message":"outside of classes*","date":"2018-03-28T13:20:35.006Z","type":"message"}
{"nick":"devsnek","message":"outside of classes?","date":"2018-03-28T13:20:43.619Z","type":"message"}
{"nick":"devsnek","message":"and what is private #foo","date":"2018-03-28T13:21:00.532Z","type":"message"}
{"nick":"bradleymeck","message":"it would allocate a lexically scoped #foo that you could use. sec, there isn't a real proposal yet but I can write example of what people have talked about","date":"2018-03-28T13:23:19.778Z","type":"message"}
{"nick":"devsnek","message":"if the privates are lexically scoped that's cool","date":"2018-03-28T13:25:18.090Z","type":"message"}
{"nick":"devsnek","message":"but since you have to use `this.#`","date":"2018-03-28T13:25:47.616Z","type":"message"}
{"nick":"devsnek","message":"if they're just available as variables in the brackets if the class you can get rid of weird syntax on them","date":"2018-03-28T13:26:26.453Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: https://gist.github.com/bmeck/baa8f21cb0b33d4c0db3aad05a38473a","date":"2018-03-28T13:27:43.038Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: you can't put them into computed property stuff","date":"2018-03-28T13:28:00.170Z","type":"message"}
{"nick":"bradleymeck","message":"cause that means they could be stored into variables","date":"2018-03-28T13:28:12.353Z","type":"message"}
{"nick":"devsnek","message":"so like","date":"2018-03-28T13:28:33.576Z","type":"message"}
{"nick":"bradleymeck","message":"you could share them across modules, but designs around that are still a bit fuzzy","date":"2018-03-28T13:28:44.052Z","type":"message"}
{"nick":"devsnek","message":"why not just add a second Boolean param to symbol","date":"2018-03-28T13:28:48.360Z","type":"message"}
{"nick":"devsnek","message":"called \"totally hidden\" true/false","date":"2018-03-28T13:29:10.956Z","type":"message"}
{"nick":"devsnek","message":"that seems like a nicer approach","date":"2018-03-28T13:29:29.142Z","type":"message"}
{"nick":"bradleymeck","message":"under the hood it could do that, but storing these in variables means they can leak to untrusted places","date":"2018-03-28T13:29:30.753Z","type":"message"}
{"nick":"bradleymeck","message":"let me add an example of cross module sharing that would only let trusted things import the private","date":"2018-03-28T13:29:56.159Z","type":"message"}
{"nick":"devsnek","message":"I get what you're saying","date":"2018-03-28T13:30:06.981Z","type":"message"}
{"nick":"devsnek","message":"it just seems over the top","date":"2018-03-28T13:30:13.890Z","type":"message"}
{"nick":"bradleymeck","message":"how so?","date":"2018-03-28T13:30:24.110Z","type":"message"}
{"nick":"bradleymeck","message":"it acts quite different from a \"value\"","date":"2018-03-28T13:30:35.159Z","type":"message"}
{"nick":"devsnek","message":"like creating new syntax to save js devs from making silly accidents","date":"2018-03-28T13:30:58.486Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: well part of this came out from decorators having concerns with making a new PrivateName primitive type","date":"2018-03-28T13:31:43.736Z","type":"message"}
{"nick":"bradleymeck","message":"it is very hard to make private fields not leak and have a good api","date":"2018-03-28T13:32:04.691Z","type":"message"}
{"nick":"devsnek","message":"what happens when you use a private syntax on a proxy","date":"2018-03-28T13:32:49.859Z","type":"message"}
{"nick":"devsnek","message":"no handlers fired I assume","date":"2018-03-28T13:33:00.640Z","type":"message"}
{"nick":"devsnek","message":"that's the only benefit over some type of Symbol or PrivateName","date":"2018-03-28T13:33:31.409Z","type":"message"}
{"nick":"devsnek","message":"that I can think of*","date":"2018-03-28T13:33:40.171Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not sure I understand how you could use the syntax on a proxy","date":"2018-03-28T13:34:40.481Z","type":"message"}
{"nick":"bradleymeck","message":"just like other internal fields and why Proxy can't work with Promise easily it would not have the proper private fields","date":"2018-03-28T13:34:57.565Z","type":"message"}
{"nick":"bradleymeck","message":"`new Proxy(Promise.resolve(0), {}).then(_=>_)`","date":"2018-03-28T13:35:45.910Z","type":"message"}
{"nick":"devsnek","message":"I just meant like if the object happens to be a proxy","date":"2018-03-28T13:35:50.770Z","type":"message"}
{"nick":"bradleymeck","message":"no handlers, yes","date":"2018-03-28T13:36:22.203Z","type":"message"}
{"nick":"devsnek","message":"would you just be setting internal fields on the proxy object then","date":"2018-03-28T13:36:22.408Z","type":"message"}
{"nick":"bradleymeck","message":"well if you are assigning, you would be assigning to the Proxy instance yea. if you are reading it would be an error if it doesn't exist","date":"2018-03-28T13:37:07.423Z","type":"message"}
{"nick":"bradleymeck","message":"most likely... we could make it return undefined though!","date":"2018-03-28T13:37:17.859Z","type":"message"}
{"nick":"devsnek","message":"undefined seems like the smarter choice","date":"2018-03-28T13:37:35.463Z","type":"message"}
{"nick":"bradleymeck","message":"this is all fluff talk w/o someone willing to try and push through committee currently","date":"2018-03-28T13:37:41.089Z","type":"message"}
{"nick":"devsnek","message":"although the big big question now","date":"2018-03-28T13:37:50.642Z","type":"message"}
{"nick":"devsnek","message":"why this over a weakmap","date":"2018-03-28T13:37:56.210Z","type":"message"}
{"nick":"bradleymeck","message":"easier to analyze, not needing goofy abstractions to prevent prototype mutation, static enough that it doesn't seem to always need a full real weakmap. Similar gains to PrivateSymbol","date":"2018-03-28T13:38:54.246Z","type":"message"}
{"nick":"bradleymeck","message":"error on missing is attractive to me as well so that I don't do any accidental actions thinking something has a private field, but does not","date":"2018-03-28T13:40:04.103Z","type":"message"}
{"nick":"devsnek","message":"well with your example","date":"2018-03-28T13:40:17.689Z","type":"message"}
{"nick":"devsnek","message":"where you're keying objects given to you","date":"2018-03-28T13:40:29.968Z","type":"message"}
{"nick":"devsnek","message":"it would be weird for them to throw imo","date":"2018-03-28T13:40:41.000Z","type":"message"}
{"nick":"devsnek","message":"like object.#x ||= newid() would be impossible","date":"2018-03-28T13:41:11.092Z","type":"message"}
{"nick":"bradleymeck","message":"it means you don't have to do the `in` check to see if something has a private field though","date":"2018-03-28T13:41:31.278Z","type":"message"}
{"nick":"bradleymeck","message":"most of the time I would expect people reading the field to want to error if it doesn't exist","date":"2018-03-28T13:42:05.501Z","type":"message"}
{"nick":"devsnek","message":"I would expect the opposite :p","date":"2018-03-28T13:42:20.282Z","type":"message"}
{"nick":"bradleymeck","message":"initializing the field I think is a less common operation than reading","date":"2018-03-28T13:42:31.274Z","type":"message"}
{"nick":"devsnek","message":"differentiating to regular property access seems like you're exposing implementation details about how js works","date":"2018-03-28T13:43:15.103Z","type":"message"}
{"nick":"devsnek","message":"if that makes sense","date":"2018-03-28T13:43:18.764Z","type":"message"}
{"nick":"bradleymeck","message":"it certainly doesn't act exactly like regular property access, certainly we can't support computed access either, so that already means we have a difference we can't resolve","date":"2018-03-28T13:47:14.643Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-03-28T13:47:29.016Z","type":"quit"}
{"nick":"bradleymeck","message":"-> and .# are more like new types of dispatch operators than property access","date":"2018-03-28T13:48:02.082Z","type":"message"}
{"nick":"bradleymeck","message":"imo","date":"2018-03-28T13:48:09.744Z","type":"message"}
{"nick":"devsnek","message":"I agree with the first","date":"2018-03-28T13:48:14.866Z","type":"message"}
{"nick":"devsnek","message":"less so with the second","date":"2018-03-28T13:48:19.690Z","type":"message"}
{"nick":"devsnek","message":"if it used the arrow I would feel ok with it throwing","date":"2018-03-28T13:48:50.794Z","type":"message"}
{"nick":"devsnek","message":"lol that's weird","date":"2018-03-28T13:48:58.162Z","type":"message"}
{"nick":"devsnek","message":"probs just cuz I'm used to -> from c++","date":"2018-03-28T13:49:47.303Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: I think my hang up is that with .# the hash is part of the name as well when it's declared","date":"2018-03-28T13:50:24.630Z","type":"message"}
{"nick":"devsnek","message":"so it just seems like regular property access","date":"2018-03-28T13:50:34.517Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: we could also make this new thing just `private foo;`","date":"2018-03-28T13:51:37.190Z","type":"message"}
{"nick":"bradleymeck","message":"and you can only get to it using # in various places","date":"2018-03-28T13:51:44.209Z","type":"message"}
{"nick":"devsnek","message":"sgtm","date":"2018-03-28T13:51:59.511Z","type":"message"}
{"nick":"bradleymeck","message":"at stage 0 everything goes","date":"2018-03-28T13:52:04.660Z","type":"message"}
{"nick":"devsnek","message":"unicorn emoji for \"magic accessors\"","date":"2018-03-28T13:52:23.614Z","type":"message"}
{"nick":"devsnek","message":"also tbh js having more and more static stuff feels kinda weird","date":"2018-03-28T13:53:07.079Z","type":"message"}
{"nick":"devsnek","message":"not bad just weird","date":"2018-03-28T13:53:20.110Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: being able to add private fields *after* an object is constructed is quite dynamic","date":"2018-03-28T13:53:36.917Z","type":"message"}
{"nick":"bradleymeck","message":"less dynamic than `o[k]` certainly though","date":"2018-03-28T13:54:03.557Z","type":"message"}
{"nick":"devsnek","message":"totally but i feel like we're also moving more into syntax than ever before","date":"2018-03-28T13:54:32.681Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: oh drat I forgot, in order to do exporting we need it to keep the #","date":"2018-03-28T13:54:46.413Z","type":"message"}
{"nick":"devsnek","message":"oh yeah that makes sense","date":"2018-03-28T13:54:54.339Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: sadly we have had easier times passing syntax than APIs lately through committee","date":"2018-03-28T13:55:13.682Z","type":"message"}
{"nick":"devsnek","message":"or just reuse the private keyword?","date":"2018-03-28T13:55:15.683Z","type":"message"}
{"nick":"devsnek","message":"for exporting/importing","date":"2018-03-28T13:55:23.920Z","type":"message"}
{"nick":"bradleymeck","message":"might be able to reuse private, but rewriting my examples I worry people will read `private foo;` as being able to be used like `o[foo]`","date":"2018-03-28T13:55:53.568Z","type":"message"}
{"nick":"bradleymeck","message":"but syntax has been easier to pass because it often is tied to new kernel semantics","date":"2018-03-28T13:56:10.384Z","type":"message"}
{"nick":"devsnek","message":"ye like right now adding a hash to that foo would make a lot of sense","date":"2018-03-28T13:56:36.960Z","type":"message"}
{"nick":"devsnek","message":"honestly it's just the dot accessor that seems weird in this case","date":"2018-03-28T13:58:36.157Z","type":"message"}
{"nick":"devsnek","message":"having the hash isn't that bad","date":"2018-03-28T13:58:45.862Z","type":"message"}
{"nick":"littledan","message":"zkat I'll license you the syntax space but it's not coming for free","date":"2018-03-28T14:06:00.286Z","type":"message"}
{"nick":"littledan","message":"see stupid sketches in https://github.com/tc39/proposal-extended-numeric-literals#extended-maparray-literals","date":"2018-03-28T14:06:36.990Z","type":"message"}
{"nick":"littledan","message":"anyway I don't see an ambiguity if you overload # for this","date":"2018-03-28T14:06:52.894Z","type":"message"}
{"nick":"littledan","message":"but, I really really liked Keith Cirkel's proposal for {# x: y #} for a frozen object","date":"2018-03-28T14:07:10.235Z","type":"message"}
{"nick":"littledan","message":"and there's also the idea of #{ } for frozen object","date":"2018-03-28T14:07:16.763Z","type":"message"}
{"nick":"devsnek","message":"two hashes feels like some weird evil templating","date":"2018-03-28T14:07:41.124Z","type":"message"}
{"nick":"littledan","message":"it's important to consider the ASI hazard if we permit *both* the syntax sketch you have above *and* the prefix-less frozen object thing","date":"2018-03-28T14:07:56.475Z","type":"message"}
{"nick":"devsnek","message":"is Object.freeze somehow lacking","date":"2018-03-28T14:08:33.419Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not entirely sold on frozen literals","date":"2018-03-28T14:09:50.893Z","type":"message"}
{"nick":"littledan","message":"zkat: Also, consider with new literal syntax if you want to permit caching, like template tags do","date":"2018-03-28T14:10:12.559Z","type":"message"}
{"nick":"bradleymeck","message":"freeze is a one time call","date":"2018-03-28T14:10:14.190Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: how would you do caching if you end up with something like Map#{[foo]: bar}","date":"2018-03-28T14:11:07.892Z","type":"message"}
{"nick":"bradleymeck","message":"2 variables in different positions seems awkward","date":"2018-03-28T14:11:33.918Z","type":"message"}
{"nick":"littledan","message":"well, I don't know what the proposed semantics of Map#{[foo]: bar} are, or the alternative that you're considering awkward","date":"2018-03-28T14:11:47.946Z","type":"message"}
{"nick":"bradleymeck","message":":p","date":"2018-03-28T14:12:34.754Z","type":"message"}
{"nick":"devsnek","message":"when you guys are considering asi hazards","date":"2018-03-28T14:13:07.325Z","type":"message"}
{"nick":"devsnek","message":"is the idea is like \"behaviour X should never change no matter how many newlines are added\" kind of thing?","date":"2018-03-28T14:13:32.100Z","type":"message"}
{"nick":"devsnek","message":"like do you ever have cases where potential asi hazards aren't considered an issue","date":"2018-03-28T14:14:23.064Z","type":"message"}
{"nick":"littledan","message":"I don't think of any of these things as absolute, but as costs and benefits to consider in a tradeoff","date":"2018-03-28T14:15:40.578Z","type":"message"}
{"nick":"littledan","message":"we work together in TC39 to assess the weight of these different constraints. Comments on issues on repositories give us more data to work with in that assessment","date":"2018-03-28T14:16:39.544Z","type":"message"}
{"nick":"devsnek","message":"just wondering if like Map{} and Set[] would ever be considered","date":"2018-03-28T14:17:13.466Z","type":"message"}
{"nick":"devsnek","message":"very obvious asi hazard but nice looking","date":"2018-03-28T14:17:34.137Z","type":"message"}
{"nick":"littledan","message":"actually, I don't know if it is; if the convention is to not put whitespace between the identifier and the  bracket, maybe the ASI hazard isn't so bad","date":"2018-03-28T14:19:08.944Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: there are 2 main locations of ASI hazards that we are trying to reason about most commonly as well so it might make sense to read https://github.com/tc39/ecma262/pull/1062/files . Identifier [ noLineTerminatorHere ] { could be possible but I need to think about member access as well. noLineTerminatorHere is the kind of ASI hazard I'm mostly fine with.","date":"2018-03-28T14:20:07.122Z","type":"message"}
{"nick":"devsnek","message":"that's basically my thinking","date":"2018-03-28T14:20:31.672Z","type":"message"}
{"nick":"bradleymeck","message":"the one where the next line mutates the previous' interpetation... that I need good reasons for if an alternative is easy","date":"2018-03-28T14:20:52.423Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T14:21:26.592Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-03-28T14:27:17.030Z","type":"join"}
{"nick":"devsnek","message":"I'm also wondering if this is a good opportunity for operator {}() and operator []()","date":"2018-03-28T14:27:52.331Z","type":"message"}
{"nick":"bradleymeck","action":"is scared","date":"2018-03-28T14:35:31.070Z","type":"action"}
{"nick":"devsnek","message":"kek","date":"2018-03-28T15:00:01.882Z","type":"message"}
{"nick":"Domenic","message":"I'm tentatively against Map/Set literals; parenthesis work pretty great.","date":"2018-03-28T15:06:19.313Z","type":"message"}
{"nick":"Domenic","message":"New syntax does not pull its own weight in these cases","date":"2018-03-28T15:06:32.387Z","type":"message"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-03-28T15:09:17.506Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T15:13:47.237Z","type":"quit"}
{"nick":"devsnek","message":"i agree with the case of sets","date":"2018-03-28T15:16:17.091Z","type":"message"}
{"nick":"devsnek","message":"but declaring a map with the arrays in arrays is pretty not fun","date":"2018-03-28T15:16:31.763Z","type":"message"}
{"nick":"Domenic","message":"All alternative syntaxes are just about the same verbosity, and much harder to understand.","date":"2018-03-28T15:39:49.885Z","type":"message"}
{"nick":"bradleymeck","date":"2018-03-28T15:46:53.877Z","type":"join"}
{"nick":"bradleymeck","message":"Domenic: for pattern matching something to pass patterns back to some custom implementation does seem very appealing though still","date":"2018-03-28T15:47:15.592Z","type":"message"}
{"nick":"Domenic","message":"Hmm I don't see the relation","date":"2018-03-28T15:47:37.416Z","type":"message"}
{"nick":"bradleymeck","message":"the tweet this came from is making some crossover from pattern matching and class literals : https://twitter.com/maybekatz/status/978948404352028672","date":"2018-03-28T15:49:55.905Z","type":"message"}
{"nick":"devsnek","message":"for pattern matching I'm using elixir/Erlang as my guide","date":"2018-03-28T15:50:06.530Z","type":"message"}
{"nick":"devsnek","message":"elixir especially has it down to an artform","date":"2018-03-28T15:50:38.172Z","type":"message"}
{"nick":"Domenic","message":"I see","date":"2018-03-28T15:51:16.983Z","type":"message"}
