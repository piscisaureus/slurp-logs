{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T00:01:17.745Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-03-28T00:07:28.865Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T00:21:59.775Z","type":"join"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T00:25:17.395Z","type":"quit"}
{"nick":"devsnek","message":"petition to change ECMAScript to EASports on april 1st :P","date":"2018-03-28T00:28:56.045Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-03-28T00:39:44.895Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-03-28T00:49:08.364Z","type":"join"}
{"nick":"gibson042","date":"2018-03-28T00:53:12.140Z","type":"join"}
{"nick":"mylesborins","message":"devsnek 😒","date":"2018-03-28T00:53:39.988Z","type":"message"}
{"nick":"mylesborins","message":"😇","date":"2018-03-28T00:53:41.058Z","type":"message"}
{"nick":"devsnek","message":"❤️","date":"2018-03-28T01:03:21.968Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T01:21:59.007Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-03-28T01:40:01.749Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T01:44:08.541Z","type":"quit"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T02:19:40.844Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-03-28T02:26:53.981Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-03-28T03:55:57.167Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-03-28T04:01:30.531Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T04:29:56.844Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2018-03-28T05:21:08.154Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T05:30:14.803Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T06:15:18.365Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-03-28T08:30:59.729Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T08:31:43.770Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-03-28T08:35:32.950Z","type":"quit"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T08:39:40.335Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T09:04:00.342Z","type":"join"}
{"nick":"isiahmeadows","date":"2018-03-28T09:04:43.351Z","type":"join"}
{"nick":"JaseW_","date":"2018-03-28T09:50:04.465Z","type":"join"}
{"nick":"JaseW_","new_nick":"Jayflux","date":"2018-03-28T09:50:12.019Z","type":"nick"}
{"nick":"Jayflux","reason":"Changing host","date":"2018-03-28T09:50:12.267Z","type":"quit"}
{"nick":"Jayflux","date":"2018-03-28T09:50:12.472Z","type":"join"}
{"nick":"Jayflux","new_nick":"JaseW","date":"2018-03-28T09:50:19.067Z","type":"nick"}
{"nick":"JaseW","new_nick":"Jayflux","date":"2018-03-28T09:50:27.347Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T10:16:58.345Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-03-28T10:25:09.104Z","type":"quit"}
{"nick":"mylesborins","date":"2018-03-28T10:25:39.618Z","type":"join"}
{"nick":"keith_miller","date":"2018-03-28T10:33:20.052Z","type":"join"}
{"nick":"AtumT","date":"2018-03-28T10:39:24.389Z","type":"join"}
{"nick":"bradleymeck","date":"2018-03-28T10:49:22.780Z","type":"join"}
{"nick":"gibson042","date":"2018-03-28T10:51:42.040Z","type":"join"}
{"nick":"zkat","message":"hey littledan can i take ur syntax plz: https://twitter.com/maybekatz/status/978948404352028672","date":"2018-03-28T11:07:35.671Z","type":"message"}
{"nick":"zkat","message":"(I'd really like that #)","date":"2018-03-28T11:07:42.253Z","type":"message"}
{"nick":"Jayflux","new_nick":"JaseW","date":"2018-03-28T11:10:47.139Z","type":"nick"}
{"nick":"bradleymeck","message":"zkat: # seems a bit of an odd choice to me, ! seems nice to me (having come from places that use ! for macros/templates)","date":"2018-03-28T11:12:00.212Z","type":"message"}
{"nick":"bradleymeck","message":"I know D and Rust use that, but not sure I've seen binary ! in other places","date":"2018-03-28T11:13:37.625Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: # has significant precedent","date":"2018-03-28T11:19:29.044Z","type":"message"}
{"nick":"zkat","message":"I'm not sure how \"everyone seems to use this for corresponding constructs\" is an \"odd choice\" but","date":"2018-03-28T11:20:35.801Z","type":"message"}
{"nick":"zkat","message":"as in, I can think of 5 languages that do that, off the top of my head, and I can probably find 5 more of them","date":"2018-03-28T11:21:24.846Z","type":"message"}
{"nick":"zkat","message":"including C-like languages","date":"2018-03-28T11:21:35.208Z","type":"message"}
{"nick":"zkat","message":"# for private property access, otoh, is largely inprecedented?","date":"2018-03-28T11:21:47.909Z","type":"message"}
{"nick":"zkat","message":"so","date":"2018-03-28T11:21:49.587Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: # is what JS is looking at for private, so using it for construction seems odd to me","date":"2018-03-28T11:28:39.718Z","type":"message"}
{"nick":"bradleymeck","message":"I'm not sure I buy into other languages making stylistic choices for JS if it conflicts with other syntax","date":"2018-03-28T11:29:11.293Z","type":"message"}
{"nick":"jmdyck","date":"2018-03-28T11:29:47.367Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-03-28T11:31:43.682Z","type":"quit"}
{"nick":"zkat","message":"I don't intend to let private fields keep that syntax if this lands, so there's no conflict","date":"2018-03-28T11:47:39.671Z","type":"message"}
{"nick":"zkat","message":"But if we want to reuse unaries, ~ could be read at \"object similar to\"","date":"2018-03-28T11:48:05.118Z","type":"message"}
{"nick":"zkat","message":"Map~{}","date":"2018-03-28T11:48:18.514Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: what syntax did you have in mind for private?","date":"2018-03-28T11:49:23.864Z","type":"message"}
{"nick":"zkat","message":"None","date":"2018-03-28T11:50:24.146Z","type":"message"}
{"nick":"zkat","message":"🙊","date":"2018-03-28T11:50:30.567Z","type":"message"}
{"nick":"bradleymeck","message":"also, there is still conflict until it gets changed and changing it would probably need a very similar sigil style","date":"2018-03-28T11:50:31.407Z","type":"message"}
{"nick":"bradleymeck","message":"as long as it doesn't correlate to private I am not of strong opinion","date":"2018-03-28T11:51:16.853Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T11:58:55.478Z","type":"quit"}
{"nick":"JaseW","reason":"Remote host closed the connection","date":"2018-03-28T12:05:02.435Z","type":"quit"}
{"nick":"gibson042","date":"2018-03-28T12:10:07.110Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2018-03-28T12:25:35.106Z","type":"quit"}
{"nick":"devsnek","message":"I'm still a fan of private + ->","date":"2018-03-28T12:51:07.010Z","type":"message"}
{"nick":"devsnek","message":"it also occurs to me that Identifier{ } isn't valid syntax right now","date":"2018-03-28T12:55:52.964Z","type":"message"}
{"nick":"devsnek","message":"just asi hazard I guess","date":"2018-03-28T12:56:30.765Z","type":"message"}
{"nick":"devsnek","message":"but I think the overall effect is rather appealing","date":"2018-03-28T12:58:03.787Z","type":"message"}
{"nick":"bradleymeck","date":"2018-03-28T13:02:28.355Z","type":"join"}
{"nick":"pouwerkerk","reason":"Quit: Connection closed for inactivity","date":"2018-03-28T13:16:16.270Z","type":"quit"}
{"nick":"bradleymeck","message":"devsnek: -> gets really awkward when you start thinking of `private #foo;`","date":"2018-03-28T13:20:16.074Z","type":"message"}
{"nick":"bradleymeck","message":"outside of classes*","date":"2018-03-28T13:20:35.006Z","type":"message"}
{"nick":"devsnek","message":"outside of classes?","date":"2018-03-28T13:20:43.619Z","type":"message"}
{"nick":"devsnek","message":"and what is private #foo","date":"2018-03-28T13:21:00.532Z","type":"message"}
{"nick":"bradleymeck","message":"it would allocate a lexically scoped #foo that you could use. sec, there isn't a real proposal yet but I can write example of what people have talked about","date":"2018-03-28T13:23:19.778Z","type":"message"}
{"nick":"devsnek","message":"if the privates are lexically scoped that's cool","date":"2018-03-28T13:25:18.090Z","type":"message"}
{"nick":"devsnek","message":"but since you have to use `this.#`","date":"2018-03-28T13:25:47.616Z","type":"message"}
{"nick":"devsnek","message":"if they're just available as variables in the brackets if the class you can get rid of weird syntax on them","date":"2018-03-28T13:26:26.453Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: https://gist.github.com/bmeck/baa8f21cb0b33d4c0db3aad05a38473a","date":"2018-03-28T13:27:43.038Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: you can't put them into computed property stuff","date":"2018-03-28T13:28:00.170Z","type":"message"}
{"nick":"bradleymeck","message":"cause that means they could be stored into variables","date":"2018-03-28T13:28:12.353Z","type":"message"}
{"nick":"devsnek","message":"so like","date":"2018-03-28T13:28:33.576Z","type":"message"}
{"nick":"bradleymeck","message":"you could share them across modules, but designs around that are still a bit fuzzy","date":"2018-03-28T13:28:44.052Z","type":"message"}
{"nick":"devsnek","message":"why not just add a second Boolean param to symbol","date":"2018-03-28T13:28:48.360Z","type":"message"}
{"nick":"devsnek","message":"called \"totally hidden\" true/false","date":"2018-03-28T13:29:10.956Z","type":"message"}
{"nick":"devsnek","message":"that seems like a nicer approach","date":"2018-03-28T13:29:29.142Z","type":"message"}
{"nick":"bradleymeck","message":"under the hood it could do that, but storing these in variables means they can leak to untrusted places","date":"2018-03-28T13:29:30.753Z","type":"message"}
{"nick":"bradleymeck","message":"let me add an example of cross module sharing that would only let trusted things import the private","date":"2018-03-28T13:29:56.159Z","type":"message"}
{"nick":"devsnek","message":"I get what you're saying","date":"2018-03-28T13:30:06.981Z","type":"message"}
{"nick":"devsnek","message":"it just seems over the top","date":"2018-03-28T13:30:13.890Z","type":"message"}
{"nick":"bradleymeck","message":"how so?","date":"2018-03-28T13:30:24.110Z","type":"message"}
{"nick":"bradleymeck","message":"it acts quite different from a \"value\"","date":"2018-03-28T13:30:35.159Z","type":"message"}
{"nick":"devsnek","message":"like creating new syntax to save js devs from making silly accidents","date":"2018-03-28T13:30:58.486Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: well part of this came out from decorators having concerns with making a new PrivateName primitive type","date":"2018-03-28T13:31:43.736Z","type":"message"}
{"nick":"bradleymeck","message":"it is very hard to make private fields not leak and have a good api","date":"2018-03-28T13:32:04.691Z","type":"message"}
{"nick":"devsnek","message":"what happens when you use a private syntax on a proxy","date":"2018-03-28T13:32:49.859Z","type":"message"}
{"nick":"devsnek","message":"no handlers fired I assume","date":"2018-03-28T13:33:00.640Z","type":"message"}
{"nick":"devsnek","message":"that's the only benefit over some type of Symbol or PrivateName","date":"2018-03-28T13:33:31.409Z","type":"message"}
{"nick":"devsnek","message":"that I can think of*","date":"2018-03-28T13:33:40.171Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not sure I understand how you could use the syntax on a proxy","date":"2018-03-28T13:34:40.481Z","type":"message"}
{"nick":"bradleymeck","message":"just like other internal fields and why Proxy can't work with Promise easily it would not have the proper private fields","date":"2018-03-28T13:34:57.565Z","type":"message"}
{"nick":"bradleymeck","message":"`new Proxy(Promise.resolve(0), {}).then(_=>_)`","date":"2018-03-28T13:35:45.910Z","type":"message"}
{"nick":"devsnek","message":"I just meant like if the object happens to be a proxy","date":"2018-03-28T13:35:50.770Z","type":"message"}
{"nick":"bradleymeck","message":"no handlers, yes","date":"2018-03-28T13:36:22.203Z","type":"message"}
{"nick":"devsnek","message":"would you just be setting internal fields on the proxy object then","date":"2018-03-28T13:36:22.408Z","type":"message"}
{"nick":"bradleymeck","message":"well if you are assigning, you would be assigning to the Proxy instance yea. if you are reading it would be an error if it doesn't exist","date":"2018-03-28T13:37:07.423Z","type":"message"}
{"nick":"bradleymeck","message":"most likely... we could make it return undefined though!","date":"2018-03-28T13:37:17.859Z","type":"message"}
{"nick":"devsnek","message":"undefined seems like the smarter choice","date":"2018-03-28T13:37:35.463Z","type":"message"}
{"nick":"bradleymeck","message":"this is all fluff talk w/o someone willing to try and push through committee currently","date":"2018-03-28T13:37:41.089Z","type":"message"}
{"nick":"devsnek","message":"although the big big question now","date":"2018-03-28T13:37:50.642Z","type":"message"}
{"nick":"devsnek","message":"why this over a weakmap","date":"2018-03-28T13:37:56.210Z","type":"message"}
{"nick":"bradleymeck","message":"easier to analyze, not needing goofy abstractions to prevent prototype mutation, static enough that it doesn't seem to always need a full real weakmap. Similar gains to PrivateSymbol","date":"2018-03-28T13:38:54.246Z","type":"message"}
{"nick":"bradleymeck","message":"error on missing is attractive to me as well so that I don't do any accidental actions thinking something has a private field, but does not","date":"2018-03-28T13:40:04.103Z","type":"message"}
{"nick":"devsnek","message":"well with your example","date":"2018-03-28T13:40:17.689Z","type":"message"}
{"nick":"devsnek","message":"where you're keying objects given to you","date":"2018-03-28T13:40:29.968Z","type":"message"}
{"nick":"devsnek","message":"it would be weird for them to throw imo","date":"2018-03-28T13:40:41.000Z","type":"message"}
{"nick":"devsnek","message":"like object.#x ||= newid() would be impossible","date":"2018-03-28T13:41:11.092Z","type":"message"}
{"nick":"bradleymeck","message":"it means you don't have to do the `in` check to see if something has a private field though","date":"2018-03-28T13:41:31.278Z","type":"message"}
{"nick":"bradleymeck","message":"most of the time I would expect people reading the field to want to error if it doesn't exist","date":"2018-03-28T13:42:05.501Z","type":"message"}
{"nick":"devsnek","message":"I would expect the opposite :p","date":"2018-03-28T13:42:20.282Z","type":"message"}
{"nick":"bradleymeck","message":"initializing the field I think is a less common operation than reading","date":"2018-03-28T13:42:31.274Z","type":"message"}
{"nick":"devsnek","message":"differentiating to regular property access seems like you're exposing implementation details about how js works","date":"2018-03-28T13:43:15.103Z","type":"message"}
{"nick":"devsnek","message":"if that makes sense","date":"2018-03-28T13:43:18.764Z","type":"message"}
{"nick":"bradleymeck","message":"it certainly doesn't act exactly like regular property access, certainly we can't support computed access either, so that already means we have a difference we can't resolve","date":"2018-03-28T13:47:14.643Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-03-28T13:47:29.016Z","type":"quit"}
{"nick":"bradleymeck","message":"-> and .# are more like new types of dispatch operators than property access","date":"2018-03-28T13:48:02.082Z","type":"message"}
{"nick":"bradleymeck","message":"imo","date":"2018-03-28T13:48:09.744Z","type":"message"}
{"nick":"devsnek","message":"I agree with the first","date":"2018-03-28T13:48:14.866Z","type":"message"}
{"nick":"devsnek","message":"less so with the second","date":"2018-03-28T13:48:19.690Z","type":"message"}
{"nick":"devsnek","message":"if it used the arrow I would feel ok with it throwing","date":"2018-03-28T13:48:50.794Z","type":"message"}
{"nick":"devsnek","message":"lol that's weird","date":"2018-03-28T13:48:58.162Z","type":"message"}
{"nick":"devsnek","message":"probs just cuz I'm used to -> from c++","date":"2018-03-28T13:49:47.303Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: I think my hang up is that with .# the hash is part of the name as well when it's declared","date":"2018-03-28T13:50:24.630Z","type":"message"}
{"nick":"devsnek","message":"so it just seems like regular property access","date":"2018-03-28T13:50:34.517Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: we could also make this new thing just `private foo;`","date":"2018-03-28T13:51:37.190Z","type":"message"}
{"nick":"bradleymeck","message":"and you can only get to it using # in various places","date":"2018-03-28T13:51:44.209Z","type":"message"}
{"nick":"devsnek","message":"sgtm","date":"2018-03-28T13:51:59.511Z","type":"message"}
{"nick":"bradleymeck","message":"at stage 0 everything goes","date":"2018-03-28T13:52:04.660Z","type":"message"}
{"nick":"devsnek","message":"unicorn emoji for \"magic accessors\"","date":"2018-03-28T13:52:23.614Z","type":"message"}
{"nick":"devsnek","message":"also tbh js having more and more static stuff feels kinda weird","date":"2018-03-28T13:53:07.079Z","type":"message"}
{"nick":"devsnek","message":"not bad just weird","date":"2018-03-28T13:53:20.110Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: being able to add private fields *after* an object is constructed is quite dynamic","date":"2018-03-28T13:53:36.917Z","type":"message"}
{"nick":"bradleymeck","message":"less dynamic than `o[k]` certainly though","date":"2018-03-28T13:54:03.557Z","type":"message"}
{"nick":"devsnek","message":"totally but i feel like we're also moving more into syntax than ever before","date":"2018-03-28T13:54:32.681Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: oh drat I forgot, in order to do exporting we need it to keep the #","date":"2018-03-28T13:54:46.413Z","type":"message"}
{"nick":"devsnek","message":"oh yeah that makes sense","date":"2018-03-28T13:54:54.339Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: sadly we have had easier times passing syntax than APIs lately through committee","date":"2018-03-28T13:55:13.682Z","type":"message"}
{"nick":"devsnek","message":"or just reuse the private keyword?","date":"2018-03-28T13:55:15.683Z","type":"message"}
{"nick":"devsnek","message":"for exporting/importing","date":"2018-03-28T13:55:23.920Z","type":"message"}
{"nick":"bradleymeck","message":"might be able to reuse private, but rewriting my examples I worry people will read `private foo;` as being able to be used like `o[foo]`","date":"2018-03-28T13:55:53.568Z","type":"message"}
{"nick":"bradleymeck","message":"but syntax has been easier to pass because it often is tied to new kernel semantics","date":"2018-03-28T13:56:10.384Z","type":"message"}
{"nick":"devsnek","message":"ye like right now adding a hash to that foo would make a lot of sense","date":"2018-03-28T13:56:36.960Z","type":"message"}
{"nick":"devsnek","message":"honestly it's just the dot accessor that seems weird in this case","date":"2018-03-28T13:58:36.157Z","type":"message"}
{"nick":"devsnek","message":"having the hash isn't that bad","date":"2018-03-28T13:58:45.862Z","type":"message"}
{"nick":"littledan","message":"zkat I'll license you the syntax space but it's not coming for free","date":"2018-03-28T14:06:00.286Z","type":"message"}
{"nick":"littledan","message":"see stupid sketches in https://github.com/tc39/proposal-extended-numeric-literals#extended-maparray-literals","date":"2018-03-28T14:06:36.990Z","type":"message"}
{"nick":"littledan","message":"anyway I don't see an ambiguity if you overload # for this","date":"2018-03-28T14:06:52.894Z","type":"message"}
{"nick":"littledan","message":"but, I really really liked Keith Cirkel's proposal for {# x: y #} for a frozen object","date":"2018-03-28T14:07:10.235Z","type":"message"}
{"nick":"littledan","message":"and there's also the idea of #{ } for frozen object","date":"2018-03-28T14:07:16.763Z","type":"message"}
{"nick":"devsnek","message":"two hashes feels like some weird evil templating","date":"2018-03-28T14:07:41.124Z","type":"message"}
{"nick":"littledan","message":"it's important to consider the ASI hazard if we permit *both* the syntax sketch you have above *and* the prefix-less frozen object thing","date":"2018-03-28T14:07:56.475Z","type":"message"}
{"nick":"devsnek","message":"is Object.freeze somehow lacking","date":"2018-03-28T14:08:33.419Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not entirely sold on frozen literals","date":"2018-03-28T14:09:50.893Z","type":"message"}
{"nick":"littledan","message":"zkat: Also, consider with new literal syntax if you want to permit caching, like template tags do","date":"2018-03-28T14:10:12.559Z","type":"message"}
{"nick":"bradleymeck","message":"freeze is a one time call","date":"2018-03-28T14:10:14.190Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: how would you do caching if you end up with something like Map#{[foo]: bar}","date":"2018-03-28T14:11:07.892Z","type":"message"}
{"nick":"bradleymeck","message":"2 variables in different positions seems awkward","date":"2018-03-28T14:11:33.918Z","type":"message"}
{"nick":"littledan","message":"well, I don't know what the proposed semantics of Map#{[foo]: bar} are, or the alternative that you're considering awkward","date":"2018-03-28T14:11:47.946Z","type":"message"}
{"nick":"bradleymeck","message":":p","date":"2018-03-28T14:12:34.754Z","type":"message"}
{"nick":"devsnek","message":"when you guys are considering asi hazards","date":"2018-03-28T14:13:07.325Z","type":"message"}
{"nick":"devsnek","message":"is the idea is like \"behaviour X should never change no matter how many newlines are added\" kind of thing?","date":"2018-03-28T14:13:32.100Z","type":"message"}
{"nick":"devsnek","message":"like do you ever have cases where potential asi hazards aren't considered an issue","date":"2018-03-28T14:14:23.064Z","type":"message"}
{"nick":"littledan","message":"I don't think of any of these things as absolute, but as costs and benefits to consider in a tradeoff","date":"2018-03-28T14:15:40.578Z","type":"message"}
{"nick":"littledan","message":"we work together in TC39 to assess the weight of these different constraints. Comments on issues on repositories give us more data to work with in that assessment","date":"2018-03-28T14:16:39.544Z","type":"message"}
{"nick":"devsnek","message":"just wondering if like Map{} and Set[] would ever be considered","date":"2018-03-28T14:17:13.466Z","type":"message"}
{"nick":"devsnek","message":"very obvious asi hazard but nice looking","date":"2018-03-28T14:17:34.137Z","type":"message"}
{"nick":"littledan","message":"actually, I don't know if it is; if the convention is to not put whitespace between the identifier and the  bracket, maybe the ASI hazard isn't so bad","date":"2018-03-28T14:19:08.944Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: there are 2 main locations of ASI hazards that we are trying to reason about most commonly as well so it might make sense to read https://github.com/tc39/ecma262/pull/1062/files . Identifier [ noLineTerminatorHere ] { could be possible but I need to think about member access as well. noLineTerminatorHere is the kind of ASI hazard I'm mostly fine with.","date":"2018-03-28T14:20:07.122Z","type":"message"}
{"nick":"devsnek","message":"that's basically my thinking","date":"2018-03-28T14:20:31.672Z","type":"message"}
{"nick":"bradleymeck","message":"the one where the next line mutates the previous' interpetation... that I need good reasons for if an alternative is easy","date":"2018-03-28T14:20:52.423Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T14:21:26.592Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-03-28T14:27:17.030Z","type":"join"}
{"nick":"devsnek","message":"I'm also wondering if this is a good opportunity for operator {}() and operator []()","date":"2018-03-28T14:27:52.331Z","type":"message"}
{"nick":"bradleymeck","action":"is scared","date":"2018-03-28T14:35:31.070Z","type":"action"}
{"nick":"devsnek","message":"kek","date":"2018-03-28T15:00:01.882Z","type":"message"}
{"nick":"Domenic","message":"I'm tentatively against Map/Set literals; parenthesis work pretty great.","date":"2018-03-28T15:06:19.313Z","type":"message"}
{"nick":"Domenic","message":"New syntax does not pull its own weight in these cases","date":"2018-03-28T15:06:32.387Z","type":"message"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-03-28T15:09:17.506Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T15:13:47.237Z","type":"quit"}
{"nick":"devsnek","message":"i agree with the case of sets","date":"2018-03-28T15:16:17.091Z","type":"message"}
{"nick":"devsnek","message":"but declaring a map with the arrays in arrays is pretty not fun","date":"2018-03-28T15:16:31.763Z","type":"message"}
{"nick":"Domenic","message":"All alternative syntaxes are just about the same verbosity, and much harder to understand.","date":"2018-03-28T15:39:49.885Z","type":"message"}
{"nick":"bradleymeck","date":"2018-03-28T15:46:53.877Z","type":"join"}
{"nick":"bradleymeck","message":"Domenic: for pattern matching something to pass patterns back to some custom implementation does seem very appealing though still","date":"2018-03-28T15:47:15.592Z","type":"message"}
{"nick":"Domenic","message":"Hmm I don't see the relation","date":"2018-03-28T15:47:37.416Z","type":"message"}
{"nick":"bradleymeck","message":"the tweet this came from is making some crossover from pattern matching and class literals : https://twitter.com/maybekatz/status/978948404352028672","date":"2018-03-28T15:49:55.905Z","type":"message"}
{"nick":"devsnek","message":"for pattern matching I'm using elixir/Erlang as my guide","date":"2018-03-28T15:50:06.530Z","type":"message"}
{"nick":"devsnek","message":"elixir especially has it down to an artform","date":"2018-03-28T15:50:38.172Z","type":"message"}
{"nick":"Domenic","message":"I see","date":"2018-03-28T15:51:16.983Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T16:23:13.178Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T16:23:52.420Z","type":"join"}
{"nick":"mylesborins","date":"2018-03-28T16:29:09.332Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T17:03:00.307Z","type":"quit"}
{"nick":"cloudshu","date":"2018-03-28T17:12:29.792Z","type":"join"}
{"nick":"zkat","message":"The point of the syntax is precisely to get consistency around a lot of language constructs and make pattern matching and destructuring nice and extensible.","date":"2018-03-28T17:20:58.611Z","type":"message"}
{"nick":"zkat","message":"and enable some very specific patterns that both of those concepts use elsewhere.","date":"2018-03-28T17:21:09.219Z","type":"message"}
{"nick":"zkat","message":"The construction syntax is the cherry on top, but it makes the destructuring bit more teachable, imo.","date":"2018-03-28T17:21:27.422Z","type":"message"}
{"nick":"zkat","message":"learn once, apply everywhere","date":"2018-03-28T17:21:31.517Z","type":"message"}
{"nick":"zkat","message":"(or `unapply()` if you will)","date":"2018-03-28T17:21:37.835Z","type":"message"}
{"nick":"zkat","message":"If you can make it with `Map#{1: 2}` you can destructure it with `Map#{1: x}` or you can match it with `Map#{1: 2}`. pomf.","date":"2018-03-28T17:22:18.541Z","type":"message"}
{"nick":"zkat","message":"devsnek: Erlang pattern matching (and, by extension, Elixir) is what I have the most experience with, too -- and this patmatch proposal is probably closest to Elixir, semantically, than anything else :)","date":"2018-03-28T17:23:33.161Z","type":"message"}
{"nick":"zkat","message":"omg there's a lot of scrollback y'all. I was taking a nice stroll down the banks of the thames and I come back and tl;dr :P","date":"2018-03-28T17:24:13.920Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-03-28T17:24:23.556Z","type":"message"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T17:24:55.793Z","type":"quit"}
{"nick":"devsnek","message":"zkat: was that tweet yours","date":"2018-03-28T17:25:35.883Z","type":"message"}
{"nick":"zkat","message":"yes, I'm maybekatz of the internet","date":"2018-03-28T17:25:52.257Z","type":"message"}
{"nick":"devsnek","message":"you must have good job security to have your twitter name be \"too gay for this shit\" hehe","date":"2018-03-28T17:26:46.301Z","type":"message"}
{"nick":"zkat","message":"why?","date":"2018-03-28T17:27:37.823Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T17:28:36.969Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-03-28T17:28:58.365Z","type":"join"}
{"nick":"devsnek","message":"i dunno seems like something someone in hr wouldn't like for some reason","date":"2018-03-28T17:29:05.424Z","type":"message"}
{"nick":"zkat","message":"why would hr have a problem with me being too gay to function sometimes","date":"2018-03-28T17:29:27.242Z","type":"message"}
{"nick":"devsnek","message":"heck if i know, i just see stories on google news about people getting fired for social media stuff","date":"2018-03-28T17:30:09.035Z","type":"message"}
{"nick":"zkat","message":"yeah well, doesn't stop the occasional idiot from emailing my employer asking to get me fired","date":"2018-03-28T17:30:43.811Z","type":"message"}
{"nick":"bradleymeck","date":"2018-03-28T17:30:49.896Z","type":"join"}
{"nick":"zkat","message":"but I'm not in this channel to talk about being queer, I'm here to talk about pattern matching~","date":"2018-03-28T17:30:58.202Z","type":"message"}
{"nick":"devsnek","message":"pattern matching is nice","date":"2018-03-28T17:31:09.269Z","type":"message"}
{"nick":"isiahmeadows","message":"hi","date":"2018-03-28T17:31:17.219Z","type":"message"}
{"nick":"devsnek","message":"hello","date":"2018-03-28T17:31:21.877Z","type":"message"}
{"nick":"zkat","message":"hi isiah!","date":"2018-03-28T17:31:50.139Z","type":"message"}
{"nick":"isiahmeadows","message":"btw, i agree with you on pattern matching being nice.","date":"2018-03-28T17:31:54.407Z","type":"message"}
{"nick":"isiahmeadows","message":"*you all","date":"2018-03-28T17:31:58.505Z","type":"message"}
{"nick":"zkat","message":"I agree too","date":"2018-03-28T17:33:48.848Z","type":"message"}
{"nick":"zkat","message":"I also think the tagged collection literal syntax is a superset of stuff like frozen objects, immutable objects, records, etc. I should probably write about all the things it happens to cover lol","date":"2018-03-28T17:34:36.805Z","type":"message"}
{"nick":"devsnek","message":"whats wrong with Object.freez","date":"2018-03-28T17:34:52.217Z","type":"message"}
{"nick":"devsnek","message":"e","date":"2018-03-28T17:34:53.225Z","type":"message"}
{"nick":"zkat","message":"it's a lot of mileage for one character","date":"2018-03-28T17:34:56.130Z","type":"message"}
{"nick":"devsnek","message":"ehhhhhhh","date":"2018-03-28T17:35:03.471Z","type":"message"}
{"nick":"devsnek","message":"imo syntax should only be added when it provides a more explicit alternative","date":"2018-03-28T17:35:46.277Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T17:35:54.418Z","type":"quit"}
{"nick":"devsnek","message":"Object.freeze shows a lot more explicit intent than any syntax","date":"2018-03-28T17:36:06.494Z","type":"message"}
{"nick":"bradleymeck","date":"2018-03-28T17:36:23.597Z","type":"join"}
{"nick":"zkat","message":"Sure, but if someone wants to make a habit of freezing everything, `Frozen#{let: it, g: o}` is legit helpful","date":"2018-03-28T17:37:19.891Z","type":"message"}
{"nick":"zkat","message":"see also, folks who user immutable.js being able to benefit from object literal syntax","date":"2018-03-28T17:37:38.889Z","type":"message"}
{"nick":"devsnek","message":"const Frozen = Object.freeze","date":"2018-03-28T17:37:41.477Z","type":"message"}
{"nick":"devsnek","message":"Frozen({ let: it, g: o})","date":"2018-03-28T17:37:49.608Z","type":"message"}
{"nick":"zkat","message":"so, taking that into account, how do you feel about `new Object('let', it, 'g', o)` being the primary way of constructing objects?","date":"2018-03-28T17:38:36.287Z","type":"message"}
{"nick":"not-an-aardvark","date":"2018-03-28T17:39:30.407Z","type":"join"}
{"nick":"devsnek","message":"i don't think thats a fair comparison","date":"2018-03-28T17:40:30.641Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: freezing is different from construction though","date":"2018-03-28T17:40:43.187Z","type":"message"}
{"nick":"isiahmeadows","message":"zkat: reminds me of https://github.com/tc39/proposal-object-from-entries","date":"2018-03-28T17:40:58.256Z","type":"message"}
{"nick":"devsnek","message":"the difference beteween Frozen#{} and Frozen({}) is one character :/","date":"2018-03-28T17:41:01.733Z","type":"message"}
{"nick":"devsnek","message":"one or two","date":"2018-03-28T17:41:09.353Z","type":"message"}
{"nick":"devsnek","message":"depending on if you're counting length or text diff","date":"2018-03-28T17:41:20.183Z","type":"message"}
{"nick":"zkat","message":"devsnek: one character and, if you're using something other than a standard object (like a map), a complete inability to destructure it effectively.","date":"2018-03-28T17:41:46.465Z","type":"message"}
{"nick":"bradleymeck","message":"i'm getting confused","date":"2018-03-28T17:42:35.980Z","type":"message"}
{"nick":"bradleymeck","message":"are we talking about the literals or the pattern matching","date":"2018-03-28T17:42:46.417Z","type":"message"}
{"nick":"zkat","message":"ok let's roll back","date":"2018-03-28T17:42:57.770Z","type":"message"}
{"nick":"devsnek","message":"zkat do you just want a frozen thing that works on multiple types","date":"2018-03-28T17:43:42.792Z","type":"message"}
{"nick":"zkat","message":"I had a bit of a puzzle trying to work out how to fit in some things that pattern matching is very very nice for, but there was no precedent in JS for (and would thus make adding directly to patmatch a bit of a wart, imo), and on top of that, I was having to deal with a grammar puzzle when I tried to write down the formal grammar for it.","date":"2018-03-28T17:43:57.720Z","type":"message"}
{"nick":"zkat","message":"https://github.com/tc39/proposal-pattern-matching/blob/latest/TAGGED_COLLECTION_LITERALS.md I spawned off this _separate_ proposal that's meant to enhance the core match proposal (which is much smaller now)","date":"2018-03-28T17:44:18.256Z","type":"message"}
{"nick":"devsnek","message":"i can understand wanting like System.freeze(object or map or set or whatever)","date":"2018-03-28T17:44:21.937Z","type":"message"}
{"nick":"devsnek","message":"i don't get where adding new syntax comes into play","date":"2018-03-28T17:44:31.671Z","type":"message"}
{"nick":"zkat","message":"devsnek: ok hold up","date":"2018-03-28T17:44:34.119Z","type":"message"}
{"nick":"zkat","message":"Object.freeze is seriously a tiny microexample that I really don't care much for.","date":"2018-03-28T17:44:52.434Z","type":"message"}
{"nick":"zkat","message":"it does not, itself, show the value of this.","date":"2018-03-28T17:45:02.115Z","type":"message"}
{"nick":"devsnek","message":"collection literals sounds cool","date":"2018-03-28T17:45:38.635Z","type":"message"}
{"nick":"devsnek","message":"i like the idea","date":"2018-03-28T17:45:40.852Z","type":"message"}
{"nick":"isiahmeadows","message":"So, I'm starting to get a bit confused now...","date":"2018-03-28T17:45:48.990Z","type":"message"}
{"nick":"zkat","message":"literally the only reason I mentioned frozen objects is because there's a separate proposal that tries to add literal syntax for them, and this would be able to slurp that up and we can forget about having more syntaxes for different things. I like shooting birds in a barrel like that?","date":"2018-03-28T17:46:06.766Z","type":"message"}
{"nick":"zkat","message":"so let's set aside frozen objects if we're gonna talk about these literals :)","date":"2018-03-28T17:46:30.941Z","type":"message"}
{"nick":"devsnek","message":"as long as no one is proposing adding syntax dedicated to freezing object literals","date":"2018-03-28T17:46:44.137Z","type":"message"}
{"nick":"devsnek","message":"i'mok","date":"2018-03-28T17:46:45.676Z","type":"message"}
{"nick":"zkat","message":"I literally am not doing that. I am saying that this happens to scratch that itch that some folks might have while solving a bigger thing","date":"2018-03-28T17:47:35.471Z","type":"message"}
{"nick":"devsnek","message":"great :D","date":"2018-03-28T17:47:45.683Z","type":"message"}
{"nick":"devsnek","message":"hmm from linclark's es modules cartoon today `The dynamically imported module starts a new graph, which is processed separately.`","date":"2018-03-28T17:48:47.320Z","type":"message"}
{"nick":"devsnek","message":"isn't which graph a dynamic import puts modules in up to the implementor","date":"2018-03-28T17:49:02.617Z","type":"message"}
{"nick":"bradleymeck","message":"technically yes, but fully explaining it in easy to read terms would be hard. I wouldn't want to write that up personally","date":"2018-03-28T17:51:17.972Z","type":"message"}
{"nick":"bradleymeck","message":"the more that is written up as \"host defined\" the harder it will be for people to understand","date":"2018-03-28T17:51:42.221Z","type":"message"}
{"nick":"devsnek","message":"ok","date":"2018-03-28T17:51:49.036Z","type":"message"}
{"nick":"bradleymeck","message":"I think the point in the article was more about how Node and Web do things","date":"2018-03-28T17:51:56.636Z","type":"message"}
{"nick":"devsnek","message":"just wanted to make sure i didn't have a misunderstanding of the spec","date":"2018-03-28T17:52:00.662Z","type":"message"}
{"nick":"bradleymeck","message":"vm.Module certainly doesn't necesarrily follow those rules, nor does importing already loaded modules","date":"2018-03-28T17:52:35.494Z","type":"message"}
{"nick":"devsnek","message":"vm.Module doesn't follow any rules :p","date":"2018-03-28T17:53:24.792Z","type":"message"}
{"nick":"isiahmeadows","message":":)","date":"2018-03-28T17:53:48.939Z","type":"message"}
{"nick":"rwaldron","message":"Hey devsnek, this: '<devsnek>\tyou must have good job security to have your twitter name be \"too gay for this shit\" hehe' is not appropriate for this channel. Please keep discussion on topic, which is defined here: https://www.ecma-international.org/memento/TC39.htm Thanks!","date":"2018-03-28T17:54:29.951Z","type":"message"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T17:54:37.193Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-03-28T17:55:10.225Z","type":"join"}
{"nick":"devsnek","message":"rwaldron: sorry","date":"2018-03-28T17:55:18.049Z","type":"message"}
{"nick":"isiahmeadows","message":"Could I get a few eyes on this set of mini-proposals of mine? https://github.com/isiahmeadows/array-additions-proposal","date":"2018-03-28T18:05:01.105Z","type":"message"}
{"nick":"devsnek","message":"set looks good","date":"2018-03-28T18:06:49.361Z","type":"message"}
{"nick":"devsnek","message":"reject seems pretty unneeded","date":"2018-03-28T18:06:56.760Z","type":"message"}
{"nick":"devsnek","message":"insert seems nice i guess","date":"2018-03-28T18:07:50.750Z","type":"message"}
{"nick":"isiahmeadows","message":"The only one unlocking any true features is `Array.prototype.set`, the other two being more nice-to-haves that are easily shimmed.","date":"2018-03-28T18:09:20.230Z","type":"message"}
{"nick":"jackhorton","date":"2018-03-28T18:23:27.218Z","type":"join"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T18:25:03.360Z","type":"quit"}
{"nick":"isiahmeadows","date":"2018-03-28T18:26:18.364Z","type":"join"}
{"nick":"bradleymeck","message":"isiahmeadows: do we know if libraries already do things with those names? overall they seem fine to me .insert is the most appealing personally","date":"2018-03-28T18:42:43.463Z","type":"message"}
{"nick":"isiahmeadows","message":"Only `.reject` is in libraries. I find it odd that `.insert` isn't, but `.set` is geared towards a memmove-style case, where you currently only see `for` loops used.","date":"2018-03-28T18:44:32.263Z","type":"message"}
{"nick":"isiahmeadows","message":"I detailed in the proposals themselves where most of the relevant prior art is.","date":"2018-03-28T18:45:53.493Z","type":"message"}
{"nick":"isiahmeadows","message":"The only one I strongly want is `Array.prototype.set` (and the rest I could live without if necessary).","date":"2018-03-28T18:48:37.927Z","type":"message"}
{"nick":"TabAtkins","message":"V happy with `insert`, I always find `splice` inscrutable.","date":"2018-03-28T18:50:45.057Z","type":"message"}
{"nick":"srl295","date":"2018-03-28T18:53:50.568Z","type":"join"}
{"nick":"devsnek","message":"i always have to check mdn for which argument is which with splice","date":"2018-03-28T19:04:31.790Z","type":"message"}
{"nick":"isiahmeadows","reason":"Quit: isiahmeadows","date":"2018-03-28T19:04:37.328Z","type":"quit"}
{"nick":"jschoi","message":"zkat: With regard to `#`, the stage-0/1 smart-pipelines proposal also proposes using `#` or `@` as a nullary operator. But as far as I can tell at first glance, this would be compatible with your proposed use of `#`. (It is compatible as well with private properties’ `#` too…I’m not sure about frozen-object literals; I need to check the grammar).","date":"2018-03-28T19:11:18.273Z","type":"message"}
{"nick":"zkat","message":"the problem isn't whether the grammars will parse. They can be made to parse.","date":"2018-03-28T19:12:06.861Z","type":"message"}
{"nick":"jschoi","message":"Visual confusion, right?","date":"2018-03-28T19:12:14.197Z","type":"message"}
{"nick":"zkat","message":"the problem is having this glyph mean 20 completely different things in every context.","date":"2018-03-28T19:12:25.707Z","type":"message"}
{"nick":"jschoi","message":"Right.","date":"2018-03-28T19:12:32.018Z","type":"message"}
{"nick":"jschoi","message":"Just a heads up about yet-another-`#`-using-proposal, heh.","date":"2018-03-28T19:12:56.425Z","type":"message"}
{"nick":"jschoi","message":"Though nullary `@` is still available…","date":"2018-03-28T19:13:09.475Z","type":"message"}
{"nick":"zkat","message":"it's a rat race to see who gets that last common keyboard glyph for their pet feature at this point ;p","date":"2018-03-28T19:13:11.684Z","type":"message"}
{"nick":"zkat","message":"likewise, using `@` for anything but decorators seems ill-advised.","date":"2018-03-28T19:13:39.709Z","type":"message"}
{"nick":"jschoi","message":"We could always try opening non-ASCII Unicode syntax characters, ahaha. Yeah……","date":"2018-03-28T19:13:48.451Z","type":"message"}
{"nick":"zkat","message":"(unless that proposal kicks the bucket)","date":"2018-03-28T19:13:52.631Z","type":"message"}
{"nick":"jschoi","message":"For what it’s worth, related bikeshedding over pipeline placeholders has been occurring at https://github.com/tc39/proposal-pipeline-operator/issues/91, where issues like this have been considered with regard to smart pipelines and other pipeline proposals. `#`, `@`, `?`, `☃`, etc. (The snowman is a joke.) In any case, any use of `#` probably faces similar bikeshedding.","date":"2018-03-28T19:17:33.365Z","type":"message"}
{"nick":"jschoi","message":"In any other proposal, that is.","date":"2018-03-28T19:17:48.573Z","type":"message"}
{"nick":"jschoi","message":"Such a shame that the space of ASCII symbols is so tiny. Readability versus writability…","date":"2018-03-28T19:18:27.625Z","type":"message"}
{"nick":"ljharb","message":"zkat: private's stage 3, # is off limits for anything else, since it'll be impossible to get consensus for dropping it","date":"2018-03-28T19:23:57.962Z","type":"message"}
{"nick":"ljharb","message":"(imo)","date":"2018-03-28T19:24:23.501Z","type":"message"}
{"nick":"ljharb","message":"(also i'd argue that truly private state is exponentially more important than collections at all, let alone collection syntax, but that's probably a longer debate)","date":"2018-03-28T19:25:04.055Z","type":"message"}
{"nick":"zkat","message":"haha I consider private state to be extremely low priority for my interests, in general.","date":"2018-03-28T19:25:33.821Z","type":"message"}
{"nick":"zkat","message":"it's one of those \"sigh ok, as long as I don't have to do it you can have it\" things for me","date":"2018-03-28T19:25:46.469Z","type":"message"}
{"nick":"ljharb","message":"i mean, fair, but i think that's unlikely to be the case on the majority of the committee (and is definitely not the case for a significant percentage of the JS community)","date":"2018-03-28T19:26:20.496Z","type":"message"}
{"nick":"zkat","message":"I've never really understood or found privacy useful in dynamic languages. It seems a bit too condescending for a language like javascript","date":"2018-03-28T19:26:24.885Z","type":"message"}
{"nick":"zkat","message":"(not to mention, annoying in dynamic experimental contexts)","date":"2018-03-28T19:26:39.402Z","type":"message"}
{"nick":"ljharb","message":"closures are JS's only privacy atm; they're super useful.","date":"2018-03-28T19:26:43.973Z","type":"message"}
{"nick":"zkat","message":"privacy thinks the world exists exclusively in statically-execute text files","date":"2018-03-28T19:27:00.811Z","type":"message"}
{"nick":"ljharb","message":"private fields are just performant and ergonomic per-instance closures","date":"2018-03-28T19:27:02.325Z","type":"message"}
{"nick":"ljharb","message":"i mean, other than eval, doesn't it?","date":"2018-03-28T19:27:12.175Z","type":"message"}
{"nick":"zkat","message":"no. In fact, I was hoping import would be a good push for JS towards workbench development.","date":"2018-03-28T19:27:44.274Z","type":"message"}
{"nick":"ljharb","message":"i'm not sure what that means, can you elaborate?","date":"2018-03-28T19:27:52.212Z","type":"message"}
{"nick":"zkat","message":"repl-based development on steroids","date":"2018-03-28T19:28:03.877Z","type":"message"}
{"nick":"zkat","message":"the style of dev Lisp, Erlang, and Smalltalk support","date":"2018-03-28T19:28:14.758Z","type":"message"}
{"nick":"zkat","message":"you keep a running image, incrementally write your program, trying things out and modifying them live.","date":"2018-03-28T19:28:32.366Z","type":"message"}
{"nick":"ljharb","message":"hm - that sounds supremely untenable in a language that primarily runs on the web","date":"2018-03-28T19:28:49.179Z","type":"message"}
{"nick":"zkat","message":"quite the contrary","date":"2018-03-28T19:28:59.400Z","type":"message"}
{"nick":"zkat","message":"modern devtools get VERY close to this dev style","date":"2018-03-28T19:29:09.707Z","type":"message"}
{"nick":"zkat","message":"it's one of the things I enjoyed about webdev the most","date":"2018-03-28T19:29:16.158Z","type":"message"}
{"nick":"zkat","message":"I could just leave the debugger open","date":"2018-03-28T19:29:24.843Z","type":"message"}
{"nick":"ljharb","message":"in dev, yes","date":"2018-03-28T19:29:25.493Z","type":"message"}
{"nick":"ljharb","message":"but not in production","date":"2018-03-28T19:29:27.186Z","type":"message"}
{"nick":"zkat","message":"workbench dev is for dev, not production","date":"2018-03-28T19:29:33.841Z","type":"message"}
{"nick":"ljharb","message":"ok","date":"2018-03-28T19:29:55.585Z","type":"message"}
{"nick":"ljharb","message":"so how would \"for dev, not production\" be a thing that's warranted to be baked into the language?","date":"2018-03-28T19:30:12.072Z","type":"message"}
{"nick":"zkat","message":"(it does also become useful in production in some contexts, but that's more haphazard even in Lisp/Erlang)","date":"2018-03-28T19:30:13.361Z","type":"message"}
{"nick":"zkat","message":"language design very much plays into whether a language can effectively be used in this dev style.","date":"2018-03-28T19:30:38.228Z","type":"message"}
{"nick":"zkat","message":"it's not just a matter of throwing devtools at a wall and assuming they'll stick.","date":"2018-03-28T19:30:53.630Z","type":"message"}
{"nick":"zkat","message":"you're still developing what's supposed to be in production","date":"2018-03-28T19:31:16.048Z","type":"message"}
{"nick":"zkat","message":"you're creating production as you go along.","date":"2018-03-28T19:31:21.367Z","type":"message"}
{"nick":"zkat","message":"if anything, tooling is what should add static semantics later and \"freeze\" the code. I prefer dynamic semantics in the core of the language, which is meant for human consumption, not for computers.","date":"2018-03-28T19:32:06.390Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: why would private prevent devtools from ignoring them? they already ignore various things like const","date":"2018-03-28T19:32:25.739Z","type":"message"}
{"nick":"zkat","message":"I mean as long as I can access/add/remove/modify private fields from the repl, I'm fine with it :)","date":"2018-03-28T19:32:56.520Z","type":"message"}
{"nick":"zkat","message":"but it doesn't sound like that's the intention","date":"2018-03-28T19:33:05.351Z","type":"message"}
{"nick":"bradleymeck","message":"once you open devtools I don't think anything is off the table","date":"2018-03-28T19:33:23.330Z","type":"message"}
{"nick":"zkat","message":"fair","date":"2018-03-28T19:33:31.807Z","type":"message"}
{"nick":"zkat","message":"then why do you want private fields?","date":"2018-03-28T19:33:37.530Z","type":"message"}
{"nick":"zkat","message":"like, what do they get you? If they're accessible for dev, and people can modify sources for convenience?","date":"2018-03-28T19:34:06.786Z","type":"message"}
{"nick":"bradleymeck","message":"because I think it serves your users better https://twitter.com/bradleymeck/status/978769500068810752","date":"2018-03-28T19:34:11.055Z","type":"message"}
{"nick":"bradleymeck","message":"._ is something that slowly makes internals treated as public features","date":"2018-03-28T19:34:32.529Z","type":"message"}
{"nick":"zkat","message":"yeah","date":"2018-03-28T19:34:43.336Z","type":"message"}
{"nick":"zkat","message":"and the actual examples that keep biting node folks because they decide to make them private involves features that were legit useful to the community and other people managed to add in because the language is dynamic enough","date":"2018-03-28T19:35:16.186Z","type":"message"}
{"nick":"ljharb","message":"zkat: public is anything that's observable or reachable in production.","date":"2018-03-28T19:35:26.138Z","type":"message"}
{"nick":"zkat","message":"instead of having to wait for Mt Olympus to bless them with features","date":"2018-03-28T19:35:34.475Z","type":"message"}
{"nick":"ljharb","message":"zkat: iow, \"undocumented\" or \"documented as private\" is irrelevant","date":"2018-03-28T19:35:35.790Z","type":"message"}
{"nick":"zkat","message":"yeah, that sounds great to me","date":"2018-03-28T19:35:46.723Z","type":"message"}
{"nick":"ljharb","message":"if node is making things private that are useful, then those should be public","date":"2018-03-28T19:35:48.764Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: making a designed API and supported is better than telling them that using internals is a good way to approach things","date":"2018-03-28T19:35:53.011Z","type":"message"}
{"nick":"ljharb","message":"but \"let's stick an underscore in front!\" does not private make","date":"2018-03-28T19:35:58.409Z","type":"message"}
{"nick":"zkat","message":"I see literally no problem with having \"nasal demons ahoy\" for adventurous people.","date":"2018-03-28T19:36:00.171Z","type":"message"}
{"nick":"zkat","message":"I'm not saying tell them to use it.","date":"2018-03-28T19:36:10.498Z","type":"message"}
{"nick":"zkat","message":"I'm saying that if reaching into your private world lets people achieve their goals, and they're willing to take the risk with non-semver-managed internals, then go for it","date":"2018-03-28T19:36:37.153Z","type":"message"}
{"nick":"zkat","message":"like, we _literally benefitted from this_","date":"2018-03-28T19:36:42.385Z","type":"message"}
{"nick":"ljharb","message":"i don't agree","date":"2018-03-28T19:36:43.618Z","type":"message"}
{"nick":"zkat","message":"and the argument against it seems to be \"well i design things and i don't like that happening\"","date":"2018-03-28T19:36:56.985Z","type":"message"}
{"nick":"ljharb","message":"i think that by permitting them to take the risk, you're incurring the ethical responsibility for whatever happens.","date":"2018-03-28T19:37:03.091Z","type":"message"}
{"nick":"zkat","message":"meanwhile, the entire ecosystem has been benefitting, because there is _not_ a better API","date":"2018-03-28T19:37:17.102Z","type":"message"}
{"nick":"ljharb","message":"it's the author's fault if the code is misused, no matter how much you didn't want them to do it","date":"2018-03-28T19:37:22.929Z","type":"message"}
{"nick":"zkat","message":"ljharb: it's an API, not human rights","date":"2018-03-28T19:37:27.862Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: I have a very different perspective. instead of working towards a forwards compatible safe API for a use case, using internals is not a good approach","date":"2018-03-28T19:37:29.150Z","type":"message"}
{"nick":"ljharb","message":"i think they're a lot more similar than you're implying.","date":"2018-03-28T19:37:48.717Z","type":"message"}
{"nick":"bradleymeck","message":"once you use internals you make your implementation more fragile as has been seen with custom fs reimplementations several times","date":"2018-03-28T19:37:53.599Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: I like treating programmers as consenting adults that can take care of their own business and suffer their own consequences.","date":"2018-03-28T19:37:53.804Z","type":"message"}
{"nick":"ljharb","message":"zkat: \"we're all adults here\" is a policy that consistently proves to fail somehow, everywhere it's employed.","date":"2018-03-28T19:38:14.047Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: I think that is too simplistic, I think you have a responsibility to make your development robust so that people can be less afraid of using things","date":"2018-03-28T19:38:42.302Z","type":"message"}
{"nick":"zkat","message":"ljharb: I don't think deviating from the scope of it and going into abstract ethics/morality is at all useful or appropriate here.","date":"2018-03-28T19:38:58.438Z","type":"message"}
{"nick":"bradleymeck","message":"by treating people as responsible you are also taking on the responsibility of keeping your internals the same, which I heavily disagree with","date":"2018-03-28T19:39:15.929Z","type":"message"}
{"nick":"ljharb","message":"we don't have to go down that road, but i think it's highly relevant and appropriate ¯\\_(ツ)_/¯","date":"2018-03-28T19:39:18.430Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: and I do. I am entirely on board with documenting semantics, putting warning signs, and willfully breaking people who violate those boundaries.","date":"2018-03-28T19:39:34.048Z","type":"message"}
{"nick":"ljharb","message":"if you're going to claim \"condescending\" then i get to point out that condescension isn't worse than acking that humans do bad things","date":"2018-03-28T19:39:36.201Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: I don't think warning signs are the way to go","date":"2018-03-28T19:39:47.859Z","type":"message"}
{"nick":"bradleymeck","message":"if people want to break internals they can fork things pretty easily","date":"2018-03-28T19:40:08.663Z","type":"message"}
{"nick":"ljharb","message":"forking is fine, then they're authoring the parts that can break.","date":"2018-03-28T19:40:26.124Z","type":"message"}
{"nick":"ljharb","message":"(by exposing them)","date":"2018-03-28T19:40:28.666Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: then your privacy means literally nothing except added complexity","date":"2018-03-28T19:40:40.367Z","type":"message"}
{"nick":"zkat","message":"and it presumes that you've foreseen the entire scope of what someone might do with your API","date":"2018-03-28T19:40:52.779Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: how so? if you fork my project I'm not beholden to give you support. you have to float your patches somehow","date":"2018-03-28T19:41:02.218Z","type":"message"}
{"nick":"zkat","message":"see also: the actual value that shimming literally, actually, had for JS over the years.","date":"2018-03-28T19:41:06.463Z","type":"message"}
{"nick":"ljharb","message":"no, it merely requires that people ask, to be able to do something unforseen","date":"2018-03-28T19:41:06.668Z","type":"message"}
{"nick":"zkat","message":"the modifiability of the universe is a core feature of a language like JS","date":"2018-03-28T19:41:26.490Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: shimming public things is fine, not sure we can compate that","date":"2018-03-28T19:41:30.559Z","type":"message"}
{"nick":"ljharb","message":"that's why it's so critical that individual software packages be robust against modifiability of the universe.","date":"2018-03-28T19:41:49.873Z","type":"message"}
{"nick":"zkat","message":"and it's tremendously ambitious to think your designed API will cover needs in the size of ecosystem we have.","date":"2018-03-28T19:41:54.854Z","type":"message"}
{"nick":"ljharb","message":"it doesn't have to cover all the needs. that's what feature requests are for.","date":"2018-03-28T19:42:10.322Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: if it doesn't cover needs, you add to it.","date":"2018-03-28T19:42:17.772Z","type":"message"}
{"nick":"bradleymeck","message":"and you don't have to be as afraid of changing internals to add to it","date":"2018-03-28T19:42:28.819Z","type":"message"}
{"nick":"zkat","message":"it just seems terribly paternalistic to go to such lengths to enforce privacy.","date":"2018-03-28T19:42:46.242Z","type":"message"}
{"nick":"bradleymeck","message":"how is it paternalistic?","date":"2018-03-28T19:42:55.187Z","type":"message"}
{"nick":"zkat","message":"\"this specific API will never be useful to you\"","date":"2018-03-28T19:43:11.944Z","type":"message"}
{"nick":"zkat","message":"I mean, I literally yell at people all the time for trying to do `require('npm')` and trying to do stuff with it, but","date":"2018-03-28T19:43:39.415Z","type":"message"}
{"nick":"bradleymeck","message":"\"this specific API is an internal detail, if you need it exposed we can figure out how to solve your use case\"","date":"2018-03-28T19:43:46.110Z","type":"message"}
{"nick":"ljharb","message":"imo you're painting a false dichotomy between \"everything is permitted\" and \"you can't do anything i don't let you\". encapsulation allows the author to have more nuance on that spectrum.","date":"2018-03-28T19:43:52.962Z","type":"message"}
{"nick":"zkat","message":"those specific APIs have enabled some tremendous support tooling in Node","date":"2018-03-28T19:44:02.415Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: imagine if we had publicly exposed hooks to do that instead?","date":"2018-03-28T19:44:23.350Z","type":"message"}
{"nick":"zkat","message":"ok then design them so people can move to those","date":"2018-03-28T19:44:35.196Z","type":"message"}
{"nick":"ljharb","message":"and imagine how tremendous it'd be if those APIs had official support, instead of the current situation since npm 3 where the JS APIs break in non-majors all the time and are undocumented and unsupported","date":"2018-03-28T19:44:37.923Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: if they already rely on internals isn't it too late? why would they update until it breaks (see Buffer)","date":"2018-03-28T19:45:00.822Z","type":"message"}
{"nick":"bradleymeck","message":"that one isn't even internal","date":"2018-03-28T19:45:10.113Z","type":"message"}
{"nick":"ljharb","message":"that's not npm being magnanimous and enabling use cases, it's a sloppy accident that could have been intentional and elegant.","date":"2018-03-28T19:45:10.354Z","type":"message"}
{"nick":"zkat","message":"this idealism is exactly why I think privacy is a mistake","date":"2018-03-28T19:45:41.710Z","type":"message"}
{"nick":"zkat","message":"I agree entirely that having proper APIs is wonderful!","date":"2018-03-28T19:45:52.220Z","type":"message"}
{"nick":"zkat","message":"but that's not how writing software works","date":"2018-03-28T19:45:57.028Z","type":"message"}
{"nick":"zkat","message":"I'm not prescient","date":"2018-03-28T19:46:01.851Z","type":"message"}
{"nick":"zkat","message":"how egotistical of me would it be to assume I am","date":"2018-03-28T19:46:09.707Z","type":"message"}
{"nick":"bradleymeck","message":"i see it as encouraging communication and avoiding footguns, how is it idealism?","date":"2018-03-28T19:46:09.912Z","type":"message"}
{"nick":"ljharb","message":"you don't have to be. it's simply saying that people have to *ask* so that an API can fit their use cases","date":"2018-03-28T19:46:28.272Z","type":"message"}
{"nick":"zkat","message":"because I'd like people to not have to bend over backwards to get things done more than they already are.","date":"2018-03-28T19:46:38.378Z","type":"message"}
{"nick":"zkat","message":"sometimes, people pull off things you wouldn't imagine","date":"2018-03-28T19:47:06.162Z","type":"message"}
{"nick":"zkat","message":"that's super valuable","date":"2018-03-28T19:47:08.882Z","type":"message"}
{"nick":"zkat","message":"I'd rather keep that ability, even if it's ugly sometimes","date":"2018-03-28T19:47:14.790Z","type":"message"}
{"nick":"ljharb","message":"they can do that with PRs.","date":"2018-03-28T19:47:23.399Z","type":"message"}
{"nick":"zkat","message":"sure, and they can also solve their problem themselves.","date":"2018-03-28T19:47:40.042Z","type":"message"}
{"nick":"bradleymeck","message":"i don't think asking for a feature/moving forward with a PR is any more burden than learning how internals work and then relying on them","date":"2018-03-28T19:47:40.432Z","type":"message"}
{"nick":"bradleymeck","message":"privacy encourages exposing under served usecases, it isn't just a gate keeping mechanism","date":"2018-03-28T19:48:03.309Z","type":"message"}
{"nick":"zkat","message":"so my point is privacy features are this... strange power move on the side of developers","date":"2018-03-28T19:48:06.148Z","type":"message"}
{"nick":"zkat","message":"but tool devs aren't the one running the code","date":"2018-03-28T19:48:15.250Z","type":"message"}
{"nick":"zkat","message":"users are","date":"2018-03-28T19:48:16.204Z","type":"message"}
{"nick":"zkat","message":"let them do for themselves what they will","date":"2018-03-28T19:48:20.990Z","type":"message"}
{"nick":"ljharb","message":"developers already have that power with everything but instances","date":"2018-03-28T19:48:30.800Z","type":"message"}
{"nick":"zkat","message":"let them have it with instances, and we're covered","date":"2018-03-28T19:48:41.907Z","type":"message"}
{"nick":"ljharb","message":"this is just filling in the gap.","date":"2018-03-28T19:48:42.933Z","type":"message"}
{"nick":"ljharb","message":"yes, that's what private state is","date":"2018-03-28T19:48:46.504Z","type":"message"}
{"nick":"zkat","message":"it just all seems terribly pointless","date":"2018-03-28T19:48:49.041Z","type":"message"}
{"nick":"bradleymeck","message":"i don't understand the \"users\" bit, sure they are the ones running a process but they can always fork things too?","date":"2018-03-28T19:48:49.341Z","type":"message"}
{"nick":"ljharb","message":"private fields, rather","date":"2018-03-28T19:48:55.072Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: why should they fork when they can patch?","date":"2018-03-28T19:49:09.038Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: so that other people can install it","date":"2018-03-28T19:49:25.108Z","type":"message"}
{"nick":"zkat","message":"like, why is it that important to raise the bar like that?","date":"2018-03-28T19:49:27.232Z","type":"message"}
{"nick":"zkat","message":"other people can still install your original","date":"2018-03-28T19:49:38.166Z","type":"message"}
{"nick":"bradleymeck","message":"well you forked it because you are using unsupported things, that raises the bar already?","date":"2018-03-28T19:50:06.621Z","type":"message"}
{"nick":"zkat","message":"eh, you can usually get away with it for a while. That's good enough for me ;)","date":"2018-03-28T19:50:27.022Z","type":"message"}
{"nick":"bradleymeck","message":"using internals means you learned the internals already as well, why are people wanting to keep using internals rather than progressing the library to publicly handle things?","date":"2018-03-28T19:50:50.052Z","type":"message"}
{"nick":"zkat","message":"\"why can't I do this?\" \"because I don't wanna let you\" \"but I could, if you weren't making that choice for me. The code can do it\" \"I don't want you to\"","date":"2018-03-28T19:50:56.149Z","type":"message"}
{"nick":"zkat","message":"^ I reeeeally am not into this attitude","date":"2018-03-28T19:51:07.164Z","type":"message"}
{"nick":"bradleymeck","message":"I would hope it is never \"because I don't wanna let you\"","date":"2018-03-28T19:51:15.181Z","type":"message"}
{"nick":"zkat","message":"go ahead and progress your externals","date":"2018-03-28T19:51:17.884Z","type":"message"}
{"nick":"zkat","message":"and then tell people to move off the private one","date":"2018-03-28T19:51:24.389Z","type":"message"}
{"nick":"zkat","message":"and when you have an equivalent, break 'em","date":"2018-03-28T19:51:28.982Z","type":"message"}
{"nick":"bradleymeck","message":"thats a major breaking change, vs just making the public use case one time","date":"2018-03-28T19:51:47.536Z","type":"message"}
{"nick":"zkat","message":"privacy is _literally_ \"because I don't wanna let you\"","date":"2018-03-28T19:51:49.976Z","type":"message"}
{"nick":"zkat","message":"but it gets even worse when you leave open source","date":"2018-03-28T19:51:55.536Z","type":"message"}
{"nick":"zkat","message":"now you're taking on that attitude at a very small scale, with your own coworkers","date":"2018-03-28T19:52:07.544Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: I *heavily* disagree and would take offense at that sometimes","date":"2018-03-28T19:52:08.348Z","type":"message"}
{"nick":"zkat","message":"that's so territorial","date":"2018-03-28T19:52:11.928Z","type":"message"}
{"nick":"bradleymeck","message":"sometimes I'm still developing internals but am publishing things","date":"2018-03-28T19:52:23.220Z","type":"message"}
{"nick":"Fishrock123","date":"2018-03-28T19:52:24.139Z","type":"join"}
{"nick":"bradleymeck","message":"the more people rely on internals the less I can refactor during those times","date":"2018-03-28T19:52:36.413Z","type":"message"}
{"nick":"zkat","message":"ok","date":"2018-03-28T19:52:56.503Z","type":"message"}
{"nick":"zkat","message":"please do your best! 🎉","date":"2018-03-28T19:53:05.111Z","type":"message"}
{"nick":"zkat","message":"(sorry, that was more sarcastic than is appropriate)","date":"2018-03-28T19:53:22.664Z","type":"message"}
{"nick":"zkat","message":"the point is, this all feels like bending over backwards at the _expense_ of the people running the code, not their benefit.","date":"2018-03-28T19:53:43.023Z","type":"message"}
{"nick":"zkat","message":"and I think a language should be designed for empowering users, not swatting their hands from across the internet at them because you have your own opinions about something.","date":"2018-03-28T19:54:24.232Z","type":"message"}
{"nick":"bradleymeck","message":"I only see _expense_ if people don't communicate, right now we have existing expense because people harden internals to the point that they cannot change","date":"2018-03-28T19:55:00.829Z","type":"message"}
{"nick":"ljharb","message":"devs are users too","date":"2018-03-28T19:55:23.371Z","type":"message"}
{"nick":"bradleymeck","message":"I want people to communicate about when things are sub optimal, not create cliques of tribal knowledge around internals","date":"2018-03-28T19:55:36.519Z","type":"message"}
{"nick":"zkat","message":"privacy is designed to be user-hostile. So no, I'm still not okay with it as a concept.","date":"2018-03-28T19:55:44.809Z","type":"message"}
{"nick":"ljharb","message":"as an author, i am empowered when i'm able to improve my library without breaking people.","date":"2018-03-28T19:55:46.042Z","type":"message"}
{"nick":"zkat","message":"I'd rather _devs_ bend over backwards if they want to inconvenience their consumers","date":"2018-03-28T19:55:54.368Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: I do not see it as user-hostile","date":"2018-03-28T19:55:57.523Z","type":"message"}
{"nick":"ljharb","message":"it's not user-hostile to prevent people from doing things they shouldn't be doing in the first place.","date":"2018-03-28T19:55:58.842Z","type":"message"}
{"nick":"zkat","message":"and we already have enough tools to allow devs to bend over backwards to do that.","date":"2018-03-28T19:56:06.668Z","type":"message"}
{"nick":"zkat","message":"it seems enough for me","date":"2018-03-28T19:56:09.894Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: users are the people who run applications more than the people writing code","date":"2018-03-28T19:56:22.208Z","type":"message"}
{"nick":"zkat","message":"I think deciding that you get to decide for people what they're allowed to do when the code makes it possible _is_ user-hostile","date":"2018-03-28T19:56:33.373Z","type":"message"}
{"nick":"ljharb","message":"that's literally what being a library author is","date":"2018-03-28T19:56:49.176Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: tell that to browser plugin users.","date":"2018-03-28T19:56:50.200Z","type":"message"}
{"nick":"ljharb","message":"otherwise the user would just write the abstraction themselves, since the language already allows it","date":"2018-03-28T19:57:07.036Z","type":"message"}
{"nick":"devsnek","message":"is this an argument about privates being user hostile","date":"2018-03-28T19:57:10.550Z","type":"message"}
{"nick":"bradleymeck","message":"library and application authors differ but both are valid users, but people running applications are different as well. we need to respect *all* of them","date":"2018-03-28T19:57:11.642Z","type":"message"}
{"nick":"zkat","message":"ljharb: lacking code paths is not the same as specifically banning superficially-usable things.","date":"2018-03-28T19:57:24.698Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: we already have privacy from closures, I don't think we should make those public either","date":"2018-03-28T19:57:44.457Z","type":"message"}
{"nick":"devsnek","message":"i think the most important part of designing a library used by people is api design","date":"2018-03-28T19:57:44.750Z","type":"message"}
{"nick":"zkat","message":"I'd rather devs pay a serious price if they wanna get into consumers' business like that.","date":"2018-03-28T19:57:50.306Z","type":"message"}
{"nick":"ljharb","message":"zkat: if privacy is doing nothing except hiding something that's otherwise usable, then that thing should surely be exposed or in a separate package. but that's rarely what it's doing.","date":"2018-03-28T19:58:00.015Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: I already eyeroll at people using closures to do information hiding.","date":"2018-03-28T19:58:09.642Z","type":"message"}
{"nick":"ljharb","message":"devsnek: agreed! but your API is \"everything that can possibly be seen or done\" of your library.","date":"2018-03-28T19:58:23.955Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2018-03-28T19:58:29.398Z","type":"message"}
{"nick":"devsnek","message":"thats why privates are important","date":"2018-03-28T19:58:39.035Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: that seems fine on a personal opinion, but I think we have real arguments about why privacy can be good for both authors and consumers","date":"2018-03-28T19:58:46.517Z","type":"message"}
{"nick":"zkat","message":"this is like, deeply against what I see as the things that have made JS succeed on the web (the ability to openly access and manipulate the application world)","date":"2018-03-28T19:59:02.164Z","type":"message"}
{"nick":"devsnek","message":"node.js as an example has a ton of underscore property baggage","date":"2018-03-28T19:59:23.767Z","type":"message"}
{"nick":"zkat","message":"I have real arguments about why it's really discomforting to see this much effort being put into this sort of thing","date":"2018-03-28T19:59:30.321Z","type":"message"}
{"nick":"ljharb","message":"that's not the only things that have made JS successful","date":"2018-03-28T19:59:34.898Z","type":"message"}
{"nick":"devsnek","message":"arguably v8 is also very successful","date":"2018-03-28T19:59:49.684Z","type":"message"}
{"nick":"ljharb","message":"and in fact, the ability to lock things down via closures is one of the *huge* reasons JS has been successful","date":"2018-03-28T19:59:50.901Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: internal slots have long been part of JS, I'm not sure we ever had full access to all things","date":"2018-03-28T19:59:51.106Z","type":"message"}
{"nick":"ljharb","message":"modules themselves are a form of privacy, because they have a scope","date":"2018-03-28T20:00:13.672Z","type":"message"}
{"nick":"zkat","message":"ljharb: when a form breaks in my browser, I pop up the debugger and fix it, and it works, because the code and data are open for access. For non-programmers, this manifests as installable user scripts.","date":"2018-03-28T20:00:16.549Z","type":"message"}
{"nick":"zkat","message":"privacy is _hostile to that use case_","date":"2018-03-28T20:00:21.837Z","type":"message"}
{"nick":"ljharb","message":"yes, that is true","date":"2018-03-28T20:00:26.012Z","type":"message"}
{"nick":"ljharb","message":"so are closures tho. and modules.","date":"2018-03-28T20:00:31.392Z","type":"message"}
{"nick":"zkat","message":"it's like adding built-in obfuscation to the language (it is literally obfuscation)","date":"2018-03-28T20:00:38.421Z","type":"message"}
{"nick":"ljharb","message":"and that's a good thing, because then sites get far less bug reports about extensions breaking their site.","date":"2018-03-28T20:00:44.304Z","type":"message"}
{"nick":"zkat","message":"modules are super nice because you _can_ dynamically modify them!","date":"2018-03-28T20:00:53.591Z","type":"message"}
{"nick":"devsnek","message":"the amount of effort devs in js go to to hide stuff without privates","date":"2018-03-28T20:01:08.129Z","type":"message"}
{"nick":"ljharb","message":"not after it's been imported, afaik","date":"2018-03-28T20:01:08.756Z","type":"message"}
{"nick":"devsnek","message":"i think the #1 usage of WeakMap is polyfilling private properties","date":"2018-03-28T20:01:31.919Z","type":"message"}
{"nick":"zkat","message":"like, I'm super stoked about how the  module semantics can theoretically let me reload a module file and continue using it normally in a running application, with different internal code (in most/many cases)","date":"2018-03-28T20:01:32.288Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: what do you mean modify them?","date":"2018-03-28T20:01:35.000Z","type":"message"}
{"nick":"ljharb","message":"theoretically, but that's not actually possible atm","date":"2018-03-28T20:01:44.204Z","type":"message"}
{"nick":"bradleymeck","message":"hot reloading isn't possible in the current spec","date":"2018-03-28T20:01:48.856Z","type":"message"}
{"nick":"zkat","message":"closure-style modules screw you over on the dynamic side of things at a deep conceptual level","date":"2018-03-28T20:01:54.714Z","type":"message"}
{"nick":"ljharb","message":"and any API that makes it possible would never fly unless it also had a way to *lock down* a module from letting that happen","date":"2018-03-28T20:02:05.292Z","type":"message"}
{"nick":"zkat","message":"esm lays the groundwork for you reloading things interactively","date":"2018-03-28T20:02:09.772Z","type":"message"}
{"nick":"devsnek","message":"a es module is already a closure","date":"2018-03-28T20:02:12.239Z","type":"message"}
{"nick":"ljharb","message":"so is a CJS module.","date":"2018-03-28T20:02:23.549Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: I'm not sure I understand that","date":"2018-03-28T20:02:25.487Z","type":"message"}
{"nick":"bradleymeck","message":"you would have to replace all the bindings that a Module Record has linked to other modules which could invalidate a bunch of things like reference identity","date":"2018-03-28T20:03:07.455Z","type":"message"}
{"nick":"ljharb","message":"hot reloading has tons of weird edge cases in the react world due to that.","date":"2018-03-28T20:03:24.457Z","type":"message"}
{"nick":"devsnek","message":"in theory as long as you don't change the namespace shape you could implement an engine that lets you change the source","date":"2018-03-28T20:03:45.291Z","type":"message"}
{"nick":"devsnek","message":"it sounds super dangerous and fragile tho","date":"2018-03-28T20:03:52.996Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: if you have `import {frobIt} from './my-cool-thing.js'`, and then you have your code calling `frobIt()`, and you're working interactively, you can go and rewrite `frobIt` in `my-cool-thing.js`, reload the file, and the reference to `frobIt` can (on a certain conceptual level) be replaced by the loader on the fly.","date":"2018-03-28T20:04:08.828Z","type":"message"}
{"nick":"ljharb","message":"zkat: not if someone's done `const f = frobIt` tho, because then the binding isn't live anymore.","date":"2018-03-28T20:04:30.178Z","type":"message"}
{"nick":"zkat","message":"like, this isn't pipe dream stuff. This is a super productive mode of development available to existing languages that works very well","date":"2018-03-28T20:04:35.739Z","type":"message"}
{"nick":"ljharb","message":"live bindings would have to be viral for that to actually work out","date":"2018-03-28T20:04:38.003Z","type":"message"}
{"nick":"bradleymeck","message":"with devtools you could do that, but JS itself doesn't expose such possibilities","date":"2018-03-28T20:04:41.047Z","type":"message"}
{"nick":"zkat","message":"ljharb: correct, it doesn't and that's fine.","date":"2018-03-28T20:04:42.907Z","type":"message"}
{"nick":"zkat","message":"reality is people who do this style of dev become well aware of that.","date":"2018-03-28T20:04:54.072Z","type":"message"}
{"nick":"ljharb","message":"zkat: so then you get a bunch of weird edge cases where some things have the old frobit and some things have the new one","date":"2018-03-28T20:05:01.967Z","type":"message"}
{"nick":"ljharb","message":"right, so now you're hugely constraining how someone can write code in order to get the benefits you're alleging","date":"2018-03-28T20:05:19.038Z","type":"message"}
{"nick":"bradleymeck","message":"most of these sound like you just want to use devtools instead of w/e code editor you currently are using","date":"2018-03-28T20:05:19.243Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: I'm fine with that level, but this becomes significantly harder when you're assigning module values directly to lexical variables.","date":"2018-03-28T20:05:21.445Z","type":"message"}
{"nick":"devsnek","message":"you would have to track the relationship between every variable assignment throughout the entire lifetime of theapp","date":"2018-03-28T20:05:23.657Z","type":"message"}
{"nick":"zkat","message":"at least semantically very weird.","date":"2018-03-28T20:05:27.605Z","type":"message"}
{"nick":"ljharb","message":"`promise.then(frobIt)` breaks the liveness too","date":"2018-03-28T20:05:39.850Z","type":"message"}
{"nick":"zkat","message":"devsnek: nah","date":"2018-03-28T20:05:40.764Z","type":"message"}
{"nick":"devsnek","message":"const x = frobIt","date":"2018-03-28T20:05:47.873Z","type":"message"}
{"nick":"devsnek","message":"const y = x","date":"2018-03-28T20:05:53.150Z","type":"message"}
{"nick":"zkat","message":"ljharb: promise.then(() => frobIt()) does not :)","date":"2018-03-28T20:05:57.006Z","type":"message"}
{"nick":"devsnek","message":"const z = { y }","date":"2018-03-28T20:05:58.537Z","type":"message"}
{"nick":"ljharb","message":"as does `frobIt.bind()`","date":"2018-03-28T20:06:00.824Z","type":"message"}
{"nick":"zkat","message":"devsnek: see above comment about people being aware of it","date":"2018-03-28T20:06:07.003Z","type":"message"}
{"nick":"devsnek","message":"what the hell is the value of z.y","date":"2018-03-28T20:06:07.602Z","type":"message"}
{"nick":"devsnek","message":"if frobIt export changes","date":"2018-03-28T20:06:14.689Z","type":"message"}
{"nick":"ljharb","message":"zkat: sure, i agree you can write code to preserve it. but that's cutting out a large part of how JS works, just to make hot reloading work","date":"2018-03-28T20:06:16.877Z","type":"message"}
{"nick":"zkat","message":"ljharb: .bind \"sounds like a you problem, not a me problem\" :P","date":"2018-03-28T20:06:20.768Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2018-03-28T20:06:23.500Z","type":"message"}
{"nick":"ljharb","message":"it's a TC39 problem.","date":"2018-03-28T20:06:28.456Z","type":"message"}
{"nick":"ljharb","message":"and a browser problem.","date":"2018-03-28T20:06:31.892Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: devtools already has ways to locate all the variables/properties holding a specific value","date":"2018-03-28T20:06:33.489Z","type":"message"}
{"nick":"ljharb","message":"iow the language already prohibits holistically solving the use case you want.","date":"2018-03-28T20:06:48.863Z","type":"message"}
{"nick":"bradleymeck","message":"I don't see why it couldn't let you do a replace","date":"2018-03-28T20:06:50.592Z","type":"message"}
{"nick":"ljharb","message":"you can always constrain yourself to a subset, but that's not something that's tenable from a language design or environment design level.","date":"2018-03-28T20:07:06.706Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: the language does from spec but devtools and a good editing UX is the point here I think","date":"2018-03-28T20:07:29.220Z","type":"message"}
{"nick":"zkat","message":"I don't really know enough about the actual defined mechanics of modules but it sounds like they were designed to prevent a use case I would've loved to have. Oh well.","date":"2018-03-28T20:07:41.354Z","type":"message"}
{"nick":"zkat","message":"anyway","date":"2018-03-28T20:07:44.144Z","type":"message"}
{"nick":"bradleymeck","message":"devtools work outside of spec all the time since they are power tools","date":"2018-03-28T20:07:51.654Z","type":"message"}
{"nick":"zkat","message":"tl;dr I like dynamicity and the more open the world is, the better.","date":"2018-03-28T20:07:54.827Z","type":"message"}
{"nick":"zkat","message":"I can live with the fact that other people prefer to lay down the law","date":"2018-03-28T20:08:13.374Z","type":"message"}
{"nick":"zkat","message":"shrug","date":"2018-03-28T20:08:15.423Z","type":"message"}
{"nick":"bradleymeck","message":"zkat: mind if I open an issue about find/replace and take up a few of your time as I try to refine it","date":"2018-03-28T20:08:19.241Z","type":"message"}
{"nick":"zkat","message":"bradleymeck: about the what bit?","date":"2018-03-28T20:08:36.571Z","type":"message"}
{"nick":"bradleymeck","message":"find all variables/properties with a value $foo , replace all locations with new value $bar","date":"2018-03-28T20:09:16.178Z","type":"message"}
{"nick":"bradleymeck","message":"chrome devtools *can* do this, but there is no UI to do so","date":"2018-03-28T20:09:27.507Z","type":"message"}
{"nick":"zkat","message":"that sounds like so much effort, but go for it :)","date":"2018-03-28T20:09:34.801Z","type":"message"}
{"nick":"zkat","message":"I'm probably too used to languages that make this easy","date":"2018-03-28T20:09:43.299Z","type":"message"}
{"nick":"bradleymeck","message":"not as much effort as it sounds like but not trivial","date":"2018-03-28T20:09:45.690Z","type":"message"}
{"nick":"zkat","message":"ETOOSPOILED","date":"2018-03-28T20:09:50.944Z","type":"message"}
{"nick":"ljharb","message":"so separately, that tagged collection thing, could that be a separate repo instead of inside pattern matching? or is it related","date":"2018-03-28T20:10:05.171Z","type":"message"}
{"nick":"zkat","message":"Erlang and CL, the two main languages I've done this in, have this sort of thing pretty well cooked into their package/module designs.","date":"2018-03-28T20:10:18.713Z","type":"message"}
{"nick":"zkat","message":"not that they have the best module designs :)","date":"2018-03-28T20:10:29.760Z","type":"message"}
{"nick":"zkat","message":"but it's a thing they designed _for_","date":"2018-03-28T20:10:35.820Z","type":"message"}
{"nick":"zkat","message":"and within that universe, works p well","date":"2018-03-28T20:10:43.484Z","type":"message"}
{"nick":"zkat","message":"ljharb: I'll probably move it to a separate repo later. It's in there because I refactored it out today.","date":"2018-03-28T20:11:04.300Z","type":"message"}
{"nick":"ljharb","message":"gotcha, i didn't realize it was in the pattern matching doc in the first place","date":"2018-03-28T20:11:17.064Z","type":"message"}
{"nick":"zkat","message":"I was trying to cut down the regular `match` proposal to what I think is the minimal spec that works off existing language syntax/semantics as _closely_ as possible.","date":"2018-03-28T20:11:34.006Z","type":"message"}
{"nick":"zkat","message":"ljharb: they were originally described as extractors, and were not a generalized concept -- they were meant to be specific to `match`","date":"2018-03-28T20:12:04.010Z","type":"message"}
{"nick":"zkat","message":"and then I realized the feature would be way better if it was a general concept around literals, rather than this magic incantation in match","date":"2018-03-28T20:12:28.608Z","type":"message"}
{"nick":"zkat","message":"unifying the concepts felt very elegant :)","date":"2018-03-28T20:12:40.377Z","type":"message"}
{"nick":"jwalden","date":"2018-03-28T20:14:31.204Z","type":"join"}
{"nick":"ljharb","message":"hm, ok, i'll have to reread it, thanks","date":"2018-03-28T20:14:35.143Z","type":"message"}
{"nick":"zkat","message":"you can safely ignore tagged collection literals for the time being","date":"2018-03-28T20:15:18.646Z","type":"message"}
{"nick":"zkat","message":"there is literally nothing of substance that can be commented on right now.","date":"2018-03-28T20:15:47.209Z","type":"message"}
{"nick":"zkat","message":"besides a very very general consideration of the concept but that's probably premature, too.","date":"2018-03-28T20:16:13.798Z","type":"message"}
{"nick":"Fishrock123","reason":"Read error: Connection reset by peer","date":"2018-03-28T20:21:03.118Z","type":"quit"}
{"nick":"ljharb","message":"kk","date":"2018-03-28T20:21:17.589Z","type":"message"}
{"nick":"zkat","message":"the pattern match proposal is doing alright, though. I very much plan on polishing it up a bit more and making some Executive Decisions™ about some bikesheds and then throwing it at the committee in May. I've already got a 60min slot for it 😁","date":"2018-03-28T20:22:03.553Z","type":"message"}
{"nick":"zkat","message":"and once that one's in stage 1, it feels more justifiable to put serious work into the sub-proposals idk","date":"2018-03-28T20:22:45.674Z","type":"message"}
{"nick":"ljharb","message":"i'd recommend not making too many executive decisions at this early stage","date":"2018-03-28T20:25:04.875Z","type":"message"}
{"nick":"tobie","date":"2018-03-28T20:25:07.160Z","type":"join"}
{"nick":"ljharb","message":"i find that effective presentations state all the bikesheds along with a strong preference, or at least open with the preference but then casually mention the bikesheds :-)","date":"2018-03-28T20:25:30.891Z","type":"message"}
{"nick":"ljharb","message":"but either way i look forward to the agenda item :-D","date":"2018-03-28T20:25:47.169Z","type":"message"}
{"nick":"zkat","message":"early stage sounds like exactly the time to make all the executive decisions, tbh","date":"2018-03-28T20:28:07.218Z","type":"message"}
{"nick":"ljharb","message":"maybe so","date":"2018-03-28T20:28:26.808Z","type":"message"}
{"nick":"zkat","message":"I prefer \"define the optimal, bait with bikesheds\"","date":"2018-03-28T20:28:39.115Z","type":"message"}
{"nick":"ljharb","message":"i guess it depends on whether the \"things decided against\" are things that are likely to be asked about in committee anyways or not","date":"2018-03-28T20:28:55.347Z","type":"message"}
{"nick":"ljharb","message":"(obv this only applies to bikesheds, ie, there's no strong technical argument one way or the other)","date":"2018-03-28T20:29:09.548Z","type":"message"}
{"nick":"zkat","message":"the psychology of people wanting to have opinions is... fascinating and also something that I think needs conscious management in committee environments 😁","date":"2018-03-28T20:29:16.240Z","type":"message"}
{"nick":"zkat","message":"(as someone who came to programming from the arts, and dealt with a lot of bureaucracy related to that in school)","date":"2018-03-28T20:29:40.919Z","type":"message"}
{"nick":"Fishrock123","date":"2018-03-28T20:29:58.546Z","type":"join"}
{"nick":"zkat","message":"lemme tell you about helicopters some time.","date":"2018-03-28T20:30:05.200Z","type":"message"}
{"nick":"devsnek","message":"are there any js types that don't have some sort of spiritual equivalent in c++","date":"2018-03-28T20:30:07.112Z","type":"message"}
{"nick":"devsnek","message":"symbols maybe?","date":"2018-03-28T20:30:23.539Z","type":"message"}
{"nick":"zkat","message":"Symbols are enums for dynlangs :)","date":"2018-03-28T20:30:36.468Z","type":"message"}
{"nick":"devsnek","message":"huh","date":"2018-03-28T20:30:55.639Z","type":"message"}
{"nick":"zkat","message":"dynamic languages","date":"2018-03-28T20:31:00.884Z","type":"message"}
{"nick":"devsnek","message":"no the first part","date":"2018-03-28T20:31:05.987Z","type":"message"}
{"nick":"zkat","message":"they're enums","date":"2018-03-28T20:31:10.710Z","type":"message"}
{"nick":"ljharb","message":"enums of one?","date":"2018-03-28T20:31:13.136Z","type":"message"}
{"nick":"devsnek","message":"how is a symbol an enum","date":"2018-03-28T20:31:49.019Z","type":"message"}
{"nick":"devsnek","message":"maybe an enum member?","date":"2018-03-28T20:31:54.152Z","type":"message"}
{"nick":"zkat","message":"I mean, symbols are kinda workhorses in a lot of languages that have them, but they often boil down to enums lol","date":"2018-03-28T20:31:57.769Z","type":"message"}
{"nick":"zkat","message":"yes, _members_ of enums. Individual values.","date":"2018-03-28T20:32:09.864Z","type":"message"}
{"nick":"zkat","message":"\"here's a random thing that's kinda unique that you can check against\"","date":"2018-03-28T20:32:25.699Z","type":"message"}
{"nick":"devsnek","message":"I guess that makes sense","date":"2018-03-28T20:32:49.914Z","type":"message"}
{"nick":"zkat","message":"they're no different than `const MY_CONSTANT = Object.create(null)` on that front","date":"2018-03-28T20:32:58.929Z","type":"message"}
{"nick":"devsnek","message":"I'm trying to think of how to express an implementation for my whatwg proposal in a c++","date":"2018-03-28T20:33:22.323Z","type":"message"}
{"nick":"devsnek","message":"maybe the proposal would be better for tc39","date":"2018-03-28T20:33:48.085Z","type":"message"}
{"nick":"devsnek","message":"oh and undefined vs null I guess","date":"2018-03-28T20:36:39.509Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-03-28T20:47:31.199Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-28T20:50:21.647Z","type":"join"}
{"nick":"tobie","reason":"Quit: Connection closed for inactivity","date":"2018-03-28T22:34:06.414Z","type":"quit"}
{"nick":"Jayflux","date":"2018-03-28T22:48:46.886Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-28T22:57:10.397Z","type":"quit"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-03-28T23:10:40.967Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-03-28T23:27:06.379Z","type":"quit"}
{"nick":"Jayflux","reason":"Quit: Leaving","date":"2018-03-28T23:27:08.355Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-03-28T23:34:59.778Z","type":"join"}
{"nick":"Bakkot","message":"I see we had the reflection vs encapsulation debate again today","date":"2018-03-28T23:45:54.217Z","type":"message"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-03-28T23:49:23.713Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-03-28T23:50:07.137Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-03-28T23:50:13.290Z","type":"quit"}
