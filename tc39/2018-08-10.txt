{"nick":"AtumT_","reason":"Quit: AtumT_","date":"2018-08-10T00:14:26.917Z","type":"quit"}
{"nick":"jwalden","reason":"Ping timeout: 240 seconds","date":"2018-08-10T00:45:51.355Z","type":"quit"}
{"nick":"jwalden","date":"2018-08-10T00:47:55.316Z","type":"join"}
{"nick":"grit2","date":"2018-08-10T01:25:22.221Z","type":"join"}
{"nick":"grit2","reason":"Ping timeout: 256 seconds","date":"2018-08-10T01:31:54.721Z","type":"quit"}
{"nick":"aki_","date":"2018-08-10T01:53:05.542Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 256 seconds","date":"2018-08-10T01:54:00.694Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T01:54:01.037Z","type":"nick"}
{"nick":"ddstreet7","date":"2018-08-10T02:12:50.466Z","type":"join"}
{"nick":"ddstreet7","reason":"Killed (Unit193 (Spam is not permitted on freenode.))","date":"2018-08-10T02:13:06.848Z","type":"quit"}
{"nick":"zaberdampfer","date":"2018-08-10T02:23:25.565Z","type":"join"}
{"nick":"zaberdampfer","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T02:23:55.025Z","type":"quit"}
{"nick":"dodobrain0","date":"2018-08-10T02:32:32.576Z","type":"join"}
{"nick":"dodobrain0","reason":"Killed (Unit193 (Spam is not permitted on freenode.))","date":"2018-08-10T02:32:49.879Z","type":"quit"}
{"nick":"TimothyGu","message":"Anyone knows what the DeclarationPart static semantic is for? It just seems to return what it's called on","date":"2018-08-10T02:33:09.502Z","type":"message"}
{"nick":"TimothyGu","message":"https://tc39.github.io/ecma262/#sec-static-semantics-declarationpart","date":"2018-08-10T02:33:10.409Z","type":"message"}
{"nick":"jmdyck","message":"not exactly.","date":"2018-08-10T02:35:53.477Z","type":"message"}
{"nick":"jmdyck","message":"it returns a specific child of what it's called on.","date":"2018-08-10T02:36:18.654Z","type":"message"}
{"nick":"jmdyck","message":"happens to be the only child.","date":"2018-08-10T02:36:48.354Z","type":"message"}
{"nick":"jmdyck","message":"so \"DeclarationPart of |Foo|\" is equivalent to \"the only child of |Foo|\", but the latter hasn't been established as phrasing that the spec can use.","date":"2018-08-10T02:39:45.906Z","type":"message"}
{"nick":"bluszcz4","date":"2018-08-10T02:40:57.500Z","type":"join"}
{"nick":"bluszcz4","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T02:40:57.687Z","type":"quit"}
{"nick":"jmdyck","message":"plus it's possible that when DeclarationPart was introduced, there was a case in which it *wasn't* the only child.","date":"2018-08-10T02:41:31.520Z","type":"message"}
{"nick":"jmdyck","message":"... doesn't look like it though.","date":"2018-08-10T02:44:17.404Z","type":"message"}
{"nick":"TimothyGu","message":"jmdyck: I'm not sure I understand.","date":"2018-08-10T02:46:45.391Z","type":"message"}
{"nick":"jmdyck","message":"which part?","date":"2018-08-10T02:47:15.036Z","type":"message"}
{"nick":"TimothyGu","message":"so it's only used in context of \"Return a new List containing DeclarationPart of Declaration.\"","date":"2018-08-10T02:48:28.569Z","type":"message"}
{"nick":"TimothyGu","message":"or with formatting, \"Return a new List containing DeclarationPart of |Declaration|.\"","date":"2018-08-10T02:48:51.809Z","type":"message"}
{"nick":"TimothyGu","message":"why can't it just say \"Return a new List containing |Declaration|.\"","date":"2018-08-10T02:49:00.790Z","type":"message"}
{"nick":"TimothyGu","message":"In fact if you look at https://tc39.github.io/ecma262/#sec-exports-static-semantics-lexicallyscopeddeclarations, DeclarationPart isn't even applied consistently","date":"2018-08-10T02:49:52.427Z","type":"message"}
{"nick":"jmdyck","message":"Ah, well that's a more interesting question","date":"2018-08-10T02:50:52.574Z","type":"message"}
{"nick":"devsnek","message":"when in doubt, check what engines do","date":"2018-08-10T02:52:43.612Z","type":"message"}
{"nick":"devsnek","message":"then open a pr that will take a few years to merge","date":"2018-08-10T02:52:50.723Z","type":"message"}
{"nick":"jmdyck","message":"ultimately, it's presumably because the consumer(s) of that List expect its elements to be the child nodes, and not |Declaration|s.","date":"2018-08-10T02:53:52.966Z","type":"message"}
{"nick":"TimothyGu","message":"… yet when one says \"evaluate |Statement|\" the spec *really* means \"evaluate 'what the |Statement| actually is'\"…","date":"2018-08-10T02:56:26.056Z","type":"message"}
{"nick":"jmdyck","message":"no, it actually means evaluate the |Statement| node.","date":"2018-08-10T02:57:01.089Z","type":"message"}
{"nick":"jmdyck","message":"but how you do that will depend on the nature of the node.","date":"2018-08-10T02:57:30.611Z","type":"message"}
{"nick":"jmdyck","message":"unless you're talking about the chain production thing.","date":"2018-08-10T02:58:20.220Z","type":"message"}
{"nick":"TimothyGu","message":"chain production","date":"2018-08-10T02:58:26.165Z","type":"message"}
{"nick":"TimothyGu","message":"I think","date":"2018-08-10T02:58:55.495Z","type":"message"}
{"nick":"TimothyGu","message":"Ah yeah that's what I'm talking about","date":"2018-08-10T02:59:47.472Z","type":"message"}
{"nick":"jmdyck","message":"that's some editorial sleight-of-hand to avoid having to define a lot of really boring rules.","date":"2018-08-10T02:59:51.815Z","type":"message"}
{"nick":"TimothyGu","message":"imo DeclarationPart is one boring rule. lol.","date":"2018-08-10T03:00:42.517Z","type":"message"}
{"nick":"TimothyGu","message":"actually let's just say I remove \"DeclarationPart of\"","date":"2018-08-10T03:01:14.411Z","type":"message"}
{"nick":"TimothyGu","message":"would the spec still work?","date":"2018-08-10T03:01:24.937Z","type":"message"}
{"nick":"jmdyck","message":"I don't think so.","date":"2018-08-10T03:02:15.597Z","type":"message"}
{"nick":"jmdyck","message":"Well, it might be debateable.","date":"2018-08-10T03:02:36.057Z","type":"message"}
{"nick":"TimothyGu","message":"lol","date":"2018-08-10T03:02:48.874Z","type":"message"}
{"nick":"jmdyck","message":"E.g., see FunctionDeclarationInstantiation","date":"2018-08-10T03:02:56.846Z","type":"message"}
{"nick":"jmdyck","message":"which invokes VarScopedDeclarations, which returns one of these Lists.","date":"2018-08-10T03:03:13.913Z","type":"message"}
{"nick":"jmdyck","message":"it gets put in _varDeclarations_ which we then iterate over, binding each element to _d_","date":"2018-08-10T03:03:48.600Z","type":"message"}
{"nick":"jmdyck","message":"Then we say \"If _d_ is neither a |VariableDeclaration| nor a |ForBinding| nor a ...\"","date":"2018-08-10T03:04:02.673Z","type":"message"}
{"nick":"TimothyGu","message":"hmm, so it treats ForBinding and BindingIdentifier separately","date":"2018-08-10T03:04:12.853Z","type":"message"}
{"nick":"TimothyGu","message":"even though ForBinding may totally be a BindingIdentifier","date":"2018-08-10T03:04:33.958Z","type":"message"}
{"nick":"jmdyck","message":"so the question would be: if _d_ is (bound to) a |Declaration| whose only child is a |VariableDeclaration|, then does _d_ is a |VariableDeclaration| yield *true*?","date":"2018-08-10T03:05:17.705Z","type":"message"}
{"nick":"jmdyck","message":"I think the spec generally says no, though it may not be consistent on that point.","date":"2018-08-10T03:06:26.596Z","type":"message"}
{"nick":"TimothyGu","message":"I guess that's precisely what I was confused on","date":"2018-08-10T03:07:15.756Z","type":"message"}
{"nick":"TimothyGu","message":"because of the chain production thing, I was under the impression that the system is like object-oriented with inheritance","date":"2018-08-10T03:07:47.780Z","type":"message"}
{"nick":"jmdyck","message":"well, except a parse tree isn't an class-inheritance hierarchy","date":"2018-08-10T03:09:01.821Z","type":"message"}
{"nick":"TimothyGu","message":"yeah, exactly. I thought |Declaration| :: |VariableDeclaration| was an inheritance relationship rather than a parent-child hierarchy","date":"2018-08-10T03:10:06.417Z","type":"message"}
{"nick":"TimothyGu","message":"didn't realize that it's more like { type: 'Declaration', child: { type: 'Variable' } }","date":"2018-08-10T03:10:44.814Z","type":"message"}
{"nick":"TimothyGu","message":"*LexicalDeclaration","date":"2018-08-10T03:10:59.541Z","type":"message"}
{"nick":"TimothyGu","message":"ugh ESTree","date":"2018-08-10T03:11:14.295Z","type":"message"}
{"nick":"jmdyck","message":"yeah, it's probably better to think of it that way.","date":"2018-08-10T03:11:58.164Z","type":"message"}
{"nick":"jmdyck","message":"\"better\" = \"closer to how the spec 'wants' you to think about it\"","date":"2018-08-10T03:12:21.476Z","type":"message"}
{"nick":"th3bmw","date":"2018-08-10T03:27:31.265Z","type":"join"}
{"nick":"th3bmw","reason":"Remote host closed the connection","date":"2018-08-10T03:28:14.733Z","type":"quit"}
{"nick":"dave492528","date":"2018-08-10T03:31:26.009Z","type":"join"}
{"nick":"dave492528","reason":"Remote host closed the connection","date":"2018-08-10T03:31:39.563Z","type":"quit"}
{"nick":"aki_","date":"2018-08-10T03:59:20.384Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2018-08-10T03:59:44.584Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T03:59:44.963Z","type":"nick"}
{"nick":"atk20","date":"2018-08-10T04:23:00.476Z","type":"join"}
{"nick":"atk20","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T04:23:32.631Z","type":"quit"}
{"nick":"swoolley27","date":"2018-08-10T04:23:54.360Z","type":"join"}
{"nick":"swoolley27","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T04:24:33.362Z","type":"quit"}
{"nick":"Guest68301","date":"2018-08-10T04:38:38.143Z","type":"join"}
{"nick":"Guest68301","reason":"Remote host closed the connection","date":"2018-08-10T04:39:39.466Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-08-10T04:51:06.470Z","type":"quit"}
{"nick":"jmdyck","reason":"Quit: Leaving.","date":"2018-08-10T05:08:19.426Z","type":"quit"}
{"nick":"Soni23","date":"2018-08-10T05:39:41.148Z","type":"join"}
{"nick":"Soni23","reason":"K-Lined","date":"2018-08-10T05:39:45.861Z","type":"quit"}
{"nick":"aki_","date":"2018-08-10T06:05:58.251Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 248 seconds","date":"2018-08-10T06:06:57.387Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T06:06:57.964Z","type":"nick"}
{"nick":"ffernand2","date":"2018-08-10T06:25:01.887Z","type":"join"}
{"nick":"ffernand2","reason":"Ping timeout: 260 seconds","date":"2018-08-10T06:30:03.993Z","type":"quit"}
{"nick":"RoBz5","date":"2018-08-10T06:31:51.702Z","type":"join"}
{"nick":"RoBz5","reason":"K-Lined","date":"2018-08-10T06:32:00.838Z","type":"quit"}
{"nick":"armin1","date":"2018-08-10T06:32:14.064Z","type":"join"}
{"nick":"armin1","reason":"Remote host closed the connection","date":"2018-08-10T06:33:59.892Z","type":"quit"}
{"nick":"percY-21","date":"2018-08-10T06:48:55.036Z","type":"join"}
{"nick":"percY-21","reason":"Ping timeout: 268 seconds","date":"2018-08-10T06:54:20.816Z","type":"quit"}
{"nick":"mathiasbynens_","date":"2018-08-10T07:24:57.314Z","type":"part"}
{"nick":"mathiasbynens","date":"2018-08-10T07:25:37.361Z","type":"join"}
{"nick":"akoserwa","date":"2018-08-10T07:44:40.037Z","type":"join"}
{"nick":"moonythedwarf","date":"2018-08-10T07:55:25.386Z","type":"join"}
{"nick":"moonythedwarf","new_nick":"Guest14210","date":"2018-08-10T07:55:36.795Z","type":"nick"}
{"nick":"Guest14210","reason":"Killed (Unit193 (Spam is not permitted on freenode.))","date":"2018-08-10T07:56:34.587Z","type":"quit"}
{"nick":"HackMaster","date":"2018-08-10T07:59:46.554Z","type":"join"}
{"nick":"HackMaster","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T08:00:45.097Z","type":"quit"}
{"nick":"aki_","date":"2018-08-10T08:11:42.367Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 256 seconds","date":"2018-08-10T08:12:58.320Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T08:12:58.681Z","type":"nick"}
{"nick":"april","date":"2018-08-10T09:29:26.329Z","type":"join"}
{"nick":"april","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T09:30:32.061Z","type":"quit"}
{"nick":"aki_","date":"2018-08-10T10:18:24.395Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-08-10T10:18:51.484Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T10:18:51.704Z","type":"nick"}
{"nick":"howdoi","date":"2018-08-10T10:59:38.885Z","type":"join"}
{"nick":"AtumT","date":"2018-08-10T11:29:51.671Z","type":"join"}
{"nick":"tx14","date":"2018-08-10T11:42:06.162Z","type":"join"}
{"nick":"tx14","reason":"Remote host closed the connection","date":"2018-08-10T11:42:59.255Z","type":"quit"}
{"nick":"jmdyck","date":"2018-08-10T12:00:09.470Z","type":"join"}
{"nick":"Remco6","date":"2018-08-10T12:24:30.243Z","type":"join"}
{"nick":"aki_","date":"2018-08-10T12:25:07.719Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-08-10T12:25:21.393Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T12:25:21.743Z","type":"nick"}
{"nick":"Remco6","reason":"Remote host closed the connection","date":"2018-08-10T12:25:53.641Z","type":"quit"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2018-08-10T12:47:17.049Z","type":"quit"}
{"nick":"AtumT","date":"2018-08-10T12:51:48.859Z","type":"join"}
{"nick":"spion","date":"2018-08-10T13:07:44.512Z","type":"join"}
{"nick":"aki_","date":"2018-08-10T14:31:19.363Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2018-08-10T14:32:31.799Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T14:32:32.216Z","type":"nick"}
{"nick":"conno","date":"2018-08-10T15:00:26.135Z","type":"join"}
{"nick":"conno","reason":"K-Lined","date":"2018-08-10T15:00:40.215Z","type":"quit"}
{"nick":"akoserwa","reason":"Quit: Leaving","date":"2018-08-10T15:14:10.147Z","type":"quit"}
{"nick":"bladernr4","date":"2018-08-10T15:57:10.771Z","type":"join"}
{"nick":"bladernr4","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T15:57:50.797Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-08-10T16:27:25.768Z","type":"quit"}
{"nick":"aki_","date":"2018-08-10T16:38:21.409Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-08-10T16:39:21.353Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T16:39:21.712Z","type":"nick"}
{"nick":"johnpark_pj","date":"2018-08-10T17:29:26.097Z","type":"join"}
{"nick":"johnpark_pj","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T17:29:52.574Z","type":"quit"}
{"nick":"Sheraf","date":"2018-08-10T18:38:37.763Z","type":"join"}
{"nick":"okdas","date":"2018-08-10T18:38:41.010Z","type":"join"}
{"nick":"okdas","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T18:38:50.892Z","type":"quit"}
{"nick":"Sheraf","reason":"K-Lined","date":"2018-08-10T18:38:54.990Z","type":"quit"}
{"nick":"aki_","date":"2018-08-10T18:46:18.727Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-08-10T18:46:21.354Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T18:46:29.989Z","type":"nick"}
{"nick":"arkain","date":"2018-08-10T19:13:32.615Z","type":"join"}
{"nick":"arkain","message":"can I get someone to look at this: https://repl.it/@arkain/Non-constructible-function","date":"2018-08-10T19:14:15.374Z","type":"message"}
{"nick":"arkain","message":"I want to know if this is as intended or a bug.","date":"2018-08-10T19:14:28.107Z","type":"message"}
{"nick":"arkain","message":"I can't find any documentation about it, but it seems that when functions are declared on objects using the simplified notation, that function cannot be constructed.","date":"2018-08-10T19:16:27.883Z","type":"message"}
{"nick":"bradleymeck","message":"yup","date":"2018-08-10T19:35:14.802Z","type":"message"}
{"nick":"bradleymeck","message":"working as intended","date":"2018-08-10T19:35:22.529Z","type":"message"}
{"nick":"bradleymeck","message":"also it has access to super.foo() which function declaration/expressions do not: https://repl.it/repls/DarkMundaneInterchangeability","date":"2018-08-10T19:36:43.510Z","type":"message"}
{"nick":"arkain","reason":"Ping timeout: 252 seconds","date":"2018-08-10T19:54:09.629Z","type":"quit"}
{"nick":"Reincarnate10","date":"2018-08-10T20:12:25.103Z","type":"join"}
{"nick":"Reincarnate10","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-08-10T20:12:57.044Z","type":"quit"}
{"nick":"jwalden","date":"2018-08-10T20:21:58.855Z","type":"join"}
{"nick":"arkain","date":"2018-08-10T20:22:41.623Z","type":"join"}
{"nick":"arkain","message":"@bradleymeck: thanks for that.","date":"2018-08-10T20:24:26.382Z","type":"message"}
{"nick":"TimothyGu","message":"https://tc39.github.io/ecma262/#sec-runtime-semantics-classdefinitionevaluation step 10","date":"2018-08-10T20:28:56.615Z","type":"message"}
{"nick":"TimothyGu","message":"why are their odd spaces in 10.a.i?","date":"2018-08-10T20:29:05.815Z","type":"message"}
{"nick":"TimothyGu","message":"*why is there odd spacing in 10.a.i?","date":"2018-08-10T20:29:24.388Z","type":"message"}
{"nick":"TimothyGu","message":"apparently can't type today","date":"2018-08-10T20:29:31.763Z","type":"message"}
{"nick":"arkain","message":"realistically speaking, is it too late to provide an alternative to proposal-class-fields?","date":"2018-08-10T20:35:55.255Z","type":"message"}
{"nick":"arahael28","date":"2018-08-10T20:40:18.851Z","type":"join"}
{"nick":"ljharb","message":"arkain: technically no, realistically yes, because nobody has provided an alternative that meets all the use cases and constraints, and is also better.","date":"2018-08-10T20:40:35.080Z","type":"message"}
{"nick":"ljharb","message":"arkain: and since most of the desire for alternatives seems to be \"the syntax is icky\"","date":"2018-08-10T20:40:51.536Z","type":"message"}
{"nick":"ljharb","message":"arkain: do you have something in mind?","date":"2018-08-10T20:41:28.236Z","type":"message"}
{"nick":"arkain","message":"Is there any way to get a list of all the \"use cases and constraints\"? Better is subjective. I understand that we're left with better as defined by the TC39, but I would also expect that \"better\" has an at-least somewhat technical definition.","date":"2018-08-10T20:42:09.138Z","type":"message"}
{"nick":"arahael28","reason":"Read error: Connection reset by peer","date":"2018-08-10T20:42:14.593Z","type":"quit"}
{"nick":"arkain","message":"yes. It's the proposal-object-members that I've been working on.","date":"2018-08-10T20:42:28.639Z","type":"message"}
{"nick":"arkain","message":"I've already made it available in github and been posting to the #es-discuss mailing list","date":"2018-08-10T20:42:55.420Z","type":"message"}
{"nick":"arkain","message":"https://github.com/rdking/proposal-object-members","date":"2018-08-10T20:44:19.669Z","type":"message"}
{"nick":"arkain","message":"In the better category, I'm offering : doesn't awkwardly limit access notation, provides simple and singular meaning to `#` for use in accessing private data, provides well known and well understood notation for declaring privilege levels, **offers parallel support for private members on objects**, offers support for C-style static variables in functions","date":"2018-08-10T20:48:50.044Z","type":"message"}
{"nick":"arkain","message":"I and others may consider these things \"better\", but the fact of the matter is that it depends on how the TC39 defines it. There's no way for us to know that unless you lay it out.","date":"2018-08-10T20:49:50.852Z","type":"message"}
{"nick":"ljharb","message":"arkain: so, anything with `protected` i'd find unacceptable, for one.","date":"2018-08-10T20:51:01.533Z","type":"message"}
{"nick":"ljharb","message":"arkain: and anything that uses `private` for declaration but not for access, a number of us have already found unacceptable (which i think is in the proposal FAQ)","date":"2018-08-10T20:51:25.393Z","type":"message"}
{"nick":"arkain","message":"may I ask why? This is a critical feature that will cripple use of proposal-class-fields.","date":"2018-08-10T20:51:35.271Z","type":"message"}
{"nick":"ljharb","message":"in some languages it's \"access level\" as public/protected/private. that's not what this is in JS, nor what it should be.","date":"2018-08-10T20:52:04.930Z","type":"message"}
{"nick":"ljharb","message":"this is \"accessible\" or \"not accessible\" - just like variables are either accessible or not.","date":"2018-08-10T20:52:22.954Z","type":"message"}
{"nick":"ljharb","message":"ie there's no third state, it's just \"public\" or \"not public\"","date":"2018-08-10T20:52:33.508Z","type":"message"}
{"nick":"ljharb","message":"\"protected\" doesn't work in any scenario where classes are mutable later on, which is \"basically all of JS\"","date":"2018-08-10T20:52:51.134Z","type":"message"}
{"nick":"ljharb","message":"(because in that scenario \"protected\" is \"public with some work\", which is identical to \"public\")","date":"2018-08-10T20:53:07.310Z","type":"message"}
{"nick":"aki_","date":"2018-08-10T20:53:12.709Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 256 seconds","date":"2018-08-10T20:54:08.786Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T20:54:09.093Z","type":"nick"}
{"nick":"ljharb","message":"separately, having \"private\" and \"protected\" be required, but \"public\" be optional, is weird imo","date":"2018-08-10T20:54:14.133Z","type":"message"}
{"nick":"ljharb","message":"(and it would be pretty untenable to require it)","date":"2018-08-10T20:54:28.935Z","type":"message"}
{"nick":"arkain","message":"The way I would choose to implement it, it's precisely that, an access level. Further, your assertion that \"protected\" doesn't work when classes are mutable is also not true. If only the methods that were available at the time of declaration have access to private members, then that is also true for protected.","date":"2018-08-10T20:54:46.728Z","type":"message"}
{"nick":"ljharb","message":"that's not how subclassing works in JS tho","date":"2018-08-10T20:55:04.533Z","type":"message"}
{"nick":"ljharb","message":"if \"protected\" means subclasses can access it, i can (and must be able to) create a new subclass at any time","date":"2018-08-10T20:55:24.595Z","type":"message"}
{"nick":"ljharb","message":"at which point i have access to it, at which point it's public.","date":"2018-08-10T20:55:30.592Z","type":"message"}
{"nick":"ljharb","message":"(please note that i'm only speaking for myself here, not the whole committee; the proposal FAQ speaks for the proposal authors which mostly overlaps with my personal feelings)","date":"2018-08-10T20:56:09.706Z","type":"message"}
{"nick":"arkain","message":"...It is not public in that it cannot be accessed from outside a subclass. Making it \"protected\" is like saying \"join my club or you can't use my services\".","date":"2018-08-10T20:56:55.538Z","type":"message"}
{"nick":"arkain","message":"That's a pretty common model for business","date":"2018-08-10T20:57:25.824Z","type":"message"}
{"nick":"arkain","message":"Also a common model for development.","date":"2018-08-10T20:57:34.789Z","type":"message"}
{"nick":"ljharb","message":"it's public because the subclass can choose to expose it.","date":"2018-08-10T20:57:36.808Z","type":"message"}
{"nick":"ljharb","message":"if i make something private, it means only i can expose it","date":"2018-08-10T20:57:56.086Z","type":"message"}
{"nick":"arkain","message":"By the same logic, a base class can choose to expose private members.","date":"2018-08-10T20:57:59.226Z","type":"message"}
{"nick":"ljharb","message":"if i make something protected, it means anyone can get at it","date":"2018-08-10T20:58:02.427Z","type":"message"}
{"nick":"ljharb","message":"which is the same definition as for public.","date":"2018-08-10T20:58:09.049Z","type":"message"}
{"nick":"ljharb","message":"which means it's not actually protected from *anything*, which means why does it exist?","date":"2018-08-10T20:58:21.674Z","type":"message"}
{"nick":"arkain","message":"There's major flaw in your argument.","date":"2018-08-10T20:59:22.951Z","type":"message"}
{"nick":"arkain","message":"If a subclass exposes something that was inherited as \"protected\" then that is as intended, just as if the base class had exposed the member itself. Since this only affects instances, there is no real leak.","date":"2018-08-10T21:00:11.731Z","type":"message"}
{"nick":"arkain","message":"The point of doing such a thing is to limit who has access to what.","date":"2018-08-10T21:01:59.945Z","type":"message"}
{"nick":"ljharb","message":"right but protected doesn’t limit anything","date":"2018-08-10T21:02:38.910Z","type":"message"}
{"nick":"ljharb","message":"since i can do class extends at any time","date":"2018-08-10T21:02:49.002Z","type":"message"}
{"nick":"arkain","message":"From your point of view, protected can be considered a form of \"soft private\", which is needed to ensure that APIs have as little exposure as possible while still sharing what needs to be shared.","date":"2018-08-10T21:02:51.086Z","type":"message"}
{"nick":"ljharb","message":"Totally! I agree with that.","date":"2018-08-10T21:03:07.358Z","type":"message"}
{"nick":"ljharb","message":"but soft private is already easy with symbols or with underscores","date":"2018-08-10T21:03:17.357Z","type":"message"}
{"nick":"arkain","message":"and yet not clear as to the intention.","date":"2018-08-10T21:03:35.307Z","type":"message"}
{"nick":"ljharb","message":"i don’t think it deserves special syntax","date":"2018-08-10T21:03:38.814Z","type":"message"}
{"nick":"bradleymeck","message":"symbols are clear","date":"2018-08-10T21:03:42.687Z","type":"message"}
{"nick":"arkain","message":"underscores provide nothing","date":"2018-08-10T21:03:42.935Z","type":"message"}
{"nick":"bradleymeck","message":"what isnt clear about symbols?","date":"2018-08-10T21:03:50.025Z","type":"message"}
{"nick":"ljharb","message":"symbols imo mean precisely that. Otherwise why use a symbol?","date":"2018-08-10T21:03:57.428Z","type":"message"}
{"nick":"arkain","message":"Symbols are still on the public interface and require almost no work to access.","date":"2018-08-10T21:04:12.346Z","type":"message"}
{"nick":"arkain","message":"The point is to keep such data off the public interface.","date":"2018-08-10T21:04:30.528Z","type":"message"}
{"nick":"ljharb","message":"protected is the public interface too","date":"2018-08-10T21:04:51.295Z","type":"message"}
{"nick":"bradleymeck","message":"but you could extend the class and get them off the interface anyway for your protected stuff it looks like?","date":"2018-08-10T21:04:53.108Z","type":"message"}
{"nick":"ljharb","message":"Everything reachable is public, full stop","date":"2018-08-10T21:04:59.980Z","type":"message"}
{"nick":"ljharb","message":"There is no smaller interface.","date":"2018-08-10T21:05:05.967Z","type":"message"}
{"nick":"arkain","message":"ljharb: public only to sub classes.","date":"2018-08-10T21:05:08.689Z","type":"message"}
{"nick":"ljharb","message":"Everyone can subclass. So public to everyone.","date":"2018-08-10T21:05:19.863Z","type":"message"}
{"nick":"bradleymeck","message":"arkain: which we can dynamically make, so anyone can get em?","date":"2018-08-10T21:05:24.616Z","type":"message"}
{"nick":"arkain","message":"That much will always be true, but it's not as if that's going to be something people aren't aware of when they use protected.","date":"2018-08-10T21:06:05.832Z","type":"message"}
{"nick":"ljharb","message":"again, public is binary. Either it’s accessible or it’s not.","date":"2018-08-10T21:06:15.439Z","type":"message"}
{"nick":"arkain","message":"That's part and parcel of the language","date":"2018-08-10T21:06:16.906Z","type":"message"}
{"nick":"bradleymeck","message":"i don't understand those last few comments","date":"2018-08-10T21:06:31.153Z","type":"message"}
{"nick":"ljharb","message":"the best way to prove they know that is not to make syntax that’s deceptive.","date":"2018-08-10T21:06:37.578Z","type":"message"}
{"nick":"ljharb","message":"protected syntax would wrongly imply that it’s offering protection - which it’s not.","date":"2018-08-10T21:06:54.114Z","type":"message"}
{"nick":"catfuneral","date":"2018-08-10T21:06:56.863Z","type":"join"}
{"nick":"catfuneral","reason":"K-Lined","date":"2018-08-10T21:06:58.224Z","type":"quit"}
{"nick":"bradleymeck","message":"we could call it something else, that seems possible","date":"2018-08-10T21:07:18.768Z","type":"message"}
{"nick":"bradleymeck","message":"but i'd still go back to asking why not use symbols","date":"2018-08-10T21:07:26.679Z","type":"message"}
{"nick":"arkain","message":"protected syntax implies that someone cannot do x#.y on your instance unless they've joined your club.","date":"2018-08-10T21:07:33.585Z","type":"message"}
{"nick":"bradleymeck","message":"but everyone can join your club if they extend your class","date":"2018-08-10T21:07:50.753Z","type":"message"}
{"nick":"arkain","message":"basically \"membership has it's privileges\"","date":"2018-08-10T21:07:55.244Z","type":"message"}
{"nick":"bradleymeck","message":"but membership is free","date":"2018-08-10T21:08:02.171Z","type":"message"}
{"nick":"arkain","message":"That's not an isue","date":"2018-08-10T21:08:10.539Z","type":"message"}
{"nick":"arkain","message":"issue","date":"2018-08-10T21:08:12.942Z","type":"message"}
{"nick":"ljharb","message":"sure. But then the argument for consistency with classical inheritance access levels withers.","date":"2018-08-10T21:08:21.419Z","type":"message"}
{"nick":"bradleymeck","message":"arkain: that is an issue. your stating that someone cannot do X unless Y happens, but also stating that everyone is able to do Y","date":"2018-08-10T21:09:00.260Z","type":"message"}
{"nick":"bradleymeck","message":"it is some form of indirection but doesn't seem to be gainful","date":"2018-08-10T21:09:13.404Z","type":"message"}
{"nick":"arkain","message":"Not really trying to offer that. ES is dynamic, so that kind of consistency is impossible. Just the fact that you can do x.y where y didn't previously exist on x breaks that consistency.","date":"2018-08-10T21:09:26.323Z","type":"message"}
{"nick":"arkain","message":"I want to continue this discussion, but I've got to leave now. Can this be continued on es-discuss?","date":"2018-08-10T21:10:37.162Z","type":"message"}
{"nick":"arkain","date":"2018-08-10T21:11:04.546Z","type":"part"}
{"nick":"bradleymeck","message":"i'll be off on business for a while, but i'm not really looking to discuss this at length as i don't understand what is to be gained currently","date":"2018-08-10T21:11:17.699Z","type":"message"}
{"nick":"tigermousr16","date":"2018-08-10T21:17:31.783Z","type":"join"}
{"nick":"tigermousr16","reason":"K-Lined","date":"2018-08-10T21:17:39.256Z","type":"quit"}
{"nick":"walle303","date":"2018-08-10T22:08:25.059Z","type":"join"}
{"nick":"walle303","reason":"Ping timeout: 240 seconds","date":"2018-08-10T22:13:21.344Z","type":"quit"}
{"nick":"james41382","date":"2018-08-10T22:36:25.714Z","type":"join"}
{"nick":"james41382","reason":"Killed (Unit193 (Spam is not permitted on freenode.))","date":"2018-08-10T22:38:12.018Z","type":"quit"}
{"nick":"arkain","date":"2018-08-10T22:43:34.622Z","type":"join"}
{"nick":"arkain","reason":"Ping timeout: 252 seconds","date":"2018-08-10T22:50:09.631Z","type":"quit"}
{"nick":"aki_","date":"2018-08-10T22:59:44.718Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 256 seconds","date":"2018-08-10T23:01:04.773Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-08-10T23:01:05.094Z","type":"nick"}
{"nick":"arkain","date":"2018-08-10T23:01:06.641Z","type":"join"}
{"nick":"arkain","reason":"Ping timeout: 252 seconds","date":"2018-08-10T23:16:33.625Z","type":"quit"}
{"nick":"arkain","date":"2018-08-10T23:20:55.618Z","type":"join"}
{"nick":"arkain","message":"@ljharb: I've made it back from errands and had a little time to think about the issue of protected from both ends. If I understand it, your argument is that since a subclass can be dynamically created that is capable of leaking the state of a protected member, then that member is no different than a public member. Is this right?","date":"2018-08-10T23:24:17.289Z","type":"message"}
{"nick":"ljharb","message":"arkain: yep","date":"2018-08-10T23:24:38.322Z","type":"message"}
{"nick":"arkain","message":"... more accurately, leaking the state of a protected member on any instance of the type...","date":"2018-08-10T23:24:52.799Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2018-08-10T23:24:55.884Z","type":"message"}
{"nick":"ljharb","message":"and i can .call things on an object that has Symbol.hasInstance set to return true, for example","date":"2018-08-10T23:25:15.263Z","type":"message"}
{"nick":"ljharb","message":"so i don't even have to actually subclass.","date":"2018-08-10T23:25:21.626Z","type":"message"}
{"nick":"ljharb","message":"you could use a combination of private state and protected to stop that; but that still wouldn't stop a simple `class extends` to extract the \"protected\" stuff.","date":"2018-08-10T23:25:49.559Z","type":"message"}
{"nick":"arkain","message":"The more I think about it, the more I'm inclined to agree... Protected for data may indeed be useless.","date":"2018-08-10T23:26:58.791Z","type":"message"}
{"nick":"arkain","message":"What about protected for functions? Is that equally useless?","date":"2018-08-10T23:27:14.023Z","type":"message"}
{"nick":"ljharb","message":"what would that even mean","date":"2018-08-10T23:27:53.302Z","type":"message"}
{"nick":"vegii5","date":"2018-08-10T23:28:02.207Z","type":"join"}
{"nick":"ljharb","message":"also, functions already have private - closed-over variables","date":"2018-08-10T23:28:05.245Z","type":"message"}
{"nick":"vegii5","reason":"Killed (Unit193 (Spam is not permitted on freenode.))","date":"2018-08-10T23:28:53.849Z","type":"quit"}
{"nick":"bernalex22","date":"2018-08-10T23:42:42.719Z","type":"join"}
{"nick":"arkain","reason":"Ping timeout: 252 seconds","date":"2018-08-10T23:42:57.621Z","type":"quit"}
{"nick":"arkain","date":"2018-08-10T23:45:24.662Z","type":"join"}
{"nick":"arkain","message":"I hate how the web chat bumps you if you're afk for a moment....","date":"2018-08-10T23:45:47.662Z","type":"message"}
{"nick":"arkain","message":"It means that a class will be able to share some of its internal API with subclasses. I get that this is also subject to the subclass leak. However, it is superior to the current '_' convention in that it does not allow the protected members to appear at all on the public interface.","date":"2018-08-10T23:46:19.456Z","type":"message"}
{"nick":"arkain","message":"This is something that cannot be accomplished with Symbols.","date":"2018-08-10T23:47:13.406Z","type":"message"}
{"nick":"bernalex22","reason":"Ping timeout: 240 seconds","date":"2018-08-10T23:47:27.744Z","type":"quit"}
{"nick":"arkain","message":"@ljharb: so my question is this - Given an object containing private members, is there any approach that can successfully reduce the likelihood of a developer using an API that is not meant to be public but needs to be shared while still allowing inheriting objects to access the shared API? This is the desire of those who need \"protected\" support.","date":"2018-08-10T23:56:39.531Z","type":"message"}
{"nick":"arkain","message":"Or, if that's not possible, is there any non-convoluted approach to achieve the same?","date":"2018-08-10T23:57:32.957Z","type":"message"}
