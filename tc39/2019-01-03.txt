{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T00:20:59.242Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-03T00:26:29.695Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-03T00:30:26.184Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-03T00:40:11.436Z","type":"join"}
{"nick":"keith_m__","date":"2019-01-03T00:41:32.251Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 244 seconds","date":"2019-01-03T00:44:45.537Z","type":"quit"}
{"nick":"keith_m__","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T01:12:00.898Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-03T01:32:41.524Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-03T01:38:36.769Z","type":"quit"}
{"nick":"aki_","date":"2019-01-03T01:38:39.040Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T01:39:03.139Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T01:46:15.654Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-03T01:47:52.986Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 246 seconds","date":"2019-01-03T01:52:11.988Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-03T02:01:49.362Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T02:13:32.900Z","type":"quit"}
{"nick":"Draggor","reason":"Ping timeout: 250 seconds","date":"2019-01-03T02:19:20.863Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-01-03T02:23:06.617Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-03T02:26:54.436Z","type":"join"}
{"nick":"Draggor","date":"2019-01-03T02:31:28.103Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T02:37:26.611Z","type":"quit"}
{"nick":"aki_","date":"2019-01-03T03:45:42.693Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-01-03T03:45:57.002Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T03:45:57.392Z","type":"nick"}
{"nick":"wuz_","date":"2019-01-03T03:48:00.682Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2019-01-03T03:52:33.682Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-03T04:23:18.305Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 245 seconds","date":"2019-01-03T04:27:58.281Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-03T04:56:20.536Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-03T04:57:41.191Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-01-03T05:13:05.409Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-03T05:33:25.694Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 268 seconds","date":"2019-01-03T05:38:18.694Z","type":"quit"}
{"nick":"aki_","date":"2019-01-03T05:52:21.292Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-03T05:53:01.675Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T05:53:02.069Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-03T06:53:27.274Z","type":"join"}
{"nick":"keith_mi_","reason":"Ping timeout: 268 seconds","date":"2019-01-03T06:56:32.206Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-01-03T07:02:23.100Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T07:03:20.411Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-03T07:34:02.428Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 272 seconds","date":"2019-01-03T07:38:48.759Z","type":"quit"}
{"nick":"mgol","date":"2019-01-03T07:44:21.092Z","type":"join"}
{"nick":"annevk","message":"littledan: does OOM for BigInt throw RangeError similar to TypedArray where feasible? We should account for that when structured cloning","date":"2019-01-03T07:55:14.301Z","type":"message"}
{"nick":"devsnek","message":"annevk: it does in v8","date":"2019-01-03T07:56:14.525Z","type":"message"}
{"nick":"annevk","message":"When deserializing*","date":"2019-01-03T07:56:23.131Z","type":"message"}
{"nick":"annevk","message":"devsnek: spec?","date":"2019-01-03T07:56:39.898Z","type":"message"}
{"nick":"devsnek","message":"afaik the spec doesn't acknowledge that bigints can oom","date":"2019-01-03T07:57:32.594Z","type":"message"}
{"nick":"ljharb","message":"i don't think it acks it for anything, does it? OOM can happen at any time","date":"2019-01-03T07:58:07.591Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-01-03T07:58:23.324Z","type":"quit"}
{"nick":"littledan","message":"Annevk: BigInt is just like String in this respect--no OOM errors are specified","date":"2019-01-03T08:00:13.580Z","type":"message"}
{"nick":"devsnek","message":"how are there still no other shipping implementations of bigint","date":"2019-01-03T08:00:38.710Z","type":"message"}
{"nick":"akirose","date":"2019-01-03T08:00:42.985Z","type":"join"}
{"nick":"devsnek","message":"spidermonkey and jsc are still \"in progress\" and chakra hasn't done anything beyond a test/mvp","date":"2019-01-03T08:01:47.496Z","type":"message"}
{"nick":"littledan","message":"I don't know why you put in progress in quotes--those two are nearly done","date":"2019-01-03T08:03:14.046Z","type":"message"}
{"nick":"littledan","message":"And Chakra has some basic code checked in","date":"2019-01-03T08:03:39.617Z","type":"message"}
{"nick":"littledan","message":"I am impressed by the speed all around of the project across browsers","date":"2019-01-03T08:03:52.517Z","type":"message"}
{"nick":"littledan","message":"annevk: Some V8 folks asked about cross-engine shared size limits and specified errors when they are exceeded, but I don't think that makes sense here.","date":"2019-01-03T08:04:42.052Z","type":"message"}
{"nick":"devsnek","message":"littledan: i just tried searching to see if i could flag either of those to get bigint and couldn't dig anything up","date":"2019-01-03T08:06:17.250Z","type":"message"}
{"nick":"devsnek","message":"i'd be very happy to be wrong lol","date":"2019-01-03T08:06:31.219Z","type":"message"}
{"nick":"littledan","message":"Yeah, there are currently build-time flags","date":"2019-01-03T08:07:02.960Z","type":"message"}
{"nick":"littledan","message":"Our goal for SpiderMonkey is to get this out in nightly in the first quarter of this year","date":"2019-01-03T08:07:31.969Z","type":"message"}
{"nick":"devsnek","message":"oh yay","date":"2019-01-03T08:07:40.607Z","type":"message"}
{"nick":"littledan","message":"Igalia doesn't have a client for our work on the implementation in JSC, so that leads it to go a little slower","date":"2019-01-03T08:08:02.037Z","type":"message"}
{"nick":"devsnek","message":"is it a home-grown solution or are you using a bigint lib","date":"2019-01-03T08:08:10.916Z","type":"message"}
{"nick":"littledan","message":"Bloomberg has been supporting the SpiderMonkey implementation","date":"2019-01-03T08:08:30.266Z","type":"message"}
{"nick":"devsnek","message":"jsc doesn't have its own devs to work on it?","date":"2019-01-03T08:08:34.770Z","type":"message"}
{"nick":"ljharb","message":"wouldn't any igalia client interested in bigint being standardized be interested in multiple impls, even if they don't directly use it?","date":"2019-01-03T08:08:43.058Z","type":"message"}
{"nick":"littledan","message":"Everyone is using a BigInt library derived from Dart, which has its own long lineage","date":"2019-01-03T08:08:54.207Z","type":"message"}
{"nick":"devsnek","message":"i suppose dart could output nice inlined operators on like int32s or something","date":"2019-01-03T08:09:46.077Z","type":"message"}
{"nick":"littledan","message":"ljharb: Mozilla upstream (not a client here) was very interested in this, and we were trying to use various other ones, but this turned out to be the best path technically","date":"2019-01-03T08:09:46.303Z","type":"message"}
{"nick":"littledan","message":"Writing your own thing from scratch isn't a great idea","date":"2019-01-03T08:09:59.316Z","type":"message"}
{"nick":"devsnek","message":"i've only seen v8's, which is from scratch","date":"2019-01-03T08:10:24.206Z","type":"message"}
{"nick":"littledan","message":"It's not from scratch, it's from Dart","date":"2019-01-03T08:10:42.855Z","type":"message"}
{"nick":"littledan","message":"The thing is, it's hard to use an external library and integrate into the GC system well. So the very long tradition in programming languages is to fork the same code","date":"2019-01-03T08:11:27.830Z","type":"message"}
{"nick":"littledan","message":"There are (at least) two widely copied lineages of BigInt code going around, the Go/Dart one and the Scheme48 one","date":"2019-01-03T08:12:43.556Z","type":"message"}
{"nick":"littledan","message":"annevk: I believe the same limit would be used both when creating a BigInt and when deserualizing it, so I am not sure how you would trigger this OOM case","date":"2019-01-03T08:14:10.071Z","type":"message"}
{"nick":"devsnek","message":"aha i see v8 copied parts from dart and go","date":"2019-01-03T08:14:44.016Z","type":"message"}
{"nick":"devsnek","message":"i assumed that since it was in the src directory it was all from scratch","date":"2019-01-03T08:14:54.571Z","type":"message"}
{"nick":"devsnek","message":"aren't all implementations at some level just a list of \"digits\" that you operate on sorta two's compliment style","date":"2019-01-03T08:16:00.846Z","type":"message"}
{"nick":"littledan","message":"Yes, but then there's a big variety of algorithms you can use from there! Check out TAOCP volume 1 (no, I have not read all of it) for some fun there","date":"2019-01-03T08:18:55.329Z","type":"message"}
{"nick":"devsnek","message":"will do","date":"2019-01-03T08:19:09.371Z","type":"message"}
{"nick":"devsnek","message":"wow this is an expensive book","date":"2019-01-03T08:19:46.584Z","type":"message"}
{"nick":"devsnek","message":"time for some small-time crime","date":"2019-01-03T08:20:04.122Z","type":"message"}
{"nick":"littledan","message":"Wikipedia also has some good articles which are way easier to read :)","date":"2019-01-03T08:21:39.318Z","type":"message"}
{"nick":"devsnek","message":"mfw `O(N log(N) log(log(N))) complexity`","date":"2019-01-03T08:24:31.307Z","type":"message"}
{"nick":"rkirsling","message":"https://en.wikipedia.org/wiki/Sch%C3%B6nhage%E2%80%93Strassen_algorithm eh","date":"2019-01-03T08:30:54.891Z","type":"message"}
{"nick":"rkirsling","message":"fascinating to see FFT used to implement multiplication...","date":"2019-01-03T08:31:55.882Z","type":"message"}
{"nick":"devsnek","message":"`numbers beyond 2^2^15`","date":"2019-01-03T08:32:32.092Z","type":"message"}
{"nick":"rkirsling","message":"haha","date":"2019-01-03T08:33:54.847Z","type":"message"}
{"nick":"devsnek","message":"here's something good https://hal.inria.fr/inria-00126462v2/document","date":"2019-01-03T08:35:13.071Z","type":"message"}
{"nick":"Bakkot","message":"gah, language API design is hard","date":"2019-01-03T08:37:35.234Z","type":"message"}
{"nick":"Bakkot","message":"I want WeakSet.prototype.union to exist/work. it isn't implementable in userland because WeakSets aren't iterable, but the spec can do it without exposing GC.","date":"2019-01-03T08:38:53.791Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: it seems like weakset methods might only be able to work with weaksets, not with generic iterables","date":"2019-01-03T08:40:31.617Z","type":"message"}
{"nick":"Bakkot","message":"but only if it constructs a new WeakSet magically, rather than invoking the WeakSet constructor (because that in turn calls WeakSet.prototype.add, whatever it happens to be at the time). (or the Symbol.species constructor, worse still.) but then that doesn't match the obvious behavior for Set.prototype.union, which presumably _should_ respect Symbol.species.","date":"2019-01-03T08:40:32.697Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: I am quite happy with that outcome, but it wouldn't match the set methods. and for things like `union` it could work with generic iterables as an argument, in principle.","date":"2019-01-03T08:41:26.266Z","type":"message"}
{"nick":"Bakkot","message":"but whatever, WeakSets are already pretty weird.","date":"2019-01-03T08:42:09.329Z","type":"message"}
{"nick":"ljharb","message":"right - i think that \"weakset methods match set methods\", \"set methods all accept generic iterables\", \"set methods all work with any iterable receiver\" might not all work at once","date":"2019-01-03T08:42:13.633Z","type":"message"}
{"nick":"ljharb","message":"but each of those seems a valuable consistency to have","date":"2019-01-03T08:42:51.533Z","type":"message"}
{"nick":"ljharb","message":"maybe it'd be easier if all the methods always SpeciesConstructed a collection as needed from any iterable receiver or argument, before doing the operation, but i'm sure that'd be tricky to make work properly with subclassing without adding a bunch of symbol methods","date":"2019-01-03T08:43:58.874Z","type":"message"}
{"nick":"Bakkot","message":"You can't make that work for WeakSet anyway.","date":"2019-01-03T08:44:14.204Z","type":"message"}
{"nick":"ljharb","message":"why not?","date":"2019-01-03T08:44:29.850Z","type":"message"}
{"nick":"Bakkot","message":"oh, sorry, I guess you can as stated","date":"2019-01-03T08:44:47.394Z","type":"message"}
{"nick":"ljharb","message":"(\"as needed\" meaning it'd have a PromiseResolve-like bailout)","date":"2019-01-03T08:44:52.691Z","type":"message"}
{"nick":"Bakkot","message":"it's just that for WeakSet.prototype.union you must not SpeciesConstruct the resulting set","date":"2019-01-03T08:45:13.014Z","type":"message"}
{"nick":"Bakkot","message":"(because doing so would make the contents of the WeakSet observable)","date":"2019-01-03T08:45:25.947Z","type":"message"}
{"nick":"ljharb","message":"only if you called `add`","date":"2019-01-03T08:45:30.746Z","type":"message"}
{"nick":"ljharb","message":"if you directly stuck them in the internal slot?","date":"2019-01-03T08:45:35.527Z","type":"message"}
{"nick":"ljharb","message":"ie, if you reused the alg steps for add without observably calling it","date":"2019-01-03T08:45:45.438Z","type":"message"}
{"nick":"Bakkot","message":"I mean... that kinda defeats the purpose of SpeciesConstructor, but sure I guess","date":"2019-01-03T08:46:47.682Z","type":"message"}
{"nick":"ljharb","message":"ohh right i see what you mean","date":"2019-01-03T08:47:17.801Z","type":"message"}
{"nick":"ljharb","message":"i guess i'd think more like, you SpeciesConstruct an empty one, and .call the internal steps for add on it","date":"2019-01-03T08:47:35.496Z","type":"message"}
{"nick":"ljharb","message":"and then any of the overridden subclass methods would presumably have to call into the superclass method to work properly?","date":"2019-01-03T08:47:54.142Z","type":"message"}
{"nick":"Bakkot","message":"depends on your subclass.","date":"2019-01-03T08:48:47.483Z","type":"message"}
{"nick":"ljharb","message":"yeah","date":"2019-01-03T08:49:10.986Z","type":"message"}
{"nick":"ljharb","message":"subclassing builtins is weird already","date":"2019-01-03T08:49:16.763Z","type":"message"}
{"nick":"Bakkot","message":"there's a lot of things a subclass might want to do. if it's just adding new methods, everything's peachy. if it's maintaining some invariants, having something route around its `.add` might well leave it in an invalid state.","date":"2019-01-03T08:50:02.633Z","type":"message"}
{"nick":"ljharb","message":"true","date":"2019-01-03T08:50:16.376Z","type":"message"}
{"nick":"ljharb","message":"in that case, subclassability and nonobservability seem to conflict for weakset :-/","date":"2019-01-03T08:50:32.135Z","type":"message"}
{"nick":"Bakkot","message":"yeah. it's hard to subclass WeakSet properly.","date":"2019-01-03T08:52:30.650Z","type":"message"}
{"nick":"Bakkot","message":"endorsed: WeakSet.prototype.union should require both is argument and reciever to be WeakSets and should ignore Symbol.species. people should not attempt to subclass WeakSet.","date":"2019-01-03T08:55:03.017Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T09:08:26.662Z","type":"quit"}
{"nick":"annevk","message":"littledan: when deserializing ArrayBuffer at least theoretically there could not be enough memory in the process available anymore for the allocation, which would then RangeError which would mean a messageerror event","date":"2019-01-03T09:14:55.537Z","type":"message"}
{"nick":"annevk","message":"littledan: I was kinda hoping that for new things we would follow the ArrayBuffer precedent and define OOM loosely","date":"2019-01-03T09:15:37.267Z","type":"message"}
{"nick":"littledan","message":"annevk: I wasn't aware that that was considered to be a new precedent","date":"2019-01-03T09:25:40.903Z","type":"message"}
{"nick":"littledan","message":"I thought of ArrayBuffers as a thing that tends to be bigger than BigInts","date":"2019-01-03T09:26:18.805Z","type":"message"}
{"nick":"littledan","message":"I'm not sure there would be compatibility impacts to throwing a RangeError on out of memory conditions to existing types; I don't really see what it has to do with new things","date":"2019-01-03T09:26:51.486Z","type":"message"}
{"nick":"littledan","message":"maybe we should have this general conversation about these error paths somewhere, rather than thinking of it as restricted to BigInt or new types in general","date":"2019-01-03T09:28:03.881Z","type":"message"}
{"nick":"annevk","message":"littledan: it's considered one by me, I have no idea about the history 😃","date":"2019-01-03T09:29:00.682Z","type":"message"}
{"nick":"annevk","message":"littledan: however you want to do this works for me, I just have an interest in getting OOM better defined over time","date":"2019-01-03T09:29:26.273Z","type":"message"}
{"nick":"littledan","message":"yeah, I've heard this has implications for Wasm","date":"2019-01-03T09:29:41.780Z","type":"message"}
{"nick":"littledan","message":"one of my over-time wishlist items would be to eventually crash rather than throw a RangeError from stack overflows","date":"2019-01-03T09:30:13.514Z","type":"message"}
{"nick":"annevk","message":"It seemed reasonable to me that since we had a story for ArrayBuffer, we'd copy that to new things, but I can see that not necessarily being shared","date":"2019-01-03T09:30:21.372Z","type":"message"}
{"nick":"littledan","message":"which sort of goes in the opposite direction","date":"2019-01-03T09:30:21.521Z","type":"message"}
{"nick":"littledan","message":"well, it's really hard to implement the RangeError throwing reliably","date":"2019-01-03T09:30:37.576Z","type":"message"}
{"nick":"littledan","message":"last I heard, in some cases, V8 would throw, and in others it would still crash. It was impractical to include automated tests of this case due to that","date":"2019-01-03T09:31:00.505Z","type":"message"}
{"nick":"littledan","message":"maybe V8 changed since then, though","date":"2019-01-03T09:31:08.616Z","type":"message"}
{"nick":"annevk","message":"I see","date":"2019-01-03T09:31:09.493Z","type":"message"}
{"nick":"annevk","message":"Crashing seems unfortunate for applications, in particular web applications","date":"2019-01-03T09:31:40.452Z","type":"message"}
{"nick":"littledan","message":"if we want to go this way, i think we should start with a conversation among implementers about what's feasible, rather than just talking in standards-land and saying everyone should throw","date":"2019-01-03T09:31:46.268Z","type":"message"}
{"nick":"littledan","message":"of course TC39 has a strong bias towards complete definitions and predictability as well","date":"2019-01-03T09:32:03.096Z","type":"message"}
{"nick":"annevk","message":"littledan: would the BigInt repo be a reasonable starting place or do you want one in the main repo?","date":"2019-01-03T09:32:29.337Z","type":"message"}
{"nick":"littledan","message":"I think the main repo would be more appropriate","date":"2019-01-03T09:32:38.373Z","type":"message"}
{"nick":"littledan","message":"and reach more of the right people","date":"2019-01-03T09:32:43.749Z","type":"message"}
{"nick":"annevk","message":"Okay, I'll write up something short","date":"2019-01-03T09:32:46.863Z","type":"message"}
{"nick":"littledan","message":"thanks","date":"2019-01-03T09:32:59.725Z","type":"message"}
{"nick":"wuz_","date":"2019-01-03T09:34:11.760Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 272 seconds","date":"2019-01-03T09:39:08.752Z","type":"quit"}
{"nick":"annevk","message":"https://github.com/tc39/ecma262/issues/1391","date":"2019-01-03T09:40:27.272Z","type":"message"}
{"nick":"aki_","date":"2019-01-03T10:07:17.429Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-01-03T10:08:09.280Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T10:08:09.351Z","type":"nick"}
{"nick":"mgol","date":"2019-01-03T10:38:49.986Z","type":"join"}
{"nick":"wuz_","date":"2019-01-03T11:13:02.668Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2019-01-03T11:17:35.669Z","type":"quit"}
{"nick":"aki_","date":"2019-01-03T12:14:31.252Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-03T12:14:47.321Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T12:14:47.617Z","type":"nick"}
{"nick":"jmdyck","date":"2019-01-03T12:50:03.428Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-03T13:38:47.884Z","type":"quit"}
{"nick":"aki_","date":"2019-01-03T14:20:15.869Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-01-03T14:21:19.253Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T14:21:19.629Z","type":"nick"}
{"nick":"wuz_","date":"2019-01-03T14:35:20.787Z","type":"join"}
{"nick":"gibson042","date":"2019-01-03T14:43:28.023Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T14:45:12.004Z","type":"quit"}
{"nick":"jwalden","date":"2019-01-03T14:55:48.815Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 246 seconds","date":"2019-01-03T14:56:32.985Z","type":"quit"}
{"nick":"jorydotcom","date":"2019-01-03T15:05:42.847Z","type":"join"}
{"nick":"gibson042","date":"2019-01-03T15:11:10.525Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-03T15:41:24.822Z","type":"quit"}
{"nick":"cloudshu","date":"2019-01-03T15:50:08.883Z","type":"join"}
{"nick":"gibson042","date":"2019-01-03T16:23:30.314Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-03T16:27:22.852Z","type":"quit"}
{"nick":"akirose","date":"2019-01-03T16:27:52.767Z","type":"join"}
{"nick":"devsnek","message":"if a function had a length of 1, and it's called with 0 args, from the implementors perspective that should look like [undefined] right?","date":"2019-01-03T16:31:38.459Z","type":"message"}
{"nick":"devsnek","message":"and a magical \"numberOfArgs\" variable set to 0","date":"2019-01-03T16:32:22.029Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2019-01-03T16:34:38.545Z","type":"message"}
{"nick":"devsnek","message":"TimothyGu: ^^^","date":"2019-01-03T16:35:02.676Z","type":"message"}
{"nick":"keith_mi_","date":"2019-01-03T16:39:49.568Z","type":"join"}
{"nick":"keith_mi_","reason":"Client Quit","date":"2019-01-03T16:40:40.169Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 245 seconds","date":"2019-01-03T16:41:18.338Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-03T16:45:22.667Z","type":"join"}
{"nick":"gibson042","date":"2019-01-03T16:57:54.244Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2019-01-03T17:04:12.798Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T17:08:04.902Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-03T17:24:45.352Z","type":"join"}
{"nick":"keith_mi_","date":"2019-01-03T17:32:04.040Z","type":"join"}
{"nick":"wuz_","date":"2019-01-03T17:35:35.994Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 246 seconds","date":"2019-01-03T17:40:00.000Z","type":"quit"}
{"nick":"wuz_","date":"2019-01-03T17:49:02.852Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T17:57:34.122Z","type":"quit"}
{"nick":"bradleymeck","action":"stares at `function f() {let x = 1; return; {var x = 2;}}; f();`","date":"2019-01-03T18:03:43.594Z","type":"action"}
{"nick":"keith_mi_","date":"2019-01-03T18:08:34.351Z","type":"join"}
{"nick":"bradleymeck","message":"shouldn't that mean that an early error stops this code from being compiled given https://www.ecma-international.org/ecma-262/#sec-block-static-semantics-early-errors ?","date":"2019-01-03T18:12:13.197Z","type":"message"}
{"nick":"bradleymeck","message":"you can move the return, it doesn't matter","date":"2019-01-03T18:12:28.831Z","type":"message"}
{"nick":"devsnek","message":"ecma262 is too powerful for my phone so I can't look","date":"2019-01-03T18:18:33.145Z","type":"message"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-01-03T18:21:23.703Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-03T18:21:40.824Z","type":"join"}
{"nick":"bradleymeck","message":"engines are all over the place on how this acts","date":"2019-01-03T18:24:42.262Z","type":"message"}
{"nick":"jmdyck","message":"the VarDeclaredNames of `var x = 2;` aren't added to the VarDeclaredNames of the function body, I don't think","date":"2019-01-03T18:25:01.640Z","type":"message"}
{"nick":"bradleymeck","message":"v8 lets it compile, fails on invocation or if you wrap the function with `()` for deeper parsing","date":"2019-01-03T18:25:03.997Z","type":"message"}
{"nick":"bradleymeck","message":"jmdyck: you can wrap it in a block `function f() {{let x = 1; return; {var x = 2;}}};` if you want then","date":"2019-01-03T18:25:31.423Z","type":"message"}
{"nick":"bradleymeck","message":"safari it always compiles, always runs","date":"2019-01-03T18:25:50.675Z","type":"message"}
{"nick":"bradleymeck","message":"firefox never compiles","date":"2019-01-03T18:25:55.962Z","type":"message"}
{"nick":"jmdyck","message":"I only said \"the function body\" to avoid saying `let x = 1; return; {var x = 2;}`, so the extra braces doesn't change that. But now I'm thinking I'm wrong in the first place.","date":"2019-01-03T18:28:54.623Z","type":"message"}
{"nick":"jmdyck","message":"and that it *is* an early error.","date":"2019-01-03T18:32:15.891Z","type":"message"}
{"nick":"bradleymeck","message":"as long as engines agree idc which it is","date":"2019-01-03T18:32:24.840Z","type":"message"}
{"nick":"bradleymeck","message":"but right now spec looks like it should be early","date":"2019-01-03T18:33:03.631Z","type":"message"}
{"nick":"aki_","date":"2019-01-03T18:34:56.726Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-03T18:35:38.824Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T18:35:39.925Z","type":"nick"}
{"nick":"jmdyck","message":"LexicallyDeclaredNames don't bubble up, but VarDeclaredNames do, I think it says.","date":"2019-01-03T18:42:14.110Z","type":"message"}
{"nick":"bradleymeck","message":"yes","date":"2019-01-03T18:42:21.345Z","type":"message"}
{"nick":"mgol","date":"2019-01-03T18:43:07.249Z","type":"join"}
{"nick":"bradleymeck","message":"jmdyck: functions without extra {} also should be error due to https://www.ecma-international.org/ecma-262/#sec-function-definitions-static-semantics-early-errors","date":"2019-01-03T18:44:04.992Z","type":"message"}
{"nick":"bradleymeck","message":"\"It is a Syntax Error if any element of the LexicallyDeclaredNames of FunctionStatementList also occurs in the VarDeclaredNames of FunctionStatementList.\"","date":"2019-01-03T18:44:16.426Z","type":"message"}
{"nick":"elyalvarado","date":"2019-01-03T18:53:21.167Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T18:53:36.544Z","type":"quit"}
{"nick":"elyalvarado","reason":"Client Quit","date":"2019-01-03T18:54:18.541Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T19:07:30.763Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-03T19:36:11.309Z","type":"join"}
{"nick":"mgol","date":"2019-01-03T20:07:50.857Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T20:12:28.302Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-01-03T20:32:36.247Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T20:38:50.965Z","type":"quit"}
{"nick":"rektide","date":"2019-01-03T20:41:28.879Z","type":"join"}
{"nick":"aki_","date":"2019-01-03T20:41:47.837Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-01-03T20:43:34.697Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T20:43:35.094Z","type":"nick"}
{"nick":"keith_mi_","date":"2019-01-03T20:52:37.195Z","type":"join"}
{"nick":"AtumT_","date":"2019-01-03T20:52:44.610Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 245 seconds","date":"2019-01-03T20:55:28.351Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T20:56:15.841Z","type":"quit"}
{"nick":"mgol","date":"2019-01-03T20:57:21.698Z","type":"join"}
{"nick":"Domenic","message":"Is the ordering of methods on e.g. Map.prototype actually defined anywhere","date":"2019-01-03T20:59:42.710Z","type":"message"}
{"nick":"Domenic","message":"Is it the order they appear in the spec?","date":"2019-01-03T20:59:49.312Z","type":"message"}
{"nick":"Domenic","message":"https://tc39.github.io/ecma262/#sec-ecmascript-standard-built-in-objects could really benefit from sub-headings...","date":"2019-01-03T21:02:09.929Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T21:03:01.248Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-03T21:05:56.041Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 250 seconds","date":"2019-01-03T21:07:18.433Z","type":"quit"}
{"nick":"zenparsing","message":"Domenic:  no i don't think so, and there's a wide variance among engines","date":"2019-01-03T21:17:06.462Z","type":"message"}
{"nick":"Domenic","message":"Fun times","date":"2019-01-03T21:17:24.120Z","type":"message"}
{"nick":"Domenic","message":"Web specs are similarly undefined, and given the prevalence of partial interfaces it wouldn't even be clear how to do so there.","date":"2019-01-03T21:17:48.966Z","type":"message"}
{"nick":"ljharb","message":"fun - `Reflect.ownKeys(Map.prototype)` on chrome gives me `[\"constructor\", \"get\", \"set\", \"has\", \"delete\", \"clear\", \"entries\", \"forEach\", \"keys\", \"size\", \"values\", Symbol(Symbol.toStringTag), Symbol(Symbol.iterator)]` - safari gives me `[\"forEach\", \"values\", \"keys\", \"clear\", \"delete\", \"get\", \"has\", \"set\", \"entries\", \"size\", \"constructor\", Symbol(Symbol.iterator), Symbol(Symbol.toStringTag)]`","date":"2019-01-03T21:42:05.068Z","type":"message"}
{"nick":"devsnek","message":"does it matter much?","date":"2019-01-03T21:50:19.584Z","type":"message"}
{"nick":"ljharb","message":"it'd probably matter if it *were* specified, because then people could rely on it, and adding a new method could break them :-p","date":"2019-01-03T21:58:57.497Z","type":"message"}
{"nick":"jorydotcom","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T22:01:13.932Z","type":"quit"}
{"nick":"Domenic","message":"Presumably we'd add a new method at the end","date":"2019-01-03T22:02:15.888Z","type":"message"}
{"nick":"Domenic","message":"It's a source of non-interop; I know bzbarsky talks about how in the past it's caused interop problems for Firefox with some code-golf competitions/demos that access methods by index instead of by name.","date":"2019-01-03T22:02:47.587Z","type":"message"}
{"nick":"jorydotcom","date":"2019-01-03T22:05:01.251Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-03T22:07:36.972Z","type":"quit"}
{"nick":"jorydotcom","reason":"Client Quit","date":"2019-01-03T22:08:00.547Z","type":"quit"}
{"nick":"mgol","date":"2019-01-03T22:10:05.339Z","type":"join"}
{"nick":"wuz_","reason":"Ping timeout: 250 seconds","date":"2019-01-03T22:11:53.141Z","type":"quit"}
{"nick":"devsnek","message":"that's kinda yucky though","date":"2019-01-03T22:12:06.711Z","type":"message"}
{"nick":"cloudshu","message":"bradleymeck: it is my understanding that your example should be an early error","date":"2019-01-03T22:13:19.540Z","type":"message"}
{"nick":"ljharb","message":"sounds like it's more of a \"play it as it lies\" code golfing :-p you can't rely on the course always being consistent","date":"2019-01-03T22:13:39.308Z","type":"message"}
{"nick":"cloudshu","message":"bradleymeck: the way i internalize the rule is, if you replicate a var declaration in every enclosing scope of the actual textual declaration on the way to the nearest enclosing function, and in one of those scopes is a same-named lexical declaration, that's an early error","date":"2019-01-03T22:14:38.863Z","type":"message"}
{"nick":"cloudshu","message":"(and indeed that's how the spidermonkey parser does the early error checking, which is why it doesn't compile)","date":"2019-01-03T22:15:26.807Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T22:20:39.838Z","type":"quit"}
{"nick":"rkirsling","message":"I just fixed that in JSC as a matter of fact :)","date":"2019-01-03T22:23:42.578Z","type":"message"}
{"nick":"rkirsling","message":"(not for function decls yet but for vars)","date":"2019-01-03T22:23:52.834Z","type":"message"}
{"nick":"mgol","date":"2019-01-03T22:24:24.984Z","type":"join"}
{"nick":"cloudshu","message":"oh nice","date":"2019-01-03T22:24:47.780Z","type":"message"}
{"nick":"cloudshu","message":"function decls don't have that behavior though, unless you mean the annex b weirdness?","date":"2019-01-03T22:24:57.260Z","type":"message"}
{"nick":"rkirsling","message":"https://github.com/WebKit/webkit/commit/6dbb1ef9af0c44f48be2b68de82dab0ab9279e88","date":"2019-01-03T22:25:04.767Z","type":"message"}
{"nick":"rkirsling","message":"I'm not sure actually, I just know that there were other redecl tests that I didn't address and they involved the various types of functions","date":"2019-01-03T22:25:57.686Z","type":"message"}
{"nick":"mgol","reason":"Client Quit","date":"2019-01-03T22:26:28.390Z","type":"quit"}
{"nick":"cloudshu","message":"ah","date":"2019-01-03T22:26:36.855Z","type":"message"}
{"nick":"cloudshu","message":"there's also redecl weirdness around for-of var declarations i think... let me see if i can remember","date":"2019-01-03T22:26:56.951Z","type":"message"}
{"nick":"rkirsling","message":"yep, it's almost hilarious","date":"2019-01-03T22:28:01.877Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-01-03T22:28:26.389Z","type":"quit"}
{"nick":"rkirsling","message":"copy-pasting an explanation I'd given to a colleague:","date":"2019-01-03T22:29:17.067Z","type":"message"}
{"nick":"rkirsling","message":"1. lexical scopes aren't var scopes so vars hoist up to function or global scope","date":"2019-01-03T22:29:17.216Z","type":"message"}
{"nick":"rkirsling","message":"2. as such if that hoisting collides with a let/const declaration it needs to be a syntax error","date":"2019-01-03T22:29:17.216Z","type":"message"}
{"nick":"rkirsling","message":"3. but wait `try {} catch (e)  { var e; }` is legal","date":"2019-01-03T22:29:17.216Z","type":"message"}
{"nick":"rkirsling","message":"4. but wait again `try {} catch (e) { for (var e of whatever) {} }` is illegal","date":"2019-01-03T22:29:17.216Z","type":"message"}
{"nick":"cloudshu","message":"yes, exactly it","date":"2019-01-03T22:29:37.316Z","type":"message"}
{"nick":"cloudshu","message":"https://searchfox.org/mozilla-central/source/js/src/frontend/ParseContext.cpp#461-463","date":"2019-01-03T22:29:37.891Z","type":"message"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-03T22:30:58.480Z","type":"quit"}
{"nick":"ljharb","message":"wait, why is that illegal? `function (e) { var e; }` is legal, as is `function (e) { for (var e of whatever) {} }`","date":"2019-01-03T22:34:27.471Z","type":"message"}
{"nick":"rkirsling","message":"short answer is because Annex B.3 is sadness","date":"2019-01-03T22:35:28.244Z","type":"message"}
{"nick":"cloudshu","message":"ljharb: only the first is legal, annex b.3.5 baby","date":"2019-01-03T22:36:03.607Z","type":"message"}
{"nick":"rkirsling","message":"longer answer is","date":"2019-01-03T22:36:04.215Z","type":"message"}
{"nick":"rkirsling","message":"(I think)","date":"2019-01-03T22:36:18.631Z","type":"message"}
{"nick":"cloudshu","message":"wasn't the rationale something like for-of is a new construct, so let's make it stricter","date":"2019-01-03T22:36:26.495Z","type":"message"}
{"nick":"ljharb","message":"wait, so the second one of my examples is illegal?","date":"2019-01-03T22:36:43.598Z","type":"message"}
{"nick":"ljharb","message":"in sloppy only, or regardless?","date":"2019-01-03T22:36:49.729Z","type":"message"}
{"nick":"rkirsling","message":"if the catch parameter is destructured or the var is a for-of initializer, then by using such new code you must know what you're doing","date":"2019-01-03T22:37:06.501Z","type":"message"}
{"nick":"cloudshu","message":"ljharb: wait, i think i read your example wrong, thinking you pasted rkirsling's example","date":"2019-01-03T22:37:07.764Z","type":"message"}
{"nick":"ljharb","message":"no i typed new ones","date":"2019-01-03T22:37:12.220Z","type":"message"}
{"nick":"ljharb","message":"i'm saying that if shadowing a function argument is legal, shadowing a catch argument should be","date":"2019-01-03T22:37:21.292Z","type":"message"}
{"nick":"ljharb","message":"and it's super weird if that's treated differently","date":"2019-01-03T22:37:28.082Z","type":"message"}
{"nick":"cloudshu","message":"ljharb: catch arguments have always been quasi-lexical and special","date":"2019-01-03T22:37:38.847Z","type":"message"}
{"nick":"ljharb","message":"right but that's weird :-)","date":"2019-01-03T22:37:50.012Z","type":"message"}
{"nick":"ljharb","message":"need they be?","date":"2019-01-03T22:37:55.880Z","type":"message"}
{"nick":"cloudshu","message":"ljharb: i mean... yes","date":"2019-01-03T22:37:57.368Z","type":"message"}
{"nick":"cloudshu","message":"though i don't see the analogy between parameters and catch bindings, other than that the production used to parse them is the same","date":"2019-01-03T22:38:41.373Z","type":"message"}
{"nick":"ljharb","message":"to me, they're all bindings","date":"2019-01-03T22:38:50.318Z","type":"message"}
{"nick":"ljharb","message":"like conceptually, i'm not thinking about parsing or the spec","date":"2019-01-03T22:39:14.245Z","type":"message"}
{"nick":"cloudshu","message":"what's your reasoning for thinking of them as the same kind of bindings?","date":"2019-01-03T22:40:02.149Z","type":"message"}
{"nick":"ljharb","message":"they're a variable name that i choose, that's defined inside parentheses directly preceding the block in which they're in scope","date":"2019-01-03T22:42:36.515Z","type":"message"}
{"nick":"ljharb","message":"and i can omit it :-p","date":"2019-01-03T22:42:51.776Z","type":"message"}
{"nick":"cloudshu","message":"right, so the syntax similarity","date":"2019-01-03T22:45:48.504Z","type":"message"}
{"nick":"ljharb","message":"and the semantics of the resulting identifier","date":"2019-01-03T22:46:54.099Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-03T22:48:16.867Z","type":"quit"}
{"nick":"aki_","date":"2019-01-03T22:48:17.445Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-03T22:48:41.967Z","type":"nick"}
{"nick":"cloudshu","message":"though the kind of scope the blocks following the parentheses is historically different","date":"2019-01-03T22:49:08.465Z","type":"message"}
{"nick":"rkirsling","message":"probably easier to analogize it with a control flow construct","date":"2019-01-03T22:51:01.741Z","type":"message"}
{"nick":"rkirsling","message":"one way or another it sucks that the for-of condition is kind of too complex for a developer to memorize","date":"2019-01-03T22:51:50.159Z","type":"message"}
{"nick":"rkirsling","message":"*...to expect a developer to...","date":"2019-01-03T22:52:04.193Z","type":"message"}
{"nick":"cloudshu","message":"i can't defend that exception, it seems like a bad idea to me","date":"2019-01-03T22:52:54.359Z","type":"message"}
{"nick":"mgol","date":"2019-01-03T22:53:17.524Z","type":"join"}
{"nick":"rkirsling","message":"technically illegal -> legal isn't breaking the web, right?","date":"2019-01-03T22:53:31.754Z","type":"message"}
{"nick":"rkirsling","message":"I dunno if this is a battle worth fighting, just thinking about it","date":"2019-01-03T22:53:43.715Z","type":"message"}
{"nick":"cloudshu","message":"rkirsling: right, shouldn't be","date":"2019-01-03T22:53:53.121Z","type":"message"}
{"nick":"cloudshu","message":"rkirsling: shouldn't be breaking, i mean","date":"2019-01-03T22:53:59.128Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T22:59:51.534Z","type":"quit"}
{"nick":"mgol","date":"2019-01-03T23:00:14.253Z","type":"join"}
{"nick":"devsnek","message":"the solution is to remove varscoped entirely and tell people it's a bug fix","date":"2019-01-03T23:05:46.225Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-03T23:15:45.739Z","type":"join"}
{"nick":"rkirsling","message":"thankfully it wouldn't be something that comes up in app code; I imagine transpiler writers would be the primary group to actually be aware of \"what happens when I put a var decl in a lexical (or catch) scope\"","date":"2019-01-03T23:20:00.987Z","type":"message"}
{"nick":"cloudshu","message":"function scope oughta be enough for anyone!","date":"2019-01-03T23:26:33.101Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T23:29:03.564Z","type":"quit"}
{"nick":"rkirsling","message":"I suppose I could create an issue, seems worth discussing","date":"2019-01-03T23:46:30.606Z","type":"message"}
{"nick":"ljharb","message":"rkirsling: it'd be most helpful if in that issue, you could document what all 4 browsers currently do in sloppy and strict modes :-D","date":"2019-01-03T23:47:54.118Z","type":"message"}
{"nick":"rkirsling","message":"can do!","date":"2019-01-03T23:48:10.803Z","type":"message"}
{"nick":"ljharb","message":"<3","date":"2019-01-03T23:48:20.450Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-03T23:59:49.092Z","type":"quit"}
