{"nick":"arai","date":"2018-04-23T00:04:42.383Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-04-23T00:11:05.151Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-04-23T04:38:32.010Z","type":"quit"}
{"nick":"oliverdunk","date":"2018-04-23T06:46:14.054Z","type":"join"}
{"nick":"oliverdunk","message":"Hi! I was wondering if anyone was aware of an existing proposal to adding something like Promise.clear()? I'm not looking to cancel the promise, but instead no longer want any code to execute after it resolves.","date":"2018-04-23T06:47:07.086Z","type":"message"}
{"nick":"arai","message":"does it mean that the promise won't be resolved nor rejected?","date":"2018-04-23T06:49:44.037Z","type":"message"}
{"nick":"oliverdunk","message":"@arai You could potentially add another .then callback afterwards, but it would just remove any added up to that point.","date":"2018-04-23T06:53:49.021Z","type":"message"}
{"nick":"arai","message":"Is it for reducing memory pressure?","date":"2018-04-23T06:59:51.649Z","type":"message"}
{"nick":"arai","message":"err, maybe I'm misunderstanding something","date":"2018-04-23T07:00:15.896Z","type":"message"}
{"nick":"oliverdunk","message":"I have to head off but I'll check the logs and respond to any questions when I get back :)","date":"2018-04-23T07:00:34.072Z","type":"message"}
{"nick":"oliverdunk","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-04-23T07:00:57.985Z","type":"quit"}
{"nick":"arai","message":"maybe undo-ing .then() and .catch() call?","date":"2018-04-23T07:02:05.419Z","type":"message"}
{"nick":"annevk","message":"Pretty sure there's been no such thing proposed","date":"2018-04-23T07:08:20.346Z","type":"message"}
{"nick":"keith_miller","date":"2018-04-23T07:33:23.102Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-04-23T07:36:27.799Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-23T07:37:14.348Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-04-23T07:59:07.199Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-23T08:26:10.448Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-23T08:37:37.686Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-23T08:57:50.885Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-23T09:02:11.380Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-04-23T09:06:02.716Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-23T09:09:17.701Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-23T09:11:02.337Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2018-04-23T09:11:37.444Z","type":"quit"}
{"nick":"JaseW_","date":"2018-04-23T09:11:39.160Z","type":"join"}
{"nick":"JaseW_","new_nick":"JaseW","date":"2018-04-23T09:12:08.553Z","type":"nick"}
{"nick":"keith_miller","date":"2018-04-23T09:13:54.407Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-23T09:19:18.989Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-04-23T10:25:07.993Z","type":"quit"}
{"nick":"mylesborins","date":"2018-04-23T10:25:38.447Z","type":"join"}
{"nick":"arai","date":"2018-04-23T11:12:55.270Z","type":"join"}
{"nick":"AtumT","date":"2018-04-23T13:09:49.323Z","type":"join"}
{"nick":"jmdyck","date":"2018-04-23T13:21:22.109Z","type":"join"}
{"nick":"jwalden","date":"2018-04-23T15:03:38.739Z","type":"join"}
{"nick":"oliverdunk","date":"2018-04-23T16:02:02.127Z","type":"join"}
{"nick":"oliverdunk","message":"@aria Exactly. I'm not sure yet if you would be able to remove individual blocks, or if .clear() would just remove all of them.","date":"2018-04-23T16:02:42.155Z","type":"message"}
{"nick":"oliverdunk","message":"@arai I mean, apologies.","date":"2018-04-23T16:02:57.593Z","type":"message"}
{"nick":"oliverdunk","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-23T16:51:37.806Z","type":"quit"}
{"nick":"oliverdunk","date":"2018-04-23T17:25:41.418Z","type":"join"}
{"nick":"oliverdunk","message":"Since it's quite quiet in here, would I be best writing something on the mailing list? New to the whole process :-)","date":"2018-04-23T17:26:07.028Z","type":"message"}
{"nick":"bterlson","message":"oliverdunk: if the goal is to ultimately get a proposal in the pipeline, es-discuss can't hurt! You can also take a look at proposals on github and write up an explainer to help people understand the motivation and design.","date":"2018-04-23T17:29:38.513Z","type":"message"}
{"nick":"bterlson","message":"process-wise: you're \"stage -1\" until you find a TC39 delegate-champion to bring it up at a meeting","date":"2018-04-23T17:30:49.653Z","type":"message"}
{"nick":"cloudshu","date":"2018-04-23T17:35:47.687Z","type":"join"}
{"nick":"srl295","date":"2018-04-23T18:38:10.868Z","type":"join"}
{"nick":"oliverdunk","message":"https://www.ecma-international.org/ has been suspended?","date":"2018-04-23T19:14:57.467Z","type":"message"}
{"nick":"bterlson","message":"oliverdunk: yeah, email sent, waiting to hear more","date":"2018-04-23T19:15:13.102Z","type":"message"}
{"nick":"oliverdunk","message":"No problem. Thanks for your help above by the way - I wrote a brief proposal and put it on es-discuss, and having been getting some good feedback already.","date":"2018-04-23T19:16:50.938Z","type":"message"}
{"nick":"Domenic","message":"Thoughts on how to handle promises in spec text welcome... https://github.com/MylesBorins/proposal-top-level-await/pull/15","date":"2018-04-23T19:17:45.552Z","type":"message"}
{"nick":"Domenic","message":"caitp bterlson seem like people to help with ^","date":"2018-04-23T19:18:43.167Z","type":"message"}
{"nick":"Domenic","message":"Gah this stuff breaks my brain now I'm not even sure there's a problem...","date":"2018-04-23T19:50:38.644Z","type":"message"}
{"nick":"Domenic","message":"Moved to https://github.com/MylesBorins/proposal-top-level-await/issues/18, progress made","date":"2018-04-23T20:18:51.403Z","type":"message"}
{"nick":"Bakkot","message":"oliverdunk: I don't think it's a good idea to add this in general - giving Bob access to a promise P shouldn't entail giving Bob the ability to interrupt Alice's previously attached listener to P","date":"2018-04-23T20:31:03.258Z","type":"message"}
{"nick":"oliverdunk","message":"Bakkot: do you think the same about being able to remove a callback by passing a reference to the one that you want to remove? I understand what you're saying but that would be similar to removeEventListener.","date":"2018-04-23T20:32:31.656Z","type":"message"}
{"nick":"Bakkot","message":"oliverdunk: removeEventListener currently requires you to have access to the callback you're trying to remove, and proposals to relax that requirement have been met with strong objections","date":"2018-04-23T20:33:42.538Z","type":"message"}
{"nick":"Bakkot","message":"a proposal allowing you to remove a listener which you have a reference to would be a lot more palatable one than one which allows you to remove arbitrary listeners, I think","date":"2018-04-23T20:34:53.560Z","type":"message"}
{"nick":"oliverdunk","message":"Ok, I think that is a fair compromise. Something like https://esdiscuss.org/topic/proposal-allow-promise-callbacks-to-be-removed#content-1 perhaps?","date":"2018-04-23T20:35:09.357Z","type":"message"}
{"nick":"Bakkot","message":"(er, where 'listener' means 'thing passed to .then', I guess)","date":"2018-04-23T20:35:19.858Z","type":"message"}
{"nick":"Bakkot","message":"Sure, something like that.","date":"2018-04-23T20:36:03.285Z","type":"message"}
{"nick":"oliverdunk","message":"Ok, thanks. I can't see a situation where the \"all seeing\" clear method would be the only option, so I am open to that. Will leave a reply in the esdiscuss about this.","date":"2018-04-23T20:37:52.683Z","type":"message"}
{"nick":"Bakkot","message":"Personally I'm not convinced that even that restricted functionality is necessarily desirable either, but it's a lot more likely to fly than the one allowing you to remove all listeners.","date":"2018-04-23T20:37:59.015Z","type":"message"}
{"nick":"oliverdunk","message":"Is there a particular reason why you're against it? Hope you don't mind me asking just so that I can get a better understanding.","date":"2018-04-23T20:39:51.195Z","type":"message"}
{"nick":"Bakkot","message":"No, of course please feel free to ask; give me a sec to try to articulate it","date":"2018-04-23T20:41:28.803Z","type":"message"}
{"nick":"TabAtkins","message":"Guessing the basic objection is that you can just do this yourself; in your callback, check some boolean that the callback closed over, and if it's false just return immediately.","date":"2018-04-23T20:48:15.931Z","type":"message"}
{"nick":"TabAtkins","message":"(Unlike event listeners, which might fire indefinitely, and thus you can reasonably want to remove unused callbacks so they don't just stack up over the lifetime of the page. Promise callbacks only fire once and then are done, so there's no extra cost outside of the interval between you wanting to remove it and the promise resolving.)","date":"2018-04-23T20:49:21.258Z","type":"message"}
{"nick":"TabAtkins","message":"(I'll respond with this comment over on the thread, too.)","date":"2018-04-23T20:51:48.047Z","type":"message"}
{"nick":"Bakkot","message":"It feels like it's putting the responsibility in the wrong place. Promises are mostly boxes with values in them, in my mental model, and `.then` is a way of turning a function from values to values into a function from boxes to boxes. This idea of \"clearing\" a `.then()` feels like you are asking to un-apply a function.","date":"2018-04-23T20:53:29.600Z","type":"message"}
{"nick":"Bakkot","message":"yeah, also mostly what TabAtkins said, I guess.","date":"2018-04-23T20:53:47.701Z","type":"message"}
{"nick":"oliverdunk","message":"I see. TabAtkins: I can see it as useful when you may want to add and remove it multiple times, e.g adding it when a user navigates to a particular page in an SPA, and removing it when they leave. You would need to keep track of if it was already added so that it isn't added twice.","date":"2018-04-23T20:55:58.171Z","type":"message"}
{"nick":"Domenic","message":"I'm not sure why runMe = true | false is harder to do than p.(removeHandler | then)(handler)","date":"2018-04-23T20:56:48.883Z","type":"message"}
{"nick":"oliverdunk","message":"You would need runMe and callbackAlreadyAdded. But I do see what you're saying.","date":"2018-04-23T20:57:53.336Z","type":"message"}
{"nick":"Domenic","message":"The beautiful thing about runMe = true","date":"2018-04-23T20:58:11.871Z","type":"message"}
{"nick":"Domenic","message":"Is that if it's already true, that doesn't impact anything","date":"2018-04-23T20:58:16.862Z","type":"message"}
{"nick":"Domenic","message":"So it seems like you'd only need that","date":"2018-04-23T20:58:26.429Z","type":"message"}
{"nick":"oliverdunk","message":"So runMe is storing both if it has been run and if a callback was added? It seems a bit messy but if this is going in a direction with promises that we don't want to, I will accept defeat.","date":"2018-04-23T20:59:42.893Z","type":"message"}
{"nick":"Domenic","message":"Oh, well, it only ever runs once anyway, so if that's your concern, promises already have you covered.","date":"2018-04-23T21:00:06.352Z","type":"message"}
{"nick":"oliverdunk","message":"I don't think I'm explaining properly, unless I'm just missing the point? What I mean is that if you add a callback to the same promise (which is taking forever to resolve) each time they return to a page, you will end up with multiple callbacks which are all fired simultaneously when it finally resolves, which all do the same thing.","date":"2018-04-23T21:02:16.501Z","type":"message"}
{"nick":"Domenic","message":"Yeah, makes sense. Then this should work: `/* once */ let runMe = false; /* lots of times */ p.then(() => { if (!runMe) { return; } runMe = false; ... do stuff ... })`","date":"2018-04-23T21:03:51.615Z","type":"message"}
{"nick":"TabAtkins","message":"Right. So you can either track whether you've added that yourself (in an alreadyAdded boolean in the outer script), or you can have each callback close over a runMe boolean, and set it to false on the previous before you add a new one.  In the latter case they'll all fire when it finally resolves, but all but the last will just check the boolean and immediately stop.","date":"2018-04-23T21:03:57.846Z","type":"message"}
{"nick":"Domenic","message":"Er, initial runMe should = true","date":"2018-04-23T21:04:08.805Z","type":"message"}
{"nick":"TabAtkins","message":"Or what Domenic said, which seems easier. ^_^","date":"2018-04-23T21:04:22.744Z","type":"message"}
{"nick":"oliverdunk","message":"I appreciate the feedback Domenic and TabAtkins. I think I'll lay this one to rest but I've learn a lot doing this; will make sure to come back when I have another idea.","date":"2018-04-23T21:10:32.157Z","type":"message"}
{"nick":"Domenic","message":":)","date":"2018-04-23T21:11:46.080Z","type":"message"}
{"nick":"oliverdunk","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-04-23T21:44:22.603Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-04-23T21:44:54.227Z","type":"join"}
{"nick":"keith_miller","date":"2018-04-23T22:03:22.750Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 248 seconds","date":"2018-04-23T22:07:29.527Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-23T22:32:46.523Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-04-23T22:32:52.438Z","type":"quit"}
{"nick":"keith_miller","date":"2018-04-23T22:33:31.334Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 264 seconds","date":"2018-04-23T22:54:22.120Z","type":"quit"}
