{"nick":"laughinghan","date":"2019-06-20T00:29:37.431Z","type":"join"}
{"nick":"jmdyck","message":"cj's talk = https://www.youtube.com/watch?v=MO8hZlgK5zc ?","date":"2019-06-20T00:33:01.434Z","type":"message"}
{"nick":"cybai","date":"2019-06-20T00:35:03.398Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 246 seconds","date":"2019-06-20T00:39:10.386Z","type":"quit"}
{"nick":"rkirsling","message":"jmdyck: yep!","date":"2019-06-20T00:39:11.748Z","type":"message"}
{"nick":"jmdyck","message":"tx","date":"2019-06-20T00:39:17.997Z","type":"message"}
{"nick":"rektide_","new_nick":"rektide","date":"2019-06-20T00:39:26.062Z","type":"nick"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-06-20T00:56:14.244Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-06-20T01:22:35.415Z","type":"join"}
{"nick":"devsnek","message":"someone who works on test262.report, do you know on average how many tests are marked skip/flake by engines?","date":"2019-06-20T01:46:08.500Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T02:01:06.560Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-06-20T02:29:08.738Z","type":"join"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-06-20T02:55:11.543Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-06-20T02:55:41.132Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T02:57:34.528Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T03:18:45.764Z","type":"quit"}
{"nick":"laughinghan","date":"2019-06-20T03:23:52.374Z","type":"join"}
{"nick":"cybai","date":"2019-06-20T03:32:56.967Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T04:05:17.808Z","type":"quit"}
{"nick":"laughinghan","date":"2019-06-20T04:08:43.733Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-06-20T04:26:48.793Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T04:36:19.916Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T05:29:33.021Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T05:44:06.515Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T05:48:05.514Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T05:50:58.927Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T05:54:20.548Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-06-20T06:12:13.193Z","type":"quit"}
{"nick":"cybai","date":"2019-06-20T06:13:21.047Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 258 seconds","date":"2019-06-20T06:17:48.898Z","type":"quit"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T08:15:45.948Z","type":"quit"}
{"nick":"jmdyck","date":"2019-06-20T10:32:08.952Z","type":"join"}
{"nick":"Nimelrian","date":"2019-06-20T10:36:47.149Z","type":"join"}
{"nick":"itamarok","date":"2019-06-20T10:42:05.762Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T10:43:03.527Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T10:43:21.191Z","type":"join"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-06-20T12:56:13.064Z","type":"quit"}
{"nick":"cloudshu","date":"2019-06-20T12:57:01.186Z","type":"join"}
{"nick":"ErrorIsNullError","date":"2019-06-20T13:40:50.744Z","type":"join"}
{"nick":"ErrorIsNullError","message":"devsnek, I still don't understand.  Prehaps \"intent\" is the wrong word/ I'm trying to figure out what it enables engines to do?  AFAICT, all the predictability benefits fall out of the similar language in HostResolveImportedModule.  I suppose without it  a transient network or file-system failure during the first call to HostImportModuleDynamically(referencingScriptOrModule,specifier) or a cache expiration between calls might l","date":"2019-06-20T13:54:05.908Z","type":"message"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T14:03:45.768Z","type":"quit"}
{"nick":"devsnek","message":"ErrorIsNullError: it's about preventing the thing you can do in commonjs where you modify the module cache","date":"2019-06-20T14:27:00.682Z","type":"message"}
{"nick":"ErrorIsNullError","message":"devsnek, As in require.cache in Node.js?","date":"2019-06-20T14:46:15.062Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2019-06-20T14:46:32.510Z","type":"message"}
{"nick":"ErrorIsNullError","message":"Thanks for explaining.","date":"2019-06-20T14:46:39.738Z","type":"message"}
{"nick":"devsnek","message":"I guess webpack has that too","date":"2019-06-20T14:46:40.023Z","type":"message"}
{"nick":"ErrorIsNullError","message":"Yeah.  IIRC, webpack creates a stub require function, and requiring a module looks up into a cache and evals the rewritten module body text on a cache miss.","date":"2019-06-20T14:47:53.476Z","type":"message"}
{"nick":"ErrorIsNullError","message":"I've been reading the related parts of html.spec.whatwg and I think I've got a better handle on how FinishDynamicImport expects the module graph to be fleshed out (per the Assert of the evaluated bit).","date":"2019-06-20T14:50:33.587Z","type":"message"}
{"nick":"ErrorIsNullError","message":"I was missing that bit of context though, so thanks for that.","date":"2019-06-20T14:50:56.939Z","type":"message"}
{"nick":"ErrorIsNullError","message":"I'll prep an editorial PR that adds a note relating to that, and invite Daniel+Domenic to review.  May lead to useful discussion, and/or help someone else who has the same confusion.","date":"2019-06-20T14:53:27.386Z","type":"message"}
{"nick":"AtumT","date":"2019-06-20T14:57:40.277Z","type":"join"}
{"nick":"cybai","date":"2019-06-20T15:29:08.926Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 248 seconds","date":"2019-06-20T15:33:20.925Z","type":"quit"}
{"nick":"Nimelrian","reason":"Ping timeout: 258 seconds","date":"2019-06-20T15:40:13.108Z","type":"quit"}
{"nick":"tobie_","date":"2019-06-20T15:55:09.679Z","type":"join"}
{"nick":"annevk_","date":"2019-06-20T15:59:58.381Z","type":"join"}
{"nick":"cybai","date":"2019-06-20T16:00:24.431Z","type":"join"}
{"nick":"tobie","reason":"*.net *.split","date":"2019-06-20T16:03:12.269Z","type":"quit"}
{"nick":"annevk","reason":"*.net *.split","date":"2019-06-20T16:03:12.335Z","type":"quit"}
{"nick":"Draggor","reason":"*.net *.split","date":"2019-06-20T16:03:12.838Z","type":"quit"}
{"nick":"tobie_","new_nick":"tobie","date":"2019-06-20T16:03:13.397Z","type":"nick"}
{"nick":"annevk_","new_nick":"annevk","date":"2019-06-20T16:03:13.739Z","type":"nick"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-06-20T16:04:38.442Z","type":"quit"}
{"nick":"Draggor","date":"2019-06-20T16:11:01.547Z","type":"join"}
{"nick":"cybai","date":"2019-06-20T16:16:48.100Z","type":"join"}
{"nick":"laughinghan","date":"2019-06-20T16:42:38.629Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-06-20T16:56:13.046Z","type":"quit"}
{"nick":"cybai","date":"2019-06-20T17:13:32.030Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-06-20T17:19:59.282Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-06-20T17:33:57.773Z","type":"join"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-06-20T17:34:04.238Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-06-20T17:34:55.998Z","type":"join"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-06-20T17:55:40.542Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-06-20T17:55:57.781Z","type":"join"}
{"nick":"keith_mi_","reason":"Read error: Connection reset by peer","date":"2019-06-20T17:55:57.924Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-06-20T17:56:50.895Z","type":"join"}
{"nick":"cybai","date":"2019-06-20T18:02:16.657Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-06-20T18:02:30.185Z","type":"quit"}
{"nick":"Nimelrian","date":"2019-06-20T18:10:29.133Z","type":"join"}
{"nick":"cybai","date":"2019-06-20T18:11:23.980Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 258 seconds","date":"2019-06-20T18:15:48.007Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T18:23:50.793Z","type":"join"}
{"nick":"keith_mi_","message":"cloudshu: Another possibly controversial proposal now that we have WeakRef collection semantics: WeakSet/Map iteration","date":"2019-06-20T18:26:37.383Z","type":"message"}
{"nick":"keith_mi_","message":"thoughts?","date":"2019-06-20T18:26:41.934Z","type":"message"}
{"nick":"Bakkot","message":":(","date":"2019-06-20T18:27:00.538Z","type":"message"}
{"nick":"keith_mi_","message":"why :(","date":"2019-06-20T18:27:10.207Z","type":"message"}
{"nick":"cloudshu","message":"keith_mi_: you want to iterate over existing WeakMaps?","date":"2019-06-20T18:27:30.885Z","type":"message"}
{"nick":"Bakkot","message":"WeakRefs are a thing which very few people should need to know about or use, which limits the extent to which GC is exposed to random people writing JS; this is not the case for WeakMaps","date":"2019-06-20T18:27:34.986Z","type":"message"}
{"nick":"keith_mi_","message":"seems like a useful feature and is an example on the WeakRef doc","date":"2019-06-20T18:27:36.128Z","type":"message"}
{"nick":"cloudshu","message":"which are explicitly ephemeron things that aren't meant to be iterable?","date":"2019-06-20T18:27:42.743Z","type":"message"}
{"nick":"cloudshu","message":"yeah i'm with Bakkot on this one","date":"2019-06-20T18:28:01.515Z","type":"message"}
{"nick":"keith_mi_","message":"Yeah basically","date":"2019-06-20T18:28:02.718Z","type":"message"}
{"nick":"devsnek","message":"are weak collection iterators async iterators","date":"2019-06-20T18:28:59.319Z","type":"message"}
{"nick":"keith_mi_","message":"word, I can 100% guarantee you that there's going to be a library that makes an iterable WeakMap and it's going to be popular","date":"2019-06-20T18:29:04.596Z","type":"message"}
{"nick":"devsnek","message":"i'd rather it was a library","date":"2019-06-20T18:29:21.514Z","type":"message"}
{"nick":"keith_mi_","message":"there's not iterators right now","date":"2019-06-20T18:29:25.003Z","type":"message"}
{"nick":"devsnek","message":"no i mean","date":"2019-06-20T18:29:31.772Z","type":"message"}
{"nick":"devsnek","message":"the conceptual weak collection iterators","date":"2019-06-20T18:29:39.629Z","type":"message"}
{"nick":"keith_mi_","message":"why would they need to be?","date":"2019-06-20T18:29:51.235Z","type":"message"}
{"nick":"devsnek","message":"couldn't you observe collection by doing like `while (true) { [...thing.values()] }`","date":"2019-06-20T18:30:09.569Z","type":"message"}
{"nick":"keith_mi_","message":"no it would have the same semantics as WeakRef","date":"2019-06-20T18:30:21.654Z","type":"message"}
{"nick":"devsnek","message":"isn't that why finalization groups call back in a next tick","date":"2019-06-20T18:30:25.330Z","type":"message"}
{"nick":"keith_mi_","message":"once you have iterated the value it's keptAlive until the next tick","date":"2019-06-20T18:30:40.282Z","type":"message"}
{"nick":"devsnek","message":"oh ok","date":"2019-06-20T18:30:45.843Z","type":"message"}
{"nick":"devsnek","message":"makes sense","date":"2019-06-20T18:30:47.577Z","type":"message"}
{"nick":"devsnek","message":"still with bakkot though","date":"2019-06-20T18:31:03.047Z","type":"message"}
{"nick":"devsnek","message":"the thing i really want is a WeakValueMap","date":"2019-06-20T18:31:19.580Z","type":"message"}
{"nick":"keith_mi_","message":"I don't get the advantage of it being a library","date":"2019-06-20T18:31:25.136Z","type":"message"}
{"nick":"cloudshu","message":"keith_mi_: oh for sure, there will be an iterable weakmap on top of weakrefs","date":"2019-06-20T18:31:33.696Z","type":"message"}
{"nick":"cloudshu","message":"you can do weakvaluemaps on top of weakrefs also","date":"2019-06-20T18:31:40.961Z","type":"message"}
{"nick":"devsnek","message":"yeah but it would be nice in std","date":"2019-06-20T18:31:54.095Z","type":"message"}
{"nick":"keith_mi_","message":"devsnek: that's just weakMap where the values are WeakRefs","date":"2019-06-20T18:31:56.528Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2019-06-20T18:32:03.372Z","type":"message"}
{"nick":"cloudshu","message":"keith_mi_: i think the advantage is that the existing invariant for WeakMaps stays as is, and that the \"there be heavy impl-dependent timing here\" is only limited to grepping for weakrefs","date":"2019-06-20T18:33:17.547Z","type":"message"}
{"nick":"keith_mi_","message":"cloudshu: I think that would still be true","date":"2019-06-20T18:33:38.117Z","type":"message"}
{"nick":"cloudshu","message":"keith_mi_: what's the motivation for adding iteration beyond \"it'll be possible anyway with a container on top of weakrefs\"?","date":"2019-06-20T18:33:48.535Z","type":"message"}
{"nick":"keith_mi_","message":"I just think it's going to be in 100% of wild uses of WeakMap","date":"2019-06-20T18:34:07.748Z","type":"message"}
{"nick":"keith_mi_","message":"so we might as well add it","date":"2019-06-20T18:34:13.585Z","type":"message"}
{"nick":"keith_mi_","message":"so engines can optimize","date":"2019-06-20T18:34:23.164Z","type":"message"}
{"nick":"devsnek","message":"i think people also take advantage of weak collections being uninspectable","date":"2019-06-20T18:34:27.289Z","type":"message"}
{"nick":"devsnek","message":"whatever the term is","date":"2019-06-20T18:34:34.725Z","type":"message"}
{"nick":"Bakkot","message":"wat","date":"2019-06-20T18:34:42.940Z","type":"message"}
{"nick":"Bakkot","message":"WeakMaps are already widely used without iteration","date":"2019-06-20T18:34:43.083Z","type":"message"}
{"nick":"devsnek","message":"there is one case i can think of where i would use this","date":"2019-06-20T18:35:04.153Z","type":"message"}
{"nick":"cloudshu","message":"keith_mi_: wait, what","date":"2019-06-20T18:35:13.329Z","type":"message"}
{"nick":"devsnek","message":"but that's one case in like a billion times i've used weakmap","date":"2019-06-20T18:35:13.758Z","type":"message"}
{"nick":"cloudshu","message":"what are you envisioning people doing? creating a shadow map of weakrefs holding on to weakmap keys, just so they can iterate?","date":"2019-06-20T18:35:43.602Z","type":"message"}
{"nick":"keith_mi_","message":"afaik all the web inspectors have added this themselves","date":"2019-06-20T18:35:47.149Z","type":"message"}
{"nick":"Bakkot","message":"they've also all exposed promise resolution status, beause it's nice when debugging, but that doesn't mean it makes sense to add that to the language","date":"2019-06-20T18:36:35.922Z","type":"message"}
{"nick":"keith_mi_","message":"My point is now that it's possible to add it's going to be done, ubiquitously.","date":"2019-06-20T18:37:06.152Z","type":"message"}
{"nick":"devsnek","message":"wouldn't this also break the implementation style where weakmaps are just a wrapper that assign hidden props on the key objects","date":"2019-06-20T18:37:16.913Z","type":"message"}
{"nick":"cloudshu","message":"well, presumably not until you actually do the iteration","date":"2019-06-20T18:37:32.234Z","type":"message"}
{"nick":"keith_mi_","message":"how would it?","date":"2019-06-20T18:37:39.943Z","type":"message"}
{"nick":"keith_mi_","message":"the weakmap isn't exposed","date":"2019-06-20T18:37:46.645Z","type":"message"}
{"nick":"cloudshu","message":"keith_mi_: put another way, what are we gaining by standardizing it becaues it's possible?","date":"2019-06-20T18:38:57.437Z","type":"message"}
{"nick":"cloudshu","message":"i can't really say i agree or disagree with ubiquity","date":"2019-06-20T18:39:06.040Z","type":"message"}
{"nick":"Bakkot","message":"I expect it will be done less, much less, if it's in a library rather than in the language.","date":"2019-06-20T18:39:22.916Z","type":"message"}
{"nick":"devsnek","message":"anyone have any theories about why lint would fail on ci but work locally","date":"2019-06-20T18:39:30.195Z","type":"message"}
{"nick":"keith_mi_","message":"I mean there's no rush on this since we can easily find out later","date":"2019-06-20T18:39:56.659Z","type":"message"}
{"nick":"Bakkot","message":"(and also being in a library will mean it's opt-in; adding a library will not grant other people the ability to iterate my non-library weakmaps)","date":"2019-06-20T18:39:59.392Z","type":"message"}
{"nick":"ljharb","message":"making an iterable weakmap is fine, but allowing weakmaps to be iterable would be terrible","date":"2019-06-20T18:40:33.444Z","type":"message"}
{"nick":"cloudshu","message":"i'm still confused how the library will do tihs for existing weakmaps besides keeping a shadow map","date":"2019-06-20T18:40:56.878Z","type":"message"}
{"nick":"keith_mi_","message":"cloudshu: it's in https://github.com/tc39/proposal-weakrefs","date":"2019-06-20T18:42:20.314Z","type":"message"}
{"nick":"keith_mi_","message":"as an example","date":"2019-06-20T18:42:26.066Z","type":"message"}
{"nick":"keith_mi_","message":"and yeah it's a \"shadow\" map","date":"2019-06-20T18:43:12.375Z","type":"message"}
{"nick":"keith_mi_","message":"but that's much more expensive than having the VM iterate it for you since we already can","date":"2019-06-20T18:43:40.695Z","type":"message"}
{"nick":"cloudshu","message":"oh i never scrolled that far down","date":"2019-06-20T18:44:01.173Z","type":"message"}
{"nick":"keith_mi_","message":"As you now have 3 maps where you really only need one","date":"2019-06-20T18:44:04.950Z","type":"message"}
{"nick":"keith_mi_","message":"LOL","date":"2019-06-20T18:44:11.077Z","type":"message"}
{"nick":"devsnek","message":"can't you make the finalization group itself the map","date":"2019-06-20T18:44:16.801Z","type":"message"}
{"nick":"keith_mi_","message":"devsnek: There's no find","date":"2019-06-20T18:44:28.893Z","type":"message"}
{"nick":"devsnek","message":"aw","date":"2019-06-20T18:44:31.541Z","type":"message"}
{"nick":"keith_mi_","message":"in finalization group","date":"2019-06-20T18:44:33.664Z","type":"message"}
{"nick":"keith_mi_","message":"*I think*","date":"2019-06-20T18:44:46.963Z","type":"message"}
{"nick":"cloudshu","message":"keith_mi_: yeah i mean i could be convinced with usage numbers but it just feels unlikely","date":"2019-06-20T18:45:20.203Z","type":"message"}
{"nick":"devsnek","message":"i'm concerned that this api could expose data people thought was safely concealed","date":"2019-06-20T18:46:17.739Z","type":"message"}
{"nick":"cloudshu","message":"how so?","date":"2019-06-20T18:46:27.757Z","type":"message"}
{"nick":"devsnek","message":"if you assume people can't read a weakmap","date":"2019-06-20T18:46:34.817Z","type":"message"}
{"nick":"devsnek","message":"because they can't","date":"2019-06-20T18:46:36.739Z","type":"message"}
{"nick":"devsnek","message":"then suddenly someone runs your code on a new version of node","date":"2019-06-20T18:46:47.420Z","type":"message"}
{"nick":"keith_mi_","message":"Yeah, it's possible it'd have to be a subclass of WeakMap","date":"2019-06-20T18:46:54.818Z","type":"message"}
{"nick":"keith_mi_","message":"I'm sure Mark would feel that way","date":"2019-06-20T18:47:03.689Z","type":"message"}
{"nick":"ljharb","message":"it'd definitely have to be","date":"2019-06-20T18:47:11.201Z","type":"message"}
{"nick":"devsnek","message":"probably the first time i've ever agreed with mark","date":"2019-06-20T18:47:15.952Z","type":"message"}
{"nick":"keith_mi_","message":"haha","date":"2019-06-20T18:47:21.492Z","type":"message"}
{"nick":"devsnek","message":"i wouldn't mind a subclass","date":"2019-06-20T18:47:41.945Z","type":"message"}
{"nick":"ljharb","message":"(it's a similar reason Map and Set should have used SameValue and not SameValueZero :-p)","date":"2019-06-20T18:47:51.339Z","type":"message"}
{"nick":"devsnek","message":"Proxy.revokable, WeakMap.iterable","date":"2019-06-20T18:48:02.085Z","type":"message"}
{"nick":"keith_mi_","message":"Is that the plan...","date":"2019-06-20T18:48:17.726Z","type":"message"}
{"nick":"keith_mi_","message":"to have the subclass be a property of the main class","date":"2019-06-20T18:48:29.504Z","type":"message"}
{"nick":"devsnek","message":"wow is it really revocable","date":"2019-06-20T18:48:39.020Z","type":"message"}
{"nick":"keith_mi_","message":"so weird","date":"2019-06-20T18:48:39.312Z","type":"message"}
{"nick":"cloudshu","message":"well revocable isn't a subclass constructor","date":"2019-06-20T18:48:56.738Z","type":"message"}
{"nick":"cloudshu","message":"it's just like a function that returns a revocable proxy","date":"2019-06-20T18:49:03.508Z","type":"message"}
{"nick":"devsnek","message":"nah i'd expect it to be like `IterableWeakMap` or smth","date":"2019-06-20T18:49:20.068Z","type":"message"}
{"nick":"keith_mi_","action":"goes to a meeting","date":"2019-06-20T18:49:51.652Z","type":"action"}
{"nick":"cloudshu","message":"keith_mi_: wait hold up can you do proposals my controversial ideas because i don't want the headache","date":"2019-06-20T18:50:23.059Z","type":"message"}
{"nick":"cloudshu","message":"1) mutable arguments.callStack that lets you programmatically unwind and do stack surgery","date":"2019-06-20T18:51:12.230Z","type":"message"}
{"nick":"keith_mi_","message":"cloudshu: Is there a missing of in there because I don't understand you otherwise?","date":"2019-06-20T18:51:12.848Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2019-06-20T18:51:17.686Z","type":"message"}
{"nick":"keith_mi_","message":"🤮","date":"2019-06-20T18:51:35.070Z","type":"message"}
{"nick":"cloudshu","message":"how else can we write real debuggers??","date":"2019-06-20T18:51:45.183Z","type":"message"}
{"nick":"cloudshu","message":"one day i will make that proposal","date":"2019-06-20T18:52:10.426Z","type":"message"}
{"nick":"keith_mi_","message":"use the inspector?","date":"2019-06-20T18:52:14.175Z","type":"message"}
{"nick":"devsnek","message":"mutable global.stack","date":"2019-06-20T18:52:33.534Z","type":"message"}
{"nick":"ljharb","message":"first you have to get stack in the first place","date":"2019-06-20T18:53:19.135Z","type":"message"}
{"nick":"cloudshu","message":"2) Object.prototype.{castTo,castFrom}BigInt","date":"2019-06-20T18:53:24.391Z","type":"message"}
{"nick":"devsnek","message":"O.O","date":"2019-06-20T18:54:13.722Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T18:54:32.030Z","type":"quit"}
{"nick":"cloudshu","message":"one day people will come around to my ideas","date":"2019-06-20T18:54:34.294Z","type":"message"}
{"nick":"devsnek","message":"i fear these ideas","date":"2019-06-20T18:55:03.028Z","type":"message"}
{"nick":"ljharb","message":"cloudshu: lol cast an object from a bigint?","date":"2019-06-20T18:55:36.828Z","type":"message"}
{"nick":"cloudshu","message":"yes, it will replace the guts of the this value","date":"2019-06-20T18:55:51.429Z","type":"message"}
{"nick":"cloudshu","message":"it'll find the object whose pointer is the bigint value argument, and then replace guts","date":"2019-06-20T18:56:13.044Z","type":"message"}
{"nick":"ljharb","message":"what's a pointer","date":"2019-06-20T18:56:46.175Z","type":"message"}
{"nick":"cloudshu","message":"that's kind of a philosophical question","date":"2019-06-20T18:57:12.406Z","type":"message"}
{"nick":"ljharb","message":":-p","date":"2019-06-20T18:58:35.122Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T19:49:47.757Z","type":"quit"}
{"nick":"laughinghan","date":"2019-06-20T19:51:53.553Z","type":"join"}
{"nick":"cybai","date":"2019-06-20T20:02:01.337Z","type":"join"}
{"nick":"Nimelrian","reason":"Ping timeout: 258 seconds","date":"2019-06-20T20:10:28.147Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T20:43:04.205Z","type":"quit"}
{"nick":"laughinghan","date":"2019-06-20T20:46:51.247Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-06-20T20:48:13.019Z","type":"quit"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-06-20T20:50:03.989Z","type":"quit"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T21:19:46.510Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T21:20:21.568Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T21:21:54.046Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T21:22:11.081Z","type":"join"}
{"nick":"cybai","date":"2019-06-20T21:22:29.963Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T21:22:51.475Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T21:23:56.109Z","type":"join"}
{"nick":"itamarok","reason":"Remote host closed the connection","date":"2019-06-20T21:25:50.381Z","type":"quit"}
{"nick":"itamarok","date":"2019-06-20T21:26:45.303Z","type":"join"}
{"nick":"keith_mi_","date":"2019-06-20T21:34:41.031Z","type":"join"}
{"nick":"laughinghan","date":"2019-06-20T21:37:57.436Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T21:59:17.868Z","type":"quit"}
{"nick":"srl295","date":"2019-06-20T22:03:35.239Z","type":"join"}
{"nick":"keith_mi_","date":"2019-06-20T22:09:06.778Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-06-20T22:13:20.577Z","type":"quit"}
{"nick":"cybai","date":"2019-06-20T22:32:28.401Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-06-20T22:36:43.307Z","type":"quit"}
{"nick":"cybai","date":"2019-06-20T22:56:00.963Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-06-20T23:00:26.963Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T23:05:25.727Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-06-20T23:16:14.770Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T23:21:58.120Z","type":"quit"}
{"nick":"khyperia","date":"2019-06-20T23:28:41.883Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-06-20T23:41:11.718Z","type":"quit"}
{"nick":"laughinghan","date":"2019-06-20T23:53:07.108Z","type":"join"}
