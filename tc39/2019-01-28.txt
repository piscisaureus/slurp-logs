{"nick":"aki_","date":"2019-01-28T00:38:37.325Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-28T00:39:26.597Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T00:39:27.046Z","type":"nick"}
{"nick":"devsnek","message":"why isn't 18.2.6 part of annex b","date":"2019-01-28T00:47:53.087Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: fwiw my experience matches Domenic's. squash-and-merge seems significantly more common than other workflows at least among big JS projects on github - prettier, babel, jest, eslint, lodash, npm, yarn, react, etc","date":"2019-01-28T01:18:56.087Z","type":"message"}
{"nick":"Bakkot","message":"I have a list of the most active JS projects on github somewhere, though it's hard to pick a good criteria","date":"2019-01-28T01:19:28.719Z","type":"message"}
{"nick":"devsnek","message":"squash is good, merge commits aren't great though","date":"2019-01-28T01:27:49.960Z","type":"message"}
{"nick":"Bakkot","message":"squash-and-merge does not create merge commits, I don't think.","date":"2019-01-28T01:29:03.214Z","type":"message"}
{"nick":"ljharb","message":"it doesn’t. The downside is that it doesn’t first update the PR branch, so there remains no programmatic link between the landed commit and the PR commit (only via github’s web Ui)","date":"2019-01-28T01:54:39.966Z","type":"message"}
{"nick":"ljharb","message":"if it updated the PR branch before landing, then it’d be my favorite method (or rebasemerge)","date":"2019-01-28T01:55:05.274Z","type":"message"}
{"nick":"ljharb","message":"prior to those features existing (late 2016 iirc) i believe my workflow was more common, but the convenience of squashmerge/rebasemerge has surely increased its popularity,","date":"2019-01-28T01:59:11.905Z","type":"message"}
{"nick":"Bakkot","message":"what's the advantage of having there be such a programmatic link?","date":"2019-01-28T02:08:11.840Z","type":"message"}
{"nick":"Bakkot","message":"I can't think of a time I'd've wanted that.","date":"2019-01-28T02:08:20.453Z","type":"message"}
{"nick":"ljharb","message":"i use it for bisecting on the command line all the time - it makes the PR number obtainable without message parsing.","date":"2019-01-28T02:38:41.553Z","type":"message"}
{"nick":"Bakkot","message":"by default squash and merge puts the PR number in the commit message; is that not sufficient?","date":"2019-01-28T02:42:09.111Z","type":"message"}
{"nick":"Bakkot","message":"i guess that is what you mean by \"message parsing\"","date":"2019-01-28T02:42:45.790Z","type":"message"}
{"nick":"devsnek","message":"is git update-ref lacking","date":"2019-01-28T02:44:44.834Z","type":"message"}
{"nick":"aki_","date":"2019-01-28T02:45:30.456Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-01-28T02:45:53.335Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T02:45:53.757Z","type":"nick"}
{"nick":"jmdyck1","reason":"Remote host closed the connection","date":"2019-01-28T04:46:29.186Z","type":"quit"}
{"nick":"aki_","date":"2019-01-28T04:51:57.843Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-28T04:52:27.484Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T04:52:28.260Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-28T05:18:01.533Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-28T05:45:38.461Z","type":"quit"}
{"nick":"aki_","date":"2019-01-28T06:58:10.586Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-28T06:58:52.776Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T06:58:53.200Z","type":"nick"}
{"nick":"aki_","date":"2019-01-28T09:04:54.000Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-28T09:04:56.587Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T09:05:09.608Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-28T09:22:50.331Z","type":"join"}
{"nick":"obensource","reason":"Ping timeout: 250 seconds","date":"2019-01-28T10:25:08.847Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-28T10:35:24.904Z","type":"quit"}
{"nick":"obensource","date":"2019-01-28T10:40:05.973Z","type":"join"}
{"nick":"aki_","date":"2019-01-28T11:10:36.589Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-01-28T11:11:27.027Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T11:11:27.439Z","type":"nick"}
{"nick":"werwerwer","date":"2019-01-28T12:17:04.167Z","type":"join"}
{"nick":"werwerwer","reason":"Client Quit","date":"2019-01-28T12:18:52.507Z","type":"quit"}
{"nick":"jmdyck","date":"2019-01-28T12:26:51.343Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-28T12:49:40.998Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-28T12:52:53.040Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-28T13:16:56.618Z","type":"quit"}
{"nick":"akirose","date":"2019-01-28T13:18:18.740Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-28T14:07:03.870Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-28T14:09:37.635Z","type":"quit"}
{"nick":"ephemera_","reason":"Quit: No Ping reply in 180 seconds.","date":"2019-01-28T14:33:02.194Z","type":"quit"}
{"nick":"ephemera_","date":"2019-01-28T14:34:27.524Z","type":"join"}
{"nick":"gibson042","date":"2019-01-28T15:14:47.743Z","type":"join"}
{"nick":"aki_","date":"2019-01-28T15:24:30.660Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-28T15:24:47.332Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T15:24:47.770Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-28T16:30:54.531Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-28T16:32:24.135Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-28T17:27:50.524Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-28T17:29:09.377Z","type":"quit"}
{"nick":"aki_","date":"2019-01-28T17:31:13.588Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-28T17:32:26.590Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T17:32:26.948Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-28T17:32:56.438Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 250 seconds","date":"2019-01-28T17:41:57.214Z","type":"quit"}
{"nick":"gibson042","date":"2019-01-28T17:47:51.556Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-28T17:48:15.519Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-28T17:51:45.319Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-28T17:55:43.164Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-28T18:04:26.308Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-28T18:12:05.757Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-28T18:12:37.643Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-28T18:31:55.127Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-28T18:48:45.952Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-01-28T19:15:08.562Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-28T19:15:24.616Z","type":"join"}
{"nick":"TabAtkins","action":"looks back on the discussions about PR merging in 262","date":"2019-01-28T19:20:06.790Z","type":"action"}
{"nick":"TabAtkins","message":"yikes","date":"2019-01-28T19:20:08.832Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2019-01-28T19:25:48.428Z","type":"message"}
{"nick":"aki_","date":"2019-01-28T19:37:56.433Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-28T19:38:26.630Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T19:38:27.106Z","type":"nick"}
{"nick":"keith_m__","date":"2019-01-28T19:41:13.993Z","type":"join"}
{"nick":"gibson042","date":"2019-01-28T19:43:31.627Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 240 seconds","date":"2019-01-28T19:43:56.636Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-28T19:45:22.161Z","type":"join"}
{"nick":"keith_m__","reason":"Ping timeout: 246 seconds","date":"2019-01-28T19:47:42.001Z","type":"quit"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-28T19:47:53.379Z","type":"quit"}
{"nick":"Domenic","message":"littledan: could we make numeric literals always override built-in suffixes?","date":"2019-01-28T19:56:09.030Z","type":"message"}
{"nick":"Domenic","message":"So if you have a numeric__n in scope then `123n` is no longer a BigInt.","date":"2019-01-28T19:56:33.142Z","type":"message"}
{"nick":"littledan","message":"Hmm, maybe. But how does that work with property access to the global object?","date":"2019-01-28T19:57:01.017Z","type":"message"}
{"nick":"Domenic","message":"I don't understand the question?","date":"2019-01-28T19:57:14.203Z","type":"message"}
{"nick":"littledan","message":"I mean, to check that numeric__n is out of scope, we would have to actually read that property of globalThis, right?","date":"2019-01-28T19:57:45.194Z","type":"message"}
{"nick":"Domenic","message":"Hmm","date":"2019-01-28T19:58:14.075Z","type":"message"}
{"nick":"Domenic","message":"The same is true for numeric__m in the proposal, right? So the worry is that it makes bigints slower/requires a guard cell thingy for them?","date":"2019-01-28T19:58:38.825Z","type":"message"}
{"nick":"Domenic","message":"Or perhaps worse it requires an observable Get(globalThis, \"numeric__n\") every time","date":"2019-01-28T20:00:23.331Z","type":"message"}
{"nick":"Domenic","message":"I guess you can skip it though if the guard cell hasn't been tripped","date":"2019-01-28T20:00:40.634Z","type":"message"}
{"nick":"Domenic","message":"Still complicated","date":"2019-01-28T20:00:52.532Z","type":"message"}
{"nick":"Domenic","message":"I assume we have no precedent for \"lexical scoping but exclude the global\"...","date":"2019-01-28T20:01:26.773Z","type":"message"}
{"nick":"devsnek","message":"i thought they explicitly had to have underscores on them","date":"2019-01-28T20:02:29.906Z","type":"message"}
{"nick":"devsnek","message":"like `123_n`","date":"2019-01-28T20:02:33.900Z","type":"message"}
{"nick":"Domenic","message":"https://docs.google.com/presentation/d/1S6fX1smQplysYwGCZHQ5kBPLmtahVEOdNF0GHjZee7k/edit#slide=id.g32c85d338e_0_5","date":"2019-01-28T20:02:58.443Z","type":"message"}
{"nick":"Domenic","message":"Numeric separators seem to have camped on `_` :-/","date":"2019-01-28T20:03:06.799Z","type":"message"}
{"nick":"Domenic","message":"I'm looking at the \"Do we actually need the ~\" slide","date":"2019-01-28T20:03:29.563Z","type":"message"}
{"nick":"Domenic","message":"(<bikeshed>I honestly think either `123:px` or `123'px` are nicer than `123~px`.</bikeshed>)","date":"2019-01-28T20:04:15.951Z","type":"message"}
{"nick":"devsnek","message":"~ feels awkward to me just because so many people on the internet use it as a breath mark in fan fiction","date":"2019-01-28T20:04:30.058Z","type":"message"}
{"nick":"Domenic","message":"O_o","date":"2019-01-28T20:04:39.578Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-01-28T20:04:43.210Z","type":"message"}
{"nick":"littledan","message":"yeah, the idea is, we're willing to call a function, but doing this thing of falling back when it doesn't exist is sort of weirder","date":"2019-01-28T20:07:40.400Z","type":"message"}
{"nick":"littledan","message":"usually, when you do f(x), f will be in scope. But with this proposed change ,usually, when you do 10n, numeric__n won't be there","date":"2019-01-28T20:08:06.388Z","type":"message"}
{"nick":"littledan","message":"so, you have to traverse a bunch of runtime objects to prove that it's not there","date":"2019-01-28T20:08:15.857Z","type":"message"}
{"nick":"devsnek","message":"i would kinda expect these to just have the same semantics as tagged templates","date":"2019-01-28T20:08:32.174Z","type":"message"}
{"nick":"littledan","message":"there's already a codepath in implementations for this (typeof foo), but it's just weird","date":"2019-01-28T20:08:35.655Z","type":"message"}
{"nick":"devsnek","message":"except flipped around obviously","date":"2019-01-28T20:08:37.494Z","type":"message"}
{"nick":"littledan","message":"Domenic: Yeah, part of this proposal is to free up _ so numeric separators can re-advance to Stage 3","date":"2019-01-28T20:09:02.370Z","type":"message"}
{"nick":"littledan","message":"we have been in this weird ambiguous state for 10 months","date":"2019-01-28T20:09:09.730Z","type":"message"}
{"nick":"littledan","message":"and it's my fault, and I'm sorry","date":"2019-01-28T20:09:18.756Z","type":"message"}
{"nick":"devsnek","message":"littledan: i haven't much kept up with this so forgive me if i'm asking a silly question, but why wouldn't something like `function i() {} 10i` work","date":"2019-01-28T20:11:21.623Z","type":"message"}
{"nick":"devsnek","message":"like tagged templates","date":"2019-01-28T20:11:42.802Z","type":"message"}
{"nick":"devsnek","message":"tagged numeric literals","date":"2019-01-28T20:11:51.705Z","type":"message"}
{"nick":"littledan","message":"there are two parts to the answer. One part is what I was just explaining to Domenic: we need to have space open for future built-in literals, and the fallback is weird","date":"2019-01-28T20:12:32.337Z","type":"message"}
{"nick":"littledan","message":"The other part is about why do name mangling: i is a great example, as it's likely to be used in a simple for loop, but it's also likely to be used as a numeric suffix for complex numbers","date":"2019-01-28T20:13:07.721Z","type":"message"}
{"nick":"littledan","message":"you wouldn't think about them overlapping, since they are sort of different domains","date":"2019-01-28T20:13:25.516Z","type":"message"}
{"nick":"littledan","message":"hence, name manging","date":"2019-01-28T20:13:27.866Z","type":"message"}
{"nick":"devsnek","message":"good suffixes don't make good identifiers","date":"2019-01-28T20:13:34.043Z","type":"message"}
{"nick":"littledan","message":"_i just sort of made it all work without mangling, since _ was just part of the name","date":"2019-01-28T20:13:37.790Z","type":"message"}
{"nick":"littledan","message":"I don't know how you can say that; everyone thinks of 3i representing imaginary numbers, and i is very common for loops","date":"2019-01-28T20:13:56.938Z","type":"message"}
{"nick":"AtumT_","date":"2019-01-28T20:13:59.870Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 268 seconds","date":"2019-01-28T20:14:21.870Z","type":"quit"}
{"nick":"devsnek","message":"yeah that's what i meant","date":"2019-01-28T20:14:28.953Z","type":"message"}
{"nick":"devsnek","message":"i was agreeing with you :)","date":"2019-01-28T20:14:45.007Z","type":"message"}
{"nick":"devsnek","message":"because of that point though, i would kind of feel like maybe the best option would be to just hold off","date":"2019-01-28T20:16:04.996Z","type":"message"}
{"nick":"littledan","message":"so, to step back, part of my motivation here is to build the foundation for Decimal","date":"2019-01-28T20:18:01.299Z","type":"message"}
{"nick":"littledan","message":"we could do this two ways: 1) Build the primitives so Decimal can be a library 2) Just add another built-in type","date":"2019-01-28T20:18:16.299Z","type":"message"}
{"nick":"devsnek","message":"personally i would do the latter","date":"2019-01-28T20:18:27.259Z","type":"message"}
{"nick":"littledan","message":"tbh I'd be fine with either, if we are up for adding 5-10 such types over the next years","date":"2019-01-28T20:18:31.103Z","type":"message"}
{"nick":"ljharb","message":"what are the other 4-9?","date":"2019-01-28T20:18:40.743Z","type":"message"}
{"nick":"littledan","message":"the last feedback I heard from the committee is, 2) is unacceptable and we must do 1)","date":"2019-01-28T20:18:42.792Z","type":"message"}
{"nick":"devsnek","message":"especially since operator overloading is a tough sell","date":"2019-01-28T20:18:45.455Z","type":"message"}
{"nick":"TabAtkins","message":"Domenic: `123:px` collides with ?:, right? Or is this one of those \"cover grammars will save us\" things?","date":"2019-01-28T20:18:53.446Z","type":"message"}
{"nick":"littledan","message":"ljharb: That'd take some more research, but I don't think it's just decimal","date":"2019-01-28T20:18:55.697Z","type":"message"}
{"nick":"littledan","message":"s/from the committee/from a couple committee members/","date":"2019-01-28T20:19:33.423Z","type":"message"}
{"nick":"littledan","message":"also, when I was championing BigInt, the sort of implicit deal was that I'd follow up with proposals for these things","date":"2019-01-28T20:20:02.652Z","type":"message"}
{"nick":"Domenic","message":"littledan: from the future-proofing perspective it seems much nicer if we could accept the weird fallback semantics and explain BigInt as using the same type of thing. Maybe we could even put a numeric__n on the global.","date":"2019-01-28T20:20:07.015Z","type":"message"}
{"nick":"devsnek","message":"TabAtkins: it would collide in `a ? 123:px : b`","date":"2019-01-28T20:20:08.057Z","type":"message"}
{"nick":"TabAtkins","message":"Right.","date":"2019-01-28T20:20:26.333Z","type":"message"}
{"nick":"devsnek","message":"afaik you would need infinite lookahead to correctly parse the `: b`","date":"2019-01-28T20:20:26.590Z","type":"message"}
{"nick":"littledan","message":"Domenic: It's important for implementations to be able to create these literals statically","date":"2019-01-28T20:20:53.588Z","type":"message"}
{"nick":"littledan","message":"I guess it could do this speculatively, but it feels ugly","date":"2019-01-28T20:21:11.667Z","type":"message"}
{"nick":"Domenic","message":"Yes, I think it's an ugly implementation tradeoff; the question is whether we're OK paying that ugliness for something that IMO is much nicer for the general goal of democraticizing the numeric type primitives.","date":"2019-01-28T20:21:44.288Z","type":"message"}
{"nick":"littledan","message":"yeah, I could see this alternative. If you don't mind, I'll summarize it on a slide so we can make sure it's given treatment in the discussion","date":"2019-01-28T20:23:47.450Z","type":"message"}
{"nick":"littledan","message":"thanks for the reviews, everyone","date":"2019-01-28T20:23:57.388Z","type":"message"}
{"nick":"littledan","message":"obviously I'm not happy about asking people to type 3~px either","date":"2019-01-28T20:24:05.375Z","type":"message"}
{"nick":"devsnek","message":"how about just one new number type... the \"ai\" type","date":"2019-01-28T20:24:12.402Z","type":"message"}
{"nick":"littledan","message":"and 3px is nicer","date":"2019-01-28T20:24:13.858Z","type":"message"}
{"nick":"devsnek","message":"it just knows what you want","date":"2019-01-28T20:24:16.054Z","type":"message"}
{"nick":"TabAtkins","message":"While `3px` is def nicer, I for one am willing to live in a `3~px` world if necessary. Still a vast improvement over `CSS.px(3)` (which is itself better than `new CSSUnitValue(3, \"px\")`).","date":"2019-01-28T20:26:05.386Z","type":"message"}
{"nick":"littledan","message":"slightly off-topic, but how would you feel about adding numeric__px to the web's global scope, vs being something you're supposed to somehow import/unpack?","date":"2019-01-28T20:27:44.341Z","type":"message"}
{"nick":"devsnek","message":"ok something slightly ambitious","date":"2019-01-28T20:28:32.759Z","type":"message"}
{"nick":"devsnek","message":"what if we just set aside all the good suffixes","date":"2019-01-28T20:28:44.143Z","type":"message"}
{"nick":"devsnek","message":"and let everything else be tags","date":"2019-01-28T20:28:48.700Z","type":"message"}
{"nick":"devsnek","message":"like reserved keywords but reserved numeric tags","date":"2019-01-28T20:29:25.397Z","type":"message"}
{"nick":"littledan","message":"TabAtkins: ^","date":"2019-01-28T20:32:07.031Z","type":"message"}
{"nick":"littledan","message":"devsnek: That's not a bad idea","date":"2019-01-28T20:32:19.165Z","type":"message"}
{"nick":"devsnek","message":"iirc this is what c++ did","date":"2019-01-28T20:32:31.846Z","type":"message"}
{"nick":"TabAtkins","message":"devsnek: What are \"all the good suffixes\" tho?","date":"2019-01-28T20:32:40.891Z","type":"message"}
{"nick":"littledan","message":"I think C++ asked that the suffixes start with _","date":"2019-01-28T20:32:43.067Z","type":"message"}
{"nick":"devsnek","message":"hmm","date":"2019-01-28T20:32:49.988Z","type":"message"}
{"nick":"littledan","message":"if we don't use an intervening character like ~, we would have to make lots of weird restrictions to the identifier anyway","date":"2019-01-28T20:33:11.389Z","type":"message"}
{"nick":"TabAtkins","message":"littledan: I'm fine either way. It would be wild if all the CSS units were available by default, but we *do* add more of those over time, and some are a little surprising (like `q`, etc).","date":"2019-01-28T20:33:21.395Z","type":"message"}
{"nick":"littledan","message":"e.g., 0x1c can't suddenly be reparsed as numeric__c(...)","date":"2019-01-28T20:33:31.390Z","type":"message"}
{"nick":"devsnek","message":"oh yeah you're right they require an undercore","date":"2019-01-28T20:33:47.708Z","type":"message"}
{"nick":"littledan","message":"well, I think of CSS units as something which would not be built-into JS, whereas we might reserve m for Decimal and i for imaginary and a number of others","date":"2019-01-28T20:34:19.261Z","type":"message"}
{"nick":"TabAtkins","message":"Like I'm fine if there's just some easy way to use the CSS namespace object to register all the prefixes.","date":"2019-01-28T20:35:24.573Z","type":"message"}
{"nick":"TabAtkins","message":"Or I suppose a built-in CSS module.","date":"2019-01-28T20:35:50.682Z","type":"message"}
{"nick":"Domenic","message":"with (CSS) { ... your whole app here ... }","date":"2019-01-28T20:36:25.282Z","type":"message"}
{"nick":"efaust","action":"coughs on his coffee","date":"2019-01-28T20:37:08.822Z","type":"action"}
{"nick":"TabAtkins","message":"there you go","date":"2019-01-28T20:38:10.604Z","type":"message"}
{"nick":"TabAtkins","message":"but really, `import * from \"std:css-units\";` or something","date":"2019-01-28T20:39:57.492Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-28T20:41:04.590Z","type":"join"}
{"nick":"Havvy","reason":"Read error: Connection reset by peer","date":"2019-01-28T20:42:50.008Z","type":"quit"}
{"nick":"Havvy","date":"2019-01-28T20:49:57.658Z","type":"join"}
{"nick":"Domenic","message":"That doesn't import into current scope","date":"2019-01-28T20:52:04.541Z","type":"message"}
{"nick":"Domenic","message":"There is no way to splat an object into current scope besides with () {}.","date":"2019-01-28T20:52:19.707Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-28T20:54:11.408Z","type":"quit"}
{"nick":"littledan","message":"Right, so the impact is, all users have to do the name mangling manually","date":"2019-01-28T21:04:46.644Z","type":"message"}
{"nick":"littledan","message":"import { numeric__px } from \"std:css\";","date":"2019-01-28T21:05:20.498Z","type":"message"}
{"nick":"littledan","message":"Or, just smash it onto the global scope","date":"2019-01-28T21:05:37.766Z","type":"message"}
{"nick":"AtumT_","reason":"Ping timeout: 268 seconds","date":"2019-01-28T21:20:57.736Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-28T21:23:33.262Z","type":"join"}
{"nick":"aki_","date":"2019-01-28T21:43:37.918Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-28T21:44:52.767Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T21:44:52.921Z","type":"nick"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-28T22:01:32.281Z","type":"quit"}
{"nick":"devsnek","message":"what if there was a macro system like rust, then weird number literals and operator overloading would be easy","date":"2019-01-28T22:01:40.807Z","type":"message"}
{"nick":"Bakkot","message":"you want sweet.js","date":"2019-01-28T22:07:09.949Z","type":"message"}
{"nick":"Bakkot","message":"and you want it to be a build tool, not a part of the language","date":"2019-01-28T22:07:18.195Z","type":"message"}
{"nick":"TabAtkins","message":"Domenic: Oh gosh, you're right, `*` imports have to be `* as foo` :(","date":"2019-01-28T22:17:49.365Z","type":"message"}
{"nick":"TabAtkins","message":"But wait, how do you splat an object's keys into the current scope?","date":"2019-01-28T22:18:15.816Z","type":"message"}
{"nick":"TabAtkins","message":"Bakkot: \"you want it to be a build tool\" common lisp is shaking its head and sighing","date":"2019-01-28T22:18:53.872Z","type":"message"}
{"nick":"ljharb","message":"TabAtkins: you can't, without `with (obj) { /* splatted here */ }`, and that won't work in module code","date":"2019-01-28T22:19:21.074Z","type":"message"}
{"nick":"Bakkot","message":"Object.assign(globalThis, foo)","date":"2019-01-28T22:19:40.546Z","type":"message"}
{"nick":"TabAtkins","message":"(says the person who wrote CL read-macros to make «» be nestable string indicators, and a macro for infix math)","date":"2019-01-28T22:19:54.662Z","type":"message"}
{"nick":"TabAtkins","message":"Ah, right.","date":"2019-01-28T22:20:00.198Z","type":"message"}
{"nick":"devsnek","message":"all we need to do is reify module environment records as subclasses of object environment records","date":"2019-01-28T22:20:49.731Z","type":"message"}
{"nick":"ljharb","message":"lol true, that would work for all the enumerable string identifier keys on `foo`","date":"2019-01-28T22:20:52.720Z","type":"message"}
{"nick":"devsnek","message":":^)","date":"2019-01-28T22:20:53.448Z","type":"message"}
{"nick":"devsnek","message":"TabAtkins: honestly I'm torn between wanting sweet and wanting this in the language","date":"2019-01-28T22:22:04.259Z","type":"message"}
{"nick":"jwalden","date":"2019-01-28T22:52:34.399Z","type":"join"}
{"nick":"aki_","date":"2019-01-28T23:50:50.793Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-28T23:51:32.787Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-28T23:51:33.198Z","type":"nick"}
