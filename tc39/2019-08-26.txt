{"nick":"SferaDev","reason":"Ping timeout: 268 seconds","date":"2019-08-26T00:02:59.761Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-08-26T00:56:33.677Z","type":"quit"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T01:06:21.617Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-08-26T01:06:53.910Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 245 seconds","date":"2019-08-26T01:19:37.310Z","type":"quit"}
{"nick":"ephemera_","date":"2019-08-26T01:26:57.954Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-26T01:32:56.966Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T02:06:52.114Z","type":"quit"}
{"nick":"cybai","date":"2019-08-26T02:12:28.657Z","type":"join"}
{"nick":"laughinghan","date":"2019-08-26T03:24:07.564Z","type":"join"}
{"nick":"ljharb","message":"jmdyck: yes but generally posting comments on PRs is annoying; and programmatically editing comments, even the OP, can have race conditions with actual edits","date":"2019-08-26T03:29:17.753Z","type":"message"}
{"nick":"ljharb","message":"jmdyck: i prefer things that fail, until you click “details” and ack the report explicitly (which then makes it passing)","date":"2019-08-26T03:29:42.902Z","type":"message"}
{"nick":"jmdyck","message":"yeah, i didn't think comments on the PR was a good idea","date":"2019-08-26T03:30:03.056Z","type":"message"}
{"nick":"jmdyck","message":"I was reading about GitHub Checks, which seems nicely integrated, but the instructions for setting up such a thing don't make sense to me","date":"2019-08-26T03:32:34.126Z","type":"message"}
{"nick":"SferaDev","date":"2019-08-26T04:01:56.418Z","type":"join"}
{"nick":"jmdyck","message":"ljharb: can you point me to something with a clickable \"details\"?","date":"2019-08-26T04:14:26.034Z","type":"message"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-08-26T04:23:30.995Z","type":"quit"}
{"nick":"ljharb","message":"jmdyck: every travis-ci run on github","date":"2019-08-26T04:31:41.131Z","type":"message"}
{"nick":"ljharb","message":"oops, he left","date":"2019-08-26T04:31:45.912Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T05:01:35.639Z","type":"quit"}
{"nick":"gibson042","date":"2019-08-26T05:23:04.653Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2019-08-26T05:50:19.632Z","type":"quit"}
{"nick":"ljharb","message":"devsnek: did you implement ValidateAndApplyPropertyDescriptor in engine262? (re https://github.com/tc39/ecma262/pull/1677 )","date":"2019-08-26T06:53:06.624Z","type":"message"}
{"nick":"aradesh","date":"2019-08-26T08:02:59.620Z","type":"join"}
{"nick":"mgol","date":"2019-08-26T08:19:25.693Z","type":"join"}
{"nick":"cybai_","date":"2019-08-26T08:29:34.667Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-08-26T08:32:10.620Z","type":"quit"}
{"nick":"cybai","date":"2019-08-26T08:59:43.655Z","type":"join"}
{"nick":"cybai_","reason":"Ping timeout: 276 seconds","date":"2019-08-26T09:03:22.635Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T09:20:34.397Z","type":"quit"}
{"nick":"mgol","date":"2019-08-26T09:58:06.473Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-08-26T10:44:12.641Z","type":"quit"}
{"nick":"cybai","date":"2019-08-26T10:44:51.726Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-08-26T10:48:57.799Z","type":"quit"}
{"nick":"cybai","date":"2019-08-26T11:21:08.719Z","type":"join"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-08-26T11:48:51.799Z","type":"quit"}
{"nick":"jmdyck","date":"2019-08-26T12:51:28.743Z","type":"join"}
{"nick":"AtumT","date":"2019-08-26T13:11:42.661Z","type":"join"}
{"nick":"jmdyck","message":"ljharb: okay then can you point me to a travis-ci run on github? I thought ecma262 used travis to generate the html rendering, but I don't see a \"details\" to click on.","date":"2019-08-26T13:22:26.090Z","type":"message"}
{"nick":"aradesh","date":"2019-08-26T13:25:49.096Z","type":"join"}
{"nick":"devsnek","message":"ljharb: as far as i know, engine262's implementation matches the spec","date":"2019-08-26T13:28:53.148Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/engine262/engine262/blob/master/src/abstract-ops/objects.mjs#L119","date":"2019-08-26T13:29:58.527Z","type":"message"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-08-26T13:33:26.485Z","type":"quit"}
{"nick":"jmdyck","date":"2019-08-26T13:33:52.776Z","type":"join"}
{"nick":"devsnek","message":"ljharb: wouldn't removing those lines let non-configurable properties be overridden","date":"2019-08-26T13:36:05.622Z","type":"message"}
{"nick":"gibson042","date":"2019-08-26T14:04:11.389Z","type":"join"}
{"nick":"ljharb","message":"devsnek: i believe it only lets \"writable\" be set to `false`, which is allowed when nonconfigurable","date":"2019-08-26T14:22:33.395Z","type":"message"}
{"nick":"devsnek","message":"ljharb: test262 runs perfectly with and without the change","date":"2019-08-26T14:23:26.935Z","type":"message"}
{"nick":"devsnek","message":"and i assume that's because there's no test for NaN","date":"2019-08-26T14:23:33.510Z","type":"message"}
{"nick":"ljharb","message":"jmdyck: ecma262 only uses it on master branches. here's one: https://github.com/ljharb/es-abstract/pull/51","date":"2019-08-26T14:23:59.407Z","type":"message"}
{"nick":"ljharb","message":"devsnek: where in that function do you apply the descriptor?","date":"2019-08-26T14:24:33.819Z","type":"message"}
{"nick":"devsnek","message":"wdym","date":"2019-08-26T14:24:49.627Z","type":"message"}
{"nick":"ljharb","message":"devsnek: you're missing step 9.","date":"2019-08-26T14:25:01.160Z","type":"message"}
{"nick":"devsnek","message":"huh","date":"2019-08-26T14:25:05.615Z","type":"message"}
{"nick":"ljharb","message":"in http://www.ecma-international.org/ecma-262/8.0/#sec-validateandapplypropertydescriptor","date":"2019-08-26T14:25:05.723Z","type":"message"}
{"nick":"ljharb","message":"and that step is the one that the early return trues bypass","date":"2019-08-26T14:25:13.210Z","type":"message"}
{"nick":"ljharb","message":"like the actual *application* of the descriptor","date":"2019-08-26T14:25:22.211Z","type":"message"}
{"nick":"ljharb","message":"(when current isn't undefined)","date":"2019-08-26T14:25:49.250Z","type":"message"}
{"nick":"devsnek","message":"i'm not entirely sure what you're saying","date":"2019-08-26T14:26:33.823Z","type":"message"}
{"nick":"jmdyck","message":"ljharb: tx","date":"2019-08-26T14:26:35.963Z","type":"message"}
{"nick":"ljharb","message":"devsnek: when `current` is undefined, Desc is applied to O in steps 2.c.i and 2.d.i. when `current` and `Desc` aren't both data, or both accessors, it's applied in steps 6.b.i and 6.c.i. when they're both data, or both accessors, it's applied in step 9. your implementation lacks step 9.","date":"2019-08-26T14:28:25.437Z","type":"message"}
{"nick":"ljharb","message":"devsnek: ie, overwriting an existing descriptor without flipping its type between data and accessor","date":"2019-08-26T14:28:44.523Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/engine262/engine262/blob/master/src/abstract-ops/objects.mjs#L213-L233","date":"2019-08-26T14:28:57.182Z","type":"message"}
{"nick":"devsnek","message":"step 9","date":"2019-08-26T14:29:00.389Z","type":"message"}
{"nick":"ljharb","message":"oh lol it's right there","date":"2019-08-26T14:29:52.221Z","type":"message"}
{"nick":"ljharb","message":"my bad","date":"2019-08-26T14:30:03.559Z","type":"message"}
{"nick":"ljharb","message":"ok so then perhaps test262 is missing tests, because i can't see how setting an array's length property to be unwritable would work","date":"2019-08-26T14:30:24.322Z","type":"message"}
{"nick":"devsnek","message":"defineProperty(array, 'length', { writable: false })?","date":"2019-08-26T14:30:46.268Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2019-08-26T14:31:58.244Z","type":"message"}
{"nick":"ljharb","message":"iow `ValidateAndApplyPropertyDescriptor([], 'length', true, { Writable: true, Configurable: false, Value: 0, Enumerable: false }, { Writable: false })`","date":"2019-08-26T14:32:20.882Z","type":"message"}
{"nick":"underikar","date":"2019-08-26T14:32:29.684Z","type":"join"}
{"nick":"ljharb","message":"that's supposed to set writable to false, but it returns without applying, i believe","date":"2019-08-26T14:32:39.855Z","type":"message"}
{"nick":"devsnek","message":"https://engine262.js.org/#code=MYewdgzgLgBAhjAvDA2gXQNwCgAOAnASzCgAoB5AIwCsBTYKAOgHMaoyB3MABTxBxrxQAngBEaEYIRxQQeEnAA0MAOQAbGmCZQAFsoCUe7JVr0GAExoAzIjR58Bw%2BUrUatupQG8Y7QlDgV1AC4YSzhVCBoYAF9DXEJicmo6RhY2Tjt%2BQVFxSQJpWScVdU0dfUMgA","date":"2019-08-26T14:34:40.440Z","type":"message"}
{"nick":"ljharb","message":"hmm","date":"2019-08-26T14:35:43.841Z","type":"message"}
{"nick":"ljharb","message":"so the two lines i'm trying to remove; the implication is that they're only hit when applying the descriptor would be a noop?","date":"2019-08-26T14:37:58.843Z","type":"message"}
{"nick":"ljharb","message":"i'll take another look at my impl","date":"2019-08-26T14:38:11.294Z","type":"message"}
{"nick":"devsnek","message":"ljharb: it gets to 7.a","date":"2019-08-26T14:40:05.184Z","type":"message"}
{"nick":"devsnek","message":"but current.Writable is true","date":"2019-08-26T14:40:11.559Z","type":"message"}
{"nick":"devsnek","message":"so then it ends up at step 9","date":"2019-08-26T14:40:16.719Z","type":"message"}
{"nick":"devsnek","message":"sets writable to false","date":"2019-08-26T14:40:25.265Z","type":"message"}
{"nick":"ljharb","message":"devsnek: ohhh right because current writable is true, it falls down to step 9 in your impl","date":"2019-08-26T14:41:34.021Z","type":"message"}
{"nick":"ljharb","message":"i mean hopefully this is just a bug in my impl, but i still can't find it :-) i'll keep looking","date":"2019-08-26T14:41:48.039Z","type":"message"}
{"nick":"ljharb","message":"alright, i think i found the issue; and it's indeed the implication i mentioned above. i'll close the PR. thanks for helping me work through it!","date":"2019-08-26T14:46:58.849Z","type":"message"}
{"nick":"devsnek","message":"👍🏻","date":"2019-08-26T14:48:41.638Z","type":"message"}
{"nick":"Nimelrian","date":"2019-08-26T16:14:09.147Z","type":"join"}
{"nick":"Domenic","message":"Are private methods \"bound\"?","date":"2019-08-26T16:20:53.333Z","type":"message"}
{"nick":"Domenic","message":"i.e. will `const x = this.#x; x()` work for `class Y { #x() { ... } }`?","date":"2019-08-26T16:21:19.275Z","type":"message"}
{"nick":"drousso","date":"2019-08-26T16:24:21.750Z","type":"join"}
{"nick":"devsnek","message":"Domenic: i don't think so","date":"2019-08-26T16:25:06.882Z","type":"message"}
{"nick":"devsnek","message":"would be kind of limiting i think","date":"2019-08-26T16:25:39.711Z","type":"message"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-08-26T16:25:51.047Z","type":"quit"}
{"nick":"drousso","date":"2019-08-26T16:26:25.363Z","type":"join"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-08-26T16:27:35.694Z","type":"quit"}
{"nick":"drousso","date":"2019-08-26T16:28:55.677Z","type":"join"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-08-26T16:33:03.052Z","type":"quit"}
{"nick":"drousso","date":"2019-08-26T16:33:51.338Z","type":"join"}
{"nick":"Domenic","message":"Hmm hmm","date":"2019-08-26T16:39:31.417Z","type":"message"}
{"nick":"Domenic","message":"It's weird because they're \"per instance properties\" conceptually? But not bound, I guess?","date":"2019-08-26T16:39:46.277Z","type":"message"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-08-26T16:40:21.907Z","type":"quit"}
{"nick":"drousso","date":"2019-08-26T17:08:19.303Z","type":"join"}
{"nick":"laughinghan","date":"2019-08-26T17:14:46.777Z","type":"join"}
{"nick":"haxjs","reason":"Ping timeout: 245 seconds","date":"2019-08-26T17:16:43.380Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-26T17:19:15.778Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-08-26T17:19:18.974Z","type":"quit"}
{"nick":"jwalden","date":"2019-08-26T17:19:26.858Z","type":"join"}
{"nick":"keith_miller","date":"2019-08-26T17:20:01.384Z","type":"join"}
{"nick":"drousso_","date":"2019-08-26T17:22:29.438Z","type":"join"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-08-26T17:23:45.090Z","type":"quit"}
{"nick":"haxjs","date":"2019-08-26T17:30:29.924Z","type":"join"}
{"nick":"devsnek","message":"Domenic: HasOwnProperty(this, #x) is true?","date":"2019-08-26T17:33:59.386Z","type":"message"}
{"nick":"Domenic","message":"I dunno, I'm just repeating what I was told","date":"2019-08-26T17:49:19.899Z","type":"message"}
{"nick":"jwalden","reason":"Ping timeout: 276 seconds","date":"2019-08-26T17:55:04.609Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T18:03:10.960Z","type":"quit"}
{"nick":"laughinghan","date":"2019-08-26T18:04:45.150Z","type":"join"}
{"nick":"jwalden","date":"2019-08-26T18:05:13.457Z","type":"join"}
{"nick":"keith_miller","reason":"Read error: Connection reset by peer","date":"2019-08-26T18:10:21.687Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-26T18:10:40.654Z","type":"join"}
{"nick":"shu","message":"Domenic: they aren't bound","date":"2019-08-26T18:16:07.293Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T18:17:21.357Z","type":"quit"}
{"nick":"shu","message":"Domenic: they're conceptually per-instance, though i expect implementations to share private methods among all instances of the class (v8 does)","date":"2019-08-26T18:18:34.723Z","type":"message"}
{"nick":"Nimelrian","reason":"Ping timeout: 252 seconds","date":"2019-08-26T18:26:16.098Z","type":"quit"}
{"nick":"devsnek","message":"shu: #x is an own property of the instance?","date":"2019-08-26T18:27:07.318Z","type":"message"}
{"nick":"devsnek","message":"not on the prototype?","date":"2019-08-26T18:27:16.413Z","type":"message"}
{"nick":"shu","message":"devsnek: well, private fields and methods aren't properties and aren't reflectable via HasOwnProperty","date":"2019-08-26T18:27:45.747Z","type":"message"}
{"nick":"devsnek","message":"shu: i know","date":"2019-08-26T18:27:56.622Z","type":"message"}
{"nick":"shu","message":"i'm not sure what the question means then","date":"2019-08-26T18:28:05.497Z","type":"message"}
{"nick":"devsnek","message":"is #x mounted to the prototype or the instance","date":"2019-08-26T18:28:14.938Z","type":"message"}
{"nick":"shu","message":"in the spec?","date":"2019-08-26T18:28:24.236Z","type":"message"}
{"nick":"devsnek","message":"in the spec","date":"2019-08-26T18:28:26.852Z","type":"message"}
{"nick":"shu","message":"they're in [[PrivateFieldValues]] of objects iirc, let me see","date":"2019-08-26T18:29:38.575Z","type":"message"}
{"nick":"shu","message":"of the instance","date":"2019-08-26T18:29:53.166Z","type":"message"}
{"nick":"devsnek","message":"man classfields are weird","date":"2019-08-26T18:30:21.500Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T18:30:34.257Z","type":"quit"}
{"nick":"shu","message":"they're definitely not on the prototype because #-name lookups never cause a prototype lookup","date":"2019-08-26T18:31:14.380Z","type":"message"}
{"nick":"laughinghan","date":"2019-08-26T18:33:45.180Z","type":"join"}
{"nick":"keith_miller","date":"2019-08-26T18:40:44.613Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T18:42:04.720Z","type":"quit"}
{"nick":"Dimitrian","date":"2019-08-26T18:53:46.838Z","type":"join"}
{"nick":"Dimitrian","reason":"Quit: https://quassel-irc.org - Chat comfortably. Anywhere.","date":"2019-08-26T18:57:50.313Z","type":"quit"}
{"nick":"Dimitrian","date":"2019-08-26T18:58:06.346Z","type":"join"}
{"nick":"laughinghan","reason":"Ping timeout: 268 seconds","date":"2019-08-26T19:03:12.877Z","type":"quit"}
{"nick":"Dimitrian","reason":"Quit: https://quassel-irc.org - Chat comfortably. Anywhere.","date":"2019-08-26T19:15:38.857Z","type":"quit"}
{"nick":"Dimitrian","date":"2019-08-26T19:15:56.458Z","type":"join"}
{"nick":"Dimitrian","reason":"Client Quit","date":"2019-08-26T19:17:04.923Z","type":"quit"}
{"nick":"Dimitrian","date":"2019-08-26T19:17:21.400Z","type":"join"}
{"nick":"Dimitrian","reason":"Client Quit","date":"2019-08-26T19:18:19.565Z","type":"quit"}
{"nick":"Dimitrian","date":"2019-08-26T19:18:36.404Z","type":"join"}
{"nick":"Dimitrian","reason":"Client Quit","date":"2019-08-26T19:19:53.850Z","type":"quit"}
{"nick":"Dimitrian","date":"2019-08-26T19:20:11.408Z","type":"join"}
{"nick":"Dimitrian","message":"sorry for maybe some mistakes... irc some new for me...","date":"2019-08-26T19:30:26.207Z","type":"message"}
{"nick":"Dimitrian","message":"ok then: want discuss my idea - i write here:","date":"2019-08-26T19:30:26.298Z","type":"message"}
{"nick":"Dimitrian","message":"https://esdiscuss.org/topic/async-class#content-25","date":"2019-08-26T19:30:26.298Z","type":"message"}
{"nick":"Dimitrian","message":"irc seems fine only with texts or not?","date":"2019-08-26T19:30:26.350Z","type":"message"}
{"nick":"Dimitrian","message":"i wrote some wrapper and you can find more info there in url up","date":"2019-08-26T19:30:26.350Z","type":"message"}
{"nick":"Dimitrian","message":"but for simple explanation - just proposal syntax:","date":"2019-08-26T19:30:26.462Z","type":"message"}
{"nick":"Dimitrian","message":"async class PromiseClass { //return Promise","date":"2019-08-26T19:30:30.626Z","type":"message"}
{"nick":"Dimitrian","message":"constructor() {}//async()=>Promise object","date":"2019-08-26T19:30:32.794Z","type":"message"}
{"nick":"Dimitrian","message":"}//class","date":"2019-08-26T19:30:35.054Z","type":"message"}
{"nick":"Dimitrian","message":"async class AsyncClass extends PromiseClass{ // can ext Class|PromiseClass","date":"2019-08-26T19:30:37.204Z","type":"message"}
{"nick":"Dimitrian","message":"constructor(){ await super();} //async()=>Promise object","date":"2019-08-26T19:30:39.486Z","type":"message"}
{"nick":"Dimitrian","message":"}//AsyncClass","date":"2019-08-26T19:30:41.716Z","type":"message"}
{"nick":"Dimitrian","message":"again sorry for all, i try my best, but not always get)","date":"2019-08-26T19:30:43.811Z","type":"message"}
{"nick":"Dimitrian","message":"hm no multiline support or i do something wrong?","date":"2019-08-26T19:31:26.580Z","type":"message"}
{"nick":"Dimitrian","reason":"Quit: https://quassel-irc.org - Chat comfortably. Anywhere.","date":"2019-08-26T19:31:40.908Z","type":"quit"}
{"nick":"Dimitrian","date":"2019-08-26T19:32:26.371Z","type":"join"}
{"nick":"mgol","date":"2019-08-26T19:36:54.734Z","type":"join"}
{"nick":"jwalden","reason":"Ping timeout: 264 seconds","date":"2019-08-26T19:39:04.031Z","type":"quit"}
{"nick":"Dimitrian","reason":"Quit: https://quassel-irc.org - Chat comfortably. Anywhere.","date":"2019-08-26T19:40:08.617Z","type":"quit"}
{"nick":"mgol","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-08-26T19:44:16.782Z","type":"quit"}
{"nick":"Dimitrian","date":"2019-08-26T19:45:54.414Z","type":"join"}
{"nick":"Dimitrian","reason":"Client Quit","date":"2019-08-26T19:46:04.826Z","type":"quit"}
{"nick":"jwalden","date":"2019-08-26T19:53:24.521Z","type":"join"}
{"nick":"mgol","date":"2019-08-26T20:03:59.496Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T21:02:24.443Z","type":"quit"}
{"nick":"Bakkot","message":"devsnek: I am confused why you keep directing people who want to discuss normative details of the iterator helpers proposal to the ecma262 repo","date":"2019-08-26T21:41:11.692Z","type":"message"}
{"nick":"devsnek","message":"uhh","date":"2019-08-26T21:41:22.500Z","type":"message"}
{"nick":"devsnek","message":"i mean with or without the generator stuff, the iterator methods will exist","date":"2019-08-26T21:41:39.420Z","type":"message"}
{"nick":"devsnek","message":"i'm seeing it more as a separate design choice","date":"2019-08-26T21:41:57.695Z","type":"message"}
{"nick":"laughinghan","date":"2019-08-26T21:42:21.785Z","type":"join"}
{"nick":"devsnek","message":"that being said i've been trying to use language like \"encourage\"","date":"2019-08-26T21:42:53.842Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-08-26T21:58:05.359Z","type":"quit"}
{"nick":"Bakkot","message":"devsnek: the design choice of whether the methods appear to users as generator functions or not is a choice which your proposal will need to make; your proposal is the right place to discuss it","date":"2019-08-26T22:03:10.579Z","type":"message"}
{"nick":"devsnek","message":"well if my ecma262 pr was approved, i wouldn't go against it in proposals","date":"2019-08-26T22:03:41.905Z","type":"message"}
{"nick":"devsnek","message":"and if it wasn't proposed, i wouldn't go against the current pattern","date":"2019-08-26T22:03:50.383Z","type":"message"}
{"nick":"devsnek","message":"wasn't approved*","date":"2019-08-26T22:03:56.165Z","type":"message"}
{"nick":"Bakkot","message":"your PR appears to just be about how things are written down","date":"2019-08-26T22:04:23.197Z","type":"message"}
{"nick":"Bakkot","message":"that is irrelevant to the question of which they are","date":"2019-08-26T22:04:28.948Z","type":"message"}
{"nick":"aradesh","reason":"Quit: WeeChat 1.9.1","date":"2019-08-26T22:04:47.564Z","type":"quit"}
{"nick":"devsnek","message":"my pr is specifying all future iterators as built in generators","date":"2019-08-26T22:04:55.807Z","type":"message"}
{"nick":"devsnek","message":"which comes with new ways of writing things down and visible changes to the objects","date":"2019-08-26T22:05:20.476Z","type":"message"}
{"nick":"Bakkot","message":"... that's not something you can do in the spec? you can't constrain what future writers are going to write.","date":"2019-08-26T22:05:28.981Z","type":"message"}
{"nick":"devsnek","message":"in theory no, but its kind of about introducing a pattern","date":"2019-08-26T22:05:56.127Z","type":"message"}
{"nick":"Bakkot","message":"you'd be introducing the pattern by choosing a particular path in your proposal","date":"2019-08-26T22:06:15.003Z","type":"message"}
{"nick":"Bakkot","message":"the right place to discuss that is your proposal","date":"2019-08-26T22:06:22.124Z","type":"message"}
{"nick":"keith_miller","date":"2019-08-26T22:06:38.062Z","type":"join"}
{"nick":"Bakkot","message":"since it is the first place we'll need to make that choice","date":"2019-08-26T22:06:52.666Z","type":"message"}
{"nick":"mgol","date":"2019-08-26T22:07:12.548Z","type":"join"}
{"nick":"devsnek","message":"personally i don't see it that way","date":"2019-08-26T22:07:13.754Z","type":"message"}
{"nick":"devsnek","message":"but people are free to send messages to the proposal repo or the pr","date":"2019-08-26T22:07:53.168Z","type":"message"}
{"nick":"Bakkot","message":"it seems like everyone else who's commented on the topic does, no?","date":"2019-08-26T22:07:53.506Z","type":"message"}
{"nick":"devsnek","message":"i assumed most people just weren't aware of my pr to ecma262","date":"2019-08-26T22:08:11.327Z","type":"message"}
{"nick":"hellauer","date":"2019-08-26T22:09:42.187Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 264 seconds","date":"2019-08-26T23:36:39.997Z","type":"quit"}
{"nick":"keith_miller","date":"2019-08-26T23:37:19.625Z","type":"join"}
{"nick":"ljharb","message":"devsnek: for me, the spec PR only exists to make existing iterator-producing functions simpler to spec/write/read","date":"2019-08-26T23:37:59.013Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i'm not on board with making future ones observably be generators","date":"2019-08-26T23:38:11.544Z","type":"message"}
{"nick":"devsnek","message":"ljharb: still the issue with toStringTag?","date":"2019-08-26T23:39:03.561Z","type":"message"}
{"nick":"hellauer","reason":"Quit: WeeChat 2.4","date":"2019-08-26T23:39:07.176Z","type":"quit"}
{"nick":"ljharb","message":"devsnek: also `[].values().__proto__` vs `(function *() {}()).__proto__`, and a number of other small things","date":"2019-08-26T23:39:50.593Z","type":"message"}
{"nick":"devsnek","message":"what about that vs is the problem specifically","date":"2019-08-26T23:40:17.225Z","type":"message"}
{"nick":"ljharb","message":"that they're not the same kind of thing, and so changing the former to be the same kind of thing as the latter is observable and thus not ok","date":"2019-08-26T23:40:35.279Z","type":"message"}
{"nick":"devsnek","message":"i don't follow","date":"2019-08-26T23:41:01.383Z","type":"message"}
{"nick":"ljharb","message":"and making future iterator-producing functions all the same while leaving the old ones specced the same and also \"being\" the same creates a big inconsistency","date":"2019-08-26T23:41:02.123Z","type":"message"}
{"nick":"ljharb","message":"like type those two into chrome's repl","date":"2019-08-26T23:41:09.093Z","type":"message"}
{"nick":"devsnek","message":"like i understand they're different objects","date":"2019-08-26T23:41:25.054Z","type":"message"}
{"nick":"devsnek","message":"you're considered about the consistency of future ones vs what we currently have?","date":"2019-08-26T23:41:36.143Z","type":"message"}
{"nick":"ljharb","message":"and different prototype chains and whatnot.","date":"2019-08-26T23:41:37.325Z","type":"message"}
{"nick":"ljharb","message":"yes","date":"2019-08-26T23:41:38.526Z","type":"message"}
{"nick":"ljharb","message":"both observably, and in terms of spec text","date":"2019-08-26T23:41:46.034Z","type":"message"}
{"nick":"devsnek","message":"that's fair","date":"2019-08-26T23:41:53.514Z","type":"message"}
{"nick":"ljharb","message":"originally i was excited about this generator spec text thing because i thought it'd allow us to much more ergonomically express all past and future iterator-producing functions","date":"2019-08-26T23:42:24.281Z","type":"message"}
{"nick":"ljharb","message":"i wasn't thinking of it as making them actually *be* generator functions","date":"2019-08-26T23:42:34.764Z","type":"message"}
{"nick":"devsnek","message":"from my perspective, i'd rather get the 30+ ones we're about to do \"right\" (not that right is objective) and call the four we currently have mistakes","date":"2019-08-26T23:43:02.764Z","type":"message"}
{"nick":"devsnek","message":"ljharb: i remember last meeting you mentioned wanting to keep things very consistent, and i generally agree, but perhaps this is a disagreement of the layering of this","date":"2019-08-26T23:45:20.772Z","type":"message"}
{"nick":"devsnek","message":"i see generators as consistent with the current design because i don't think the exact prototype stuff matters that much at runtime","date":"2019-08-26T23:46:01.709Z","type":"message"}
{"nick":"devsnek","message":"like you can still call next and all that","date":"2019-08-26T23:46:14.084Z","type":"message"}
{"nick":"keith_mi_","date":"2019-08-26T23:52:59.736Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 276 seconds","date":"2019-08-26T23:55:10.630Z","type":"quit"}
