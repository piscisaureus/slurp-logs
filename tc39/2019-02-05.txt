{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-05T00:00:35.115Z","type":"quit"}
{"nick":"keith_miller","date":"2019-02-05T00:03:16.832Z","type":"join"}
{"nick":"rmarkins_","date":"2019-02-05T00:15:06.435Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 246 seconds","date":"2019-02-05T00:17:40.257Z","type":"quit"}
{"nick":"rmarkins_","reason":"Ping timeout: 250 seconds","date":"2019-02-05T00:19:30.432Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-05T00:52:37.093Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-02-05T00:57:41.921Z","type":"quit"}
{"nick":"gibson042","date":"2019-02-05T01:00:32.545Z","type":"join"}
{"nick":"gibson042","reason":"Client Quit","date":"2019-02-05T01:03:15.534Z","type":"quit"}
{"nick":"aki_","date":"2019-02-05T01:03:51.432Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-02-05T01:04:34.897Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T01:04:35.336Z","type":"nick"}
{"nick":"rmarkins","date":"2019-02-05T01:06:27.591Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 240 seconds","date":"2019-02-05T01:10:56.614Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-02-05T01:59:45.716Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: back in a bit","date":"2019-02-05T02:32:17.607Z","type":"quit"}
{"nick":"keith_miller","date":"2019-02-05T02:43:47.962Z","type":"join"}
{"nick":"keith_mi_","date":"2019-02-05T02:48:06.476Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 272 seconds","date":"2019-02-05T02:50:54.792Z","type":"quit"}
{"nick":"rmarkins","date":"2019-02-05T03:07:15.428Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-02-05T03:10:07.345Z","type":"quit"}
{"nick":"akirose","date":"2019-02-05T03:10:33.431Z","type":"join"}
{"nick":"obensource","reason":"Ping timeout: 240 seconds","date":"2019-02-05T03:11:26.597Z","type":"quit"}
{"nick":"rmarkins","reason":"Ping timeout: 250 seconds","date":"2019-02-05T03:11:32.434Z","type":"quit"}
{"nick":"obensource","date":"2019-02-05T03:24:35.999Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-05T03:54:38.597Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 240 seconds","date":"2019-02-05T04:35:56.596Z","type":"quit"}
{"nick":"aki_","date":"2019-02-05T05:16:35.881Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-02-05T05:17:07.412Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T05:17:07.764Z","type":"nick"}
{"nick":"cybai","date":"2019-02-05T05:43:44.720Z","type":"join"}
{"nick":"Sirisian_","date":"2019-02-05T06:00:42.594Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-02-05T06:03:54.930Z","type":"quit"}
{"nick":"Sirisian","reason":"Ping timeout: 240 seconds","date":"2019-02-05T06:03:56.717Z","type":"quit"}
{"nick":"keith_miller","date":"2019-02-05T06:25:48.835Z","type":"join"}
{"nick":"akirose","reason":"Quit: 👋🏻","date":"2019-02-05T06:37:15.259Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-05T06:38:26.931Z","type":"quit"}
{"nick":"akirose","date":"2019-02-05T06:38:30.817Z","type":"join"}
{"nick":"rmarkins","date":"2019-02-05T07:08:59.257Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 246 seconds","date":"2019-02-05T07:13:07.259Z","type":"quit"}
{"nick":"Sirisian__","date":"2019-02-05T07:48:50.692Z","type":"join"}
{"nick":"Sirisian_","reason":"Ping timeout: 240 seconds","date":"2019-02-05T07:51:56.673Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 268 seconds","date":"2019-02-05T08:38:42.748Z","type":"quit"}
{"nick":"aki_","date":"2019-02-05T08:44:38.529Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2019-02-05T08:45:31.260Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T08:45:31.668Z","type":"nick"}
{"nick":"rmarkins","date":"2019-02-05T09:09:47.462Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 244 seconds","date":"2019-02-05T09:14:05.459Z","type":"quit"}
{"nick":"Jessidhia","reason":"Ping timeout: 240 seconds","date":"2019-02-05T09:50:26.658Z","type":"quit"}
{"nick":"AtumT","date":"2019-02-05T10:09:57.317Z","type":"join"}
{"nick":"aki_","date":"2019-02-05T10:50:54.705Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-02-05T10:51:44.562Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T10:51:44.988Z","type":"nick"}
{"nick":"AtumT_","date":"2019-02-05T11:03:26.464Z","type":"join"}
{"nick":"obensource","reason":"Ping timeout: 245 seconds","date":"2019-02-05T11:05:28.572Z","type":"quit"}
{"nick":"AtumT","reason":"Ping timeout: 245 seconds","date":"2019-02-05T11:05:53.391Z","type":"quit"}
{"nick":"obensource","date":"2019-02-05T11:06:06.950Z","type":"join"}
{"nick":"globbot","reason":"Ping timeout: 244 seconds","date":"2019-02-05T11:06:43.522Z","type":"quit"}
{"nick":"globbot","date":"2019-02-05T11:08:02.779Z","type":"join"}
{"nick":"rmarkins","date":"2019-02-05T11:10:40.257Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 246 seconds","date":"2019-02-05T11:14:58.257Z","type":"quit"}
{"nick":"aki_","date":"2019-02-05T12:57:36.784Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-02-05T12:58:45.682Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T12:58:46.034Z","type":"nick"}
{"nick":"jmdyck","date":"2019-02-05T13:31:31.890Z","type":"join"}
{"nick":"cybai","date":"2019-02-05T13:59:05.668Z","type":"join"}
{"nick":"bradleymeck","message":"ystartsev: mmm how do I run notes_explorer? its been soo long since I've done prolog that I've forgotten, it seems I need to use load_note -> inspect_discussion ?","date":"2019-02-05T14:24:15.938Z","type":"message"}
{"nick":"ystartsev","message":"yes","date":"2019-02-05T14:24:37.207Z","type":"message"}
{"nick":"ystartsev","message":"do you have swipl installed?","date":"2019-02-05T14:24:41.330Z","type":"message"}
{"nick":"bradleymeck","message":"yup","date":"2019-02-05T14:25:07.246Z","type":"message"}
{"nick":"ystartsev","message":"so the basic command is swipl notes_explorer/notes_explorer.pl","date":"2019-02-05T14:25:34.140Z","type":"message"}
{"nick":"ystartsev","message":"if you are in the tc39 notes repo","date":"2019-02-05T14:25:42.427Z","type":"message"}
{"nick":"ystartsev","message":"this will get the environment set up","date":"2019-02-05T14:25:49.408Z","type":"message"}
{"nick":"ystartsev","message":"rlwrap is to make swipl less annoying","date":"2019-02-05T14:26:06.582Z","type":"message"}
{"nick":"ystartsev","message":"then you can load a note, for example: load_note(\"./es9/2018-11/nov-28\").","date":"2019-02-05T14:26:49.388Z","type":"message"}
{"nick":"ystartsev","message":"this is probably what is wrong","date":"2019-02-05T14:26:53.278Z","type":"message"}
{"nick":"ystartsev","message":"i got the date wrong in the slides!","date":"2019-02-05T14:26:58.013Z","type":"message"}
{"nick":"ystartsev","message":"slides are now fixed bradleymeck ^","date":"2019-02-05T14:27:22.375Z","type":"message"}
{"nick":"ystartsev","message":"once that works, you can try loading a note using the following: print_info.","date":"2019-02-05T14:27:51.879Z","type":"message"}
{"nick":"ystartsev","message":"it will just print all info thats been loaded so far","date":"2019-02-05T14:27:59.745Z","type":"message"}
{"nick":"ystartsev","message":"from there you can grab a discussion name or a value and inspect its relationship to other things","date":"2019-02-05T14:28:17.182Z","type":"message"}
{"nick":"ystartsev","message":"(i will make the user experience better soon)","date":"2019-02-05T14:28:28.830Z","type":"message"}
{"nick":"ystartsev","message":"(i will also stop abusing format soon 😰","date":"2019-02-05T14:28:37.678Z","type":"message"}
{"nick":"ystartsev","message":"i wrote the entire thing in one sitting so it isn't perfect -- let me know any issues you run into","date":"2019-02-05T14:29:31.047Z","type":"message"}
{"nick":"ystartsev","message":"i also haven't written all of the viewers","date":"2019-02-05T14:29:35.524Z","type":"message"}
{"nick":"devsnek","message":"what is notes_explorer","date":"2019-02-05T14:34:14.608Z","type":"message"}
{"nick":"ystartsev","message":"its an experimental .... thing? ... i think thing is the best word .. that combs the notes and creates relationships between discussions","date":"2019-02-05T14:34:51.960Z","type":"message"}
{"nick":"ystartsev","message":"its here : https://github.com/codehag/tc39-notes","date":"2019-02-05T14:35:36.752Z","type":"message"}
{"nick":"ystartsev","message":"its basically a prolog program that looks for tags that I add to the notes","date":"2019-02-05T14:35:44.483Z","type":"message"}
{"nick":"bradleymeck","message":"ystartsev: what are the args to print_info, [In/Ins] doesn't seem to take a .md filepath string?","date":"2019-02-05T14:37:23.478Z","type":"message"}
{"nick":"ystartsev","message":"it doesnt take args","date":"2019-02-05T14:37:31.671Z","type":"message"}
{"nick":"ystartsev","message":"it just prints everything it has","date":"2019-02-05T14:37:34.719Z","type":"message"}
{"nick":"ystartsev","message":"oh wait a sec, maybe i got something wrong","date":"2019-02-05T14:37:47.758Z","type":"message"}
{"nick":"ystartsev","message":"ah sorry the cmd is write_to_text.","date":"2019-02-05T14:38:13.821Z","type":"message"}
{"nick":"ystartsev","message":"not print_info","date":"2019-02-05T14:38:17.533Z","type":"message"}
{"nick":"ystartsev","message":"print info is more general","date":"2019-02-05T14:38:21.268Z","type":"message"}
{"nick":"ystartsev","message":"i got the slides wrong, sorry","date":"2019-02-05T14:38:25.957Z","type":"message"}
{"nick":"ystartsev","message":"i updated them again","date":"2019-02-05T14:38:46.384Z","type":"message"}
{"nick":"ystartsev","message":"you can also use write_to_dot. or write_to_json.","date":"2019-02-05T14:39:01.797Z","type":"message"}
{"nick":"arkain","date":"2019-02-05T14:39:21.180Z","type":"join"}
{"nick":"ystartsev","message":"i will write up the readme properly in a few days when i have a moment","date":"2019-02-05T14:40:56.166Z","type":"message"}
{"nick":"ystartsev","message":"but if you know prolog, and you load the note -- you can start playing with that world as you like","date":"2019-02-05T14:41:19.930Z","type":"message"}
{"nick":"devsnek","message":"prolog though","date":"2019-02-05T14:41:22.335Z","type":"message"}
{"nick":"ystartsev","message":"example: findall(X, lookup(\"Expression\", X, tension(\"Expression, X)), Tensions), print(Tensions).","date":"2019-02-05T14:42:11.736Z","type":"message"}
{"nick":"ystartsev","message":"i really like prolog","date":"2019-02-05T14:42:15.627Z","type":"message"}
{"nick":"ystartsev","message":"its easy to prototype in","date":"2019-02-05T14:42:20.072Z","type":"message"}
{"nick":"ystartsev","message":"you just throw things at it, and its like \"oook sure\". as long as you dont make any mistakes that is :|","date":"2019-02-05T14:42:45.398Z","type":"message"}
{"nick":"ystartsev","message":"the errors are something else","date":"2019-02-05T14:42:50.707Z","type":"message"}
{"nick":"ystartsev","message":"i messed up typing, should be findall(X, lookup(\"Expression\", X, tension(\"Expression\", X)), Tensions), print(Tensions).","date":"2019-02-05T14:43:11.980Z","type":"message"}
{"nick":"ystartsev","message":"im treating prolog as a relational database and parser","date":"2019-02-05T14:43:22.198Z","type":"message"}
{"nick":"ystartsev","message":"its just for the prototype","date":"2019-02-05T14:43:38.852Z","type":"message"}
{"nick":"devsnek","message":"html spec builder is also prolog","date":"2019-02-05T14:45:44.480Z","type":"message"}
{"nick":"devsnek","message":"maybe i should learn it","date":"2019-02-05T14:45:47.007Z","type":"message"}
{"nick":"ystartsev","message":"its fun!","date":"2019-02-05T14:45:50.697Z","type":"message"}
{"nick":"ystartsev","message":"really, the main issue with it is that it gives the most misleading errors","date":"2019-02-05T14:46:08.319Z","type":"message"}
{"nick":"ystartsev","message":"for example, i wrote an assembler in it, and i kept running out of memory","date":"2019-02-05T14:46:25.481Z","type":"message"}
{"nick":"ystartsev","message":"i thought it was because i was compiling an operating system in it and i was just really inefficient","date":"2019-02-05T14:46:37.407Z","type":"message"}
{"nick":"ystartsev","message":"nope.","date":"2019-02-05T14:46:38.948Z","type":"message"}
{"nick":"ystartsev","message":"i had a typo","date":"2019-02-05T14:46:41.530Z","type":"message"}
{"nick":"devsnek","message":"i've been trying to write an assembler","date":"2019-02-05T14:46:50.386Z","type":"message"}
{"nick":"devsnek","message":"(nothing that could compile an os)","date":"2019-02-05T14:46:57.621Z","type":"message"}
{"nick":"ystartsev","message":"so i wrote one for a fake machine: https://github.com/codehag/asm_in_prolog","date":"2019-02-05T14:47:17.564Z","type":"message"}
{"nick":"ystartsev","message":"its a 16 bit machine, from the course nand2tetris","date":"2019-02-05T14:47:28.084Z","type":"message"}
{"nick":"ystartsev","message":"if you want to build a computer from scratch, i can recommend that course","date":"2019-02-05T14:47:37.272Z","type":"message"}
{"nick":"devsnek","message":"i think i'm getting the ops wrong though cuz trying to run the machine code always segfaults","date":"2019-02-05T14:47:38.503Z","type":"message"}
{"nick":"ystartsev","message":"if you are writing for a specific architecture it might be harder -- the 16 bit machine i was working with is quite limited and it made it easier to find my way around","date":"2019-02-05T14:48:46.492Z","type":"message"}
{"nick":"ystartsev","message":"the second half of the course is building the OS that you can compile using that assembler","date":"2019-02-05T14:49:00.170Z","type":"message"}
{"nick":"ystartsev","message":"you also write a compiler for a java like language, and then a game in the java like language","date":"2019-02-05T14:49:15.942Z","type":"message"}
{"nick":"ystartsev","message":"the teachers are really good","date":"2019-02-05T14:49:19.322Z","type":"message"}
{"nick":"devsnek","message":"i was just trying to emit some x86","date":"2019-02-05T14:49:31.852Z","type":"message"}
{"nick":"ystartsev","message":"hm, thats much more complicated than what i was doing!","date":"2019-02-05T14:50:32.678Z","type":"message"}
{"nick":"devsnek","message":"what machine were you working with","date":"2019-02-05T14:50:48.908Z","type":"message"}
{"nick":"ystartsev","message":"its a virtual machine that you build. they call it the HACK computer","date":"2019-02-05T14:51:01.921Z","type":"message"}
{"nick":"ystartsev","message":"they take you through hardware design and you build it yourself from first principles","date":"2019-02-05T14:51:32.815Z","type":"message"}
{"nick":"devsnek","message":"sounds fun","date":"2019-02-05T14:51:55.016Z","type":"message"}
{"nick":"ystartsev","message":"this is the course: https://www.nand2tetris.org/","date":"2019-02-05T14:52:12.861Z","type":"message"}
{"nick":"bradleymeck","message":"ystartsev: sent PR with README based upon what ya taught me here","date":"2019-02-05T14:52:25.186Z","type":"message"}
{"nick":"ystartsev","message":"thank you bradleymeck !","date":"2019-02-05T14:52:35.999Z","type":"message"}
{"nick":"devsnek","message":"i'll take a look at this","date":"2019-02-05T14:53:21.497Z","type":"message"}
{"nick":"ystartsev","message":"devsnek: they have a version of it on coursera as well","date":"2019-02-05T14:53:50.492Z","type":"message"}
{"nick":"ystartsev","message":"but everything is available on their website, so whatever your learning style is is the one you should go with","date":"2019-02-05T14:54:43.587Z","type":"message"}
{"nick":"aki_","date":"2019-02-05T15:02:48.560Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-02-05T15:03:56.780Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T15:03:57.222Z","type":"nick"}
{"nick":"AtumT","date":"2019-02-05T15:11:42.357Z","type":"join"}
{"nick":"rmarkins","date":"2019-02-05T15:12:21.257Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 244 seconds","date":"2019-02-05T15:12:39.461Z","type":"quit"}
{"nick":"AtumT_","date":"2019-02-05T15:14:07.340Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 246 seconds","date":"2019-02-05T15:16:28.257Z","type":"quit"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2019-02-05T15:17:07.363Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-02-05T15:26:20.153Z","type":"join"}
{"nick":"rmarkins","date":"2019-02-05T15:36:40.777Z","type":"join"}
{"nick":"rmarkins","reason":"Remote host closed the connection","date":"2019-02-05T15:39:34.525Z","type":"quit"}
{"nick":"rmarkins","date":"2019-02-05T15:40:10.777Z","type":"join"}
{"nick":"Jessidhia","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-02-05T15:40:26.878Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-02-05T15:40:48.245Z","type":"join"}
{"nick":"cloudshu","date":"2019-02-05T16:14:28.039Z","type":"join"}
{"nick":"keith_miller","date":"2019-02-05T17:06:56.106Z","type":"join"}
{"nick":"aki_","date":"2019-02-05T17:08:26.478Z","type":"join"}
{"nick":"rkirsling","message":"ystartsev: that always sounded like a neat course indeed","date":"2019-02-05T17:08:42.869Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-02-05T17:09:36.432Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T17:09:36.940Z","type":"nick"}
{"nick":"jwalden","date":"2019-02-05T17:11:27.371Z","type":"join"}
{"nick":"obensource","reason":"Ping timeout: 246 seconds","date":"2019-02-05T17:20:43.258Z","type":"quit"}
{"nick":"gibson042","date":"2019-02-05T17:31:12.808Z","type":"join"}
{"nick":"obensource","date":"2019-02-05T17:34:48.955Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 250 seconds","date":"2019-02-05T17:35:36.832Z","type":"quit"}
{"nick":"gibson042","date":"2019-02-05T17:51:02.261Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-05T18:21:25.270Z","type":"quit"}
{"nick":"AtumT_","reason":"Ping timeout: 245 seconds","date":"2019-02-05T18:25:28.367Z","type":"quit"}
{"nick":"AtumT","date":"2019-02-05T18:27:22.345Z","type":"join"}
{"nick":"bradleymeck","message":"littledan: i was thinking of floating a patch with the web compat hack for the override PR to see a less skewed usage counter, does that make sense?","date":"2019-02-05T18:33:36.853Z","type":"message"}
{"nick":"littledan","message":"what do you mean, floating?","date":"2019-02-05T18:34:20.467Z","type":"message"}
{"nick":"bradleymeck","message":"i see you just closed it, but the usage counter was pretty wildly out of the norm and largely appeared to be due to 1 library so I'm not convinced it is as dangerous as it may seem at first glance","date":"2019-02-05T18:34:21.879Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: node can float a v8 patch and flag to see how much breaks","date":"2019-02-05T18:34:40.555Z","type":"message"}
{"nick":"littledan","message":"yeah, that might be the case, but I'm not sure","date":"2019-02-05T18:34:42.096Z","type":"message"}
{"nick":"bradleymeck","message":"right now lodash breakage makes usage counters useless","date":"2019-02-05T18:34:51.828Z","type":"message"}
{"nick":"littledan","message":"I don't understand what you mean by \"useless\"; they reflect lodash","date":"2019-02-05T18:35:11.664Z","type":"message"}
{"nick":"bradleymeck","message":"doesn't really say much about anything outside of that and it is unclear how much breaks due to lodash's change","date":"2019-02-05T18:35:18.032Z","type":"message"}
{"nick":"littledan","message":"there was no V8 patch to change the actual semantics, just to count how often it occurred","date":"2019-02-05T18:35:23.217Z","type":"message"}
{"nick":"littledan","message":"to make more progress here, i'd recommend implementing these other semantics, and one or more of these additional fixes, and surfing around to see what breaks","date":"2019-02-05T18:35:51.271Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: the usage counters are biased around a bug in older lodash that shows massive breakage if you don't do a compat hack around lodash","date":"2019-02-05T18:36:02.566Z","type":"message"}
{"nick":"littledan","message":"I understand that, but I don't know for sure that there aren't other widely used libraries that hit similar issues, but for which the tweak doesn't fix it","date":"2019-02-05T18:36:35.669Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: yes, floating the web compat fixes for the older lodash should make the actual impact of the change clearer","date":"2019-02-05T18:36:41.769Z","type":"message"}
{"nick":"littledan","message":"at this point, i feel like we should've done a bit more \"surfing around and seeing what breaks\" before landing the usage counter","date":"2019-02-05T18:36:43.914Z","type":"message"}
{"nick":"littledan","message":"so, is someone interested in doing this V8 programming, and then locally running a hacked-up version of Chrome and testing various things?","date":"2019-02-05T18:37:05.763Z","type":"message"}
{"nick":"littledan","message":"that's what I'd recommend next","date":"2019-02-05T18:37:09.735Z","type":"message"}
{"nick":"bradleymeck","message":"that line of code is not clear just reading the src that it relied on that behavior","date":"2019-02-05T18:37:16.657Z","type":"message"}
{"nick":"littledan","message":"I don't really understand what floating on Node would accomplish","date":"2019-02-05T18:37:21.708Z","type":"message"}
{"nick":"bradleymeck","message":"idk if surfing around would have helped","date":"2019-02-05T18:37:22.517Z","type":"message"}
{"nick":"littledan","message":"well, maybe not","date":"2019-02-05T18:37:31.078Z","type":"message"}
{"nick":"littledan","message":"but if we put an assertion, it would've shown that it was hit","date":"2019-02-05T18:37:44.918Z","type":"message"}
{"nick":"littledan","message":"actually seeing that this one-off fix fixes it is harder","date":"2019-02-05T18:37:54.243Z","type":"message"}
{"nick":"bradleymeck","message":"yup","date":"2019-02-05T18:38:07.910Z","type":"message"}
{"nick":"AtumT","reason":"Ping timeout: 245 seconds","date":"2019-02-05T18:38:23.341Z","type":"quit"}
{"nick":"littledan","message":"what caitp  is working on in Igalia now is investigating what it would take to make stuff like the frozen realm shim run faster","date":"2019-02-05T18:38:36.396Z","type":"message"}
{"nick":"bradleymeck","message":"running local version of node would be my main way of doing this as I don't have experience building chrome","date":"2019-02-05T18:38:41.854Z","type":"message"}
{"nick":"bradleymeck","message":"but node hits the same path in lodash","date":"2019-02-05T18:38:56.390Z","type":"message"}
{"nick":"bradleymeck","message":"but to put things in perspective","date":"2019-02-05T18:40:03.262Z","type":"message"}
{"nick":"bradleymeck","message":"frozen realms etc. are not super usable as it stands","date":"2019-02-05T18:40:13.020Z","type":"message"}
{"nick":"bradleymeck","message":"the node PR implementing frozen intrinsics points this out","date":"2019-02-05T18:40:25.279Z","type":"message"}
{"nick":"caitp","message":"bradleymeck: can you elaborate?","date":"2019-02-05T18:40:30.550Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: lots of things \"dont work\" if your intrinsics get frozen due to lots of errors or noops occuring around these non-writable properties","date":"2019-02-05T18:40:59.613Z","type":"message"}
{"nick":"bradleymeck","message":"mark's work relies on completely changing a lot of properties from data to accessor props to try and work around this","date":"2019-02-05T18:41:30.470Z","type":"message"}
{"nick":"bradleymeck","message":"but that isn't how JS specified intrinsic properties","date":"2019-02-05T18:41:42.634Z","type":"message"}
{"nick":"bradleymeck","message":"see https://github.com/nodejs/node/pull/25685 , where it shows up from a different party investigating the approach of freezing intrinsics","date":"2019-02-05T18:42:38.392Z","type":"message"}
{"nick":"caitp","message":"my understanding is that the proposal is designed to protect against this sort of thing, especially from untrusted code","date":"2019-02-05T18:43:02.482Z","type":"message"}
{"nick":"bradleymeck","message":"\"this sort of thing\"?","date":"2019-02-05T18:43:21.325Z","type":"message"}
{"nick":"caitp","message":"would you say there needs to be a layer where it's always allowed?","date":"2019-02-05T18:43:22.265Z","type":"message"}
{"nick":"bradleymeck","message":"\"it\"?","date":"2019-02-05T18:43:30.304Z","type":"message"}
{"nick":"caitp","message":"this sort of thing -> changing properties on intrinsics","date":"2019-02-05T18:43:40.438Z","type":"message"}
{"nick":"caitp","message":"adding new ones, etc","date":"2019-02-05T18:43:45.958Z","type":"message"}
{"nick":"bradleymeck","message":"correct, that is not the problem","date":"2019-02-05T18:43:48.272Z","type":"message"}
{"nick":"bradleymeck","message":"the problem is as laid out in that node PR and others, that subclassing can break","date":"2019-02-05T18:44:01.000Z","type":"message"}
{"nick":"bradleymeck","message":"and various other things if you have non-writable (such as frozen) properties in your proto chain","date":"2019-02-05T18:44:23.393Z","type":"message"}
{"nick":"bradleymeck","message":"even worse, it doesn't always throw","date":"2019-02-05T18:44:38.399Z","type":"message"}
{"nick":"bradleymeck","message":"it sometimes just noops","date":"2019-02-05T18:44:44.106Z","type":"message"}
{"nick":"bradleymeck","message":"depending on strict/sloppy","date":"2019-02-05T18:44:52.976Z","type":"message"}
{"nick":"caitp","message":"ah I see","date":"2019-02-05T18:45:09.790Z","type":"message"}
{"nick":"bradleymeck","message":"so, without fixing this, frozen realms are... not as usable","date":"2019-02-05T18:45:23.942Z","type":"message"}
{"nick":"caitp","message":"well, subclassing builtins is a relatively recent thing right? not 20 years of legacy code doing that","date":"2019-02-05T18:46:17.373Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: not just builtins and not just using class syntax","date":"2019-02-05T18:46:31.491Z","type":"message"}
{"nick":"bradleymeck","message":"any way of putting things in the prototype chain","date":"2019-02-05T18:46:38.169Z","type":"message"}
{"nick":"bradleymeck","message":"so things like the old fn.prototype.toString = function () {} start throwing","date":"2019-02-05T18:46:54.236Z","type":"message"}
{"nick":"bradleymeck","message":"or nooping...","date":"2019-02-05T18:47:00.543Z","type":"message"}
{"nick":"caitp","message":"ok, that's fair","date":"2019-02-05T18:47:03.173Z","type":"message"}
{"nick":"bradleymeck","message":"hence my pushing node for web compat hacks","date":"2019-02-05T18:47:47.897Z","type":"message"}
{"nick":"bradleymeck","message":"to my knowledge the only breakage of importance seems to be lodash but signal/noise ratio is too high without the compat hack (which itself might be breaking) to know if other things are relying on this","date":"2019-02-05T18:50:13.498Z","type":"message"}
{"nick":"bradleymeck","message":"even if we just fix it in strict mode, it seems like it would be pref to doing nothing, as frozen prototypes make entire codebases unusable for now","date":"2019-02-05T18:50:44.959Z","type":"message"}
{"nick":"littledan","message":"bradleymeck: I mean, you can do this experiment in Node, but I wouldn't be convinced that it demonstrates web compatibility","date":"2019-02-05T18:53:51.645Z","type":"message"}
{"nick":"littledan","message":"the only thing it could really demonstrate is likely incompatibility","date":"2019-02-05T18:54:03.537Z","type":"message"}
{"nick":"caitp","message":"the compat hack will clearly affect a lot of code, but how much of it would actually become broken? it's hard to estimate","date":"2019-02-05T18:54:07.754Z","type":"message"}
{"nick":"littledan","message":"well, if we're talking about Object.prototype.toString fallbacks, I'm pretty comfortable with adding more of those","date":"2019-02-05T18:54:31.973Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: showing if the web compat hack is incompatible is of value here","date":"2019-02-05T18:54:34.312Z","type":"message"}
{"nick":"bradleymeck","message":"as it would at least let us figure out a way to get a better signal/noise ratio on usage counters","date":"2019-02-05T18:54:57.756Z","type":"message"}
{"nick":"littledan","message":"I'd be pretty surprised if adding more of these fallbacks broke anything, but I wouldn't be surprised if it didn't fix enough","date":"2019-02-05T18:55:02.238Z","type":"message"}
{"nick":"littledan","message":"but those are just guesses","date":"2019-02-05T18:55:22.432Z","type":"message"}
{"nick":"littledan","message":"anyway this takes a nontrivial amount of C++ coding to implement; there's no patch out there that you can just float","date":"2019-02-05T18:55:56.311Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: the tostring workaround?","date":"2019-02-05T18:56:17.781Z","type":"message"}
{"nick":"littledan","message":"yes","date":"2019-02-05T18:56:23.831Z","type":"message"}
{"nick":"littledan","message":"basically we're talking about a partial revert of ES6 here","date":"2019-02-05T18:56:31.611Z","type":"message"}
{"nick":"bradleymeck","message":"it is doable in pure JS even if you replace all the refs unless I'm missing something?","date":"2019-02-05T18:56:47.514Z","type":"message"}
{"nick":"littledan","message":"sure? I'm not sure what you're trying to get at","date":"2019-02-05T18:57:02.848Z","type":"message"}
{"nick":"caitp","message":"there could potentially be angularjs 1.x apps out there which define readonly properties on a $scope, and then try to overwrite them in child scopes --- IIRC doing this with non-readonly properties was a pretty common (accidental) pattern","date":"2019-02-05T18:57:33.356Z","type":"message"}
{"nick":"caitp","message":"so if someone did that with a non-readonly property, it could break the app... but it is a big if","date":"2019-02-05T18:57:55.098Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: even with that going on the question remains of if strict mode which errors suddenly didn't error would things break","date":"2019-02-05T18:58:35.364Z","type":"message"}
{"nick":"bradleymeck","message":"but we just have too much going on","date":"2019-02-05T18:58:55.345Z","type":"message"}
{"nick":"bradleymeck","message":"need to reduce noise to get any sort of direction","date":"2019-02-05T18:59:44.088Z","type":"message"}
{"nick":"caitp","message":"well I think the only way to really find out is to do an experiment where some % of browsers get the special behaviour and some don't","date":"2019-02-05T18:59:46.092Z","type":"message"}
{"nick":"caitp","message":"or put it on a webcrawler or something","date":"2019-02-05T18:59:58.422Z","type":"message"}
{"nick":"bradleymeck","message":"we did that with usage counters so that we wouldn't break things","date":"2019-02-05T19:00:19.569Z","type":"message"}
{"nick":"caitp","message":"yes but as you say, signal/noise","date":"2019-02-05T19:00:29.102Z","type":"message"}
{"nick":"caitp","message":"it doesn't indicate breakage","date":"2019-02-05T19:00:36.709Z","type":"message"}
{"nick":"aki_","date":"2019-02-05T19:15:03.527Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-02-05T19:15:07.351Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T19:15:18.233Z","type":"nick"}
{"nick":"TabAtkins","message":"Hmm. If proxies effectively let you overload the = operator (and a few more), more general operator overloading shouldn't be any slower than that, right?","date":"2019-02-05T19:17:21.104Z","type":"message"}
{"nick":"TabAtkins","message":"Or is = already kinda slow, so the fact that you have to check if you need to indirect thru a proxy or a setter not generally a perf hit, but doing the same for + would be?","date":"2019-02-05T19:17:58.846Z","type":"message"}
{"nick":"cybai_","date":"2019-02-05T19:22:47.126Z","type":"join"}
{"nick":"keith_miller","date":"2019-02-05T19:22:47.316Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 245 seconds","date":"2019-02-05T19:25:28.306Z","type":"quit"}
{"nick":"bradleymeck","message":"TabAtkins: they already let you control the Set operation for that, I'm not sure I understand the question","date":"2019-02-05T19:25:39.821Z","type":"message"}
{"nick":"TabAtkins","message":"Yes, that's my point. We already have overloading of *some* operators, so I'm curious about if overloading the rest is problematic in new and exciting ways, or just the same ways we already know about?","date":"2019-02-05T19:26:27.724Z","type":"message"}
{"nick":"caitp","message":"you can control `proxy = <something + something>`, but you can't control what `<something> + <something>` gives you","date":"2019-02-05T19:26:36.374Z","type":"message"}
{"nick":"TabAtkins","message":"yes","date":"2019-02-05T19:29:08.986Z","type":"message"}
{"nick":"TabAtkins","message":"...I'm not sure how my words could be read this way, but just in case: I'm not asking to expand Proxies to handle operator overloading. I'm asking about the perf implications of proxies, and how it compares to the perf implications of more general operator overloading.","date":"2019-02-05T19:30:33.074Z","type":"message"}
{"nick":"TabAtkins","message":"Because one of the main objections to general overloading is that it slows down all math, etc.","date":"2019-02-05T19:30:54.156Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-05T19:42:11.503Z","type":"quit"}
{"nick":"bradleymeck","message":"proxies are noticeably slower last I checked, doubt that will ever change since you have to call into JS which I don't think can be optimized out","date":"2019-02-05T19:48:52.354Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: to confirm, https://jsbin.com/qajukupuca/edit?js,console is my understanding of the behavior change that was being talked about?","date":"2019-02-05T19:54:02.082Z","type":"message"}
{"nick":"caitp","message":"bradleymeck: mslekova and some others have done a fair bit of work to keep some (maybe all at this point) proxy operations in JS, and I don't think there's any reason we couldn't add some support for the js-inlining pass. it should be possible to be substantially faster than it was originally","date":"2019-02-05T19:56:10.425Z","type":"message"}
{"nick":"caitp","message":"that work is unlikely to happen before proxies see heavier use in perf-critical code though, or before there's a demand for that.","date":"2019-02-05T20:12:56.729Z","type":"message"}
{"nick":"littledan","message":"bradleymeck: Yep, I agree that this hits the codepath that jridgewell traced in the issue","date":"2019-02-05T20:18:46.569Z","type":"message"}
{"nick":"littledan","message":"I just don't know whether this is the only issue out there","date":"2019-02-05T20:18:52.545Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: it is probably not the only issue to be clear, but it has soo much noise that no other ones were found on cursory checks","date":"2019-02-05T20:19:33.309Z","type":"message"}
{"nick":"littledan","message":"well, sure, but I don't understand how you want to eliminate the noise","date":"2019-02-05T20:22:22.673Z","type":"message"}
{"nick":"littledan","message":"if you fix up that piece, it will still be after the UseCounter clicks","date":"2019-02-05T20:22:41.788Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: maybe we were using the usage counter for different purposes?","date":"2019-02-05T20:28:00.193Z","type":"message"}
{"nick":"bradleymeck","message":"even if the usage is \"high\", if the behavior doesn't change it wouldn't be problematic? also in the past thrown -> non-thrown has been treated as non-problematic which affects strict mode change","date":"2019-02-05T20:29:11.378Z","type":"message"}
{"nick":"caitp","message":"how confident do you think you'd have to be that it wouldn't break the web most of the time to convince maintainers to run a finch trial (or just ship the proposed change in nightly)?","date":"2019-02-05T20:48:14.245Z","type":"message"}
{"nick":"devsnek","message":"how does a proxy override equality","date":"2019-02-05T20:48:26.796Z","type":"message"}
{"nick":"devsnek","message":"oh it was the set operation","date":"2019-02-05T20:51:59.692Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: I'd have to go through a large test of using local chrome + puppeteer or something so that nothing seems crazy, 15% is enough that top 10k websites should have it show up plenty and that at least might be enough. I'd still be somewhat wary and need to put in more checks just to ensure that we skip the lodash hack when retesting. this feels a bit brutal though","date":"2019-02-05T21:02:45.508Z","type":"message"}
{"nick":"bradleymeck","message":"strict mode counter is less concerning but still at that massive 1.5%","date":"2019-02-05T21:04:18.021Z","type":"message"}
{"nick":"devsnek","message":"lodash is still all over the internet","date":"2019-02-05T21:09:16.109Z","type":"message"}
{"nick":"caitp","message":"looking at the origin trials docs, we have done most of what's required for a field test","date":"2019-02-05T21:09:17.302Z","type":"message"}
{"nick":"caitp","message":"ok maybe not most of, probably the 2 most passive things, but still","date":"2019-02-05T21:11:24.291Z","type":"message"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-02-05T21:18:47.136Z","type":"quit"}
{"nick":"bradleymeck","message":"devsnek: updated lodash is not affected and some historically old lodash are not affected","date":"2019-02-05T21:19:52.823Z","type":"message"}
{"nick":"aki_","date":"2019-02-05T21:22:08.337Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-02-05T21:23:06.431Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T21:23:06.862Z","type":"nick"}
{"nick":"regaddi","reason":"Quit: ZNC - http://znc.in","date":"2019-02-05T21:41:53.470Z","type":"quit"}
{"nick":"regaddi","date":"2019-02-05T21:52:23.386Z","type":"join"}
{"nick":"keith_miller","date":"2019-02-05T22:03:18.590Z","type":"join"}
{"nick":"devsnek","message":"bradleymeck: but there are still versions of it floating around right?","date":"2019-02-05T22:08:51.095Z","type":"message"}
{"nick":"bradleymeck","message":"yup, but web compat hack makes it still function correctly even w/ change","date":"2019-02-05T22:12:30.994Z","type":"message"}
{"nick":"devsnek","message":"web compat hack","date":"2019-02-05T22:15:36.055Z","type":"message"}
{"nick":"bradleymeck","message":"a tried and true tradition!","date":"2019-02-05T22:17:23.015Z","type":"message"}
{"nick":"devsnek","message":"what's the hack","date":"2019-02-05T22:17:34.442Z","type":"message"}
{"nick":"bradleymeck","message":"modifying Object.prototype.toString to include typed arrays instead of having typed arrays delegate to the TypedArray.prototype[toStringTag] getter (the fact it was a getter was kind of wild to me)","date":"2019-02-05T22:18:48.440Z","type":"message"}
{"nick":"devsnek","message":"I see","date":"2019-02-05T22:19:20.240Z","type":"message"}
{"nick":"devsnek","message":"it's still kind of wild to me that failed sets would walk down the prototype","date":"2019-02-05T22:19:47.838Z","type":"message"}
{"nick":"bradleymeck","message":"mmm?","date":"2019-02-05T22:20:40.148Z","type":"message"}
{"nick":"bradleymeck","message":"if it fails, it stops","date":"2019-02-05T22:20:53.192Z","type":"message"}
{"nick":"devsnek","message":"isn't the whole idea that the change would be to go from fail = no set to fail = try on the parent","date":"2019-02-05T22:21:37.417Z","type":"message"}
{"nick":"bradleymeck","message":"nope","date":"2019-02-05T22:23:03.517Z","type":"message"}
{"nick":"devsnek","message":"I'm confused then","date":"2019-02-05T22:23:21.766Z","type":"message"}
{"nick":"bradleymeck","message":"non-writable in proto crawl would perform define on reciever","date":"2019-02-05T22:23:26.157Z","type":"message"}
{"nick":"bradleymeck","message":"thats the change","date":"2019-02-05T22:23:32.436Z","type":"message"}
{"nick":"bradleymeck","message":"currently in sloppy, it noops","date":"2019-02-05T22:23:38.206Z","type":"message"}
{"nick":"bradleymeck","message":"currently in strict, it throws","date":"2019-02-05T22:23:43.672Z","type":"message"}
{"nick":"devsnek","message":"so it goes straight to the receiver","date":"2019-02-05T22:24:05.718Z","type":"message"}
{"nick":"devsnek","message":"not as weird but still weird","date":"2019-02-05T22:24:26.049Z","type":"message"}
{"nick":"bradleymeck","message":"well it delegates up to see if a setter exists","date":"2019-02-05T22:24:33.662Z","type":"message"}
{"nick":"devsnek","message":"so it does walk back down the prototype?","date":"2019-02-05T22:25:43.260Z","type":"message"}
{"nick":"bradleymeck","message":"yup","date":"2019-02-05T22:27:02.984Z","type":"message"}
{"nick":"bradleymeck","message":"but it stops walking when it encounters any given descriptor","date":"2019-02-05T22:27:18.603Z","type":"message"}
{"nick":"bradleymeck","message":"same as today","date":"2019-02-05T22:27:22.902Z","type":"message"}
{"nick":"devsnek","message":"so it goes until it finds the prop, and if it's non writable it goes back a steo","date":"2019-02-05T22:27:58.120Z","type":"message"}
{"nick":"devsnek","message":"step*","date":"2019-02-05T22:28:06.255Z","type":"message"}
{"nick":"bradleymeck","message":"idk if it goes back a step, it can take action without rolling anything back","date":"2019-02-05T22:29:19.064Z","type":"message"}
{"nick":"devsnek","message":"back a prototype","date":"2019-02-05T22:29:49.729Z","type":"message"}
{"nick":"bradleymeck","message":"nah","date":"2019-02-05T22:30:26.857Z","type":"message"}
{"nick":"bradleymeck","message":"it just places it directly on the reciever","date":"2019-02-05T22:30:34.779Z","type":"message"}
{"nick":"bradleymeck","message":"no need to crawl back to find the reciever","date":"2019-02-05T22:30:42.856Z","type":"message"}
{"nick":"devsnek","message":"but when i said that before","date":"2019-02-05T22:32:29.382Z","type":"message"}
{"nick":"devsnek","message":"you said \"well it delegates up to see if a setter exists\"","date":"2019-02-05T22:32:40.161Z","type":"message"}
{"nick":"bradleymeck","message":"down/up isn't a good terminology here ;p","date":"2019-02-05T22:34:49.091Z","type":"message"}
{"nick":"bradleymeck","message":"it only does it in 1 direction","date":"2019-02-05T22:34:55.015Z","type":"message"}
{"nick":"devsnek","message":"walk prototype to find property","date":"2019-02-05T22:35:21.438Z","type":"message"}
{"nick":"devsnek","message":"property isn't writable","date":"2019-02-05T22:35:26.108Z","type":"message"}
{"nick":"devsnek","message":"do write on receiver instead","date":"2019-02-05T22:35:32.963Z","type":"message"}
{"nick":"bradleymeck","message":"yes","date":"2019-02-05T22:35:36.285Z","type":"message"}
{"nick":"devsnek","message":"what if receiver isn't writable","date":"2019-02-05T22:35:54.660Z","type":"message"}
{"nick":"devsnek","message":"same behaviour as now?","date":"2019-02-05T22:36:34.862Z","type":"message"}
{"nick":"bradleymeck","message":"yup","date":"2019-02-05T22:36:52.597Z","type":"message"}
{"nick":"devsnek","message":"still feels kinda weird","date":"2019-02-05T22:38:31.192Z","type":"message"}
{"nick":"TabAtkins","message":"bradleymeck: Right, proxies are slower. But we still put them in the language. One of the blockers brought up for operator overloading is that it'll be slower. Is it slower in a way that is different from proxies, or worse in some important way?","date":"2019-02-05T22:38:41.630Z","type":"message"}
{"nick":"devsnek","message":"like why not just explicitly create whatever prop it is on your object","date":"2019-02-05T22:38:42.946Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: because assignment is the expected UX","date":"2019-02-05T22:40:00.190Z","type":"message"}
{"nick":"devsnek","message":"TabAtkins: depends on how operator overloading is done","date":"2019-02-05T22:40:06.636Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: but the assignment failed","date":"2019-02-05T22:40:18.106Z","type":"message"}
{"nick":"devsnek","message":"because the property wasn't writable","date":"2019-02-05T22:40:23.017Z","type":"message"}
{"nick":"bradleymeck","message":"TabAtkins: Proxies allow you to create your own forms of the meta-object protocol / create your own exotics, overloading is something else","date":"2019-02-05T22:40:33.942Z","type":"message"}
{"nick":"TabAtkins","message":"Right, but it's also kinda overloading the = operator, right? Is that significantly different than overloading the + operator?","date":"2019-02-05T22:40:54.947Z","type":"message"}
{"nick":"devsnek","message":"bigint adds a protocol for mathematical operators","date":"2019-02-05T22:40:58.622Z","type":"message"}
{"nick":"TabAtkins","message":"(ignoring the issues of right-vs-left operators, etc)","date":"2019-02-05T22:41:08.358Z","type":"message"}
{"nick":"gibson042","date":"2019-02-05T22:41:09.343Z","type":"join"}
{"nick":"bradleymeck","message":"devsnek: not really, getter/setters can still have success even if they are not writable, this isn't really related to some sort of mental model of what \"writable\" means","date":"2019-02-05T22:41:12.553Z","type":"message"}
{"nick":"bradleymeck","message":"TabAtkins: it doesn't overload = really, not sure I understand, = does call the set() trap though","date":"2019-02-05T22:41:51.651Z","type":"message"}
{"nick":"devsnek","message":"TabAtkins: the usual design of operator overloading would make every operator have to check the operand for an overload","date":"2019-02-05T22:41:56.663Z","type":"message"}
{"nick":"TabAtkins","message":"\"call the set() trap\" sounds a *whole lot* like \"check if the LHS has overloaded its = operator\" to me","date":"2019-02-05T22:42:23.500Z","type":"message"}
{"nick":"devsnek","message":"it is","date":"2019-02-05T22:42:39.796Z","type":"message"}
{"nick":"devsnek","message":"setting is slower than it could be because exotic objects exist","date":"2019-02-05T22:42:55.121Z","type":"message"}
{"nick":"bradleymeck","message":"TabAtkins: it doesn't really to my knowledge, `x = 1` doesn't ever fire that trap and `x.y = 1` doesn't mean it fires from `x` and instead could fire from `x.__proto__`","date":"2019-02-05T22:43:35.516Z","type":"message"}
{"nick":"TabAtkins","message":"Okay, right, so = is *already* slow for reasons, and proxies don't make it appreciably worse? But + is fast right now, and operator overloading would make it significantly slower (equivalent to = and proxies)?","date":"2019-02-05T22:43:38.827Z","type":"message"}
{"nick":"bradleymeck","message":"TabAtkins: I just see them as fundamentally different, so I'm confused mostly","date":"2019-02-05T22:44:01.113Z","type":"message"}
{"nick":"devsnek","message":"in an interpreter = is slow","date":"2019-02-05T22:44:09.743Z","type":"message"}
{"nick":"devsnek","message":"optimization can help of course","date":"2019-02-05T22:44:33.543Z","type":"message"}
{"nick":"TabAtkins","message":"bradleymeck: Details, details, the point is you're hijacking some syntax forms to magically invoke a special function instead.","date":"2019-02-05T22:44:43.706Z","type":"message"}
{"nick":"bradleymeck","message":"TabAtkins: those details are the difference, so i don't understand that comment","date":"2019-02-05T22:45:06.349Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: after bigint lands, mathematical operators have their own protocol","date":"2019-02-05T22:45:10.965Z","type":"message"}
{"nick":"devsnek","message":"so addition goes from an O(3) game to an O(4) game","date":"2019-02-05T22:45:52.539Z","type":"message"}
{"nick":"bradleymeck","message":"kind of, but not in the sense of it being exposed / having scaling issues","date":"2019-02-05T22:46:01.027Z","type":"message"}
{"nick":"TabAtkins","message":"`x.y = 1` becoming `x.proxySet('y', 1)` (essentially) feels similar to `x + y` becoming `x.operatorAdd(y)`; the difference I'm seeing is that = is already having to do (relatively slow) work because of various exotic objects, while + gets to fast-track more often, so adding an overloading check is a minor penalty for =, but a big penalty for +.","date":"2019-02-05T22:46:19.289Z","type":"message"}
{"nick":"bradleymeck","message":"we add things to various algorithms all the time","date":"2019-02-05T22:46:22.306Z","type":"message"}
{"nick":"rmarkins","reason":"Remote host closed the connection","date":"2019-02-05T22:46:23.377Z","type":"quit"}
{"nick":"devsnek","message":"and it makes interpreters really slow","date":"2019-02-05T22:46:56.272Z","type":"message"}
{"nick":"rmarkins","date":"2019-02-05T22:47:01.396Z","type":"join"}
{"nick":"bradleymeck","message":"TabAtkins: I would disagree on that point as x.operatorAdd(y) might not match y.operatorAdd(x), one might state that operatorAdd(x, y) is the less confusing approach","date":"2019-02-05T22:47:18.479Z","type":"message"}
{"nick":"bradleymeck","message":"but even then, you probably don't want this on the proxy","date":"2019-02-05T22:47:31.444Z","type":"message"}
{"nick":"TabAtkins","message":"bradleymeck: Sure, whatevs on exactly how you figure out what to dispatch.","date":"2019-02-05T22:47:38.828Z","type":"message"}
{"nick":"bradleymeck","message":"the dispatch is rather important here, does it live on an operand that the operation is being performed on or independently changes if you need to do the lookup at the site or it can be static","date":"2019-02-05T22:48:30.651Z","type":"message"}
{"nick":"TabAtkins","message":"bradleymeck: I'm not saying add this functionality to proxies. I'm using proxies as an example of seemingly-similar functionality that was accepted by the committee, to question one of the objections to overloading.","date":"2019-02-05T22:48:36.628Z","type":"message"}
{"nick":"bradleymeck","message":"for member expressions the assignment always does the lookup","date":"2019-02-05T22:48:44.010Z","type":"message"}
{"nick":"devsnek","message":"right now overloads live on the operator","date":"2019-02-05T22:48:46.753Z","type":"message"}
{"nick":"bradleymeck","message":"TabAtkins: i have other objections than speed, but tradeoffs of speed are generally going to be case by case, and introducing more means those tradeoffs become harder to justify over time","date":"2019-02-05T22:49:47.115Z","type":"message"}
{"nick":"bradleymeck","message":"the usability aspect of overloading is interesting, but makes many things much harder to reason about","date":"2019-02-05T22:50:13.041Z","type":"message"}
{"nick":"rmarkins","reason":"Ping timeout: 240 seconds","date":"2019-02-05T22:51:07.324Z","type":"quit"}
{"nick":"devsnek","message":"it would probably only work as an uninherited internal field","date":"2019-02-05T22:51:45.771Z","type":"message"}
{"nick":"rmarkins","date":"2019-02-05T22:55:56.258Z","type":"join"}
{"nick":"rmarkins","reason":"Read error: Connection reset by peer","date":"2019-02-05T22:56:44.110Z","type":"quit"}
{"nick":"rmarkins","date":"2019-02-05T22:57:15.477Z","type":"join"}
{"nick":"rmarkins","reason":"Ping timeout: 244 seconds","date":"2019-02-05T23:01:47.469Z","type":"quit"}
{"nick":"rmarkins","date":"2019-02-05T23:02:10.707Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-02-05T23:18:41.158Z","type":"quit"}
{"nick":"keith_miller","reason":"Read error: Connection reset by peer","date":"2019-02-05T23:25:46.506Z","type":"quit"}
{"nick":"keith_miller","date":"2019-02-05T23:26:32.129Z","type":"join"}
{"nick":"aki_","date":"2019-02-05T23:29:07.814Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-02-05T23:30:03.330Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-02-05T23:30:05.064Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-02-05T23:46:11.741Z","type":"quit"}
{"nick":"gibson042","date":"2019-02-05T23:50:54.828Z","type":"join"}
{"nick":"keith_miller","date":"2019-02-05T23:58:14.848Z","type":"join"}
