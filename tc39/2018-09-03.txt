{"nick":"aki_","date":"2018-09-03T00:49:18.462Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-09-03T00:49:34.732Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-03T00:49:35.098Z","type":"nick"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-09-03T01:05:07.890Z","type":"quit"}
{"nick":"nikivi29","date":"2018-09-03T01:33:11.367Z","type":"join"}
{"nick":"nikivi29","reason":"Remote host closed the connection","date":"2018-09-03T01:33:32.999Z","type":"quit"}
{"nick":"codebam","date":"2018-09-03T02:32:56.908Z","type":"join"}
{"nick":"codebam","reason":"Remote host closed the connection","date":"2018-09-03T02:41:04.259Z","type":"quit"}
{"nick":"dimi34ka20","date":"2018-09-03T02:49:26.303Z","type":"join"}
{"nick":"tasse6","date":"2018-09-03T02:49:35.947Z","type":"join"}
{"nick":"tasse6","reason":"Remote host closed the connection","date":"2018-09-03T02:50:23.246Z","type":"quit"}
{"nick":"dimi34ka20","reason":"Killed (Unit193 (Spam is not permitted on freenode.))","date":"2018-09-03T02:53:31.428Z","type":"quit"}
{"nick":"aki_","date":"2018-09-03T02:55:30.282Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-09-03T02:56:27.343Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-03T02:56:27.699Z","type":"nick"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-09-03T03:43:51.819Z","type":"quit"}
{"nick":"aki_","date":"2018-09-03T05:02:10.378Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2018-09-03T05:02:33.284Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-03T05:02:33.675Z","type":"nick"}
{"nick":"Aquazi","date":"2018-09-03T06:57:23.115Z","type":"join"}
{"nick":"aki_","date":"2018-09-03T07:07:22.342Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 252 seconds","date":"2018-09-03T07:08:45.463Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-03T07:08:45.771Z","type":"nick"}
{"nick":"akoserwa|WFH","date":"2018-09-03T07:29:03.763Z","type":"join"}
{"nick":"akoserwa|WFH","reason":"Client Quit","date":"2018-09-03T07:33:04.636Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-09-03T09:14:27.400Z","type":"quit"}
{"nick":"akirose","date":"2018-09-03T09:15:02.309Z","type":"join"}
{"nick":"Our","date":"2018-09-03T09:59:46.463Z","type":"join"}
{"nick":"Our","reason":"Remote host closed the connection","date":"2018-09-03T10:02:33.513Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2018-09-03T11:22:04.306Z","type":"quit"}
{"nick":"akirose","date":"2018-09-03T11:23:44.322Z","type":"join"}
{"nick":"mitch_16","date":"2018-09-03T12:26:19.683Z","type":"join"}
{"nick":"mitch_16","reason":"Remote host closed the connection","date":"2018-09-03T12:27:04.460Z","type":"quit"}
{"nick":"AtumT","date":"2018-09-03T12:30:00.295Z","type":"join"}
{"nick":"jmdyck","date":"2018-09-03T12:36:09.347Z","type":"join"}
{"nick":"d9b4bef96","date":"2018-09-03T13:21:52.460Z","type":"join"}
{"nick":"d9b4bef96","reason":"Remote host closed the connection","date":"2018-09-03T13:24:42.890Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 246 seconds","date":"2018-09-03T13:30:10.306Z","type":"quit"}
{"nick":"akirose","date":"2018-09-03T13:30:49.285Z","type":"join"}
{"nick":"Bakkot","reason":"Ping timeout: 252 seconds","date":"2018-09-03T14:12:40.047Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2018-09-03T14:32:10.677Z","type":"quit"}
{"nick":"epic15","date":"2018-09-03T14:57:30.684Z","type":"join"}
{"nick":"epic15","reason":"Remote host closed the connection","date":"2018-09-03T15:00:19.732Z","type":"quit"}
{"nick":"SuperSeriousCat3","date":"2018-09-03T15:13:55.797Z","type":"join"}
{"nick":"SuperSeriousCat3","reason":"Remote host closed the connection","date":"2018-09-03T15:18:38.149Z","type":"quit"}
{"nick":"nhandler2","date":"2018-09-03T15:21:01.415Z","type":"join"}
{"nick":"Aquazi","reason":"Quit: Connection closed for inactivity","date":"2018-09-03T15:24:52.292Z","type":"quit"}
{"nick":"nhandler2","reason":"Remote host closed the connection","date":"2018-09-03T15:25:43.725Z","type":"quit"}
{"nick":"grossing24","date":"2018-09-03T15:33:02.680Z","type":"join"}
{"nick":"grossing24","reason":"Remote host closed the connection","date":"2018-09-03T15:35:56.390Z","type":"quit"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2018-09-03T15:38:23.290Z","type":"quit"}
{"nick":"akirose","date":"2018-09-03T15:39:04.860Z","type":"join"}
{"nick":"devsnek","message":"I wonder if it would be possible for the spec to render progressively","date":"2018-09-03T16:29:09.546Z","type":"message"}
{"nick":"devsnek","message":"like headings first, then start inserting all the content","date":"2018-09-03T16:29:40.946Z","type":"message"}
{"nick":"devsnek","message":"would probably help with freezing people's computers","date":"2018-09-03T16:29:55.423Z","type":"message"}
{"nick":"jackmcbarn2","date":"2018-09-03T16:47:11.677Z","type":"join"}
{"nick":"jackmcbarn2","reason":"Remote host closed the connection","date":"2018-09-03T16:47:20.256Z","type":"quit"}
{"nick":"towc","date":"2018-09-03T17:03:19.042Z","type":"join"}
{"nick":"towc","message":"any plans to make multiple non-blocking awaits less awkward? I'm writing something in the backend and calling 2 apis that don't need to wait for each other, like this:","date":"2018-09-03T17:06:29.181Z","type":"message"}
{"nick":"towc","message":"const thing1 = await aThing();","date":"2018-09-03T17:06:34.086Z","type":"message"}
{"nick":"towc","message":"const thing2 = await notDirectlyRelatedThing();","date":"2018-09-03T17:06:34.271Z","type":"message"}
{"nick":"towc","message":"now, this is blocking, but easy to read. What I'm currently doing is this:","date":"2018-09-03T17:06:51.945Z","type":"message"}
{"nick":"towc","message":"const [","date":"2018-09-03T17:06:56.892Z","type":"message"}
{"nick":"towc","message":"  thing1,","date":"2018-09-03T17:06:57.078Z","type":"message"}
{"nick":"towc","message":"  thing2,","date":"2018-09-03T17:06:57.078Z","type":"message"}
{"nick":"towc","message":"] = await Promise.all([","date":"2018-09-03T17:06:57.078Z","type":"message"}
{"nick":"towc","message":"  aThing(),","date":"2018-09-03T17:06:58.356Z","type":"message"}
{"nick":"towc","message":"  notDirectlyRelatedThing(),","date":"2018-09-03T17:07:00.395Z","type":"message"}
{"nick":"towc","message":"]);","date":"2018-09-03T17:07:02.463Z","type":"message"}
{"nick":"towc","message":"first possible improvement I thought of was wrapping awaited [] in Promise.alls:","date":"2018-09-03T17:07:45.124Z","type":"message"}
{"nick":"towc","message":"const [","date":"2018-09-03T17:07:45.826Z","type":"message"}
{"nick":"towc","message":"  thing1,","date":"2018-09-03T17:07:46.011Z","type":"message"}
{"nick":"towc","message":"  thing2,","date":"2018-09-03T17:07:46.011Z","type":"message"}
{"nick":"towc","message":"] = await [","date":"2018-09-03T17:07:46.011Z","type":"message"}
{"nick":"towc","message":"  aThing(),","date":"2018-09-03T17:07:46.011Z","type":"message"}
{"nick":"towc","message":"  notDirectlyRelatedThing(),","date":"2018-09-03T17:07:47.409Z","type":"message"}
{"nick":"towc","message":"];","date":"2018-09-03T17:07:49.368Z","type":"message"}
{"nick":"towc","message":"but stuff like `const mightBeArray = await mightReturnArray();` would potentially get messy","date":"2018-09-03T17:08:22.933Z","type":"message"}
{"nick":"towc","message":"this one is kind of urgh and I guess a bit of a mess to implement and get the behaviour right on, but it would be neat:","date":"2018-09-03T17:09:32.575Z","type":"message"}
{"nick":"towc","message":"const thing1 = await continue aThing();","date":"2018-09-03T17:09:33.316Z","type":"message"}
{"nick":"towc","message":"const thing2 = await notDirectlyRelatedThing();","date":"2018-09-03T17:09:33.501Z","type":"message"}
{"nick":"towc","message":"or more concisely:","date":"2018-09-03T17:09:51.579Z","type":"message"}
{"nick":"towc","message":"const thing1 = await* aThing();","date":"2018-09-03T17:09:52.274Z","type":"message"}
{"nick":"towc","message":"const thing2 = await notDirectlyRelatedThing();","date":"2018-09-03T17:09:52.458Z","type":"message"}
{"nick":"towc","message":"thoughts?","date":"2018-09-03T17:09:55.566Z","type":"message"}
{"nick":"Bakkot","date":"2018-09-03T17:11:16.468Z","type":"join"}
{"nick":"towc","message":"or","date":"2018-09-03T17:11:37.687Z","type":"message"}
{"nick":"towc","message":"await const {","date":"2018-09-03T17:11:39.148Z","type":"message"}
{"nick":"towc","message":"  thing1 = aThing(),","date":"2018-09-03T17:11:39.333Z","type":"message"}
{"nick":"towc","message":"  thing2 = notDirectlyRelatedThing(),","date":"2018-09-03T17:11:39.333Z","type":"message"}
{"nick":"towc","message":"};","date":"2018-09-03T17:11:39.334Z","type":"message"}
{"nick":"towc","message":"but this is fairly inflexible, if you maybe only want side effects, or have some lets in there","date":"2018-09-03T17:12:15.848Z","type":"message"}
{"nick":"ljharb","message":"towc: the solution is indeed Promise.all - ie, `const [thing1, thing2] = await Promise.all([aThing(), notDirectlyRelatedThing()])`","date":"2018-09-03T17:16:08.675Z","type":"message"}
{"nick":"ljharb","message":"if that's awkward because it's not directly related, then that's because of doing those things together, not because of the specific syntax","date":"2018-09-03T17:16:32.436Z","type":"message"}
{"nick":"devsnek","message":"`return continue` and `await continue` :P","date":"2018-09-03T17:17:29.717Z","type":"message"}
{"nick":"ljharb","message":"it wouldn't make sense to be able to `await` and then have execution keep happening - at that point it's just a promise, and you can just do `const thing1Promise = aThing()`","date":"2018-09-03T17:18:10.073Z","type":"message"}
{"nick":"towc","message":"well, I'm using both thing1 and thing2 in the next line","date":"2018-09-03T17:34:51.910Z","type":"message"}
{"nick":"towc","message":"and both awaited functions use a parameter declared in the line right before","date":"2018-09-03T17:35:13.523Z","type":"message"}
{"nick":"towc","message":"so in that sense, it makes sense for me to call the apis right after each other, rather than in some different parts of the code","date":"2018-09-03T17:35:52.215Z","type":"message"}
{"nick":"towc","message":"and sure, I guess I can do","date":"2018-09-03T17:36:57.925Z","type":"message"}
{"nick":"towc","message":"const thing2p = notDirectlyRelatedThing();","date":"2018-09-03T17:36:58.511Z","type":"message"}
{"nick":"towc","message":"const thing1 = await aThing();","date":"2018-09-03T17:36:58.698Z","type":"message"}
{"nick":"towc","message":"const thing2 = await thing2p;","date":"2018-09-03T17:36:58.698Z","type":"message"}
{"nick":"towc","message":"but urgh","date":"2018-09-03T17:36:59.959Z","type":"message"}
{"nick":"aki_","date":"2018-09-03T17:45:21.366Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2018-09-03T17:46:28.895Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-03T17:46:29.229Z","type":"nick"}
{"nick":"ljharb","message":"towc: you should be doing Promise.all.","date":"2018-09-03T17:52:48.863Z","type":"message"}
{"nick":"ljharb","message":"towc: my general advice to people is: 1) do everything with nothing but promises first - no chains, every `.then` or `.catch` goes in a separate variable. 2) condense what makes sense into chains. 3) use `Promise.all` to try to condense multiple promises into one whenever it makes sense. 4) use `await` *only* when your function can't continue without resolving a single promise, on that promise","date":"2018-09-03T17:54:12.775Z","type":"message"}
{"nick":"ljharb","message":"towc: once you get practice doing that a few times, you can skip straight to 3 and 4, and you'll avoid unnecessarily serializing things by overusing `await`","date":"2018-09-03T17:54:45.699Z","type":"message"}
{"nick":"towc","message":"that was my thinking as well, but the trend seems to be to move everything to async/await. I disliked it, but I'm getting used to it","date":"2018-09-03T18:03:06.214Z","type":"message"}
{"nick":"towc","message":"also, I think the node team is also pushing for people to stop using raw promises","date":"2018-09-03T18:03:35.596Z","type":"message"}
{"nick":"ljharb","message":"everything can't move to async/await - it's a complement to promises, not a replacement of it.","date":"2018-09-03T18:09:32.876Z","type":"message"}
{"nick":"towc","message":"I agree, but that doesn't stop people from trying","date":"2018-09-03T18:10:07.220Z","type":"message"}
{"nick":"towc","message":"I haven't seen a Promise.all in a codebase in quite some time, since async/await became mainstream. I think it's because people just associate raw promises with \"old\" and look for other pre-made abstractions that do the same thing, but just hide that you're actually overcomplicating a promise","date":"2018-09-03T18:12:08.608Z","type":"message"}
{"nick":"towc","message":"for example, the abuse that rxjs is getting","date":"2018-09-03T18:12:26.194Z","type":"message"}
{"nick":"towc","message":"or others decide to make a needlessly blocking await call because they either don't realize what's happening, or for lack of pretty alternatives","date":"2018-09-03T18:13:15.397Z","type":"message"}
{"nick":"towc","message":"ofc I don't pretend to have seen more codebases than you or be more attentive, but these are things I'm observing","date":"2018-09-03T18:14:14.412Z","type":"message"}
{"nick":"towc","message":"and I've literally been asked to turn code from promise-based to async/await a couple of times","date":"2018-09-03T18:15:04.639Z","type":"message"}
{"nick":"towc","message":"well, it's all promise-based, but with exposed promises, I guess? Promises in business logic?","date":"2018-09-03T18:15:36.034Z","type":"message"}
{"nick":"towc","message":"I guess the appeal comes from how you can do these things in python and other languages pretty easily, with a syntax similar to our async/await, even if async/await is more limited? I don't know much about how other languages/platforms handle async","date":"2018-09-03T18:17:13.001Z","type":"message"}
{"nick":"towc","message":"but I haven't heard of people using the equivalent of raw promises in python","date":"2018-09-03T18:17:34.272Z","type":"message"}
{"nick":"ljharb","message":"towc: i agree that overusing `await` is an easy trap to fall into","date":"2018-09-03T18:22:30.418Z","type":"message"}
{"nick":"alienated","date":"2018-09-03T18:24:21.606Z","type":"join"}
{"nick":"alienated","reason":"Remote host closed the connection","date":"2018-09-03T18:27:10.637Z","type":"quit"}
{"nick":"Domenic","message":"devsnek: https://valdrinkoshi.github.io/virtual-scroller/demo/html-spec/ is a related experiment","date":"2018-09-03T18:48:47.753Z","type":"message"}
{"nick":"devsnek","message":"Domenic: huh","date":"2018-09-03T18:49:11.480Z","type":"message"}
{"nick":"devsnek","message":"lol tf firefox doesn't support streams at all","date":"2018-09-03T18:49:43.036Z","type":"message"}
{"nick":"devsnek","message":"Domenic: oh this makes more sense now","date":"2018-09-03T18:50:12.239Z","type":"message"}
{"nick":"devsnek","message":"yeah this is kinda like what i was thinking except it needs to be a bit smarter","date":"2018-09-03T18:50:41.502Z","type":"message"}
{"nick":"devsnek","message":"i was thinking along the lines of something like the glimmer vm","date":"2018-09-03T18:52:02.053Z","type":"message"}
{"nick":"Domenic","message":"We have plans to make it smarter, yeah. https://groups.google.com/a/chromium.org/forum/m/#!msg/blink-dev/Icw_sU6PqVA/8hwXw0jTDwAJ","date":"2018-09-03T18:53:28.632Z","type":"message"}
{"nick":"devsnek","message":"isn't there also work on new foldable elements for mobile?","date":"2018-09-03T18:55:53.567Z","type":"message"}
{"nick":"devsnek","message":"this could all sorta tie in","date":"2018-09-03T18:55:57.552Z","type":"message"}
{"nick":"Domenic","message":"Not sure, haven't heard of that","date":"2018-09-03T18:56:33.156Z","type":"message"}
{"nick":"devsnek","message":"there was some presentation about chrome mobile perf and wanting to look into letting developers mark elements as safe to not consider in compositing etc when off screen","date":"2018-09-03T18:57:24.144Z","type":"message"}
{"nick":"caiolima","reason":"*.net *.split","date":"2018-09-03T19:10:25.017Z","type":"quit"}
{"nick":"samth","reason":"*.net *.split","date":"2018-09-03T19:10:25.245Z","type":"quit"}
{"nick":"brianloveswords","reason":"*.net *.split","date":"2018-09-03T19:10:25.758Z","type":"quit"}
{"nick":"bterlson","reason":"*.net *.split","date":"2018-09-03T19:10:25.938Z","type":"quit"}
{"nick":"TabAtkins","reason":"*.net *.split","date":"2018-09-03T19:10:27.887Z","type":"quit"}
{"nick":"surma","reason":"*.net *.split","date":"2018-09-03T19:10:28.115Z","type":"quit"}
{"nick":"evilpie","reason":"*.net *.split","date":"2018-09-03T19:10:28.735Z","type":"quit"}
{"nick":"rbuckton","reason":"*.net *.split","date":"2018-09-03T19:10:28.915Z","type":"quit"}
{"nick":"bstoroz_","reason":"*.net *.split","date":"2018-09-03T19:10:28.915Z","type":"quit"}
{"nick":"paulfryzel","reason":"*.net *.split","date":"2018-09-03T19:10:29.432Z","type":"quit"}
{"nick":"pluma","reason":"*.net *.split","date":"2018-09-03T19:10:29.613Z","type":"quit"}
{"nick":"mattijs","reason":"*.net *.split","date":"2018-09-03T19:10:29.793Z","type":"quit"}
{"nick":"gskachkov_","reason":"*.net *.split","date":"2018-09-03T19:10:29.980Z","type":"quit"}
{"nick":"flet","reason":"*.net *.split","date":"2018-09-03T19:10:30.843Z","type":"quit"}
{"nick":"jorendorff","reason":"*.net *.split","date":"2018-09-03T19:10:31.023Z","type":"quit"}
{"nick":"thejameskyle","reason":"*.net *.split","date":"2018-09-03T19:10:31.203Z","type":"quit"}
{"nick":"refack","reason":"*.net *.split","date":"2018-09-03T19:10:31.383Z","type":"quit"}
{"nick":"nomadtechie","reason":"*.net *.split","date":"2018-09-03T19:10:31.564Z","type":"quit"}
{"nick":"evilpie","date":"2018-09-03T19:10:39.028Z","type":"join"}
{"nick":"gskachkov_","date":"2018-09-03T19:10:41.989Z","type":"join"}
{"nick":"nomadtechie","date":"2018-09-03T19:10:42.169Z","type":"join"}
{"nick":"bstoroz_","date":"2018-09-03T19:10:43.973Z","type":"join"}
{"nick":"caiolima_","date":"2018-09-03T19:10:52.150Z","type":"join"}
{"nick":"caiolima_","reason":"Changing host","date":"2018-09-03T19:10:52.330Z","type":"quit"}
{"nick":"caiolima_","date":"2018-09-03T19:10:52.330Z","type":"join"}
{"nick":"brianloveswords","date":"2018-09-03T19:10:56.899Z","type":"join"}
{"nick":"surma_","date":"2018-09-03T19:10:57.335Z","type":"join"}
{"nick":"bterlson","date":"2018-09-03T19:10:57.946Z","type":"join"}
{"nick":"refack","date":"2018-09-03T19:11:24.608Z","type":"join"}
{"nick":"mattijs","date":"2018-09-03T19:11:27.753Z","type":"join"}
{"nick":"rbuckton","date":"2018-09-03T19:11:33.088Z","type":"join"}
{"nick":"TabAtkins","date":"2018-09-03T19:11:35.212Z","type":"join"}
{"nick":"thejameskyle","date":"2018-09-03T19:11:35.656Z","type":"join"}
{"nick":"samth","date":"2018-09-03T19:11:35.836Z","type":"join"}
{"nick":"flet","date":"2018-09-03T19:11:37.161Z","type":"join"}
{"nick":"pluma","date":"2018-09-03T19:11:40.422Z","type":"join"}
{"nick":"paulfryzel","date":"2018-09-03T19:11:41.004Z","type":"join"}
{"nick":"jorendorff","date":"2018-09-03T19:11:45.217Z","type":"join"}
{"nick":"samth","reason":"Changing host","date":"2018-09-03T19:13:19.243Z","type":"quit"}
{"nick":"samth","date":"2018-09-03T19:13:19.372Z","type":"join"}
{"nick":"pluma","reason":"Changing host","date":"2018-09-03T19:13:50.710Z","type":"quit"}
{"nick":"pluma","date":"2018-09-03T19:13:50.890Z","type":"join"}
{"nick":"pluma","reason":"Changing host","date":"2018-09-03T19:13:50.890Z","type":"quit"}
{"nick":"pluma","date":"2018-09-03T19:13:50.890Z","type":"join"}
{"nick":"timfi","date":"2018-09-03T19:14:16.307Z","type":"join"}
{"nick":"timfi","reason":"Remote host closed the connection","date":"2018-09-03T19:17:02.720Z","type":"quit"}
{"nick":"towc","reason":"Quit: Leaving","date":"2018-09-03T19:18:31.678Z","type":"quit"}
{"nick":"basicdays","reason":"Ping timeout: 250 seconds","date":"2018-09-03T19:35:36.766Z","type":"quit"}
{"nick":"aki_","date":"2018-09-03T19:52:05.568Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-09-03T19:52:47.446Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-03T19:52:47.842Z","type":"nick"}
{"nick":"e17","date":"2018-09-03T19:55:21.649Z","type":"join"}
{"nick":"e17","reason":"Remote host closed the connection","date":"2018-09-03T19:58:11.046Z","type":"quit"}
{"nick":"nOgAnOo10","date":"2018-09-03T20:03:49.343Z","type":"join"}
{"nick":"grumble","date":"2018-09-03T20:06:12.762Z","type":"join"}
{"nick":"nOgAnOo10","reason":"Remote host closed the connection","date":"2018-09-03T20:08:28.024Z","type":"quit"}
{"nick":"grumble","date":"2018-09-03T20:16:13.483Z","type":"part"}
{"nick":"alextes_","reason":"Quit: Connection closed for inactivity","date":"2018-09-03T21:41:01.326Z","type":"quit"}
{"nick":"siniStar","date":"2018-09-03T21:58:09.286Z","type":"join"}
{"nick":"aki_","date":"2018-09-03T21:59:17.502Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2018-09-03T21:59:47.490Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-09-03T21:59:47.777Z","type":"nick"}
{"nick":"siniStar","reason":"Remote host closed the connection","date":"2018-09-03T22:01:04.732Z","type":"quit"}
{"nick":"Banou","date":"2018-09-03T23:20:12.874Z","type":"join"}
{"nick":"Banou","message":"Hello","date":"2018-09-03T23:22:14.145Z","type":"message"}
{"nick":"devsnek","message":"hi","date":"2018-09-03T23:24:26.180Z","type":"message"}
{"nick":"Banou","message":"I would like to make a proposal, is there anyone familiar with the whole thing ? i've made a small repo demonstrating it https://github.com/Banou26/proposal-optional-destructuring","date":"2018-09-03T23:25:01.475Z","type":"message"}
{"nick":"ljharb","message":"it seems like it would be better either as part of optional chaining, or as a follow up proposal after that advances","date":"2018-09-03T23:40:09.746Z","type":"message"}
{"nick":"rkirsling","message":"also while I completely empathize with the motivation, it seems like it'd be received as directly \"patching over\" the decision to differentiate null and undefined in (default params and) destructuring -- i.e. \"it'd break the web to go back on that decision so here's a brand-new feature instead\" :(","date":"2018-09-03T23:59:59.999Z","type":"message"}
