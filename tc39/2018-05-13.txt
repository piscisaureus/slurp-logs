{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-13T02:11:05.717Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-13T02:50:20.121Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-13T03:53:19.768Z","type":"quit"}
{"nick":"keith_miller","date":"2018-05-13T04:06:11.434Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-05-13T04:14:43.516Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-05-13T06:34:42.056Z","type":"quit"}
{"nick":"IgnoredAmbience","reason":"Ping timeout: 264 seconds","date":"2018-05-13T08:24:58.017Z","type":"quit"}
{"nick":"IgnoredAmbience","date":"2018-05-13T09:21:15.482Z","type":"join"}
{"nick":"IgnoredAmbience","reason":"Ping timeout: 240 seconds","date":"2018-05-13T09:56:05.506Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-13T10:25:06.488Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-13T10:25:36.890Z","type":"join"}
{"nick":"jmdyck","date":"2018-05-13T11:27:10.550Z","type":"join"}
{"nick":"IgnoredAmbience","date":"2018-05-13T12:41:16.505Z","type":"join"}
{"nick":"AtumT","date":"2018-05-13T15:10:55.491Z","type":"join"}
{"nick":"keith_miller","date":"2018-05-13T20:54:06.657Z","type":"join"}
{"nick":"IgnoredAmbience","reason":"Ping timeout: 240 seconds","date":"2018-05-13T20:54:35.485Z","type":"quit"}
{"nick":"IgnoredAmbience","date":"2018-05-13T21:39:50.479Z","type":"join"}
{"nick":"devsnek","message":"i added onto my reflect type methods a bit, now with Reflect.is which is what i would consider a proper replacement for instanceof: https://gist.github.com/devsnek/a99cd87a85644224255ef111ef3afebb","date":"2018-05-13T22:56:32.530Z","type":"message"}
{"nick":"devsnek","message":"i'm undecided if Reflect.is should walk up the prototype though","date":"2018-05-13T22:57:04.166Z","type":"message"}
{"nick":"devsnek","message":"like if the match is false check higher up the prototype chain","date":"2018-05-13T22:57:55.795Z","type":"message"}
{"nick":"devsnek","message":"making this real would assume that these symbols would be shared across realms","date":"2018-05-13T23:00:58.343Z","type":"message"}
{"nick":"arai_","reason":"Ping timeout: 246 seconds","date":"2018-05-13T23:04:35.473Z","type":"quit"}
{"nick":"ljharb","message":"devsnek: it wouldn't do any good tho to just return a string, `type` has to be a (brand-checking) function that returns a string","date":"2018-05-13T23:29:22.272Z","type":"message"}
{"nick":"devsnek","message":"thats what Reflect.is is for","date":"2018-05-13T23:29:32.150Z","type":"message"}
{"nick":"devsnek","message":"Reflect.typeOf is just prettyness","date":"2018-05-13T23:29:39.204Z","type":"message"}
{"nick":"devsnek","message":"well not prettyness","date":"2018-05-13T23:30:04.525Z","type":"message"}
{"nick":"ljharb","message":"your impl there of Reflect.is just compares symbol property values","date":"2018-05-13T23:30:14.213Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2018-05-13T23:30:19.759Z","type":"message"}
{"nick":"ljharb","message":"so that's not sufficient","date":"2018-05-13T23:30:24.167Z","type":"message"}
{"nick":"ljharb","message":"the thing that's stored on each builtin's prototype has to be a brand-checking function","date":"2018-05-13T23:30:34.025Z","type":"message"}
{"nick":"ljharb","message":"otherwise it's no better than Symbol.toStringTag","date":"2018-05-13T23:30:40.946Z","type":"message"}
{"nick":"devsnek","message":"howso","date":"2018-05-13T23:31:09.505Z","type":"message"}
{"nick":"ljharb","message":"iow i have to be able to do `const mapType = Map.prototype[MagicSymbol]; … mapType.call(maybeMap)` to determine if it's a Map","date":"2018-05-13T23:31:19.898Z","type":"message"}
{"nick":"ljharb","message":"the problem with toStringTag is that anything can pretend to be anything else","date":"2018-05-13T23:31:34.985Z","type":"message"}
{"nick":"devsnek","message":"the symbols should be internal properties","date":"2018-05-13T23:31:49.654Z","type":"message"}
{"nick":"ljharb","message":"your gist up there doesn't address that at all; it's the same exact feature","date":"2018-05-13T23:31:51.557Z","type":"message"}
{"nick":"ljharb","message":"symbols are all public, i'm not sure what that means","date":"2018-05-13T23:31:58.598Z","type":"message"}
{"nick":"devsnek","message":"like Object.[[Identity]]","date":"2018-05-13T23:32:12.889Z","type":"message"}
{"nick":"devsnek","message":"not a symbol on object","date":"2018-05-13T23:32:16.434Z","type":"message"}
{"nick":"devsnek","message":"i just can't do that with javascript for the example","date":"2018-05-13T23:32:25.326Z","type":"message"}
{"nick":"ljharb","message":"ok, so it's an internal slot","date":"2018-05-13T23:32:27.736Z","type":"message"}
{"nick":"ljharb","message":"then the next question arises - how can an object not provided by the engine participate in this system?","date":"2018-05-13T23:32:47.812Z","type":"message"}
{"nick":"devsnek","message":"Symbol.type maybe","date":"2018-05-13T23:33:06.788Z","type":"message"}
{"nick":"ljharb","message":"(i can skip a lot of the leading questions and point out that jasnell's proposal is exactly what's needed already)","date":"2018-05-13T23:33:17.883Z","type":"message"}
{"nick":"ljharb","message":"sure. but then if it's a symbol, it would seem reasonable for the builtins to have that too","date":"2018-05-13T23:33:30.273Z","type":"message"}
{"nick":"ljharb","message":"since it's valuable and useful for engines to be able to implement everything in pure JS","date":"2018-05-13T23:33:42.775Z","type":"message"}
{"nick":"devsnek","message":"whats the optimal thing to do here","date":"2018-05-13T23:33:46.068Z","type":"message"}
{"nick":"ljharb","message":"imo jasnell's proposal verbatim, modulo naming bikesheds.","date":"2018-05-13T23:34:01.890Z","type":"message"}
{"nick":"ljharb","message":"something that a) any JS object can participate in, that b) any object can pretend to be any other object, but c) it's possible for first-run code to prevent \"b\" within its own scope","date":"2018-05-13T23:35:20.835Z","type":"message"}
{"nick":"devsnek","message":"so a method somehow mounted to things","date":"2018-05-13T23:35:21.324Z","type":"message"}
{"nick":"devsnek","message":"which returns true or false","date":"2018-05-13T23:35:24.755Z","type":"message"}
{"nick":"ljharb","message":"or a string","date":"2018-05-13T23:35:34.963Z","type":"message"}
{"nick":"ljharb","message":"like literally \"Symbol.toStringTag but the values are brand-checking functions that return strings or throw, instead of just being strings\"","date":"2018-05-13T23:35:56.283Z","type":"message"}
{"nick":"ljharb","message":"(or instead of throwing, return false or something)","date":"2018-05-13T23:36:09.721Z","type":"message"}
{"nick":"devsnek","message":"looking at jasnell's proposal its not immediately clear how doing a function instead of a value changes anything","date":"2018-05-13T23:36:47.864Z","type":"message"}
{"nick":"ljharb","message":"because if it's a function, i can save a reference to it earlier, and then nobody can replace or delete that value later","date":"2018-05-13T23:37:20.259Z","type":"message"}
{"nick":"ljharb","message":"ie `const mapType = Map.prototype[magicSymbol]` and then much later, i can safely do `mapType.call(maybeMap) === 'Map'`","date":"2018-05-13T23:37:43.346Z","type":"message"}
{"nick":"ljharb","message":"and it won't matter if `maybeMap` has tried to fake being a Map - or tried to fake *not* being one.","date":"2018-05-13T23:37:57.992Z","type":"message"}
{"nick":"devsnek","message":"with mine that `mapType` is just `Reflect.is(?, Map)`","date":"2018-05-13T23:38:00.427Z","type":"message"}
{"nick":"ljharb","message":"right but how does that work when `Map` can come from any realm","date":"2018-05-13T23:38:10.861Z","type":"message"}
{"nick":"ljharb","message":"and if the answer is \"internal slots\", then self-hosted JS can't do it","date":"2018-05-13T23:38:39.491Z","type":"message"}
{"nick":"ljharb","message":"and if the answer is \"anything on Map\" then anyone can fake it","date":"2018-05-13T23:38:46.067Z","type":"message"}
{"nick":"ljharb","message":"the only safe thing is an extractable function, somewhere. with your example it'd have to be on *both* `Map` and also on `?`","date":"2018-05-13T23:39:27.890Z","type":"message"}
{"nick":"ljharb","message":"(with jasnell's it only has to be on `?`)","date":"2018-05-13T23:39:44.171Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2018-05-13T23:39:49.578Z","type":"message"}
{"nick":"devsnek","message":"so why did jasnell's proposal get stopped again","date":"2018-05-13T23:40:49.599Z","type":"message"}
{"nick":"devsnek","message":"after this talk it does seem to be pretty perfect","date":"2018-05-13T23:40:57.714Z","type":"message"}
{"nick":"devsnek","message":"ljharb: once inside the builtin function any magic can happen like internal slots and such to verify a type right?","date":"2018-05-13T23:46:59.047Z","type":"message"}
{"nick":"devsnek","message":"so this in theory should be enough: https://gist.github.com/devsnek/a99cd87a85644224255ef111ef3afebb#file-symbol-checktype-js","date":"2018-05-13T23:51:43.372Z","type":"message"}
