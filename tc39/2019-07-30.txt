{"nick":"drousso__","reason":"Ping timeout: 272 seconds","date":"2019-07-30T00:02:48.586Z","type":"quit"}
{"nick":"ghermeto_","reason":"Read error: Connection reset by peer","date":"2019-07-30T00:03:51.156Z","type":"quit"}
{"nick":"ghermeto_","date":"2019-07-30T00:25:54.896Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-07-30T00:32:49.023Z","type":"quit"}
{"nick":"cybai","date":"2019-07-30T00:33:19.640Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-07-30T00:38:34.607Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T00:38:46.382Z","type":"quit"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T00:39:43.293Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-30T00:39:48.972Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-07-30T00:40:17.743Z","type":"quit"}
{"nick":"AtumT_","date":"2019-07-30T00:42:04.124Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 244 seconds","date":"2019-07-30T00:43:08.595Z","type":"quit"}
{"nick":"cybai","date":"2019-07-30T00:44:06.778Z","type":"join"}
{"nick":"cybai_","date":"2019-07-30T00:46:11.022Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 268 seconds","date":"2019-07-30T00:49:01.773Z","type":"quit"}
{"nick":"cybai_","reason":"Ping timeout: 248 seconds","date":"2019-07-30T00:50:42.934Z","type":"quit"}
{"nick":"AtumT_","reason":"Quit: AtumT_","date":"2019-07-30T01:01:37.774Z","type":"quit"}
{"nick":"haxjs","reason":"Quit: This computer has gone to sleep","date":"2019-07-30T01:02:14.873Z","type":"quit"}
{"nick":"cybai","date":"2019-07-30T01:09:43.744Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T01:13:52.255Z","type":"quit"}
{"nick":"burgess23","date":"2019-07-30T01:20:48.580Z","type":"join"}
{"nick":"laughinghan","date":"2019-07-30T01:24:07.049Z","type":"join"}
{"nick":"burgess23","reason":"Ping timeout: 244 seconds","date":"2019-07-30T01:24:59.491Z","type":"quit"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-30T01:26:50.319Z","type":"quit"}
{"nick":"burgess23","date":"2019-07-30T01:55:11.926Z","type":"join"}
{"nick":"ghermeto_","reason":"Read error: Connection reset by peer","date":"2019-07-30T01:58:02.033Z","type":"quit"}
{"nick":"haxjs","date":"2019-07-30T01:58:55.776Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-07-30T02:14:43.391Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T02:29:20.804Z","type":"quit"}
{"nick":"ghermeto","date":"2019-07-30T02:41:19.851Z","type":"join"}
{"nick":"ghermeto","reason":"Ping timeout: 272 seconds","date":"2019-07-30T02:46:12.638Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-30T03:53:14.916Z","type":"join"}
{"nick":"SamB","date":"2019-07-30T04:04:41.982Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-07-30T04:35:19.491Z","type":"quit"}
{"nick":"drousso","date":"2019-07-30T04:51:34.761Z","type":"join"}
{"nick":"drousso","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T05:01:27.385Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-07-30T05:23:44.808Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T05:44:21.588Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-30T05:47:37.789Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T06:00:44.258Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-30T06:17:11.419Z","type":"join"}
{"nick":"laughinghan","reason":"Ping timeout: 246 seconds","date":"2019-07-30T06:21:19.379Z","type":"quit"}
{"nick":"drousso","date":"2019-07-30T07:00:27.770Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 250 seconds","date":"2019-07-30T07:04:57.743Z","type":"quit"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T09:01:28.229Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-07-30T09:38:14.279Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-07-30T09:41:10.546Z","type":"quit"}
{"nick":"cybai","date":"2019-07-30T09:41:51.760Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 276 seconds","date":"2019-07-30T09:47:10.564Z","type":"quit"}
{"nick":"AtumT","date":"2019-07-30T10:43:31.672Z","type":"join"}
{"nick":"cybai","date":"2019-07-30T10:53:12.254Z","type":"join"}
{"nick":"howdoi","date":"2019-07-30T10:54:09.662Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 245 seconds","date":"2019-07-30T11:04:38.389Z","type":"quit"}
{"nick":"kpatticha","date":"2019-07-30T11:14:34.581Z","type":"join"}
{"nick":"michaelficarra","date":"2019-07-30T11:18:13.116Z","type":"join"}
{"nick":"MJCD","date":"2019-07-30T11:38:01.383Z","type":"join"}
{"nick":"MJCD","message":"oh, well then","date":"2019-07-30T11:38:09.301Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-07-30T11:38:11.789Z","type":"quit"}
{"nick":"MJCD","message":"howdoi, ljharb, devsnek ignore that then haha","date":"2019-07-30T11:38:25.791Z","type":"message"}
{"nick":"PigDude","date":"2019-07-30T11:43:03.697Z","type":"join"}
{"nick":"howdoi","message":"ljharb: is aware of compare and equals MJCD :-)","date":"2019-07-30T11:48:36.012Z","type":"message"}
{"nick":"MJCD","message":"I am interested in their opinion","date":"2019-07-30T11:48:56.456Z","type":"message"}
{"nick":"MJCD","message":"but that wasn't why I was trying to assemble","date":"2019-07-30T11:49:07.931Z","type":"message"}
{"nick":"MJCD","message":"##javascript the other day was sooo clogged with proposal talk","date":"2019-07-30T11:49:30.402Z","type":"message"}
{"nick":"MJCD","message":"now I can send them over here ^_^","date":"2019-07-30T11:49:41.114Z","type":"message"}
{"nick":"jmdyck","date":"2019-07-30T12:06:40.813Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T12:26:30.890Z","type":"quit"}
{"nick":"mgol","date":"2019-07-30T12:27:58.741Z","type":"join"}
{"nick":"haxjs","reason":"Quit: This computer has gone to sleep","date":"2019-07-30T12:48:06.094Z","type":"quit"}
{"nick":"drousso","date":"2019-07-30T13:01:33.604Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 276 seconds","date":"2019-07-30T13:06:43.587Z","type":"quit"}
{"nick":"ghermeto","date":"2019-07-30T13:16:38.895Z","type":"join"}
{"nick":"ghermeto","reason":"Ping timeout: 272 seconds","date":"2019-07-30T13:21:26.669Z","type":"quit"}
{"nick":"cybai","date":"2019-07-30T13:22:23.783Z","type":"join"}
{"nick":"ephemera_","date":"2019-07-30T13:25:45.062Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T13:26:55.542Z","type":"quit"}
{"nick":"ephemera_","reason":"Ping timeout: 248 seconds","date":"2019-07-30T13:39:15.010Z","type":"quit"}
{"nick":"ephemera_","date":"2019-07-30T13:40:43.779Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 244 seconds","date":"2019-07-30T13:43:18.439Z","type":"quit"}
{"nick":"mgol","date":"2019-07-30T13:45:38.762Z","type":"join"}
{"nick":"haxjs","date":"2019-07-30T13:56:22.729Z","type":"join"}
{"nick":"kpatticha","date":"2019-07-30T13:58:11.276Z","type":"join"}
{"nick":"PigDude","date":"2019-07-30T14:04:39.340Z","type":"part"}
{"nick":"MJCD","reason":"Quit: Leaving","date":"2019-07-30T14:19:19.012Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T14:20:59.729Z","type":"quit"}
{"nick":"TabAtkins","message":"Sigh, new Math weirdness. hypot(Infinity, NaN) returns Infinity and pow(NaN, 0) returns 1, presumably under the logic that replacing the NaN with any Number wouldn't affect the result. But max(Infinity, NaN) and min(-Infinity, NaN) both return NaN, despite the same logic applying","date":"2019-07-30T14:27:35.733Z","type":"message"}
{"nick":"TabAtkins","message":"(I have an issue open on CSS to see if we need to copy over the hypot/pow behavior, rather than the strict \"NaN is always infectious\" behavior that's currently specced.)","date":"2019-07-30T14:28:16.708Z","type":"message"}
{"nick":"devsnek","message":"I recall that min and max are specified in terms of a large list of mathematical operators without individual spec text","date":"2019-07-30T14:29:09.746Z","type":"message"}
{"nick":"mgol","date":"2019-07-30T14:39:19.150Z","type":"join"}
{"nick":"ghermeto","date":"2019-07-30T14:40:35.974Z","type":"join"}
{"nick":"TabAtkins","message":"Nah they have spec text. It just defined \"no args, return +/- Infinity; NaN args, return NaN; otherwise call the comparison algo\".","date":"2019-07-30T14:41:01.796Z","type":"message"}
{"nick":"jmdyck","message":"hypot checks for infinity before checking for NaN, who knows why.","date":"2019-07-30T14:42:00.150Z","type":"message"}
{"nick":"jmdyck","message":"pow defers to `**`, which says \"If exponent is +0, the result is 1, even if base is NaN.\"","date":"2019-07-30T14:44:10.332Z","type":"message"}
{"nick":"jmdyck","message":"I wonder if that behavior is dictated by IEEE-754.","date":"2019-07-30T14:45:38.026Z","type":"message"}
{"nick":"Nimelrian","date":"2019-07-30T14:48:37.039Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 272 seconds","date":"2019-07-30T14:55:10.647Z","type":"quit"}
{"nick":"AtumT","date":"2019-07-30T15:05:26.318Z","type":"join"}
{"nick":"gibson042","date":"2019-07-30T15:17:34.874Z","type":"join"}
{"nick":"TabAtkins","message":"(just fyi, i was reading the spec for all of these so I could have css copy the behavior)","date":"2019-07-30T15:23:45.008Z","type":"message"}
{"nick":"burgess23","reason":"Remote host closed the connection","date":"2019-07-30T15:28:40.498Z","type":"quit"}
{"nick":"burgess23","date":"2019-07-30T15:29:11.338Z","type":"join"}
{"nick":"burgess23","reason":"Ping timeout: 245 seconds","date":"2019-07-30T15:33:23.355Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T15:35:06.970Z","type":"quit"}
{"nick":"ghermeto_","date":"2019-07-30T15:55:04.905Z","type":"join"}
{"nick":"ghermeto","reason":"Ping timeout: 248 seconds","date":"2019-07-30T15:57:55.040Z","type":"quit"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-07-30T15:59:21.111Z","type":"quit"}
{"nick":"jwalden","date":"2019-07-30T16:00:21.506Z","type":"join"}
{"nick":"drousso","date":"2019-07-30T16:00:39.737Z","type":"join"}
{"nick":"drousso","reason":"Remote host closed the connection","date":"2019-07-30T16:04:57.360Z","type":"quit"}
{"nick":"Havvy","reason":"Ping timeout: 248 seconds","date":"2019-07-30T16:05:54.982Z","type":"quit"}
{"nick":"Havvy","date":"2019-07-30T16:07:10.259Z","type":"join"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-07-30T16:07:56.402Z","type":"quit"}
{"nick":"ghermeto_","reason":"Read error: Connection reset by peer","date":"2019-07-30T16:08:50.128Z","type":"quit"}
{"nick":"burgess23","date":"2019-07-30T16:19:26.376Z","type":"join"}
{"nick":"jwalden","reason":"Ping timeout: 264 seconds","date":"2019-07-30T16:21:40.352Z","type":"quit"}
{"nick":"howdoi","date":"2019-07-30T16:24:47.060Z","type":"join"}
{"nick":"zkat","reason":"Ping timeout: 252 seconds","date":"2019-07-30T16:25:46.155Z","type":"quit"}
{"nick":"ryzokuken","reason":"Ping timeout: 250 seconds","date":"2019-07-30T16:26:07.751Z","type":"quit"}
{"nick":"zkat","date":"2019-07-30T16:28:08.476Z","type":"join"}
{"nick":"underikar","reason":"Ping timeout: 252 seconds","date":"2019-07-30T16:28:20.118Z","type":"quit"}
{"nick":"ryzokuken","date":"2019-07-30T16:28:21.838Z","type":"join"}
{"nick":"underikar","date":"2019-07-30T16:34:32.757Z","type":"join"}
{"nick":"jwalden","date":"2019-07-30T16:36:08.365Z","type":"join"}
{"nick":"underikar","reason":"Max SendQ exceeded","date":"2019-07-30T16:36:44.706Z","type":"quit"}
{"nick":"ryzokuken","reason":"Ping timeout: 264 seconds","date":"2019-07-30T16:37:16.097Z","type":"quit"}
{"nick":"underikar","date":"2019-07-30T16:38:23.726Z","type":"join"}
{"nick":"ryzokuken","date":"2019-07-30T16:40:23.840Z","type":"join"}
{"nick":"ryzokuken","reason":"Max SendQ exceeded","date":"2019-07-30T16:41:32.120Z","type":"quit"}
{"nick":"burgess2_","date":"2019-07-30T16:42:31.049Z","type":"join"}
{"nick":"ryzokuken","date":"2019-07-30T16:42:36.782Z","type":"join"}
{"nick":"ryzokuken","reason":"Max SendQ exceeded","date":"2019-07-30T16:44:02.661Z","type":"quit"}
{"nick":"burgess23","reason":"Ping timeout: 245 seconds","date":"2019-07-30T16:45:53.374Z","type":"quit"}
{"nick":"ryzokuken","date":"2019-07-30T16:46:16.657Z","type":"join"}
{"nick":"zkat","reason":"Ping timeout: 268 seconds","date":"2019-07-30T16:46:42.824Z","type":"quit"}
{"nick":"AtumT_","date":"2019-07-30T16:47:01.649Z","type":"join"}
{"nick":"zkat","date":"2019-07-30T16:47:10.815Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 246 seconds","date":"2019-07-30T16:49:55.368Z","type":"quit"}
{"nick":"burgess2_","reason":"Remote host closed the connection","date":"2019-07-30T16:51:35.848Z","type":"quit"}
{"nick":"burgess23","date":"2019-07-30T16:52:11.124Z","type":"join"}
{"nick":"drousso","date":"2019-07-30T16:54:34.370Z","type":"join"}
{"nick":"gibson042","date":"2019-07-30T17:06:32.337Z","type":"join"}
{"nick":"drousso_","date":"2019-07-30T17:09:25.781Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 245 seconds","date":"2019-07-30T17:10:53.355Z","type":"quit"}
{"nick":"Nimelrian","reason":"Ping timeout: 252 seconds","date":"2019-07-30T17:18:12.026Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-07-30T17:22:24.389Z","type":"join"}
{"nick":"rkirsling","message":"devsnek: It finally clicked for me this morning that I think that solution for ?. would've been more obvious to me if I'd've done a bytecode impl of try-catch before","date":"2019-07-30T17:30:01.890Z","type":"message"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-07-30T17:32:01.632Z","type":"quit"}
{"nick":"devsnek","message":"rkirsling: try/catch is what got me thinking of the solution i came up with","date":"2019-07-30T17:32:20.752Z","type":"message"}
{"nick":"laughinghan","date":"2019-07-30T17:49:34.386Z","type":"join"}
{"nick":"laughinghan","reason":"Client Quit","date":"2019-07-30T17:50:46.357Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-30T17:52:36.699Z","type":"join"}
{"nick":"ErrorIsNullError","date":"2019-07-30T17:54:09.601Z","type":"join"}
{"nick":"kpattich_","date":"2019-07-30T17:59:05.364Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 246 seconds","date":"2019-07-30T18:00:58.335Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T18:09:19.910Z","type":"quit"}
{"nick":"kpattich_","reason":"Ping timeout: 245 seconds","date":"2019-07-30T18:32:08.434Z","type":"quit"}
{"nick":"ghermeto_","date":"2019-07-30T18:37:02.316Z","type":"join"}
{"nick":"keith_mi_","date":"2019-07-30T18:39:00.776Z","type":"join"}
{"nick":"michaelficarra","date":"2019-07-30T18:48:22.259Z","type":"part"}
{"nick":"Bakkot","message":"Does anyone remember what the argument for including uninitialized class fields was?","date":"2019-07-30T18:48:23.688Z","type":"message"}
{"nick":"Bakkot","message":"It's causing people coming from TypeScript a fair bit of pain, and is a huge pain to implement","date":"2019-07-30T18:48:41.757Z","type":"message"}
{"nick":"Bakkot","message":"(in parsers)","date":"2019-07-30T18:48:45.455Z","type":"message"}
{"nick":"Bakkot","message":"and it seems like `x = undefined` isn't that bad of an alternative","date":"2019-07-30T18:49:12.066Z","type":"message"}
{"nick":"Bakkot","message":"mostly I just don't remember why we included them, and am wondering if anyone knows offhand","date":"2019-07-30T18:49:38.624Z","type":"message"}
{"nick":"gibson042","date":"2019-07-30T19:06:53.563Z","type":"join"}
{"nick":"Nimelrian","date":"2019-07-30T19:10:40.143Z","type":"join"}
{"nick":"keith_m__","date":"2019-07-30T19:18:27.085Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 250 seconds","date":"2019-07-30T19:19:27.741Z","type":"quit"}
{"nick":"devsnek","message":"Bakkot: like `class X { x; }`?","date":"2019-07-30T19:22:41.950Z","type":"message"}
{"nick":"devsnek","message":"i mean they don't have TDZ or anything","date":"2019-07-30T19:23:10.548Z","type":"message"}
{"nick":"devsnek","message":"what's the issue people are having","date":"2019-07-30T19:23:16.969Z","type":"message"}
{"nick":"devsnek","message":"looking over the acorn plugin, it seems pretty simple","date":"2019-07-30T19:24:47.095Z","type":"message"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T19:27:50.372Z","type":"quit"}
{"nick":"bradleymeck","message":"Bakkot: what happens in that if you are in a sloppy context with a `undefined` var?","date":"2019-07-30T19:45:53.261Z","type":"message"}
{"nick":"bradleymeck","message":"betting it was something dealing with sloppy doing bad things","date":"2019-07-30T19:46:17.199Z","type":"message"}
{"nick":"bradleymeck","message":"i feel like sloppy just keeps getting more strange over time","date":"2019-07-30T19:47:20.549Z","type":"message"}
{"nick":"bradleymeck","message":"because divergence and different things made for strict/Module having compromises instead of initial designs for making them work in sloppy","date":"2019-07-30T19:48:01.052Z","type":"message"}
{"nick":"ghermeto_","reason":"Read error: Connection reset by peer","date":"2019-07-30T19:49:03.810Z","type":"quit"}
{"nick":"ghermeto","date":"2019-07-30T19:50:24.036Z","type":"join"}
{"nick":"ghermeto","reason":"Remote host closed the connection","date":"2019-07-30T19:50:25.209Z","type":"quit"}
{"nick":"Bakkot","message":"devsnek: yeah, like that","date":"2019-07-30T19:51:00.355Z","type":"message"}
{"nick":"Bakkot","message":"see https://github.com/tc39/proposal-class-fields/issues/242 and https://github.com/babel/babel/issues/10282","date":"2019-07-30T19:51:12.178Z","type":"message"}
{"nick":"laughinghan","date":"2019-07-30T19:51:13.278Z","type":"join"}
{"nick":"ghermeto_","date":"2019-07-30T19:51:20.195Z","type":"join"}
{"nick":"Bakkot","message":"the issue is basically that typescript and flow treat that syntax (or roughly that syntax) as being basically a comment","date":"2019-07-30T19:51:28.771Z","type":"message"}
{"nick":"devsnek","message":"oh","date":"2019-07-30T19:51:40.500Z","type":"message"}
{"nick":"Bakkot","message":"bradleymeck: `x = void 0` then, I guess","date":"2019-07-30T19:51:43.415Z","type":"message"}
{"nick":"devsnek","message":"this silly thing","date":"2019-07-30T19:51:48.693Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: can't they just pretend it was `= void 0`","date":"2019-07-30T19:52:34.921Z","type":"message"}
{"nick":"burgess2_","date":"2019-07-30T19:52:38.632Z","type":"join"}
{"nick":"ljharb","message":"ofc if we'd chosen [[Set]] this wouldn't be a problem :-/","date":"2019-07-30T19:52:43.923Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: I would not guarantee acorn's plugin is correct; I spent a while getting it right in babel: https://github.com/babel/babylon/pull/351","date":"2019-07-30T19:52:53.975Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: yes it would?","date":"2019-07-30T19:52:56.447Z","type":"message"}
{"nick":"Bakkot","message":"it has nothing to do with Define vs Set","date":"2019-07-30T19:53:02.691Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: you're talking entirely about runtime semantics though","date":"2019-07-30T19:53:08.855Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: with [[Set]], then `x;` is just `this.x = undefined`, no?","date":"2019-07-30T19:53:10.771Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: they could, sure, but that's not the semantics they actually want","date":"2019-07-30T19:53:12.610Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: right, which does not solve the issue these people are having","date":"2019-07-30T19:53:23.744Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: hm, what issue are they having then","date":"2019-07-30T19:53:32.000Z","type":"message"}
{"nick":"Bakkot","message":"they are not using accessors or nonwritable properties","date":"2019-07-30T19:53:34.307Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: see https://github.com/tc39/proposal-class-fields/issues/242","date":"2019-07-30T19:53:43.379Z","type":"message"}
{"nick":"ljharb","message":"i mean i get that they want it to be a noop, but if it used [[Set]] and `= undefined` wouldn't that just work?","date":"2019-07-30T19:53:53.949Z","type":"message"}
{"nick":"Bakkot","message":"no, it would not","date":"2019-07-30T19:54:00.161Z","type":"message"}
{"nick":"ljharb","message":"oh because it would override, hm","date":"2019-07-30T19:54:09.027Z","type":"message"}
{"nick":"Bakkot","message":"yeah, it overrides regardless of Set vs Define","date":"2019-07-30T19:54:18.124Z","type":"message"}
{"nick":"ljharb","message":"so we'd really have to spec `x;` as a noop to fix that, which indeed would be the same with either semantics","date":"2019-07-30T19:54:20.697Z","type":"message"}
{"nick":"ghermeto","date":"2019-07-30T19:54:21.223Z","type":"join"}
{"nick":"ghermeto","reason":"Remote host closed the connection","date":"2019-07-30T19:54:22.340Z","type":"quit"}
{"nick":"Bakkot","message":"(Set vs Define really is not something which comes up that much in most code)","date":"2019-07-30T19:54:29.060Z","type":"message"}
{"nick":"devsnek","message":"if we're gonna change class fields","date":"2019-07-30T19:54:36.051Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: orrrrr we could spec `x;` as being illegal","date":"2019-07-30T19:54:36.261Z","type":"message"}
{"nick":"devsnek","message":"can we just get rid of them","date":"2019-07-30T19:54:38.960Z","type":"message"}
{"nick":"ljharb","message":"altho maybe if we used Set, then we could justify the semantics of `x;` being `if (!(x in this)) { x = undefined; }`","date":"2019-07-30T19:54:42.536Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: no","date":"2019-07-30T19:54:44.672Z","type":"message"}
{"nick":"devsnek","message":"we can't make `x;` illegal, its already in code","date":"2019-07-30T19:54:55.998Z","type":"message"}
{"nick":"devsnek","message":"at least my code","date":"2019-07-30T19:55:00.486Z","type":"message"}
{"nick":"devsnek","message":"and i assume i'm not the only person","date":"2019-07-30T19:55:08.943Z","type":"message"}
{"nick":"Bakkot","message":"s/could/could have/, I guess","date":"2019-07-30T19:55:09.976Z","type":"message"}
{"nick":"burgess23","reason":"Ping timeout: 245 seconds","date":"2019-07-30T19:55:27.263Z","type":"quit"}
{"nick":"ghermeto_","reason":"Ping timeout: 272 seconds","date":"2019-07-30T19:56:38.678Z","type":"quit"}
{"nick":"burgess2_","reason":"Ping timeout: 272 seconds","date":"2019-07-30T19:57:16.637Z","type":"quit"}
{"nick":"ljharb","message":"Bakkot: thoughts on my last comment?","date":"2019-07-30T19:57:56.852Z","type":"message"}
{"nick":"ljharb","message":"(not that it will change the Set vs Define outcome anyways)","date":"2019-07-30T19:58:24.112Z","type":"message"}
{"nick":"devsnek","message":"i think class fields are the only js feature i actively dislike :(","date":"2019-07-30T19:59:21.219Z","type":"message"}
{"nick":"burgess23","date":"2019-07-30T19:59:29.360Z","type":"join"}
{"nick":"burgess23","reason":"Client Quit","date":"2019-07-30T20:00:17.667Z","type":"quit"}
{"nick":"bradleymeck","message":"i feel like i missed some big stuff and decorators changed a lot while i was absent","date":"2019-07-30T20:01:30.033Z","type":"message"}
{"nick":"bradleymeck","message":"idk how i feel about them now","date":"2019-07-30T20:01:34.032Z","type":"message"}
{"nick":"devsnek","message":"i think a lot of people feel that way","date":"2019-07-30T20:02:24.313Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: that seems way too complicated","date":"2019-07-30T20:02:40.006Z","type":"message"}
{"nick":"ljharb","message":"i want decorators over \"no decorators\", but i reallllly do not like the current second-class magic Modules-only form :-/","date":"2019-07-30T20:02:43.552Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: the semantics for \"declare the field\" would be \"the field exists afterwards\", seems simple to me","date":"2019-07-30T20:03:00.349Z","type":"message"}
{"nick":"drousso","date":"2019-07-30T20:03:45.580Z","type":"join"}
{"nick":"Bakkot","message":"ljharb: except it wouldn't. imagine `Object.freeze(Object.prototype); class A { toString; constructor(callback) { this.toString = callback; } }`. with current semantics, you get the right thing; with your semantics, you would get an error.","date":"2019-07-30T20:04:02.044Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: and it would work if you changed the `toString;` to `toString = void 0;`, which is even more surprising.","date":"2019-07-30T20:04:23.146Z","type":"message"}
{"nick":"drousso_","reason":"Ping timeout: 250 seconds","date":"2019-07-30T20:04:57.766Z","type":"quit"}
{"nick":"ljharb","message":"ok that's fair","date":"2019-07-30T20:04:59.797Z","type":"message"}
{"nick":"ljharb","message":"so then short of straight making `toString;` illegal, it seems like we're in the best place already","date":"2019-07-30T20:05:16.455Z","type":"message"}
{"nick":"ljharb","message":"and doing that is probably not even web compatible at this point","date":"2019-07-30T20:05:32.064Z","type":"message"}
{"nick":"devsnek","message":"i might just make a node addon that exposes private symbols","date":"2019-07-30T20:06:12.596Z","type":"message"}
{"nick":"Bakkot","message":"ljharb: yeah; I just want to know why `toString;` is legal in the first place","date":"2019-07-30T20:06:57.179Z","type":"message"}
{"nick":"mgol","date":"2019-07-30T20:07:49.451Z","type":"join"}
{"nick":"Bakkot","message":"sidebar: I am not convinced that \"someone somewhere has written code using this\" ought to justify \"we can't take it out of this stage 3 feature\"","date":"2019-07-30T20:08:32.382Z","type":"message"}
{"nick":"Bakkot","message":"(cc devsnek)","date":"2019-07-30T20:08:36.252Z","type":"message"}
{"nick":"Bakkot","message":"the whole point of having stage 3 vs 4 is to allow changes","date":"2019-07-30T20:08:58.654Z","type":"message"}
{"nick":"devsnek","message":"fair","date":"2019-07-30T20:09:21.594Z","type":"message"}
{"nick":"devsnek","message":"if we're gonna make changes though, having to use try catch to check if an object has a private field still feels like a non-starter for the current design :(","date":"2019-07-30T20:09:56.690Z","type":"message"}
{"nick":"Bakkot","message":"why?","date":"2019-07-30T20:10:36.166Z","type":"message"}
{"nick":"Bakkot","message":"you have to use try catch to check if a string is valid JSON, and to check if an object is a Map, and a bunch of other places","date":"2019-07-30T20:10:53.000Z","type":"message"}
{"nick":"Bakkot","message":"doesn't seem that surprising","date":"2019-07-30T20:10:56.383Z","type":"message"}
{"nick":"bradleymeck","message":"we really just need a way to test for private fields in terms of ergonomics","date":"2019-07-30T20:11:23.274Z","type":"message"}
{"nick":"devsnek","message":"none of those are even remotely related to checking if x has a property","date":"2019-07-30T20:11:36.405Z","type":"message"}
{"nick":"Bakkot","message":"I would be on board with `#x in foo` working (without going up the prototype chain, just like `foo.#x` does not go up the prototype chain)","date":"2019-07-30T20:11:38.503Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: \"has a property\", in the context of private fields, is equivalent to \"is of this kind\"","date":"2019-07-30T20:11:59.321Z","type":"message"}
{"nick":"Bakkot","message":"which is in fact a lot like \"is a Map\"","date":"2019-07-30T20:12:07.037Z","type":"message"}
{"nick":"devsnek","message":"yeah its a whole new thing","date":"2019-07-30T20:12:07.501Z","type":"message"}
{"nick":"devsnek","message":"which is why i think its a non-starter","date":"2019-07-30T20:12:12.385Z","type":"message"}
{"nick":"devsnek","message":"but oh well","date":"2019-07-30T20:12:13.752Z","type":"message"}
{"nick":"ljharb","message":"Bakkot: fwiw tho that try/catch requirement is terrible","date":"2019-07-30T20:12:16.888Z","type":"message"}
{"nick":"ljharb","message":"so yeah `#x in foo` working would be *amazing*","date":"2019-07-30T20:12:27.730Z","type":"message"}
{"nick":"ljharb","message":"but really we need a \"has own\" operator, that also works with private fields","date":"2019-07-30T20:12:44.557Z","type":"message"}
{"nick":"bradleymeck","message":"^","date":"2019-07-30T20:12:52.859Z","type":"message"}
{"nick":"ljharb","message":"`foo has x` or `foo has #x` or something. but we're out of keywords.","date":"2019-07-30T20:13:03.931Z","type":"message"}
{"nick":"bradleymeck","message":"i do like the throw though personally","date":"2019-07-30T20:13:04.500Z","type":"message"}
{"nick":"ljharb","message":"i like the throw behavior where it currently exists","date":"2019-07-30T20:13:13.881Z","type":"message"}
{"nick":"ljharb","message":"i don't like that there's no non-throwy way to check","date":"2019-07-30T20:13:18.742Z","type":"message"}
{"nick":"Bakkot","message":"hm, `has` would be kinda nice, true","date":"2019-07-30T20:13:26.030Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: we can still add contextual keywords *shudder*","date":"2019-07-30T20:13:27.410Z","type":"message"}
{"nick":"bradleymeck","message":"`K own in O`","date":"2019-07-30T20:13:40.097Z","type":"message"}
{"nick":"ljharb","message":"`in foo has x`","date":"2019-07-30T20:13:50.243Z","type":"message"}
{"nick":"ljharb","message":"lol","date":"2019-07-30T20:14:02.202Z","type":"message"}
{"nick":"devsnek","message":"throwing by default feels so weirdly opinionated","date":"2019-07-30T20:14:07.986Z","type":"message"}
{"nick":"bradleymeck","message":"i think ASI would be a problem for leading `in`?","date":"2019-07-30T20:14:08.301Z","type":"message"}
{"nick":"ljharb","message":"`foo...has...x`","date":"2019-07-30T20:14:31.053Z","type":"message"}
{"nick":"devsnek","message":"`symbol in foo` :(","date":"2019-07-30T20:15:04.769Z","type":"message"}
{"nick":"bradleymeck","message":"(x\\n in foo); has x","date":"2019-07-30T20:15:16.638Z","type":"message"}
{"nick":"ljharb","message":"`foo with x`","date":"2019-07-30T20:15:18.872Z","type":"message"}
{"nick":"bradleymeck","message":"ooo `with` returns?","date":"2019-07-30T20:15:32.385Z","type":"message"}
{"nick":"ljharb","message":"`foo super in x`","date":"2019-07-30T20:15:33.350Z","type":"message"}
{"nick":"ljharb","message":"`foo in.own x` :-p","date":"2019-07-30T20:15:53.646Z","type":"message"}
{"nick":"ljharb","message":"i've got a whole closetful of bikeshed paint here","date":"2019-07-30T20:16:01.065Z","type":"message"}
{"nick":"bradleymeck","message":"seems fine","date":"2019-07-30T20:16:02.789Z","type":"message"}
{"nick":"bradleymeck","message":"as long as grammar isn't terrible w/e","date":"2019-07-30T20:16:13.846Z","type":"message"}
{"nick":"FireFly","action":". o O ( `x of foo` )","date":"2019-07-30T20:16:34.175Z","type":"action"}
{"nick":"rkirsling","message":"the saddest part of the `with` construct really is the fact that it's occupying such a useful keyword","date":"2019-07-30T20:24:57.375Z","type":"message"}
{"nick":"rkirsling","message":"(although that's probably more relevant to the resource mgmt discussion but still)","date":"2019-07-30T20:25:32.305Z","type":"message"}
{"nick":"ghermeto_","date":"2019-07-30T20:27:39.904Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T20:31:56.795Z","type":"quit"}
{"nick":"bradleymeck","message":"one day ASI, one day i will be freed to use keywords not from the 90s","date":"2019-07-30T20:37:33.651Z","type":"message"}
{"nick":"devsnek","message":"yolo https://www.npmjs.com/package/@snek/private","date":"2019-07-30T20:39:56.143Z","type":"message"}
{"nick":"rkirsling","message":"lol","date":"2019-07-30T20:45:54.814Z","type":"message"}
{"nick":"ghermeto_","reason":"Read error: Connection reset by peer","date":"2019-07-30T21:00:13.999Z","type":"quit"}
{"nick":"ghermeto","date":"2019-07-30T21:01:07.484Z","type":"join"}
{"nick":"ghermeto","reason":"Ping timeout: 245 seconds","date":"2019-07-30T21:05:27.246Z","type":"quit"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-30T21:06:10.825Z","type":"quit"}
{"nick":"Nimelrian","reason":"Ping timeout: 252 seconds","date":"2019-07-30T21:14:42.059Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-30T21:24:22.184Z","type":"join"}
{"nick":"ErrorIsNullError","date":"2019-07-30T21:27:43.691Z","type":"join"}
{"nick":"ljharb","message":"devsnek: bug report, doesn't work in a browser","date":"2019-07-30T22:27:08.037Z","type":"message"}
{"nick":"devsnek","message":"ljharb: with the right combination of flags it might work in chrome :)","date":"2019-07-30T22:27:30.486Z","type":"message"}
{"nick":"ljharb","message":"\"this website best used with chrome 74 and these seventeen flags\"","date":"2019-07-30T22:27:56.492Z","type":"message"}
{"nick":"devsnek","message":"wouldn't even be the most outrageous requirement i've seen","date":"2019-07-30T22:28:21.621Z","type":"message"}
{"nick":"devsnek","message":"the projectors my school got last year require activex to send telnet commands, so you have to use internet explorer","date":"2019-07-30T22:29:24.937Z","type":"message"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-30T22:34:53.684Z","type":"quit"}
{"nick":"ghermeto_","date":"2019-07-30T22:39:42.026Z","type":"join"}
{"nick":"ErrorIsNullError","date":"2019-07-30T22:42:58.973Z","type":"join"}
{"nick":"drousso_","date":"2019-07-30T22:45:56.610Z","type":"join"}
{"nick":"drousso","reason":"Ping timeout: 276 seconds","date":"2019-07-30T22:49:07.659Z","type":"quit"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-30T22:53:06.219Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:11:43.970Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:16:12.719Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:18:29.002Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-07-30T23:29:21.147Z","type":"quit"}
{"nick":"ghermeto_","reason":"Read error: Connection reset by peer","date":"2019-07-30T23:29:41.958Z","type":"quit"}
{"nick":"ghermeto","date":"2019-07-30T23:31:28.796Z","type":"join"}
{"nick":"SamB","reason":"Quit: Connection closed for inactivity","date":"2019-07-30T23:33:54.690Z","type":"quit"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-30T23:35:54.976Z","type":"quit"}
{"nick":"ghermeto","reason":"Ping timeout: 258 seconds","date":"2019-07-30T23:35:55.775Z","type":"quit"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-30T23:44:26.237Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:44:48.992Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:45:15.719Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:45:37.689Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:46:03.319Z","type":"quit"}
{"nick":"drousso","date":"2019-07-30T23:46:20.066Z","type":"join"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:46:22.005Z","type":"join"}
{"nick":"mgol","reason":"Ping timeout: 246 seconds","date":"2019-07-30T23:46:25.358Z","type":"quit"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:46:50.702Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:47:09.752Z","type":"join"}
{"nick":"mgol","date":"2019-07-30T23:47:09.804Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:47:38.089Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:47:59.035Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:48:25.950Z","type":"quit"}
{"nick":"drousso_","reason":"Ping timeout: 272 seconds","date":"2019-07-30T23:48:26.666Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:48:42.691Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:49:12.754Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:49:36.077Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:50:01.251Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:50:17.733Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:50:48.698Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:51:07.024Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:51:34.881Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:51:55.669Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:52:21.227Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:52:40.067Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:53:07.223Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:53:23.778Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:53:54.951Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:54:13.971Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:54:39.603Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:55:01.713Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:55:26.756Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:56:36.991Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:56:58.155Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:58:16.077Z","type":"join"}
{"nick":"ErrorIsNullError","reason":"Client Quit","date":"2019-07-30T23:58:31.414Z","type":"quit"}
{"nick":"ErrorIsNullError","date":"2019-07-30T23:59:29.104Z","type":"join"}
