{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2018-02-19T00:28:23.682Z","type":"quit"}
{"nick":"jwalden","date":"2018-02-19T00:34:04.387Z","type":"join"}
{"nick":"jschoi","message":"I’m having trouble determining precisely where in the specification is `function f () { super() }` defined as a compile-time syntax error. `super` calls (https://tc39.github.io/ecma262/#sec-super-keyword) are a type of LHS Expression (https://tc39.github.io/ecma262/#sec-left-hand-side-expressions), and neither of their clauses appear to define static early errors.","date":"2018-02-19T01:21:17.350Z","type":"message"}
{"nick":"caridy","date":"2018-02-19T01:22:49.802Z","type":"join"}
{"nick":"not-an-aardvark","message":"jschoi: looks like it's here: https://tc39.github.io/ecma262/#sec-function-definitions-static-semantics-early-errors","date":"2018-02-19T01:44:46.739Z","type":"message"}
{"nick":"not-an-aardvark","message":"> It is a Syntax Error if FunctionBody Contains SuperCall is true.","date":"2018-02-19T01:44:59.039Z","type":"message"}
{"nick":"jschoi","message":"Ah, so it’s in function’s clause; thanks.","date":"2018-02-19T01:48:28.559Z","type":"message"}
{"nick":"jschoi","message":"So that means it would probably be in module’s and script’s respective clauses too…","date":"2018-02-19T01:49:18.086Z","type":"message"}
{"nick":"jschoi","message":"…And there it is https://tc39.github.io/ecma262/#sec-scripts-static-semantics-early-errors. That explains that. Thanks again.","date":"2018-02-19T01:49:32.788Z","type":"message"}
{"nick":"jschoi","message":"…And https://tc39.github.io/ecma262/#sec-performeval for direct eval, right.","date":"2018-02-19T01:51:32.552Z","type":"message"}
{"nick":"jschoi","message":"And function/method definitions override `Contains` so that their body contents are opaque to `Contains`.","date":"2018-02-19T01:52:30.669Z","type":"message"}
{"nick":"jschoi","message":"Except arrow functions, which are transparent for `super`. Got it.","date":"2018-02-19T01:52:46.571Z","type":"message"}
{"nick":"Jamesernator","date":"2018-02-19T02:59:06.937Z","type":"join"}
{"nick":"Jamesernator","reason":"Client Quit","date":"2018-02-19T03:00:53.467Z","type":"quit"}
{"nick":"howdoi","date":"2018-02-19T04:11:31.586Z","type":"join"}
{"nick":"jschoi","message":"What’s done is done, but a comment (https://github.com/tc39/proposal-optional-chaining/issues/5#issuecomment-353884817) made me curious. Any parentheses surrounding the bodies of arrow functions are significant for distinguishing between a object versus a block with a label. This is a foot gun. But the comment refers to it have being unavoidable. In a better world, how would this foot gun have been avoided?","date":"2018-02-19T04:41:02.567Z","type":"message"}
{"nick":"jschoi","message":"That is: `x => ({ y: z })` (returns object) versus `x => { y: z }` (block with labeled statement).","date":"2018-02-19T04:42:06.681Z","type":"message"}
{"nick":"jschoi","message":"ljharb, you made that comment, from last December, so if you happen remember what you thinking about at that time, it would be wonderfully edifying to hear an explanation.","date":"2018-02-19T04:44:50.173Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-19T04:50:28.367Z","type":"quit"}
{"nick":"caridy","date":"2018-02-19T04:50:55.883Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 248 seconds","date":"2018-02-19T04:55:27.797Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-02-19T04:55:51.303Z","type":"quit"}
{"nick":"ephemera__","date":"2018-02-19T05:04:46.732Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 248 seconds","date":"2018-02-19T05:06:41.479Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-02-19T05:35:19.654Z","type":"quit"}
{"nick":"ljharb","message":"jschoi: i would have preferred that labeled blocks be forbidden in an arrow function body (which would have been a weird inconsistency)","date":"2018-02-19T05:44:34.493Z","type":"message"}
{"nick":"jschoi","message":"ljharb: Thanks. Is the inconsistency here the prohibition of labeled blocks or the significance of parentheses around the braces?","date":"2018-02-19T05:50:42.183Z","type":"message"}
{"nick":"caridy","date":"2018-02-19T05:50:48.728Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-19T05:54:57.732Z","type":"quit"}
{"nick":"caridy","date":"2018-02-19T05:56:58.258Z","type":"join"}
{"nick":"ljharb","message":"jschoi: sorry, let me clarify","date":"2018-02-19T05:58:42.723Z","type":"message"}
{"nick":"ljharb","message":"jschoi: the parens force the block/object into expression position, which forces it to be an object. because of the `x => { }` explicit return form, `{ a: b }` has no way to definitively mean \"it's an object\", and so the parser, when it sees the `{`, doesn't have to keep looking forward before it knows if it's a block or an object literal","date":"2018-02-19T06:00:42.755Z","type":"message"}
{"nick":"ljharb","message":"jschoi: so i think that even if labels were banned in arrow function bodies, it'd still amount to a period of parsing time where the engine would have to wait-and-see if it was inside a block or inside an object literal","date":"2018-02-19T06:01:20.675Z","type":"message"}
{"nick":"caridy","reason":"Ping timeout: 264 seconds","date":"2018-02-19T06:01:33.208Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-02-19T06:35:07.152Z","type":"join"}
{"nick":"caridy","date":"2018-02-19T07:05:39.708Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 256 seconds","date":"2018-02-19T07:10:24.678Z","type":"quit"}
