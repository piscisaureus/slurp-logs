{"nick":"AtumT_","reason":"Remote host closed the connection","date":"2018-02-19T00:28:23.682Z","type":"quit"}
{"nick":"jwalden","date":"2018-02-19T00:34:04.387Z","type":"join"}
{"nick":"jschoi","message":"I’m having trouble determining precisely where in the specification is `function f () { super() }` defined as a compile-time syntax error. `super` calls (https://tc39.github.io/ecma262/#sec-super-keyword) are a type of LHS Expression (https://tc39.github.io/ecma262/#sec-left-hand-side-expressions), and neither of their clauses appear to define static early errors.","date":"2018-02-19T01:21:17.350Z","type":"message"}
{"nick":"caridy","date":"2018-02-19T01:22:49.802Z","type":"join"}
{"nick":"not-an-aardvark","message":"jschoi: looks like it's here: https://tc39.github.io/ecma262/#sec-function-definitions-static-semantics-early-errors","date":"2018-02-19T01:44:46.739Z","type":"message"}
{"nick":"not-an-aardvark","message":"> It is a Syntax Error if FunctionBody Contains SuperCall is true.","date":"2018-02-19T01:44:59.039Z","type":"message"}
{"nick":"jschoi","message":"Ah, so it’s in function’s clause; thanks.","date":"2018-02-19T01:48:28.559Z","type":"message"}
{"nick":"jschoi","message":"So that means it would probably be in module’s and script’s respective clauses too…","date":"2018-02-19T01:49:18.086Z","type":"message"}
{"nick":"jschoi","message":"…And there it is https://tc39.github.io/ecma262/#sec-scripts-static-semantics-early-errors. That explains that. Thanks again.","date":"2018-02-19T01:49:32.788Z","type":"message"}
{"nick":"jschoi","message":"…And https://tc39.github.io/ecma262/#sec-performeval for direct eval, right.","date":"2018-02-19T01:51:32.552Z","type":"message"}
{"nick":"jschoi","message":"And function/method definitions override `Contains` so that their body contents are opaque to `Contains`.","date":"2018-02-19T01:52:30.669Z","type":"message"}
{"nick":"jschoi","message":"Except arrow functions, which are transparent for `super`. Got it.","date":"2018-02-19T01:52:46.571Z","type":"message"}
{"nick":"Jamesernator","date":"2018-02-19T02:59:06.937Z","type":"join"}
{"nick":"Jamesernator","reason":"Client Quit","date":"2018-02-19T03:00:53.467Z","type":"quit"}
{"nick":"howdoi","date":"2018-02-19T04:11:31.586Z","type":"join"}
{"nick":"jschoi","message":"What’s done is done, but a comment (https://github.com/tc39/proposal-optional-chaining/issues/5#issuecomment-353884817) made me curious. Any parentheses surrounding the bodies of arrow functions are significant for distinguishing between a object versus a block with a label. This is a foot gun. But the comment refers to it have being unavoidable. In a better world, how would this foot gun have been avoided?","date":"2018-02-19T04:41:02.567Z","type":"message"}
{"nick":"jschoi","message":"That is: `x => ({ y: z })` (returns object) versus `x => { y: z }` (block with labeled statement).","date":"2018-02-19T04:42:06.681Z","type":"message"}
{"nick":"jschoi","message":"ljharb, you made that comment, from last December, so if you happen remember what you thinking about at that time, it would be wonderfully edifying to hear an explanation.","date":"2018-02-19T04:44:50.173Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-02-19T04:50:28.367Z","type":"quit"}
{"nick":"caridy","date":"2018-02-19T04:50:55.883Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 248 seconds","date":"2018-02-19T04:55:27.797Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-02-19T04:55:51.303Z","type":"quit"}
{"nick":"ephemera__","date":"2018-02-19T05:04:46.732Z","type":"join"}
{"nick":"ephemera_","reason":"Ping timeout: 248 seconds","date":"2018-02-19T05:06:41.479Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-02-19T05:35:19.654Z","type":"quit"}
{"nick":"ljharb","message":"jschoi: i would have preferred that labeled blocks be forbidden in an arrow function body (which would have been a weird inconsistency)","date":"2018-02-19T05:44:34.493Z","type":"message"}
{"nick":"jschoi","message":"ljharb: Thanks. Is the inconsistency here the prohibition of labeled blocks or the significance of parentheses around the braces?","date":"2018-02-19T05:50:42.183Z","type":"message"}
{"nick":"caridy","date":"2018-02-19T05:50:48.728Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-19T05:54:57.732Z","type":"quit"}
{"nick":"caridy","date":"2018-02-19T05:56:58.258Z","type":"join"}
{"nick":"ljharb","message":"jschoi: sorry, let me clarify","date":"2018-02-19T05:58:42.723Z","type":"message"}
{"nick":"ljharb","message":"jschoi: the parens force the block/object into expression position, which forces it to be an object. because of the `x => { }` explicit return form, `{ a: b }` has no way to definitively mean \"it's an object\", and so the parser, when it sees the `{`, doesn't have to keep looking forward before it knows if it's a block or an object literal","date":"2018-02-19T06:00:42.755Z","type":"message"}
{"nick":"ljharb","message":"jschoi: so i think that even if labels were banned in arrow function bodies, it'd still amount to a period of parsing time where the engine would have to wait-and-see if it was inside a block or inside an object literal","date":"2018-02-19T06:01:20.675Z","type":"message"}
{"nick":"caridy","reason":"Ping timeout: 264 seconds","date":"2018-02-19T06:01:33.208Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-02-19T06:35:07.152Z","type":"join"}
{"nick":"caridy","date":"2018-02-19T07:05:39.708Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 256 seconds","date":"2018-02-19T07:10:24.678Z","type":"quit"}
{"nick":"caridy","date":"2018-02-19T08:10:26.180Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-19T08:14:35.448Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-02-19T08:23:18.286Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-19T08:24:02.688Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-19T08:43:50.340Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-19T09:07:47.763Z","type":"join"}
{"nick":"caridy","date":"2018-02-19T09:18:00.650Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-19T09:22:10.650Z","type":"quit"}
{"nick":"caridy","date":"2018-02-19T09:48:10.384Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 265 seconds","date":"2018-02-19T09:53:04.372Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-02-19T10:25:19.435Z","type":"quit"}
{"nick":"caridy","date":"2018-02-19T10:44:47.505Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-19T10:49:05.475Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-02-19T11:25:11.284Z","type":"quit"}
{"nick":"mylesborins","date":"2018-02-19T11:25:41.964Z","type":"join"}
{"nick":"caridy","date":"2018-02-19T11:29:46.692Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-19T11:34:10.692Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-19T11:55:53.375Z","type":"quit"}
{"nick":"jschoi","message":"ljharb: Thanks for the clarification. What I’m interested in is when you remarked that the parenthesis significance for arrow-function bodies “should have been unacceptable, and could have been avoided.” How could it have been avoided, if not by forbidding labels in arrow-function blocks?","date":"2018-02-19T12:01:50.513Z","type":"message"}
{"nick":"jschoi","message":"Alternatively, have you changed your mind about the how severity of footgun that parenthesis significance is? After all, if the only other viable solution (for distinguishing `{a: b}` the block from `{a: b}` the object) would have been to forbid labels, then as you point out this too has a possibly severe problem: a large-lookahead, garden-path problem. Have you decided that using significant parentheses was the best","date":"2018-02-19T12:05:41.354Z","type":"message"}
{"nick":"jschoi","message":"choice after all, or is there a third solution to the object-vs.-block problem that was missed?","date":"2018-02-19T12:05:41.354Z","type":"message"}
{"nick":"jschoi","message":"This design question is particularly relevant to that smart-pipe draft I’m working on. For the `body` of a pipeline `head |> body`, “simple references” to functions (i.e., `identifier` or `identifier.identifier` or `identifier.identifier.identifier`...) are distinguished from “topical expressions” (all other expressions which must contain a “topic reference” `#`) by the absence of operators, parentheses,","date":"2018-02-19T12:18:46.647Z","type":"message"}
{"nick":"jschoi","message":"brackets, or braces.","date":"2018-02-19T12:18:46.648Z","type":"message"}
{"nick":"jschoi","message":"It is also an early error if a “topical expression” (that is, a pipeline body that is not a “simple expression”) does not actually contain a “topic reference”. That is, `x |> f(x)` is an early error because `f(x)` is not a simple reference but does not contain `#`. This gets rid of a big footgun; I’m trying to design this so that such footguns are obviated.","date":"2018-02-19T12:19:30.473Z","type":"message"}
{"nick":"jschoi","message":"But parentheses are currently significant around the pipeline body. `x |> (f)` is an early error because `(f)` is not a “simple reference” to a function; therefore it must be a “topical expression”, except that it contains no topic reference `#`, so it’s an error.","date":"2018-02-19T12:21:45.642Z","type":"message"}
{"nick":"jschoi","message":"This situation somewhat resembles arrow functions’ parenthesis significance while distinguishing its own two types of bodies, bare expressions versus blocks. The garden-path parsing constraint is also still there; that’s why the “simple reference” rule is so simple and fails so easily.","date":"2018-02-19T12:23:11.154Z","type":"message"}
{"nick":"jschoi","message":"I hope that the early errors I’m putting in the draft will obviate the syntax’s footguns: they will fail in as many cases of developer-intentional ambiguity I can anticipate. But because of their clear parallel to the problem of arrow-function bodies, I’d be very interested to know what your opinions on what a better syntax for arrow-function bodies would have been.","date":"2018-02-19T12:25:52.038Z","type":"message"}
{"nick":"AtumT","date":"2018-02-19T12:25:54.717Z","type":"join"}
{"nick":"jschoi","message":"Forbidding labels has the garden-path problem. Significant parentheses gives sometimes surprising behavior. Any alternatives? Are significant parentheses the best of a bad pair of solutions?","date":"2018-02-19T12:26:51.136Z","type":"message"}
{"nick":"jschoi","message":"Or perhaps an additional early error?","date":"2018-02-19T12:31:23.428Z","type":"message"}
{"nick":"jschoi","message":"What would have been a better syntax for arrow-function bodies than significant parentheses, in a counterfactual better world?","date":"2018-02-19T12:31:41.861Z","type":"message"}
{"nick":"jmdyck","date":"2018-02-19T12:43:53.365Z","type":"join"}
{"nick":"jschoi","message":"One third possible solution (for distinguish between expression versus block arrow-function bodies) that I see would have been to split the arrow function into two operators like `=>` and `==>`. This would have been a similar solution to the “split-mix” pipe operator proposal.","date":"2018-02-19T12:44:52.423Z","type":"message"}
{"nick":"jschoi","message":"*for distinguishing","date":"2018-02-19T12:45:14.334Z","type":"message"}
{"nick":"caridy","date":"2018-02-19T12:46:03.461Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 248 seconds","date":"2018-02-19T12:50:41.497Z","type":"quit"}
{"nick":"keith_miller","date":"2018-02-19T13:24:12.722Z","type":"join"}
{"nick":"caridy","date":"2018-02-19T13:25:23.373Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 256 seconds","date":"2018-02-19T13:30:11.399Z","type":"quit"}
{"nick":"jmdyck","message":"littledan: ?","date":"2018-02-19T13:48:39.638Z","type":"message"}
{"nick":"caridy","date":"2018-02-19T14:05:45.461Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-19T14:10:05.438Z","type":"quit"}
{"nick":"littledan","message":"jmdyck: What is the question?","date":"2018-02-19T14:10:57.637Z","type":"message"}
{"nick":"jmdyck","message":"hi, was just looking at https://github.com/tc39/ecma262/pull/1102#issuecomment-366656468","date":"2018-02-19T14:11:22.261Z","type":"message"}
{"nick":"littledan","message":"jschoi: I share the concern from other commenters about adding another arrow type adding complexity and confusion","date":"2018-02-19T14:11:55.031Z","type":"message"}
{"nick":"littledan","message":"jmdyck: Yeah, I'd love to hear what you think of that","date":"2018-02-19T14:12:16.514Z","type":"message"}
{"nick":"jmdyck","message":"re \"I think that's what the current patch does.\" It looks to me like the current *spec* handles all three bullets.","date":"2018-02-19T14:12:42.665Z","type":"message"}
{"nick":"jmdyck","message":"the current spec does something different","date":"2018-02-19T14:12:54.508Z","type":"message"}
{"nick":"jmdyck","message":"wah, no, the current *patch* does something different","date":"2018-02-19T14:13:09.273Z","type":"message"}
{"nick":"jschoi","message":"littledan: Noted, thanks. I’ll not actually add it to the draft specification; it’ll be confined to an appendix in the explainer as a potential add on.","date":"2018-02-19T14:14:33.172Z","type":"message"}
{"nick":"jschoi","message":"An add-on to be considered later, that is.","date":"2018-02-19T14:15:18.113Z","type":"message"}
{"nick":"caridy","date":"2018-02-19T14:23:02.492Z","type":"join"}
{"nick":"jmdyck","message":"littledan: also, i was thrown a bit by \"The grammar here only is relevant on non-Unicode RegExps.\" I thought you were talking about the whole Appendix B grammar, but now I think you're only talking about the QuantifiedAssertion production (which is indeed only 'accessible' in non-unicode mode).","date":"2018-02-19T14:24:38.802Z","type":"message"}
{"nick":"littledan","message":"heh! Right","date":"2018-02-19T14:25:06.942Z","type":"message"}
{"nick":"littledan","message":"edited comment for clarity","date":"2018-02-19T14:25:47.158Z","type":"message"}
{"nick":"caridy","reason":"Ping timeout: 248 seconds","date":"2018-02-19T14:27:16.300Z","type":"quit"}
{"nick":"jmdyck","message":"well, you changed it to the B.1.4 grammar, but that's still too large to say that it's only relevant on non-unicode regexps","date":"2018-02-19T14:27:24.363Z","type":"message"}
{"nick":"jmdyck","message":"or, i suppose it depends on what you mean by  'relevant'","date":"2018-02-19T14:27:38.963Z","type":"message"}
{"nick":"jmdyck","message":"the spec requires web browsers to use the B.1.4 grammar in both u and non-u mode, so it's relevant in that sense.","date":"2018-02-19T14:30:27.529Z","type":"message"}
{"nick":"jmdyck","message":"but it also claims that it doesn't extend the main-body syntax+semantics in u mode.","date":"2018-02-19T14:34:45.458Z","type":"message"}
{"nick":"jmdyck","message":"so a browser would supposedly be okay, when implementing u mode, to stick with main-body syntax+semantics.","date":"2018-02-19T14:47:32.384Z","type":"message"}
{"nick":"jmdyck","message":"So there's a sense in which it's relevant and a sense in which it isn't.","date":"2018-02-19T14:47:51.836Z","type":"message"}
{"nick":"jmdyck","message":"littledan: anyhow, re puzzling over [?U] parameters, can you give an example?","date":"2018-02-19T14:49:04.100Z","type":"message"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-02-19T14:59:50.750Z","type":"quit"}
{"nick":"jmdyck","message":"hm, maybe I understand what you mean now.","date":"2018-02-19T15:05:09.442Z","type":"message"}
{"nick":"keith_miller","date":"2018-02-19T15:05:45.334Z","type":"join"}
{"nick":"jmdyck","message":"You're thinking that B.1.4 grammar is 'invoked' only when U is unset. While you might be able to arrange an implementation that way, that's not what the spec is doing. Rather, B.1.4 provides productions that wholly *replace* the corresponding productions from 21.2.1, and thus they have to 'work' for both ~U and +U.","date":"2018-02-19T15:15:07.140Z","type":"message"}
{"nick":"caridy","date":"2018-02-19T15:22:39.473Z","type":"join"}
{"nick":"caridy","reason":"Ping timeout: 240 seconds","date":"2018-02-19T15:27:05.967Z","type":"quit"}
{"nick":"littledan","message":"jmdyck: Oh, that is what I was thinking","date":"2018-02-19T15:38:10.799Z","type":"message"}
{"nick":"littledan","message":"I guess this explains the [U] flags","date":"2018-02-19T15:38:19.428Z","type":"message"}
{"nick":"littledan","message":"so it's like, the grammar might as well only be invoked for [~U], but it's also invoked for [U], just having no effect","date":"2018-02-19T15:39:00.824Z","type":"message"}
{"nick":"jmdyck","message":"hm, don't think so.","date":"2018-02-19T15:39:36.914Z","type":"message"}
{"nick":"jmdyck","message":"I'd say the B.1.4 is 'invoked' (in a browser, of course) for both +U and ~U.","date":"2018-02-19T15:41:20.660Z","type":"message"}
{"nick":"jmdyck","message":"(with a by-the-way that when it's invoked for +U, the syntax you get is the same as if you'd invoked 21.2.1 for +U)","date":"2018-02-19T15:43:15.794Z","type":"message"}
{"nick":"jmdyck","message":"(or: ... the same as if a non-appendix-B implementation invoked 21.2.1 for +U)","date":"2018-02-19T15:45:19.805Z","type":"message"}
{"nick":"jmdyck","message":"I suppose it depends on what you meant by \"having no effect\". If you mean \"having no effect other than what 21.2.1 would have given you\", then yeah, but that's still an effect.","date":"2018-02-19T15:50:43.952Z","type":"message"}
