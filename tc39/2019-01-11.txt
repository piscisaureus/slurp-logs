{"nick":"keith_miller","date":"2019-01-11T00:39:16.297Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-11T00:40:43.389Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T00:46:46.821Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-11T00:59:20.486Z","type":"quit"}
{"nick":"akirose","date":"2019-01-11T01:00:37.826Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T01:02:43.439Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T01:11:54.927Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T01:22:19.123Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T01:26:09.504Z","type":"join"}
{"nick":"keith_mi_","date":"2019-01-11T01:28:35.109Z","type":"join"}
{"nick":"keith_miller","reason":"Ping timeout: 246 seconds","date":"2019-01-11T01:31:06.347Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-01-11T01:32:55.521Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T01:38:15.435Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T01:46:56.538Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T01:54:27.503Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T01:55:03.714Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T02:02:21.416Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T02:21:09.881Z","type":"join"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2019-01-11T02:25:54.506Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T02:26:10.935Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T02:34:07.554Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T02:37:31.963Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T02:54:25.481Z","type":"quit"}
{"nick":"aki_","date":"2019-01-11T03:08:21.307Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2019-01-11T03:09:01.705Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T03:09:02.099Z","type":"nick"}
{"nick":"howdoi","date":"2019-01-11T04:15:59.893Z","type":"join"}
{"nick":"aki_","date":"2019-01-11T05:14:56.540Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2019-01-11T05:15:53.324Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T05:15:53.617Z","type":"nick"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-01-11T05:54:23.008Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-01-11T06:32:53.745Z","type":"quit"}
{"nick":"mgol","date":"2019-01-11T06:39:32.618Z","type":"join"}
{"nick":"Havvy","date":"2019-01-11T06:55:29.473Z","type":"join"}
{"nick":"aki_","date":"2019-01-11T07:20:38.328Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2019-01-11T07:21:40.444Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T07:21:40.785Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-11T08:46:31.701Z","type":"join"}
{"nick":"aki_","date":"2019-01-11T09:26:53.456Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2019-01-11T09:27:47.325Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T09:27:47.607Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T11:00:11.996Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T11:13:45.262Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-11T11:33:44.453Z","type":"quit"}
{"nick":"akirose","date":"2019-01-11T11:36:04.102Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T12:13:39.821Z","type":"quit"}
{"nick":"jmdyck","date":"2019-01-11T13:16:50.697Z","type":"join"}
{"nick":"aki_","date":"2019-01-11T13:42:45.444Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 258 seconds","date":"2019-01-11T13:43:51.092Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T13:43:51.384Z","type":"nick"}
{"nick":"keith_miller","date":"2019-01-11T14:20:34.621Z","type":"join"}
{"nick":"gibson042","date":"2019-01-11T14:29:13.891Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 250 seconds","date":"2019-01-11T14:33:34.869Z","type":"quit"}
{"nick":"gibson042","date":"2019-01-11T14:48:13.469Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 250 seconds","date":"2019-01-11T15:06:04.453Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T15:11:20.038Z","type":"quit"}
{"nick":"gibson042","date":"2019-01-11T15:22:19.488Z","type":"join"}
{"nick":"cloudshu","date":"2019-01-11T15:30:45.702Z","type":"join"}
{"nick":"gibson042","reason":"Ping timeout: 246 seconds","date":"2019-01-11T15:37:52.257Z","type":"quit"}
{"nick":"aki_","date":"2019-01-11T15:49:00.151Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 244 seconds","date":"2019-01-11T15:49:02.445Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T15:49:14.362Z","type":"nick"}
{"nick":"gibson042","date":"2019-01-11T15:53:45.396Z","type":"join"}
{"nick":"mgol","date":"2019-01-11T15:57:39.441Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T16:00:17.301Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T16:17:55.757Z","type":"quit"}
{"nick":"keith_miller","date":"2019-01-11T16:37:37.211Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-11T16:37:37.404Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-11T16:50:39.789Z","type":"join"}
{"nick":"keith_miller","date":"2019-01-11T17:40:26.953Z","type":"join"}
{"nick":"keith_miller","reason":"Client Quit","date":"2019-01-11T17:41:02.138Z","type":"quit"}
{"nick":"aki_","date":"2019-01-11T17:56:09.778Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 258 seconds","date":"2019-01-11T17:56:28.098Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T17:56:28.505Z","type":"nick"}
{"nick":"TabAtkins","message":"Strong agree.","date":"2019-01-11T17:59:02.712Z","type":"message"}
{"nick":"keith_miller","date":"2019-01-11T18:29:12.684Z","type":"join"}
{"nick":"mgol","date":"2019-01-11T18:54:32.999Z","type":"join"}
{"nick":"aki_","date":"2019-01-11T20:02:55.764Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2019-01-11T20:04:12.782Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T20:04:13.015Z","type":"nick"}
{"nick":"jwalden","date":"2019-01-11T20:53:33.820Z","type":"join"}
{"nick":"AtumT_","date":"2019-01-11T21:04:18.842Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 250 seconds","date":"2019-01-11T21:07:28.874Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-11T21:17:31.457Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 268 seconds","date":"2019-01-11T21:19:17.717Z","type":"quit"}
{"nick":"devsnek","message":"wasn't there a proposal about scoped objects or like Symbol.cleanup and whatnot at some point","date":"2019-01-11T21:48:37.649Z","type":"message"}
{"nick":"bradleymeck","message":"you mean objects that appear diff on scope they are accessed in?","date":"2019-01-11T21:50:38.012Z","type":"message"}
{"nick":"bradleymeck","action":"digs about","date":"2019-01-11T21:50:48.013Z","type":"action"}
{"nick":"devsnek","message":"bradleymeck: no like","date":"2019-01-11T21:51:54.892Z","type":"message"}
{"nick":"devsnek","message":"adding a protocol like Symbol.cleanup or something that gets called when an object goes out of scope","date":"2019-01-11T21:52:16.165Z","type":"message"}
{"nick":"devsnek","message":"it was like `use x = {}` or something","date":"2019-01-11T21:52:34.561Z","type":"message"}
{"nick":"bradleymeck","message":"WeakRefs seem to fill that.","date":"2019-01-11T21:52:35.964Z","type":"message"}
{"nick":"devsnek","message":"i think we talked at the july meeting about the syntax of the proposal too","date":"2019-01-11T21:52:57.513Z","type":"message"}
{"nick":"bradleymeck","message":"I don't think RAII style destructors have been talked about in a long time","date":"2019-01-11T21:52:58.534Z","type":"message"}
{"nick":"devsnek","message":"but i can't find anything about it","date":"2019-01-11T21:53:01.185Z","type":"message"}
{"nick":"devsnek","message":"so many i'm crazy","date":"2019-01-11T21:53:10.741Z","type":"message"}
{"nick":"bradleymeck","message":"oh, you mean https://github.com/tc39/proposal-using-statement#readme ?","date":"2019-01-11T21:53:50.407Z","type":"message"}
{"nick":"devsnek","message":"aha yes!","date":"2019-01-11T21:54:04.740Z","type":"message"}
{"nick":"bradleymeck","message":"there was one on scopes where mutations are visible on objects only within specific scopes, but i can't find it","date":"2019-01-11T21:55:16.125Z","type":"message"}
{"nick":"devsnek","message":"that sounds hecky and confusing","date":"2019-01-11T21:55:39.193Z","type":"message"}
{"nick":"bradleymeck","message":"so you could mutate Array.prototype etc. in a specialized scope and it would act diff from other scopes","date":"2019-01-11T21:55:41.772Z","type":"message"}
{"nick":"devsnek","message":"sounds scary","date":"2019-01-11T21:56:13.822Z","type":"message"}
{"nick":"bradleymeck","message":"anything that makes values act diff according to call site is scary to me","date":"2019-01-11T21:58:30.317Z","type":"message"}
{"nick":"devsnek","action":"uses strict","date":"2019-01-11T21:59:43.504Z","type":"action"}
{"nick":"TabAtkins","message":"I really really want a using statement. I use Python's `with` a lot and would love to use it more.","date":"2019-01-11T22:09:04.116Z","type":"message"}
{"nick":"aki_","date":"2019-01-11T22:10:15.133Z","type":"join"}
{"nick":"devsnek","message":"i have concern about the case of creating something that expects to be cleaned up without using `using`","date":"2019-01-11T22:10:41.473Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 272 seconds","date":"2019-01-11T22:11:15.124Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2019-01-11T22:11:15.124Z","type":"nick"}
{"nick":"TabAtkins","message":"You mean, an object designed without thought for `using`?","date":"2019-01-11T22:34:28.722Z","type":"message"}
{"nick":"TabAtkins","message":"You can use adapters for that, like Python's `closing()` that just wraps the object and calls `.close()` on it for you.","date":"2019-01-11T22:35:09.425Z","type":"message"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-11T22:45:03.662Z","type":"quit"}
{"nick":"bradleymeck","message":"improvise, adapt, OOM","date":"2019-01-11T23:13:06.027Z","type":"message"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-01-11T23:15:18.353Z","type":"quit"}
{"nick":"devsnek","message":"lmao bradley","date":"2019-01-11T23:15:33.167Z","type":"message"}
{"nick":"bradleymeck","message":"i think forcing people to use adapters is fine, we have tons of them already for `await`, 🤷","date":"2019-01-11T23:16:24.084Z","type":"message"}
{"nick":"bradleymeck","message":"we just need to be mindful of what people can do w/ the protocol","date":"2019-01-11T23:16:48.956Z","type":"message"}
{"nick":"devsnek","message":"i was kinda talking about the opposite","date":"2019-01-11T23:16:59.341Z","type":"message"}
{"nick":"bradleymeck","message":"i definitely use `await` differently from Promises","date":"2019-01-11T23:17:02.435Z","type":"message"}
{"nick":"devsnek","message":"an object designed to be used with the syntax, that isn't handled by it","date":"2019-01-11T23:17:11.441Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: well any misuse is not something we can control","date":"2019-01-11T23:17:42.983Z","type":"message"}
{"nick":"devsnek","message":"usually you have to explicitly misuse","date":"2019-01-11T23:18:18.851Z","type":"message"}
{"nick":"devsnek","message":"like calling x[Symbol.iterator]()","date":"2019-01-11T23:18:30.204Z","type":"message"}
{"nick":"bradleymeck","message":"the goal is to design stuff so that it isn't trivial to misuse, or in cases that it isn't possible, to do what we can for UX to encourage it to be simple to use","date":"2019-01-11T23:18:37.372Z","type":"message"}
{"nick":"devsnek","message":"you know what you're signing up for","date":"2019-01-11T23:18:37.870Z","type":"message"}
{"nick":"devsnek","message":"but random objects with a cleanup symbol seems iffy","date":"2019-01-11T23:18:56.547Z","type":"message"}
{"nick":"bradleymeck","message":"what do you mean, how do they get the cleanup symbol accidentally?","date":"2019-01-11T23:19:52.409Z","type":"message"}
{"nick":"bradleymeck","message":"plenty of things could want non-runtime based cleanup logic, timers etc. could be wrapped by other objects for example","date":"2019-01-11T23:20:16.604Z","type":"message"}
{"nick":"devsnek","message":"just calling things that expect to be cleaned up without any indication","date":"2019-01-11T23:20:40.829Z","type":"message"}
{"nick":"devsnek","message":"as soon as you allow explicit resource stuff everything has to subscribe to a flow :(","date":"2019-01-11T23:21:02.124Z","type":"message"}
{"nick":"bradleymeck","message":"resource stuff has to be cleaned up anyway, the most common way to cleanup seems fine to carve out","date":"2019-01-11T23:23:19.547Z","type":"message"}
{"nick":"devsnek","message":"i was messing with it in engine262 (with the syntax `ConstructorName identifierName()` as a statement, couldn't remember what the original proposal was) and this was the first thing that popped out to me","date":"2019-01-11T23:24:55.751Z","type":"message"}
{"nick":"bradleymeck","message":"my main concern with `using` is when things get passed outside the `using` scope","date":"2019-01-11T23:26:32.541Z","type":"message"}
{"nick":"bradleymeck","message":"it would be nice if `using` both generated the disposable and consumed it without directly leaking the reference. Symbol.iterator kind of does this","date":"2019-01-11T23:27:16.352Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-01-11T23:29:55.010Z","type":"quit"}
