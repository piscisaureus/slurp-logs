{"nick":"akirose","date":"2018-07-30T00:27:09.353Z","type":"join"}
{"nick":"akirose","reason":"Client Quit","date":"2018-07-30T00:31:01.666Z","type":"quit"}
{"nick":"akirose","date":"2018-07-30T01:33:19.697Z","type":"join"}
{"nick":"akirose","reason":"Client Quit","date":"2018-07-30T01:34:20.319Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-07-30T03:59:36.729Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-07-30T04:04:48.238Z","type":"quit"}
{"nick":"akirose","date":"2018-07-30T04:37:15.260Z","type":"join"}
{"nick":"akirose","reason":"Quit: üëãüèª","date":"2018-07-30T05:06:38.906Z","type":"quit"}
{"nick":"bttf","reason":"Ping timeout: 256 seconds","date":"2018-07-30T06:04:45.601Z","type":"quit"}
{"nick":"bttf","date":"2018-07-30T06:06:48.647Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-07-30T06:09:15.862Z","type":"quit"}
{"nick":"vikash-afk","reason":"Remote host closed the connection","date":"2018-07-30T06:23:55.438Z","type":"quit"}
{"nick":"vikash-afk","date":"2018-07-30T06:38:49.793Z","type":"join"}
{"nick":"akirose","date":"2018-07-30T06:45:03.252Z","type":"join"}
{"nick":"akirose","reason":"Client Quit","date":"2018-07-30T06:46:40.963Z","type":"quit"}
{"nick":"akirose","date":"2018-07-30T06:52:10.037Z","type":"join"}
{"nick":"akirose","reason":"Client Quit","date":"2018-07-30T06:54:09.737Z","type":"quit"}
{"nick":"akoserwa|wfh","date":"2018-07-30T06:58:39.675Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-07-30T10:25:09.737Z","type":"quit"}
{"nick":"mylesborins","date":"2018-07-30T10:25:18.761Z","type":"join"}
{"nick":"jmdyck","date":"2018-07-30T11:05:11.248Z","type":"join"}
{"nick":"akoserwa|wfh","reason":"Remote host closed the connection","date":"2018-07-30T12:26:42.100Z","type":"quit"}
{"nick":"akoserwa|wfh","date":"2018-07-30T12:27:11.242Z","type":"join"}
{"nick":"AtumT","date":"2018-07-30T13:59:16.747Z","type":"join"}
{"nick":"arkain","reason":"Ping timeout: 252 seconds","date":"2018-07-30T15:59:51.610Z","type":"quit"}
{"nick":"akoserwa|wfh","reason":"Quit: Leaving","date":"2018-07-30T16:10:37.619Z","type":"quit"}
{"nick":"devsnek","message":"does the spec ever have optimisations in it","date":"2018-07-30T16:13:12.217Z","type":"message"}
{"nick":"devsnek","message":"like how an engine might have JavaScriptSymbol.IsGlobal() instead of searching the global symbol registry each time","date":"2018-07-30T16:13:35.905Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: generally not since it is intended to be about behavior","date":"2018-07-30T16:14:33.213Z","type":"message"}
{"nick":"bradleymeck","message":"it does sometimes call out when an optimization is expected though","date":"2018-07-30T16:14:42.718Z","type":"message"}
{"nick":"IgnoredAmbience","message":"It has shorthand optimisations","date":"2018-07-30T16:14:46.905Z","type":"message"}
{"nick":"IgnoredAmbience","message":"Which is optimising for size of spectext rather than complexity","date":"2018-07-30T16:15:11.507Z","type":"message"}
{"nick":"devsnek","message":"if a change duplicates spec text should it be abstracted into an abstract op","date":"2018-07-30T16:15:41.665Z","type":"message"}
{"nick":"bradleymeck","message":"if the intent is the same and reused, ideally","date":"2018-07-30T16:16:01.814Z","type":"message"}
{"nick":"bradleymeck","message":"duplication when the intent is not a common operation and is algorithm specific probably should not be abstracted","date":"2018-07-30T16:16:37.213Z","type":"message"}
{"nick":"devsnek","message":"we iterate through the global symbol registry three times in the spec","date":"2018-07-30T16:17:18.431Z","type":"message"}
{"nick":"IgnoredAmbience","message":"Running through my interpreter, the number of times that to/from property descriptor is called is rather staggering","date":"2018-07-30T16:17:53.685Z","type":"message"}
{"nick":"devsnek","message":"each one is different like \"if e.[[Symbol]] is argument then return true\" and \"if e.[[Symbol] is argument then return e.[[Symbol]]\"","date":"2018-07-30T16:18:20.043Z","type":"message"}
{"nick":"IgnoredAmbience","message":"Especially painful when my debugger didn't support stepping over functions","date":"2018-07-30T16:18:24.080Z","type":"message"}
{"nick":"devsnek","message":"heh","date":"2018-07-30T16:18:37.821Z","type":"message"}
{"nick":"devsnek","message":"what do we call a symbol that is in the global registry","date":"2018-07-30T16:19:19.144Z","type":"message"}
{"nick":"devsnek","message":"a global symbol?","date":"2018-07-30T16:19:25.164Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i don't think there's a single terminology for it, but \"global symbol\" is one i've used before","date":"2018-07-30T16:20:10.272Z","type":"message"}
{"nick":"devsnek","message":"i'm gonna call this IsGlobalSymbol","date":"2018-07-30T16:20:35.344Z","type":"message"}
{"nick":"ljharb","message":"and yeah i agree that iterating through the global symbol registry is a good abstract op","date":"2018-07-30T16:20:40.855Z","type":"message"}
{"nick":"ljharb","message":"maybe `IsGlobalRegistrySymbol`, to be verbose","date":"2018-07-30T16:20:57.752Z","type":"message"}
{"nick":"bradleymeck","message":"IgnoredAmbience: is your debugger public (i've not touched your stuff)","date":"2018-07-30T16:24:18.660Z","type":"message"}
{"nick":"IgnoredAmbience","message":"Yes, but somewhat broken","date":"2018-07-30T16:25:01.475Z","type":"message"}
{"nick":"IgnoredAmbience","message":"https://jscert.github.io/jsexplain/branch/es2016-proxies/driver.html","date":"2018-07-30T16:25:23.607Z","type":"message"}
{"nick":"devsnek","message":"is there ever a case where the global symbol registry's [[Key]] is different from a symbol's [[Description]]","date":"2018-07-30T16:26:17.136Z","type":"message"}
{"nick":"IgnoredAmbience","message":"That passes test262 for Proxy support, upto the implemented subset of the language. The interpreter is a fresh rewrite of new spectext bolted to an older ES5 implementation.","date":"2018-07-30T16:26:31.555Z","type":"message"}
{"nick":"devsnek","message":"could we just make GlobalSymbolRegistry hold a list of symbols instead of these records","date":"2018-07-30T16:28:46.758Z","type":"message"}
{"nick":"devsnek","message":"just getting rid of the weird record makes this a lot simpler https://gc.gy/673504009.png","date":"2018-07-30T16:35:21.874Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: I don't think there are cases right now where [[Key]] differs from [[Description]]","date":"2018-07-30T16:46:16.872Z","type":"message"}
{"nick":"TimothyGu","message":"but having a separate [[Key]] is clearer to the implementor","date":"2018-07-30T16:46:28.469Z","type":"message"}
{"nick":"TimothyGu","message":"i.e., \"use a hash table here\"","date":"2018-07-30T16:46:36.120Z","type":"message"}
{"nick":"devsnek","message":"it just seems like a weird abstraction to me","date":"2018-07-30T16:46:39.397Z","type":"message"}
{"nick":"devsnek","message":"hmm that could be true","date":"2018-07-30T16:46:48.686Z","type":"message"}
{"nick":"devsnek","message":"we should probably change from using a List in the spec then","date":"2018-07-30T16:46:58.708Z","type":"message"}
{"nick":"devsnek","message":"right now its in limbo","date":"2018-07-30T16:47:02.702Z","type":"message"}
{"nick":"TimothyGu","message":"nah List is the only spec type the spec has right now","date":"2018-07-30T16:47:38.834Z","type":"message"}
{"nick":"TimothyGu","message":"and it's the easiest way to abstract it","date":"2018-07-30T16:47:46.391Z","type":"message"}
{"nick":"devsnek","message":"isn't Record the map equiv to List","date":"2018-07-30T16:51:54.744Z","type":"message"}
{"nick":"TimothyGu","message":"nah, Record has fixed keys","date":"2018-07-30T16:53:25.857Z","type":"message"}
{"nick":"TimothyGu","message":"but a List of Records with \"key, value\" as fields sounds like a hash table to me","date":"2018-07-30T16:54:21.669Z","type":"message"}
{"nick":"jwalden","date":"2018-07-30T17:50:10.462Z","type":"join"}
{"nick":"AtumT_","date":"2018-07-30T18:06:29.648Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 256 seconds","date":"2018-07-30T18:08:04.748Z","type":"quit"}
{"nick":"Domenic","message":"Solution: 262 should use https://infra.spec.whatwg.org/#data-structures","date":"2018-07-30T18:09:01.904Z","type":"message"}
{"nick":"devsnek","message":"i'm all for it","date":"2018-07-30T18:10:37.231Z","type":"message"}
{"nick":"AtumT","date":"2018-07-30T18:18:01.473Z","type":"join"}
{"nick":"rkirsling","message":"so clean and purty üòç","date":"2018-07-30T18:18:12.733Z","type":"message"}
{"nick":"AtumT_","reason":"Ping timeout: 244 seconds","date":"2018-07-30T18:19:30.640Z","type":"quit"}
{"nick":"TabAtkins","message":"I <3 Infra","date":"2018-07-30T19:36:31.096Z","type":"message"}
{"nick":"TabAtkins","message":"(But yeah, Record is Infra's \"tuple\".)","date":"2018-07-30T19:36:54.793Z","type":"message"}
{"nick":"jmdyck","message":"Record is more like Infra's \"struct\".","date":"2018-07-30T20:58:43.612Z","type":"message"}
{"nick":"jmdyck","message":"since a Record's fields don't have a defined order.","date":"2018-07-30T20:59:38.960Z","type":"message"}
{"nick":"devsnek","message":"so how do we steal the abstract maps from infra","date":"2018-07-30T21:22:45.820Z","type":"message"}
{"nick":"TabAtkins","message":"Ah, you're right.","date":"2018-07-30T21:32:09.146Z","type":"message"}
{"nick":"TabAtkins","message":"devsnek: Just rebase all the algorithms onto a new abstract type system, easy peasy.","date":"2018-07-30T21:32:23.191Z","type":"message"}
{"nick":"akirose","date":"2018-07-30T21:32:57.454Z","type":"join"}
{"nick":"jmdyck","message":"I'm willing to do the edits, if the TC wants it to happen.","date":"2018-07-30T21:39:49.212Z","type":"message"}
{"nick":"devsnek","message":"i've started trying to ink it in","date":"2018-07-30T21:40:24.132Z","type":"message"}
{"nick":"devsnek","message":"inventing a new literal syntax is the hard part so far","date":"2018-07-30T21:40:37.142Z","type":"message"}
{"nick":"devsnek","message":"https://gc.gy/691851363.png","date":"2018-07-30T21:40:56.161Z","type":"message"}
{"nick":"ljharb","message":"let's not be too hasty with massive changes :-p","date":"2018-07-30T21:41:12.916Z","type":"message"}
{"nick":"TabAtkins","message":"All the Infra types have a literal syntax already","date":"2018-07-30T21:41:15.130Z","type":"message"}
{"nick":"devsnek","message":"their literal syntax does stuff we don't","date":"2018-07-30T21:41:56.699Z","type":"message"}
{"nick":"TabAtkins","message":"Ah, sorry, structs don't have literal syntax.","date":"2018-07-30T21:42:06.620Z","type":"message"}
{"nick":"devsnek","message":"ljharb: not like i can commit this directly into 262 :P","date":"2018-07-30T21:42:41.073Z","type":"message"}
{"nick":"rkirsling","message":"you can make a proof of concept called the snekspec","date":"2018-07-30T21:44:47.571Z","type":"message"}
{"nick":"devsnek","message":"heh","date":"2018-07-30T21:45:00.758Z","type":"message"}
{"nick":"jmdyck","message":"(To clarify, I wasn't talking about just abstract maps, but all (or most, or whatever is wanted) of Infra.)","date":"2018-07-30T21:45:03.519Z","type":"message"}
{"nick":"cloudshu","date":"2018-07-30T21:51:57.731Z","type":"join"}
{"nick":"devsnek","message":"hmm using key/value pairs for the global symbol registry still feels awkward","date":"2018-07-30T21:55:20.963Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 248 seconds","date":"2018-07-30T23:40:17.386Z","type":"quit"}
{"nick":"akirose","date":"2018-07-30T23:41:48.719Z","type":"join"}
{"nick":"gkatsev","reason":"Remote host closed the connection","date":"2018-07-30T23:48:20.572Z","type":"quit"}
