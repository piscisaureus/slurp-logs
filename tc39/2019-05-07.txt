{"nick":"cybai","date":"2019-05-07T00:15:16.250Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-05-07T00:34:48.569Z","type":"quit"}
{"nick":"cybai","reason":"Ping timeout: 248 seconds","date":"2019-05-07T00:53:47.315Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2019-05-07T00:57:59.886Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2019-05-07T01:24:23.791Z","type":"quit"}
{"nick":"cybai","date":"2019-05-07T01:28:05.337Z","type":"join"}
{"nick":"Jessidhia","date":"2019-05-07T01:51:15.845Z","type":"join"}
{"nick":"keith_m__","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T02:14:19.318Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-05-07T02:46:25.184Z","type":"join"}
{"nick":"keith_mi_","reason":"Client Quit","date":"2019-05-07T02:50:43.509Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-05-07T02:55:03.285Z","type":"join"}
{"nick":"Jessidhia","reason":"Read error: Connection reset by peer","date":"2019-05-07T02:58:30.903Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-05-07T03:02:49.364Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T03:49:55.436Z","type":"quit"}
{"nick":"howdoi","date":"2019-05-07T03:50:59.793Z","type":"join"}
{"nick":"kpatticha","date":"2019-05-07T03:51:50.271Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-05-07T04:26:03.880Z","type":"quit"}
{"nick":"Jessidhia","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T06:26:57.283Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-05-07T06:28:30.625Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 246 seconds","date":"2019-05-07T07:46:22.352Z","type":"quit"}
{"nick":"kpatticha","date":"2019-05-07T08:01:38.446Z","type":"join"}
{"nick":"kpattich_","date":"2019-05-07T08:04:06.887Z","type":"join"}
{"nick":"kpatticha","reason":"Ping timeout: 252 seconds","date":"2019-05-07T08:06:40.385Z","type":"quit"}
{"nick":"mquy90","date":"2019-05-07T10:51:14.662Z","type":"join"}
{"nick":"Jessidhia","reason":"Ping timeout: 246 seconds","date":"2019-05-07T11:00:51.054Z","type":"quit"}
{"nick":"kpatticha","date":"2019-05-07T11:49:04.100Z","type":"join"}
{"nick":"kpattich_","reason":"Ping timeout: 268 seconds","date":"2019-05-07T11:49:41.829Z","type":"quit"}
{"nick":"jmdyck","date":"2019-05-07T11:50:49.306Z","type":"join"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-05-07T11:54:36.669Z","type":"quit"}
{"nick":"cybai","date":"2019-05-07T11:55:06.410Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 252 seconds","date":"2019-05-07T11:59:30.499Z","type":"quit"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-05-07T12:18:20.026Z","type":"quit"}
{"nick":"cybai","date":"2019-05-07T12:23:08.890Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 268 seconds","date":"2019-05-07T12:27:55.988Z","type":"quit"}
{"nick":"cybai","date":"2019-05-07T12:33:28.265Z","type":"join"}
{"nick":"mgol","reason":"Ping timeout: 245 seconds","date":"2019-05-07T13:10:01.963Z","type":"quit"}
{"nick":"mgol","date":"2019-05-07T13:12:08.181Z","type":"join"}
{"nick":"oliverdunk","date":"2019-05-07T13:15:22.095Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-05-07T13:28:05.870Z","type":"quit"}
{"nick":"andychen","reason":"Remote host closed the connection","date":"2019-05-07T13:30:03.295Z","type":"quit"}
{"nick":"gibson042","date":"2019-05-07T14:19:02.920Z","type":"join"}
{"nick":"Jessidhia","date":"2019-05-07T14:30:11.809Z","type":"join"}
{"nick":"cloudshu","date":"2019-05-07T15:20:56.457Z","type":"join"}
{"nick":"Nimelrian_","date":"2019-05-07T15:25:21.416Z","type":"join"}
{"nick":"mquy90","reason":"Quit: Leaving","date":"2019-05-07T15:27:44.667Z","type":"quit"}
{"nick":"jwalden","date":"2019-05-07T15:38:54.359Z","type":"join"}
{"nick":"AtumT","date":"2019-05-07T15:52:52.967Z","type":"join"}
{"nick":"AtumT_","date":"2019-05-07T16:01:53.131Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 245 seconds","date":"2019-05-07T16:04:36.962Z","type":"quit"}
{"nick":"Domenic","message":"devsnek: what does .enumerate() do","date":"2019-05-07T16:10:10.100Z","type":"message"}
{"nick":"devsnek","message":"Domenic: goes from an iterator of [V1, V2, V3] to [[0, V1], [1, V2], [2, V3]]","date":"2019-05-07T16:10:41.961Z","type":"message"}
{"nick":"devsnek","message":"from my experience with iteration in rust and python its a very useful function","date":"2019-05-07T16:10:58.875Z","type":"message"}
{"nick":"Domenic","message":"Huh. Maybe not the best name.","date":"2019-05-07T16:11:15.260Z","type":"message"}
{"nick":"Domenic","message":"I can see it though","date":"2019-05-07T16:11:21.525Z","type":"message"}
{"nick":"Domenic","message":"I've often had to keep a counter when iterating maps/sets","date":"2019-05-07T16:11:33.747Z","type":"message"}
{"nick":"devsnek","message":"there's an argument that map can replace enumerate","date":"2019-05-07T16:11:56.880Z","type":"message"}
{"nick":"devsnek","message":"but i think having both is okay","date":"2019-05-07T16:12:03.032Z","type":"message"}
{"nick":"devsnek","message":"you'd have to add an index to map","date":"2019-05-07T16:12:53.801Z","type":"message"}
{"nick":"devsnek","message":"and i'm not a fan of map on iterators having an index","date":"2019-05-07T16:13:01.798Z","type":"message"}
{"nick":"Domenic","message":"Yeah, I tend to agree","date":"2019-05-07T16:13:11.739Z","type":"message"}
{"nick":"devsnek","message":"i really need to write all these methods for the async prototype","date":"2019-05-07T16:13:51.697Z","type":"message"}
{"nick":"AtumT","date":"2019-05-07T16:14:34.180Z","type":"join"}
{"nick":"devsnek","message":"maybe we can just bring up \"specifying async generators\" at the june meeting","date":"2019-05-07T16:15:02.924Z","type":"message"}
{"nick":"kpatticha","reason":"Ping timeout: 246 seconds","date":"2019-05-07T16:15:30.080Z","type":"quit"}
{"nick":"AtumT_","reason":"Ping timeout: 255 seconds","date":"2019-05-07T16:15:35.128Z","type":"quit"}
{"nick":"ljharb","message":"if map shouldn’t have an index then why have enumerate? map having an index seems appropriate, even if we don’t call it index","date":"2019-05-07T16:16:07.914Z","type":"message"}
{"nick":"devsnek","message":"iterators don't have well defined starts and ends","date":"2019-05-07T16:16:37.882Z","type":"message"}
{"nick":"devsnek","message":"in a generic sense","date":"2019-05-07T16:16:41.962Z","type":"message"}
{"nick":"devsnek","message":"enumerate explicitly adds a counter","date":"2019-05-07T16:16:48.111Z","type":"message"}
{"nick":"devsnek","message":"but map is just going from value to value, there's no explicit sense of counting there","date":"2019-05-07T16:17:02.851Z","type":"message"}
{"nick":"ljharb","message":"right but i can use enumerate and ignore the counter, so why would i need map","date":"2019-05-07T16:17:33.426Z","type":"message"}
{"nick":"devsnek","message":"enumerate and ignore the counter?","date":"2019-05-07T16:17:48.336Z","type":"message"}
{"nick":"devsnek","message":"enumerate doesn't take a mapfn","date":"2019-05-07T16:17:59.092Z","type":"message"}
{"nick":"devsnek","message":"it just introduces a counter into your iterator chain","date":"2019-05-07T16:18:26.183Z","type":"message"}
{"nick":"ljharb","message":"oh, hm","date":"2019-05-07T16:18:44.745Z","type":"message"}
{"nick":"ljharb","message":"I’d rename it then but i think i get what it’d be for","date":"2019-05-07T16:19:06.362Z","type":"message"}
{"nick":"devsnek","message":"well its called enum or enumerate in other langs","date":"2019-05-07T16:19:45.752Z","type":"message"}
{"nick":"devsnek","message":"i don't want js to be the special kid","date":"2019-05-07T16:19:54.757Z","type":"message"}
{"nick":"ljharb","message":"enumerate in ruby is what it makes me think of","date":"2019-05-07T16:22:53.502Z","type":"message"}
{"nick":"ljharb","message":"other langs have a method called “enumerate” that inject an index into a new lazy iterator?","date":"2019-05-07T16:23:26.661Z","type":"message"}
{"nick":"devsnek","message":"at least python, c#, and rust","date":"2019-05-07T16:23:41.247Z","type":"message"}
{"nick":"devsnek","message":"actually c# has it twice, because such is the way with c#","date":"2019-05-07T16:24:14.416Z","type":"message"}
{"nick":"devsnek","message":"Select and Enumerate","date":"2019-05-07T16:24:19.491Z","type":"message"}
{"nick":"devsnek","message":"ruby apparently calls this `each_with_index`","date":"2019-05-07T16:24:54.897Z","type":"message"}
{"nick":"ljharb","message":"that sounds like a clearer name to me, modulo snake case","date":"2019-05-07T16:25:11.740Z","type":"message"}
{"nick":"ljharb","message":"or just “withIndex()” taking no arguments","date":"2019-05-07T16:25:31.292Z","type":"message"}
{"nick":"devsnek","message":"perhaps","date":"2019-05-07T16:25:59.474Z","type":"message"}
{"nick":"vikash-afk","reason":"Ping timeout: 244 seconds","date":"2019-05-07T16:31:48.516Z","type":"quit"}
{"nick":"vikash-afk","date":"2019-05-07T16:34:26.350Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T16:38:14.450Z","type":"quit"}
{"nick":"rkirsling","message":"Ruby's probably not the best go-to for standard namings of things, hehe","date":"2019-05-07T16:42:08.042Z","type":"message"}
{"nick":"ljharb","message":"perhaps, but “enumerate” already has a meaning in js and “add an index” isn’t it","date":"2019-05-07T16:49:00.301Z","type":"message"}
{"nick":"devsnek","message":"everything has seven meanings","date":"2019-05-07T16:49:29.960Z","type":"message"}
{"nick":"rkirsling","message":"ljharb: yeah I suppose that's fair","date":"2019-05-07T16:50:00.100Z","type":"message"}
{"nick":"ljharb","message":"devsnek: xkcd standards dot jpg","date":"2019-05-07T16:50:19.561Z","type":"message"}
{"nick":"oliverdunk","reason":"Ping timeout: 255 seconds","date":"2019-05-07T16:57:53.193Z","type":"quit"}
{"nick":"rkirsling","message":"I think the conception is less about \"adding an index\" and more about \"counting off the list items\" (i.e. enumerating them), but it's tricky when you've got an `enumerable` property so fundamental to the language that indicates not ability to *be* an enumeration but rather ability to be *included* in an enumeration","date":"2019-05-07T16:58:06.526Z","type":"message"}
{"nick":"devsnek","message":"oh yeah that thing","date":"2019-05-07T16:59:12.350Z","type":"message"}
{"nick":"rkirsling","message":"never thought about how unfortunate that name choice is until now","date":"2019-05-07T17:02:34.811Z","type":"message"}
{"nick":"ljharb","message":"but also, \"enumerate\" is a verb that describes what `.forEach` and friends does.","date":"2019-05-07T17:04:37.424Z","type":"message"}
{"nick":"ljharb","message":"the index is already there, it's not added by the verb","date":"2019-05-07T17:04:53.793Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-05-07T17:06:00.853Z","type":"quit"}
{"nick":"rkirsling","message":"yeah but that's not in conflict","date":"2019-05-07T17:06:01.746Z","type":"message"}
{"nick":"rkirsling","message":"if your collection has a `.forEach` method then there's nothing further to do, right?","date":"2019-05-07T17:06:24.865Z","type":"message"}
{"nick":"cybai","date":"2019-05-07T17:06:37.420Z","type":"join"}
{"nick":"rkirsling","message":"though that is admittedly different from the other languages mentioned given the dynamicness of \"hey there's a second param here if you want it\"","date":"2019-05-07T17:10:32.598Z","type":"message"}
{"nick":"cybai","reason":"Ping timeout: 252 seconds","date":"2019-05-07T17:10:48.443Z","type":"quit"}
{"nick":"rkirsling","message":"in the others, iterating over a list would just give you the items and you'd need to explicit request to get tuples instead","date":"2019-05-07T17:11:47.188Z","type":"message"}
{"nick":"ljharb","message":"what would happen with `['a', 'b', 'c'].entries().withIndex().withIndex()`? would it just keep nesting deeper entries each time?","date":"2019-05-07T17:14:03.486Z","type":"message"}
{"nick":"rkirsling","message":"ha, hadn't thought to try that before, but yeah, Python and Rust give `[(0, (0, 'a')), (1, (1, 'b')), (2, (2, 'c'))]`","date":"2019-05-07T17:19:08.894Z","type":"message"}
{"nick":"rkirsling","message":"(if you make a list out of it again that is)","date":"2019-05-07T17:19:30.107Z","type":"message"}
{"nick":"mgol","date":"2019-05-07T17:28:03.079Z","type":"join"}
{"nick":"keith_mi_","date":"2019-05-07T17:30:49.046Z","type":"join"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-05-07T17:40:46.000Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-05-07T17:41:06.929Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T17:46:26.356Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-05-07T17:48:00.371Z","type":"join"}
{"nick":"gibson042","message":"is the idea here something like `%IteratorPrototype%.withIndex = function*(){ let i=0; for(let v of this) yield [i++, v] }`?","date":"2019-05-07T17:58:26.036Z","type":"message"}
{"nick":"gibson042","message":"or maybe `%IteratorPrototype%.map = (call => function*(callbackfn, thisarg){ let i=0; for(let v of this) yield call(callbackfn, thisarg, v, i++, this) })(Function.prototype.call.bind(Function.prototype.call))`?","date":"2019-05-07T17:58:26.185Z","type":"message"}
{"nick":"ljharb","message":"gibson042: for withIndex, yes","date":"2019-05-07T17:59:34.870Z","type":"message"}
{"nick":"ljharb","message":"harder for me to parse that latter one","date":"2019-05-07T17:59:45.747Z","type":"message"}
{"nick":"gibson042","message":"the latter is analogous to Array.prototype.map; it would be used like e.g. `str[Symbol.iterator]().map((codePoint, cpIndex) => …)`","date":"2019-05-07T18:03:40.499Z","type":"message"}
{"nick":"gibson042","message":"or perhaps more appropriately, `.map((element, index) => [index, element])` (which is identical to withIndex)","date":"2019-05-07T18:05:33.156Z","type":"message"}
{"nick":"ljharb","message":"gotcha","date":"2019-05-07T18:05:39.561Z","type":"message"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2019-05-07T18:10:56.271Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-05-07T18:11:45.237Z","type":"join"}
{"nick":"Domenic","message":"I think there's a larger discussion as to whether we think generic iterators have indices or not","date":"2019-05-07T18:14:22.728Z","type":"message"}
{"nick":"Domenic","message":"If we said they have indices then lots of operations become more applicable, e.g. findIndex, indexOf, ...","date":"2019-05-07T18:15:07.660Z","type":"message"}
{"nick":"rkirsling","message":"I really think \"index\" might be the wrong word in that case (Rust and Python docs just say \"(iteration) count\", say) -- 'cause the output from a generator, say, can be counted but that doesn't mean it's an indexed collection","date":"2019-05-07T18:30:14.070Z","type":"message"}
{"nick":"cybai","date":"2019-05-07T18:35:28.397Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 248 seconds","date":"2019-05-07T18:39:55.416Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T18:40:46.012Z","type":"quit"}
{"nick":"Nimelrian_","reason":"Ping timeout: 252 seconds","date":"2019-05-07T18:46:30.421Z","type":"quit"}
{"nick":"Nimelrian_","date":"2019-05-07T18:49:03.307Z","type":"join"}
{"nick":"Nimelrian_","reason":"Read error: Connection reset by peer","date":"2019-05-07T18:49:31.693Z","type":"quit"}
{"nick":"ljharb","message":"i mean sure, but it's basically just a zero-based counter","date":"2019-05-07T18:53:11.500Z","type":"message"}
{"nick":"keith_mi_","date":"2019-05-07T18:53:12.395Z","type":"join"}
{"nick":"ljharb","message":"`.withEventualIndexWhenSpreadIntoAnArray`","date":"2019-05-07T18:53:27.474Z","type":"message"}
{"nick":"Domenic","message":"I don't think making a distinction between indices and iteration count is useful","date":"2019-05-07T18:54:05.217Z","type":"message"}
{"nick":"ljharb","message":"i agree, but i don't think `.withIndex` would need to imply that generic iterators have indices either","date":"2019-05-07T18:55:40.423Z","type":"message"}
{"nick":"Bakkot","message":"Domenic: +1 to larger discussion about whether iterators have indices","date":"2019-05-07T18:55:48.601Z","type":"message"}
{"nick":"Domenic","message":"+1 ljharb. But if we changed iterator.map(el => ...) to iterator.map((el, index) => ...) then I think we're in the larger-discussion territory.","date":"2019-05-07T18:56:27.684Z","type":"message"}
{"nick":"ljharb","message":"fair point, agreed!","date":"2019-05-07T18:56:52.963Z","type":"message"}
{"nick":"ljharb","message":"`.withIndex().map` is simple enough, assuming the methods are lazy","date":"2019-05-07T18:57:11.127Z","type":"message"}
{"nick":"Bakkot","message":"I tend to think iterators do have indices, but that is maybe my math background leaking in (\"has an iterator\" means \"enumerable\" means \"has a bijection with N\" means \"has indices\")","date":"2019-05-07T18:57:19.365Z","type":"message"}
{"nick":"Domenic","message":"I tend to think so too, but people get really upset when I suggest sets have indices","date":"2019-05-07T18:57:42.213Z","type":"message"}
{"nick":"Bakkot","message":"bah","date":"2019-05-07T18:57:53.314Z","type":"message"}
{"nick":"ljharb","message":"some people get upset when i remind them that JS Sets have an explicit ordering too","date":"2019-05-07T18:57:59.967Z","type":"message"}
{"nick":"Bakkot","message":"abstract sets don't, but JS's Sets do","date":"2019-05-07T18:58:05.895Z","type":"message"}
{"nick":"ljharb","message":"right","date":"2019-05-07T18:58:08.916Z","type":"message"}
{"nick":"Bakkot","message":"(aside: that reminds me I gotta get on specing for-in order for this meeting)","date":"2019-05-07T18:58:25.526Z","type":"message"}
{"nick":"Domenic","message":"While we're all here, anyone have any suggested fun examples for JSON modules? Along the lines of https://html.spec.whatwg.org/multipage/scripting.html#script-type-module-example-2","date":"2019-05-07T18:59:27.248Z","type":"message"}
{"nick":"Domenic","message":"Otherwise I'm just gonna import a config file","date":"2019-05-07T18:59:39.308Z","type":"message"}
{"nick":"ljharb","message":"Domenic: we use a JSON file for translation phrases in airbnb, so we effectively have `import Polyglot from 'node-polyglot'; import phrases from './phrases.json'; const p = new Polyglot(); p.extend(phrases);` altho i suppose that's also a config file","date":"2019-05-07T19:01:01.081Z","type":"message"}
{"nick":"Bakkot","message":"Domenic: https://catalog.data.gov/dataset?res_format=JSON","date":"2019-05-07T19:01:09.107Z","type":"message"}
{"nick":"oliverdunk","date":"2019-05-07T19:01:13.046Z","type":"join"}
{"nick":"Domenic","message":"Oooh these are both nice.","date":"2019-05-07T19:01:22.969Z","type":"message"}
{"nick":"Domenic","message":"What is a fun open data set... i.e. not vehicle crash deaths...","date":"2019-05-07T19:02:12.483Z","type":"message"}
{"nick":"Jessidhia","reason":"Disconnected by services","date":"2019-05-07T19:02:52.335Z","type":"quit"}
{"nick":"Jessidhia","date":"2019-05-07T19:02:53.431Z","type":"join"}
{"nick":"Domenic","message":"https://github.com/jdorfman/awesome-json-datasets","date":"2019-05-07T19:02:57.290Z","type":"message"}
{"nick":"Domenic","message":"I think I'll go with people in space right now http://api.open-notify.org/astros.json","date":"2019-05-07T19:03:26.399Z","type":"message"}
{"nick":"Bakkot","message":"spaaaace","date":"2019-05-07T19:03:53.231Z","type":"message"}
{"nick":"Bakkot","message":"if you want to be meta, https://github.com/mdn/browser-compat-data/tree/master/javascript","date":"2019-05-07T19:03:56.340Z","type":"message"}
{"nick":"Domenic","message":"Oh wow that's tempting hrm","date":"2019-05-07T19:04:08.548Z","type":"message"}
{"nick":"Domenic","message":"But without rawgit there are no headers","date":"2019-05-07T19:04:17.105Z","type":"message"}
{"nick":"ljharb","message":"i found raw.githack.com that can replace it","date":"2019-05-07T19:04:44.965Z","type":"message"}
{"nick":"Domenic","message":"Nice find. Probably not good to put in the HTML spec, but I'll still use it.","date":"2019-05-07T19:05:16.152Z","type":"message"}
{"nick":"bradleymeck","message":"Domenic: JSON translations are also used at GoDaddy similarly","date":"2019-05-07T19:06:00.846Z","type":"message"}
{"nick":"bradleymeck","message":"we do have configs per env as well but that would combine import() as well which idk if is desired","date":"2019-05-07T19:06:49.211Z","type":"message"}
{"nick":"oliverdunk","reason":"Ping timeout: 250 seconds","date":"2019-05-07T19:35:38.948Z","type":"quit"}
{"nick":"oliverdunk","date":"2019-05-07T19:45:46.338Z","type":"join"}
{"nick":"rkirsling","message":"Bakkot: your math explanation makes a lot of sense -- I think for me it's that the act of iteration is imperative / temporal and so such an \"index\" would have to be a time, whereas an index in a collection is a location. it's convenient that math and FP can just step outside of time and view those as the same, but yeah 😅","date":"2019-05-07T19:46:31.592Z","type":"message"}
{"nick":"rkirsling","message":"(anyway I'm not really objecting to `withIndex`, it's just the implication that `indexOf` would follow that felt like \"whoa hang on a sec\")","date":"2019-05-07T19:48:40.650Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T19:58:53.291Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T20:12:07.625Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-05-07T20:35:39.364Z","type":"join"}
{"nick":"Bakkot","message":"`indexOf` is super weird for iterators, because they represented ephemeral streams","date":"2019-05-07T20:38:57.787Z","type":"message"}
{"nick":"Bakkot","message":"getting an index into an ephemeral stream is not generally a useful thing to do","date":"2019-05-07T20:39:09.230Z","type":"message"}
{"nick":"oliverdunk","reason":"Ping timeout: 248 seconds","date":"2019-05-07T20:39:23.479Z","type":"quit"}
{"nick":"rkirsling","message":"right! ephemeral is the perfect word","date":"2019-05-07T20:43:57.464Z","type":"message"}
{"nick":"devsnek","message":"i'm not a fan of map having an index","date":"2019-05-07T21:04:25.087Z","type":"message"}
{"nick":"devsnek","message":"i think you should be explicit to introduce a counter","date":"2019-05-07T21:04:38.969Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: i agree that an iterator over X where X has indices would mean that the items of that iterator also technically have indices","date":"2019-05-07T21:06:26.687Z","type":"message"}
{"nick":"Bakkot","message":"devsnek: that's not really the case I was talking about","date":"2019-05-07T21:06:50.107Z","type":"message"}
{"nick":"Bakkot","message":"was talking about arbitrary iterators","date":"2019-05-07T21:06:56.455Z","type":"message"}
{"nick":"devsnek","message":"you could also say \"this is the fifth item this map iterator has seen\"","date":"2019-05-07T21:07:29.445Z","type":"message"}
{"nick":"devsnek","message":"but it seems rather arbitrary to me","date":"2019-05-07T21:07:33.265Z","type":"message"}
{"nick":"devsnek","message":"and other languages seem to agree","date":"2019-05-07T21:07:39.382Z","type":"message"}
{"nick":"devsnek","message":"map iterator being iterator.map() not Map.p.values()","date":"2019-05-07T21:07:59.750Z","type":"message"}
{"nick":"gibson042","reason":"Quit: Leaving.","date":"2019-05-07T21:24:06.608Z","type":"quit"}
{"nick":"cybai","date":"2019-05-07T21:36:43.397Z","type":"join"}
{"nick":"cybai","reason":"Read error: Connection reset by peer","date":"2019-05-07T21:38:25.146Z","type":"quit"}
{"nick":"cybai","date":"2019-05-07T21:38:51.373Z","type":"join"}
{"nick":"cybai_","date":"2019-05-07T21:42:29.440Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 248 seconds","date":"2019-05-07T21:43:23.272Z","type":"quit"}
{"nick":"cybai_","reason":"Ping timeout: 248 seconds","date":"2019-05-07T21:46:35.285Z","type":"quit"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T22:44:29.059Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-05-07T22:47:55.630Z","type":"join"}
{"nick":"keith_mi_","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-07T23:28:29.595Z","type":"quit"}
{"nick":"keith_mi_","date":"2019-05-07T23:38:37.716Z","type":"join"}
{"nick":"gibson042","date":"2019-05-07T23:55:45.347Z","type":"join"}
