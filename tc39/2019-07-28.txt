{"nick":"rkirsling","message":"(tfw you don't know which experiment to choose next)","date":"2019-07-28T00:00:08.691Z","type":"message"}
{"nick":"devsnek","message":"this is kinda why i made engine262","date":"2019-07-28T00:00:24.886Z","type":"message"}
{"nick":"devsnek","message":"it lets you just totally mess around","date":"2019-07-28T00:00:43.868Z","type":"message"}
{"nick":"devsnek","message":"success! https://gc.gy/31977212.png","date":"2019-07-28T00:03:33.031Z","type":"message"}
{"nick":"underikar","reason":"Ping timeout: 258 seconds","date":"2019-07-28T00:04:11.195Z","type":"quit"}
{"nick":"rkirsling","message":"heheh","date":"2019-07-28T00:04:52.398Z","type":"message"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-07-28T00:05:37.308Z","type":"quit"}
{"nick":"mathiasbynens","reason":"Ping timeout: 252 seconds","date":"2019-07-28T00:07:42.161Z","type":"quit"}
{"nick":"underikar","date":"2019-07-28T00:08:07.795Z","type":"join"}
{"nick":"mathiasbynens","date":"2019-07-28T00:09:55.076Z","type":"join"}
{"nick":"devsnek","message":"ok now i've got it parsing optional chaining as normal","date":"2019-07-28T00:17:42.039Z","type":"message"}
{"nick":"devsnek","message":"rkirsling: is `this?.#test` allowed","date":"2019-07-28T00:21:47.646Z","type":"message"}
{"nick":"rkirsling","message":"believe so","date":"2019-07-28T00:47:20.971Z","type":"message"}
{"nick":"ljharb","message":"i hope so, but it's worth noting that only prevents an error when `this` is nullish; it will still throw if `this` lacks the `#test` field","date":"2019-07-28T00:48:31.693Z","type":"message"}
{"nick":"rkirsling","message":"yup","date":"2019-07-28T00:49:08.454Z","type":"message"}
{"nick":"devsnek","message":"i'm glad to hear this, because parsing would become a lot more complex otherwise","date":"2019-07-28T00:52:06.643Z","type":"message"}
{"nick":"ErrorIsNullError","date":"2019-07-28T01:09:21.776Z","type":"join"}
{"nick":"devsnek","message":"property access is working but calls aren't parsing for some unknown reason ;(","date":"2019-07-28T01:11:12.644Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-28T01:12:02.858Z","type":"quit"}
{"nick":"haxjs_","date":"2019-07-28T01:12:57.680Z","type":"quit"}
{"nick":"devsnek","message":"rkirsling: do you mind if I borrow the tests from your patch","date":"2019-07-28T01:18:09.455Z","type":"message"}
{"nick":"rkirsling","message":"not at all","date":"2019-07-28T01:18:17.450Z","type":"message"}
{"nick":"devsnek","message":"grazie","date":"2019-07-28T01:19:11.039Z","type":"message"}
{"nick":"cybai","reason":"Remote host closed the connection","date":"2019-07-28T01:31:54.272Z","type":"quit"}
{"nick":"cybai","date":"2019-07-28T01:32:33.721Z","type":"join"}
{"nick":"cybai","reason":"Ping timeout: 250 seconds","date":"2019-07-28T01:36:59.762Z","type":"quit"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-28T02:59:45.735Z","type":"quit"}
{"nick":"devsnek","message":"does `a?.b()` still perform the call if a is nullish?","date":"2019-07-28T03:11:53.073Z","type":"message"}
{"nick":"devsnek","message":"as far as i can tell that parses as a?.b and then that whole thing is a call expression","date":"2019-07-28T03:12:10.576Z","type":"message"}
{"nick":"rkirsling","message":"it does not","date":"2019-07-28T03:20:43.263Z","type":"message"}
{"nick":"rkirsling","message":"i.e. it's not `(a?.b)()`","date":"2019-07-28T03:20:52.009Z","type":"message"}
{"nick":"rkirsling","message":"the base is just `a`","date":"2019-07-28T03:21:07.249Z","type":"message"}
{"nick":"rkirsling","message":"and the whole thing is an OptionalExpression","date":"2019-07-28T03:21:27.986Z","type":"message"}
{"nick":"devsnek","message":"hmmm","date":"2019-07-28T03:22:33.142Z","type":"message"}
{"nick":"devsnek","message":"i have no idea how to approach this","date":"2019-07-28T03:22:43.930Z","type":"message"}
{"nick":"devsnek","message":"i have an ast sort of like `Call(a?.b, [])`","date":"2019-07-28T03:23:16.034Z","type":"message"}
{"nick":"rkirsling","message":"it's quite tricky","date":"2019-07-28T03:23:32.612Z","type":"message"}
{"nick":"rkirsling","message":"but I still feel like piping the \"optionalness\" through the existing AST structure is not the right way","date":"2019-07-28T03:24:14.326Z","type":"message"}
{"nick":"devsnek","message":"wdym","date":"2019-07-28T03:24:26.301Z","type":"message"}
{"nick":"devsnek","message":"like adding an \"optional\" prop to a member expression node?","date":"2019-07-28T03:24:43.813Z","type":"message"}
{"nick":"rkirsling","message":"like I'd still rather have a parent node that let's you make the short circuit in one jump, if at all possible","date":"2019-07-28T03:25:09.772Z","type":"message"}
{"nick":"devsnek","message":"hmmmmmmm","date":"2019-07-28T03:25:52.361Z","type":"message"}
{"nick":"devsnek","message":"not a bad idea","date":"2019-07-28T03:26:07.120Z","type":"message"}
{"nick":"devsnek","message":"i just have no idea how to do this call","date":"2019-07-28T03:26:18.539Z","type":"message"}
{"nick":"rkirsling","message":"instead of having `a?.b.c` be the same as `(a?.b).c` but carrying some extra data so that you know when `undefined` is an error and when it isn't","date":"2019-07-28T03:26:51.792Z","type":"message"}
{"nick":"rkirsling","message":"a few hours ago I was worried that I'd have to go back to square one and try that but still hoping not","date":"2019-07-28T03:27:30.300Z","type":"message"}
{"nick":"devsnek","message":"i made the same mistake with calls in my toy language","date":"2019-07-28T03:29:29.238Z","type":"message"}
{"nick":"devsnek","message":"i guess i can read babel","date":"2019-07-28T03:30:16.622Z","type":"message"}
{"nick":"ErrorIsNullError","date":"2019-07-28T03:31:10.578Z","type":"join"}
{"nick":"rkirsling","message":"I've been avoiding doing so, hehehe","date":"2019-07-28T03:31:44.355Z","type":"message"}
{"nick":"devsnek","message":"rkirsling: when you parse a?.b() in babel, you get an OptionalCallExpression with the callee being an OptionalMemberExpression","date":"2019-07-28T03:35:20.725Z","type":"message"}
{"nick":"devsnek","message":"but here's the trick","date":"2019-07-28T03:35:23.641Z","type":"message"}
{"nick":"devsnek","message":"OptionalMemberExpression also has an optional property","date":"2019-07-28T03:35:32.399Z","type":"message"}
{"nick":"devsnek","message":"so a?.b() is OptionalMemberExpression with optional true","date":"2019-07-28T03:35:41.205Z","type":"message"}
{"nick":"devsnek","message":"a?.b.c() is OptionalMemberExpression with optional false","date":"2019-07-28T03:35:49.121Z","type":"message"}
{"nick":"rkirsling","message":"wowsers","date":"2019-07-28T03:36:37.103Z","type":"message"}
{"nick":"devsnek","message":"so really two flags","date":"2019-07-28T03:36:57.462Z","type":"message"}
{"nick":"rkirsling","message":"yeah I mean maybe I'm being too conservative about adding nodes right now","date":"2019-07-28T03:37:03.976Z","type":"message"}
{"nick":"devsnek","message":"short_circuits and child_of_optional_chain","date":"2019-07-28T03:37:26.648Z","type":"message"}
{"nick":"ErrorIsNullError","reason":"Quit: Leaving.","date":"2019-07-28T03:49:38.336Z","type":"quit"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2019-07-28T04:23:55.969Z","type":"quit"}
{"nick":"laughinghan","date":"2019-07-28T05:18:34.772Z","type":"join"}
{"nick":"laughinghan","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-07-28T05:27:25.113Z","type":"quit"}
{"nick":"devsnek","message":"rkirsling: i figured out a way to do this that only uses a single jump label, basically add a property to member expressions and calls saying if they are short circuiting, then wrap the root in an \"optional chain\" node. when you visit an optional chain node, make a new jump label, push it onto an optional chain jump label stack, and then stack.top() as the target for optional chain null jumps.","date":"2019-07-28T05:31:42.071Z","type":"message"}
{"nick":"rkirsling","message":"wow","date":"2019-07-28T05:32:22.583Z","type":"message"}
{"nick":"devsnek","message":"no idea how to do this in v8","date":"2019-07-28T05:32:37.399Z","type":"message"}
{"nick":"devsnek","message":"but i got it working in slither","date":"2019-07-28T05:32:43.770Z","type":"message"}
{"nick":"rkirsling","message":"cool","date":"2019-07-28T05:32:48.299Z","type":"message"}
{"nick":"rkirsling","message":"so you're saying you'd just evaluate member/call exprs normally otherwise?","date":"2019-07-28T05:34:08.296Z","type":"message"}
{"nick":"rkirsling","message":"that's really enticing","date":"2019-07-28T05:34:21.478Z","type":"message"}
{"nick":"devsnek","message":"yeah you don't even need to jump over individual member expressions","date":"2019-07-28T05:34:37.825Z","type":"message"}
{"nick":"rkirsling","message":"the thing kicking my ass right now is just how intricate the menagerie of function call nodes is","date":"2019-07-28T05:34:45.079Z","type":"message"}
{"nick":"devsnek","message":"yeah i dunno how well the theory meshes with real-world engines","date":"2019-07-28T05:35:08.981Z","type":"message"}
{"nick":"devsnek","message":"but we can dream :)","date":"2019-07-28T05:35:17.867Z","type":"message"}
{"nick":"rkirsling","message":"I'm scared to copy-paste too much because keeping it all in sync over time sounds like a maintainability nightmare","date":"2019-07-28T05:35:38.013Z","type":"message"}
{"nick":"devsnek","message":"that's basically the point i got to","date":"2019-07-28T05:35:57.980Z","type":"message"}
{"nick":"devsnek","message":"in v8 i had like three different versions of MemberExpression : MemberExpression . Identifier","date":"2019-07-28T05:36:22.485Z","type":"message"}
{"nick":"rkirsling","message":"https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/bytecompiler/NodesCodegen.cpp#L1326-L1538","date":"2019-07-28T05:38:29.550Z","type":"message"}
{"nick":"rkirsling","message":"dot-access-and-call is three nodes amounting to over 200 lines","date":"2019-07-28T05:38:58.188Z","type":"message"}
{"nick":"devsnek","message":"so many specializations :fear:","date":"2019-07-28T05:39:15.404Z","type":"message"}
{"nick":"rkirsling","message":"I weep","date":"2019-07-28T05:39:17.108Z","type":"message"}
{"nick":"rkirsling","message":"that's why I've been stuck in think-and-not-do mode today","date":"2019-07-28T05:41:14.987Z","type":"message"}
{"nick":"rkirsling","message":"'cause copy-pasting all of that is out of the question","date":"2019-07-28T05:41:43.771Z","type":"message"}
{"nick":"devsnek","message":"who would've thought a simple null check would be so hard :(","date":"2019-07-28T05:43:53.429Z","type":"message"}
{"nick":"rkirsling","message":"srsly","date":"2019-07-28T05:44:10.146Z","type":"message"}
{"nick":"rkirsling","message":"hmmmmm","date":"2019-07-28T05:47:05.070Z","type":"message"}
{"nick":"rkirsling","message":"I wonder if passing the label down instead of the pre-evaluated base would do the trick","date":"2019-07-28T05:48:17.471Z","type":"message"}
{"nick":"rkirsling","message":"(*instead of the register for the)","date":"2019-07-28T05:49:07.421Z","type":"message"}
{"nick":"devsnek","message":"apparently a label in v8 can only have one referencing jump","date":"2019-07-28T05:49:13.612Z","type":"message"}
{"nick":"rkirsling","message":"interesting. is that a problem here though?","date":"2019-07-28T05:50:00.144Z","type":"message"}
{"nick":"devsnek","message":"well in `a?.b?.c`","date":"2019-07-28T05:50:26.311Z","type":"message"}
{"nick":"devsnek","message":"there are two jumps referencing the end null label","date":"2019-07-28T05:50:41.450Z","type":"message"}
{"nick":"rkirsling","message":"I was viewing it as `(a?.b)?.c`","date":"2019-07-28T05:51:30.702Z","type":"message"}
{"nick":"devsnek","message":"i guess","date":"2019-07-28T05:52:05.467Z","type":"message"}
{"nick":"rkirsling","message":"so I think you're preoptimizing there :)","date":"2019-07-28T05:52:06.340Z","type":"message"}
{"nick":"devsnek","message":"in theory its a lot simpler to just have the one label","date":"2019-07-28T05:52:33.877Z","type":"message"}
{"nick":"rkirsling","message":"hmm...faster, for sure, but I hadn't thought of it as simpler","date":"2019-07-28T05:53:59.184Z","type":"message"}
{"nick":"Nimelrian","date":"2019-07-28T07:45:19.028Z","type":"join"}
