{"nick":"mattijs","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T00:00:26.395Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T00:10:22.570Z","type":"quit"}
{"nick":"mattijs","date":"2018-03-09T00:15:56.140Z","type":"join"}
{"nick":"keith_miller","date":"2018-03-09T00:16:49.321Z","type":"join"}
{"nick":"mattijs","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T00:27:09.379Z","type":"quit"}
{"nick":"mattijs","date":"2018-03-09T00:28:14.064Z","type":"join"}
{"nick":"mattijs","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T00:45:26.920Z","type":"quit"}
{"nick":"mattijs","date":"2018-03-09T00:55:03.817Z","type":"join"}
{"nick":"mattijs","reason":"Client Quit","date":"2018-03-09T00:58:59.359Z","type":"quit"}
{"nick":"devsnek","message":"has tc39 ever had like observers or something similar at meetings","date":"2018-03-09T01:03:51.168Z","type":"message"}
{"nick":"ljharb","message":"sure","date":"2018-03-09T01:06:03.057Z","type":"message"}
{"nick":"mattijs","date":"2018-03-09T01:13:33.487Z","type":"join"}
{"nick":"mattijs_","date":"2018-03-09T01:15:13.759Z","type":"join"}
{"nick":"devsnek","message":"have they ever been high school students ðŸ‘€","date":"2018-03-09T01:16:42.328Z","type":"message"}
{"nick":"mattijs","reason":"Ping timeout: 240 seconds","date":"2018-03-09T01:17:35.502Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T01:17:37.910Z","type":"quit"}
{"nick":"ljharb","message":"lol no idea, i would expect concerns about the liability for a minor (similar ones to hiring interns)","date":"2018-03-09T01:19:15.750Z","type":"message"}
{"nick":"devsnek","message":"oof","date":"2018-03-09T01:22:04.247Z","type":"message"}
{"nick":"devsnek","message":"i'm doing an independent study on programming language design/syntax next year and i was hoping to use it as an excuse to observe a tc39 meeting hehe","date":"2018-03-09T01:22:50.645Z","type":"message"}
{"nick":"Bakkot","message":"We do publish notes!","date":"2018-03-09T01:26:39.011Z","type":"message"}
{"nick":"Domenic","message":"@supports <--> new Function()","date":"2018-03-09T01:27:18.475Z","type":"message"}
{"nick":"devsnek","message":"yea but that doesn't have the same cool-factor :)","date":"2018-03-09T01:27:19.036Z","type":"message"}
{"nick":"devsnek","message":"Domenic: yea i dunno what happened in my brain to come up with that","date":"2018-03-09T01:27:41.850Z","type":"message"}
{"nick":"devsnek","message":"was silly","date":"2018-03-09T01:27:49.896Z","type":"message"}
{"nick":"bterlson","message":"devsnek: regarding observing a tc39 meeting, I ask Ecma what they think.","date":"2018-03-09T01:36:23.306Z","type":"message"}
{"nick":"ljharb","message":"^ good idea","date":"2018-03-09T01:36:32.506Z","type":"message"}
{"nick":"bterlson","message":"I *can","date":"2018-03-09T01:36:32.746Z","type":"message"}
{"nick":"devsnek","message":"this? http://www.ecma-international.org/contact/Contact.html","date":"2018-03-09T01:37:09.826Z","type":"message"}
{"nick":"devsnek","message":"oh you can","date":"2018-03-09T01:37:55.858Z","type":"message"}
{"nick":"devsnek","message":"thank you :)","date":"2018-03-09T01:37:58.537Z","type":"message"}
{"nick":"bterlson","message":"Nah I'd just email Istvan (the secretariat)","date":"2018-03-09T01:38:01.062Z","type":"message"}
{"nick":"bterlson","message":"if you pm me your email I can cc you","date":"2018-03-09T01:38:08.118Z","type":"message"}
{"nick":"devsnek","message":"<me@gus.host>","date":"2018-03-09T01:38:25.511Z","type":"message"}
{"nick":"mattijs_","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T01:46:11.562Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-09T02:10:17.531Z","type":"join"}
{"nick":"keith_mi_","date":"2018-03-09T02:12:22.523Z","type":"join"}
{"nick":"jwalden","reason":"Ping timeout: 265 seconds","date":"2018-03-09T02:13:37.412Z","type":"quit"}
{"nick":"keith_miller","reason":"Ping timeout: 248 seconds","date":"2018-03-09T02:16:01.523Z","type":"quit"}
{"nick":"jwalden","date":"2018-03-09T02:20:30.091Z","type":"join"}
{"nick":"keith_mi_","reason":"Remote host closed the connection","date":"2018-03-09T03:02:38.399Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-09T03:02:50.781Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T03:22:25.110Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-09T03:30:17.264Z","type":"join"}
{"nick":"keith_miller","reason":"Read error: Connection reset by peer","date":"2018-03-09T03:50:58.487Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-09T03:52:20.420Z","type":"join"}
{"nick":"Domenic","message":"Does anyone know what the return value of an iterator's return() is used for","date":"2018-03-09T04:54:01.255Z","type":"message"}
{"nick":"devsnek","message":"whats that?","date":"2018-03-09T04:58:48.637Z","type":"message"}
{"nick":"devsnek","message":"isn't there just the iteratorRecord?","date":"2018-03-09T04:58:58.379Z","type":"message"}
{"nick":"not-an-aardvark","message":"Domenic: I think it's observable as a `{ value: theReturnValue, done: true }` object if invoked manually by user code, although it doesn't seem useful in general because the caller could just construct an object like that themselves. I would imagine it exists as a parallel for using `return` in a generator, which creates the same object.","date":"2018-03-09T05:11:08.404Z","type":"message"}
{"nick":"not-an-aardvark","message":"(Having said that, I'm not sure I understood your question.)","date":"2018-03-09T05:11:44.062Z","type":"message"}
{"nick":"Domenic","message":"I'm wondering why IteratorClose() enforces that it be an object","date":"2018-03-09T05:11:47.707Z","type":"message"}
{"nick":"Domenic","message":"And if I'm manually creating an iterator, what values should I put in there","date":"2018-03-09T05:11:57.463Z","type":"message"}
{"nick":"jmdyck","message":"Does seem odd that IteratorClose() would enforce it being an Object when it doesn't escape.","date":"2018-03-09T05:18:04.252Z","type":"message"}
{"nick":"not-an-aardvark","message":"Hmm, I'm not sure. Based on the behavior of `(function*() {})().return()` (which returns `{ value: undefined, done: true }`), my guess is that iterators are always supposed to return a `value, done` object from `return`. Maybe the error is intended to ensure that all user-provided iterators return an object like that to avoid surprises when manually invoked, even though the return value isn't used by","date":"2018-03-09T05:19:44.841Z","type":"message"}
{"nick":"not-an-aardvark","message":"IteratorClose.","date":"2018-03-09T05:19:45.077Z","type":"message"}
{"nick":"jmdyck","message":"https://tc39.github.io/ecma262/#sec-iterator-interface says that `return` must return an IteratorResult.","date":"2018-03-09T05:21:13.687Z","type":"message"}
{"nick":"jmdyck","message":"and says what the nature of that result typically is","date":"2018-03-09T05:22:23.591Z","type":"message"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-03-09T05:24:43.987Z","type":"quit"}
{"nick":"Domenic","message":"But, what if my iterable has more data that could be iterated, if someone acquired a new iterator","date":"2018-03-09T05:25:58.907Z","type":"message"}
{"nick":"Domenic","message":"Then should I still say \"done\"?","date":"2018-03-09T05:26:03.200Z","type":"message"}
{"nick":"devsnek","message":"yea","date":"2018-03-09T05:26:15.733Z","type":"message"}
{"nick":"Domenic","message":"(say done: true, rather)","date":"2018-03-09T05:26:18.300Z","type":"message"}
{"nick":"devsnek","message":"it's not finished, it's done","date":"2018-03-09T05:26:21.095Z","type":"message"}
{"nick":"Domenic","message":"I guess the question is whether \"done\" is scoped to the iterator or iterable","date":"2018-03-09T05:26:23.170Z","type":"message"}
{"nick":"devsnek","message":"I assume that's why done was chosen instead of finished","date":"2018-03-09T05:26:46.884Z","type":"message"}
{"nick":"not-an-aardvark","message":"If I have an array I can create an infinite number of iterators from it, all of which will provide some values and then be \"done\". So I think \"done\" refers to the iterator.","date":"2018-03-09T05:30:48.772Z","type":"message"}
{"nick":"devsnek","message":"that's my point hehe","date":"2018-03-09T05:31:35.478Z","type":"message"}
{"nick":"Domenic","message":"I think done and finished are synonyms, and we shouldn't be reading too much into exact wording choice besides that one was shorter.","date":"2018-03-09T05:32:17.513Z","type":"message"}
{"nick":"devsnek","message":"done and finished actually aren't synonyms","date":"2018-03-09T05:32:31.910Z","type":"message"}
{"nick":"Domenic","message":"not-an-aardvark: that's pretty good","date":"2018-03-09T05:32:34.861Z","type":"message"}
{"nick":"ljharb","message":"to me \"done\" just means \"i'm not going to give you any more values\"","date":"2018-03-09T05:32:47.815Z","type":"message"}
{"nick":"ljharb","message":"so yeah, it'd be the iterator, not the iterable","date":"2018-03-09T05:32:52.324Z","type":"message"}
{"nick":"Domenic","message":"http://www.thesaurus.com/browse/done?s=t","date":"2018-03-09T05:32:52.815Z","type":"message"}
{"nick":"Domenic","message":"\" adj accomplished, finished \"","date":"2018-03-09T05:32:58.234Z","type":"message"}
{"nick":"devsnek","message":"done doesn't imply completion in the english language","date":"2018-03-09T05:33:03.129Z","type":"message"}
{"nick":"Domenic","message":"It definitely does....","date":"2018-03-09T05:33:07.902Z","type":"message"}
{"nick":"ljharb","message":"specifically it implies completion of a task","date":"2018-03-09T05:33:19.535Z","type":"message"}
{"nick":"ljharb","message":"it's done iterating","date":"2018-03-09T05:33:21.477Z","type":"message"}
{"nick":"ljharb","message":"there's nothing left to yield","date":"2018-03-09T05:33:26.001Z","type":"message"}
{"nick":"Domenic","message":"http://www.dictionary.com/browse/done \"completed; finished; through\"","date":"2018-03-09T05:33:26.394Z","type":"message"}
{"nick":"not-an-aardvark","message":"I think completion is actually the only thing that \"done\" implies","date":"2018-03-09T05:33:49.463Z","type":"message"}
{"nick":"ljharb","message":"but not-an-aardvark's comment is spot on, i think - the iterable can always be freshly iterated, it's the iterator itself that's stateful","date":"2018-03-09T05:33:52.553Z","type":"message"}
{"nick":"ljharb","message":"(and thus that can become \"done\")","date":"2018-03-09T05:34:02.313Z","type":"message"}
{"nick":"Domenic","message":"Well, in my case the iterable is stateful (it's a stream)","date":"2018-03-09T05:34:07.011Z","type":"message"}
{"nick":"Domenic","message":"But the fact that it's iterator-scoped in other cases convinces me it should be in this case too","date":"2018-03-09T05:34:19.775Z","type":"message"}
{"nick":"devsnek","message":"that's what I was trying to say, grammar aside ;(","date":"2018-03-09T05:34:26.672Z","type":"message"}
{"nick":"ljharb","message":"fair; it could also make sense that an iterator advancing also causes all new iterators, or all iterators including existing ones, to advance too","date":"2018-03-09T05:34:44.614Z","type":"message"}
{"nick":"ljharb","message":"like 10 iterators on an array should all advance independently, but 10 iterators on a queue, perhaps, should always provide the \"next\" item, which would maybe mean that they're sharing state and would all become \"done\" together?","date":"2018-03-09T05:35:28.873Z","type":"message"}
{"nick":"devsnek","message":"just make one iterator and have the symbol.iterator method return it?","date":"2018-03-09T05:35:53.611Z","type":"message"}
{"nick":"ljharb","message":"you could totally do that too","date":"2018-03-09T05:36:54.986Z","type":"message"}
{"nick":"not-an-aardvark","message":"If the stream is consuming a resource (e.g. a file handle) that need to be closed afterwards, it seems like it would be ergonomic for `return` to automatically close the resource. But I'm not sure that fits with the model that multiple iterators can be created after a `return`.","date":"2018-03-09T05:36:59.123Z","type":"message"}
{"nick":"ljharb","message":"(but then you have a communication channel between all consumers of the iterator beyond just calling .next())","date":"2018-03-09T05:37:10.595Z","type":"message"}
{"nick":"not-an-aardvark","message":"I can imagine use cases where that would be desirable (e.g. if you don't want to process elements twice)","date":"2018-03-09T05:38:00.256Z","type":"message"}
{"nick":"devsnek","message":"node streams just attach next to whenever the next value comes through although that's async iterator","date":"2018-03-09T05:38:07.279Z","type":"message"}
{"nick":"Domenic","message":"not-an-aardvark: yeah that's also something I'm debating","date":"2018-03-09T05:39:29.746Z","type":"message"}
{"nick":"Domenic","message":"https://github.com/whatwg/streams/issues/778#issuecomment-371717821","date":"2018-03-09T05:39:41.898Z","type":"message"}
{"nick":"not-an-aardvark","message":"I suppose if each object is intended to be permanently consumed after yielding it once, it might be better for an API to just return an iterator rather than an iterable.","date":"2018-03-09T05:40:37.819Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T05:41:20.390Z","type":"quit"}
{"nick":"not-an-aardvark","message":"Or devsnek's idea of always returning the same iterator would also work, and would allow automatic resource cleanup when `.return` is called.","date":"2018-03-09T05:41:34.786Z","type":"message"}
{"nick":"caridy","date":"2018-03-09T05:41:49.810Z","type":"join"}
{"nick":"ljharb","message":"returning the same === iterator wouldn't be a good idea tho unless it was frozen","date":"2018-03-09T05:42:02.397Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T05:42:19.361Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T05:42:58.566Z","type":"join"}
{"nick":"Domenic","message":"I'm liking the same iterator idea","date":"2018-03-09T05:43:43.952Z","type":"message"}
{"nick":"Domenic","message":"(I don't care about communications channels, plenty of APIs return the same object more than once.)","date":"2018-03-09T05:44:00.469Z","type":"message"}
{"nick":"not-an-aardvark","message":"ljharb: Well, I suppose you could return different iterators that use shared state to get the next value","date":"2018-03-09T05:44:11.449Z","type":"message"}
{"nick":"devsnek","message":"do you want multiple consumers to get the same data or fight for data","date":"2018-03-09T05:44:27.524Z","type":"message"}
{"nick":"Domenic","message":"document.body, oh no, it's a communications channel","date":"2018-03-09T05:44:29.211Z","type":"message"}
{"nick":"Domenic","message":"self.Math, oh no.","date":"2018-03-09T05:44:39.888Z","type":"message"}
{"nick":"ljharb","message":"Domenic: sure, that's fair.","date":"2018-03-09T05:44:43.674Z","type":"message"}
{"nick":"devsnek","message":"wouldn't my idea make them fight for .next","date":"2018-03-09T05:44:51.359Z","type":"message"}
{"nick":"ljharb","message":"wouldn't it be more optimizeable for impls tho if the object was frozen?","date":"2018-03-09T05:45:06.006Z","type":"message"}
{"nick":"ljharb","message":"especially for `.next` calls which would then not be interceptible","date":"2018-03-09T05:45:21.068Z","type":"message"}
{"nick":"ljharb","message":"Â¯\\_(ãƒ„)_/Â¯ tho","date":"2018-03-09T05:45:25.993Z","type":"message"}
{"nick":"devsnek","message":"node streams have async iterators","date":"2018-03-09T05:46:04.121Z","type":"message"}
{"nick":"Domenic","message":"Nah implementations inline calls all the time on non-frozen objects. ICs!!","date":"2018-03-09T05:46:06.548Z","type":"message"}
{"nick":"ljharb","message":"kk","date":"2018-03-09T05:46:16.754Z","type":"message"}
{"nick":"devsnek","message":"I haven't looked into how they behave but you can probably seek inspiration from them","date":"2018-03-09T05:46:25.285Z","type":"message"}
{"nick":"not-an-aardvark","message":"This is also similar to the idea that array iterators are also iterable. (I think their `Symbol.iterator` method is just `return this`, which is another way of always returning the same iterator with the downside that your \"iterable\" also needs to have a `.next` method.)","date":"2018-03-09T05:52:04.472Z","type":"message"}
{"nick":"caridy_","date":"2018-03-09T05:54:21.578Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T05:54:21.817Z","type":"quit"}
{"nick":"caridy_","reason":"Remote host closed the connection","date":"2018-03-09T06:00:15.769Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T06:01:19.805Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T06:20:54.629Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T06:21:51.557Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2018-03-09T06:21:55.130Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T06:22:50.243Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T06:32:44.447Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T06:33:57.799Z","type":"join"}
{"nick":"caridy_","date":"2018-03-09T06:37:57.464Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T06:38:00.153Z","type":"quit"}
{"nick":"caridy_","reason":"Read error: Connection reset by peer","date":"2018-03-09T06:38:00.353Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T06:38:28.796Z","type":"join"}
{"nick":"caridy_","date":"2018-03-09T06:40:30.112Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T06:40:30.349Z","type":"quit"}
{"nick":"caridy_","reason":"Remote host closed the connection","date":"2018-03-09T06:46:55.693Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T06:47:47.535Z","type":"join"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-03-09T06:57:35.050Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T07:10:30.905Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T07:11:27.785Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2018-03-09T07:11:31.566Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T07:12:20.241Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T07:26:51.604Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-09T07:28:25.597Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T07:47:10.665Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T07:48:56.439Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T07:50:36.773Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T07:51:06.535Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T08:18:04.904Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T08:18:33.773Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T08:31:51.820Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T08:32:59.137Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T08:34:28.340Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T08:34:59.560Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T08:53:54.480Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T08:54:24.812Z","type":"join"}
{"nick":"caridy_","date":"2018-03-09T08:59:21.171Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T08:59:21.409Z","type":"quit"}
{"nick":"caridy_","reason":"Remote host closed the connection","date":"2018-03-09T09:11:43.930Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-03-09T09:13:06.254Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T09:13:30.483Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T09:16:57.662Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T09:30:50.774Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T09:31:42.632Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T09:31:51.022Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T09:32:27.415Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T09:36:49.029Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T09:37:58.348Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T10:13:22.956Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T10:14:17.239Z","type":"join"}
{"nick":"STRML","reason":"Ping timeout: 260 seconds","date":"2018-03-09T10:19:19.354Z","type":"quit"}
{"nick":"STRML","date":"2018-03-09T10:24:17.476Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T10:55:43.579Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-09T10:55:59.545Z","type":"join"}
{"nick":"caridy","date":"2018-03-09T10:56:35.288Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T11:03:08.519Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T11:03:37.992Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T11:15:57.666Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T11:16:56.105Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2018-03-09T11:16:58.331Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T11:17:46.410Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-03-09T11:25:11.633Z","type":"quit"}
{"nick":"mylesborins","date":"2018-03-09T11:25:42.007Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T11:41:17.498Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T11:41:49.853Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T11:56:24.810Z","type":"quit"}
{"nick":"keith_miller","date":"2018-03-09T12:13:59.246Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T12:14:10.868Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T12:14:56.622Z","type":"join"}
{"nick":"AtumT","date":"2018-03-09T12:25:34.276Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T12:43:54.504Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T12:45:30.275Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T12:51:10.354Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T12:52:21.100Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T12:53:46.295Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T12:54:24.821Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T12:55:48.204Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T12:56:37.740Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T13:04:42.602Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T13:05:49.829Z","type":"join"}
{"nick":"jmdyck","date":"2018-03-09T13:15:06.396Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T13:17:59.914Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T13:18:57.804Z","type":"join"}
{"nick":"caridy","reason":"Read error: Connection reset by peer","date":"2018-03-09T13:19:00.070Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T13:19:50.339Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T13:34:26.072Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T13:35:58.166Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T13:39:45.740Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T13:40:55.158Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T14:01:30.261Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T14:01:56.506Z","type":"join"}
{"nick":"gsathya","message":"anyone know why https://tc39.github.io/ecma262/#sec-iterabletolist doesn't call IteratorClose?","date":"2018-03-09T14:03:10.451Z","type":"message"}
{"nick":"caridy_","date":"2018-03-09T14:07:57.609Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T14:07:57.609Z","type":"quit"}
{"nick":"caridy_","reason":"Remote host closed the connection","date":"2018-03-09T14:08:07.796Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T14:08:36.262Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T14:15:52.671Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T14:17:26.832Z","type":"join"}
{"nick":"caridy_","date":"2018-03-09T14:21:25.535Z","type":"join"}
{"nick":"caridy_","reason":"Read error: Connection reset by peer","date":"2018-03-09T14:21:27.466Z","type":"quit"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T14:21:27.665Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T14:21:56.816Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T14:24:41.843Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T14:25:29.874Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T14:25:42.372Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T14:26:40.419Z","type":"join"}
{"nick":"gsathya","message":"(I'm assuming it's because IteratorClose is called only if the consumer of the iterator throws)","date":"2018-03-09T14:31:30.293Z","type":"message"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T14:32:23.568Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T14:34:19.642Z","type":"join"}
{"nick":"gskachkov_","date":"2018-03-09T14:38:25.650Z","type":"join"}
{"nick":"caridy","reason":"Remote host closed the connection","date":"2018-03-09T14:42:54.017Z","type":"quit"}
{"nick":"caridy","date":"2018-03-09T14:43:53.250Z","type":"join"}
{"nick":"howdoi","date":"2018-03-09T14:52:09.838Z","type":"join"}
{"nick":"Domenic","message":"Yeah that seems right. Only for abrupt completions. If the iterator gets to the end itself it's assumed it does its own cleanup after yielding the last item I suppose.","date":"2018-03-09T15:04:12.353Z","type":"message"}
{"nick":"rwaldron","date":"2018-03-09T15:20:04.223Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-03-09T15:31:44.907Z","type":"quit"}
{"nick":"gsathya","message":"thanks Domenic!","date":"2018-03-09T15:34:23.573Z","type":"message"}
