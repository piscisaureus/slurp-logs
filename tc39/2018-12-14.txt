{"nick":"MarcoBrunoBR","date":"2018-12-14T00:31:01.171Z","type":"join"}
{"nick":"jovis","date":"2018-12-14T00:31:29.174Z","type":"join"}
{"nick":"jovis","reason":"Client Quit","date":"2018-12-14T00:33:39.914Z","type":"quit"}
{"nick":"Bakkot","message":"Opening up a place to talk about frozen sets: https://github.com/bakkot/proposal-frozen-set","date":"2018-12-14T00:37:51.474Z","type":"message"}
{"nick":"Bakkot","message":"not a formal proposal at the moment, just a place to discuss ideas","date":"2018-12-14T00:38:05.047Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: looks cool","date":"2018-12-14T00:42:33.752Z","type":"message"}
{"nick":"devsnek","message":"would be a shame to leave out other things though (time for a freezable protocol? :P)","date":"2018-12-14T00:43:06.923Z","type":"message"}
{"nick":"Bakkot","message":"Map and probably WeakSet/WeakMap I'm on board with; what other things are you interested in?","date":"2018-12-14T00:43:50.432Z","type":"message"}
{"nick":"devsnek","message":"✨ whatever the future holds ✨","date":"2018-12-14T00:44:38.475Z","type":"message"}
{"nick":"keith_mi_","reason":"Quit: My Mac Pro has gone to sleep. ZZZzzz…","date":"2018-12-14T00:54:44.334Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-12-14T00:55:02.227Z","type":"quit"}
{"nick":"Domenic","message":"I really like bmeck's idea of adding interceptors to the set constructor that would allow accepting/rejecting values. Seems like you could build a freeze switch on top of that, plus a bunch more.","date":"2018-12-14T00:59:30.811Z","type":"message"}
{"nick":"Bakkot","message":"Huh, neat. Is that written about somewhere?","date":"2018-12-14T01:11:11.602Z","type":"message"}
{"nick":"Domenic","message":"I thought he had a repo","date":"2018-12-14T01:11:21.554Z","type":"message"}
{"nick":"devsnek","message":"immutability seems more primitive to me","date":"2018-12-14T01:11:23.873Z","type":"message"}
{"nick":"devsnek","message":"although it could be simulated","date":"2018-12-14T01:11:30.616Z","type":"message"}
{"nick":"Domenic","message":"How would you build bmeck's idea on top of immutability?","date":"2018-12-14T01:11:38.207Z","type":"message"}
{"nick":"devsnek","message":"Bakkot: https://github.com/bmeck/proposal-richer-keys/","date":"2018-12-14T01:11:39.828Z","type":"message"}
{"nick":"devsnek","message":"i mean the other way around","date":"2018-12-14T01:11:49.198Z","type":"message"}
{"nick":"Domenic","message":"Ah, yeah, I think bmeck's idea is indeed more primitive","date":"2018-12-14T01:12:32.757Z","type":"message"}
{"nick":"devsnek","message":"like you said it could be simulated with directing all keys to some key that never appears in the map/set (like a symbol that isn't shared with anything)","date":"2018-12-14T01:12:38.400Z","type":"message"}
{"nick":"Domenic","message":"Or just throwing","date":"2018-12-14T01:13:30.598Z","type":"message"}
{"nick":"devsnek","message":"yeah i guess that would be the case since they're a fluent interface","date":"2018-12-14T01:14:28.448Z","type":"message"}
{"nick":"Bakkot","message":"that repo does not look like the description given.","date":"2018-12-14T01:14:54.112Z","type":"message"}
{"nick":"Domenic","message":"https://github.com/bmeck/proposal-richer-keys/tree/master/collection-rekey","date":"2018-12-14T01:15:06.690Z","type":"message"}
{"nick":"Domenic","message":"It's a bit broader","date":"2018-12-14T01:15:10.768Z","type":"message"}
{"nick":"Domenic","message":"I only remembered the part where you could throw or not","date":"2018-12-14T01:15:25.219Z","type":"message"}
{"nick":"Domenic","message":"But I guess you can return a different key instead","date":"2018-12-14T01:15:34.538Z","type":"message"}
{"nick":"devsnek","message":"composite keys are pretty cool","date":"2018-12-14T01:16:06.344Z","type":"message"}
{"nick":"Bakkot","message":"Domenic: oh, this wouldn't work for frozen sets as currently stated - the point of frozen sets is that you'd still be able to query them, but the `rekey` method does not distinguish between \"this key was passed to modify a thing\" and \"this thing was passed to query a thing\". (also doesn't solve `.clear`.) but still worth noting, and could maybe be tweaked.","date":"2018-12-14T01:25:16.182Z","type":"message"}
{"nick":"Domenic","message":"Oh, good point","date":"2018-12-14T01:25:42.194Z","type":"message"}
{"nick":"Domenic","message":"Yeah, I guess I just remembered the proposal as if it were designed for my use case, not as it actually was :p","date":"2018-12-14T01:26:13.096Z","type":"message"}
{"nick":"devsnek","message":"i'm kinda imagining a general design like [@@immutable]() (expected to return new instance) or [@@makeImmutable]() (makes immutable in place)","date":"2018-12-14T01:27:33.701Z","type":"message"}
{"nick":"devsnek","message":"then add a syntax to run that method","date":"2018-12-14T01:27:57.823Z","type":"message"}
{"nick":"Bakkot","message":"I dunno how I feel about making this so general. immutability is a really domain-specific concept.","date":"2018-12-14T01:28:06.606Z","type":"message"}
{"nick":"devsnek","message":"a lot of languages have this first class","date":"2018-12-14T01:28:32.523Z","type":"message"}
{"nick":"devsnek","message":"like c++ const","date":"2018-12-14T01:28:35.593Z","type":"message"}
{"nick":"Bakkot","message":"also this should really definitely for sure not have syntax, jeebus","date":"2018-12-14T01:28:52.530Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-12-14T01:29:23.687Z","type":"message"}
{"nick":"devsnek","message":"just differing opinion then","date":"2018-12-14T01:29:31.894Z","type":"message"}
{"nick":"Bakkot","message":"syntax is bad","date":"2018-12-14T01:29:36.504Z","type":"message"}
{"nick":"Bakkot","message":"I keep meaning to give a talk to that effect","date":"2018-12-14T01:29:40.730Z","type":"message"}
{"nick":"devsnek","message":"i generally agree","date":"2018-12-14T01:30:20.013Z","type":"message"}
{"nick":"Bakkot","message":"out of curiousity, what languages other than C++ have a notion of \"const\" which is transitive, like C++'s?","date":"2018-12-14T01:31:23.277Z","type":"message"}
{"nick":"keith_miller","date":"2018-12-14T01:31:59.493Z","type":"join"}
{"nick":"devsnek","message":"rust has `mut` for external immutability","date":"2018-12-14T01:32:45.536Z","type":"message"}
{"nick":"devsnek","message":"external mutability*","date":"2018-12-14T01:33:31.006Z","type":"message"}
{"nick":"devsnek","message":"and some other \"cell\" things for transitive","date":"2018-12-14T01:34:03.344Z","type":"message"}
{"nick":"devsnek","message":"i think most of the functional languages have immutability on everything by default","date":"2018-12-14T01:35:27.604Z","type":"message"}
{"nick":"keith_miller","reason":"Remote host closed the connection","date":"2018-12-14T01:43:39.548Z","type":"quit"}
{"nick":"keith_miller","date":"2018-12-14T01:43:53.524Z","type":"join"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2018-12-14T01:47:25.419Z","type":"quit"}
{"nick":"MarcoBrunoBR","reason":"Quit: Page closed","date":"2018-12-14T01:49:36.332Z","type":"quit"}
{"nick":"aki_","date":"2018-12-14T01:59:39.374Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 250 seconds","date":"2018-12-14T02:00:07.736Z","type":"quit"}
{"nick":"aki_","new_nick":"akirose","date":"2018-12-14T02:00:08.119Z","type":"nick"}
{"nick":"gcommer","reason":"Read error: Connection reset by peer","date":"2018-12-14T02:12:01.873Z","type":"quit"}
{"nick":"gcommer","date":"2018-12-14T02:12:19.749Z","type":"join"}
{"nick":"NilSet","reason":"Ping timeout: 272 seconds","date":"2018-12-14T02:37:08.877Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: back later maybe","date":"2018-12-14T02:43:43.124Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-12-14T03:13:06.701Z","type":"quit"}
{"nick":"dpk","reason":"Ping timeout: 246 seconds","date":"2018-12-14T03:13:46.400Z","type":"quit"}
{"nick":"dpk","date":"2018-12-14T03:22:45.434Z","type":"join"}
{"nick":"ljharb","message":"Bakkot: i'd want regexps to be freezeable (ie, .compile)","date":"2018-12-14T03:31:43.195Z","type":"message"}
{"nick":"ljharb","message":"i super like the idea of enhancing the builtin to allow custom interceptors - that would also allow me to create a builtin Set that didn't coalesce -0 and +0","date":"2018-12-14T03:32:12.061Z","type":"message"}
{"nick":"akirose","reason":"Ping timeout: 240 seconds","date":"2018-12-14T04:06:07.333Z","type":"quit"}
{"nick":"akirose","date":"2018-12-14T04:06:48.551Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-12-14T04:39:29.049Z","type":"quit"}
{"nick":"keith_miller","date":"2018-12-14T04:41:12.989Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 268 seconds","date":"2018-12-14T06:13:53.702Z","type":"quit"}
{"nick":"akirose","date":"2018-12-14T06:14:59.757Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-12-14T06:42:14.202Z","type":"quit"}
{"nick":"keith_miller","date":"2018-12-14T06:56:39.863Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2018-12-14T07:56:58.124Z","type":"quit"}
