{"nick":"keith_miller","date":"2018-06-11T01:23:46.293Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 276 seconds","date":"2018-06-11T02:37:20.782Z","type":"quit"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-06-11T03:03:32.864Z","type":"quit"}
{"nick":"jmdyck","reason":"Ping timeout: 260 seconds","date":"2018-06-11T03:31:45.663Z","type":"quit"}
{"nick":"jmdyck","date":"2018-06-11T03:32:57.665Z","type":"join"}
{"nick":"jmdyck","reason":"Remote host closed the connection","date":"2018-06-11T03:46:55.411Z","type":"quit"}
{"nick":"aki_","date":"2018-06-11T04:27:14.936Z","type":"join"}
{"nick":"akirose","reason":"Ping timeout: 245 seconds","date":"2018-06-11T04:28:07.278Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T05:39:05.368Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-06-11T06:40:22.297Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T06:49:22.664Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 260 seconds","date":"2018-06-11T06:54:10.662Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T07:33:36.308Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 245 seconds","date":"2018-06-11T07:37:42.257Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T07:39:53.660Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-06-11T07:47:38.471Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T08:22:55.071Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 276 seconds","date":"2018-06-11T08:27:47.082Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T08:38:37.373Z","type":"join"}
{"nick":"arai","reason":"Remote host closed the connection","date":"2018-06-11T08:46:24.583Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T09:54:13.752Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 276 seconds","date":"2018-06-11T09:59:20.752Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T10:21:03.941Z","type":"join"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-06-11T10:25:08.103Z","type":"quit"}
{"nick":"arai","reason":"Ping timeout: 264 seconds","date":"2018-06-11T10:25:34.008Z","type":"quit"}
{"nick":"mylesborins","date":"2018-06-11T10:25:38.561Z","type":"join"}
{"nick":"arai","date":"2018-06-11T10:30:37.072Z","type":"join"}
{"nick":"arai","reason":"Ping timeout: 276 seconds","date":"2018-06-11T10:35:11.086Z","type":"quit"}
{"nick":"jmdyck","date":"2018-06-11T13:02:05.022Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-06-11T13:22:19.624Z","type":"quit"}
{"nick":"zenparsing","date":"2018-06-11T15:13:11.493Z","type":"join"}
{"nick":"zenparsing","message":"I'm trying to remember why the Await macro creates a fresh promise via NewPromiseCapability instead of using PromiseResolve (and potentially skipping a promise creation). Any ideas?","date":"2018-06-11T15:16:22.432Z","type":"message"}
{"nick":"chalker","date":"2018-06-11T15:17:05.944Z","type":"join"}
{"nick":"TabAtkins","message":"Presumably to avoid accidentally exposing expandos on the awaited promise?","date":"2018-06-11T15:23:41.590Z","type":"message"}
{"nick":"keith_miller","date":"2018-06-11T15:24:15.367Z","type":"join"}
{"nick":"chalker","reason":"Ping timeout: 264 seconds","date":"2018-06-11T15:24:58.415Z","type":"quit"}
{"nick":"keith_miller","reason":"Ping timeout: 265 seconds","date":"2018-06-11T15:29:06.368Z","type":"quit"}
{"nick":"gibson042","reason":"Ping timeout: 276 seconds","date":"2018-06-11T15:50:20.763Z","type":"quit"}
{"nick":"gibson042","date":"2018-06-11T15:51:30.849Z","type":"join"}
{"nick":"keith_miller","date":"2018-06-11T16:34:58.399Z","type":"join"}
{"nick":"vikashl","reason":"Remote host closed the connection","date":"2018-06-11T17:14:39.148Z","type":"quit"}
{"nick":"mmurry","date":"2018-06-11T17:34:14.687Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2018-06-11T17:43:16.818Z","type":"nick"}
{"nick":"akirose","new_nick":"aki_","date":"2018-06-11T17:47:47.824Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-06-11T17:51:00.933Z","type":"quit"}
{"nick":"vikash-afk","date":"2018-06-11T17:52:08.456Z","type":"join"}
{"nick":"aki_","new_nick":"akirose","date":"2018-06-11T17:56:14.926Z","type":"nick"}
{"nick":"jwalden","date":"2018-06-11T18:16:16.620Z","type":"join"}
{"nick":"littledan","message":"zenparsing: Funny you mention that, actually some people are looking into proposing that change. It seems to be more intuitive to not insert an extra two microtask queue delays for each await of a promise, and in prototype implementations, it seems to get a pretty good performance boost","date":"2018-06-11T18:45:53.694Z","type":"message"}
{"nick":"keith_miller","date":"2018-06-11T18:46:30.086Z","type":"join"}
{"nick":"zenparsing","message":"it was brought to my attention by a dev on the chakra team","date":"2018-06-11T18:47:15.478Z","type":"message"}
{"nick":"zenparsing","message":"I'm assuming that the intention was to (a) always call \"then\" and (b) ensure that \"then\" is called with a fresh stack. I also think it might be worthwhile to reexamine.","date":"2018-06-11T18:48:09.514Z","type":"message"}
{"nick":"jwalden","reason":"Quit: brb","date":"2018-06-11T19:51:24.311Z","type":"quit"}
{"nick":"jwalden","date":"2018-06-11T20:06:23.830Z","type":"join"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-06-11T20:24:39.413Z","type":"quit"}
{"nick":"keith_miller","date":"2018-06-11T20:25:41.738Z","type":"join"}
{"nick":"jwalden_","date":"2018-06-11T20:31:47.194Z","type":"join"}
{"nick":"jwalden","reason":"Ping timeout: 264 seconds","date":"2018-06-11T20:34:33.970Z","type":"quit"}
{"nick":"jwalden_","new_nick":"jwalden","date":"2018-06-11T20:34:41.523Z","type":"nick"}
{"nick":"keith_miller","reason":"Quit: My MacBook has gone to sleep. ZZZzzzâ€¦","date":"2018-06-11T20:39:27.776Z","type":"quit"}
{"nick":"jwalden","reason":"Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]","date":"2018-06-11T21:02:27.069Z","type":"quit"}
{"nick":"keith_miller","date":"2018-06-11T21:58:02.459Z","type":"join"}
{"nick":"keith_miller","reason":"Read error: Connection reset by peer","date":"2018-06-11T22:00:09.218Z","type":"quit"}
{"nick":"keith_mi_","date":"2018-06-11T22:00:13.454Z","type":"join"}
{"nick":"zenparsing","message":"littledan: feel free to loop me into those \"await\" conversations :)","date":"2018-06-11T22:12:13.163Z","type":"message"}
{"nick":"jwalden","date":"2018-06-11T22:40:04.474Z","type":"join"}
{"nick":"littledan","message":"zenparsing: Great, if you could send me the email address of the chakra dev(s) who are interested I can try to loop you both in","date":"2018-06-11T22:48:26.932Z","type":"message"}
{"nick":"littledan","message":"PromiseResolve would achieve that goal just as well","date":"2018-06-11T22:48:44.298Z","type":"message"}
{"nick":"littledan","message":"I thought the goal was about making a predictable number of microtask queue items. However, the current spec is way more than you'd ever expect","date":"2018-06-11T22:48:59.353Z","type":"message"}
{"nick":"ljharb","message":"with using PromiseResolve, would it still always ensure at least one tick, including with `await somePrimitive`?","date":"2018-06-11T22:49:22.120Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: i wouldn't encourage reliably microtask queue counts, node has seen optimizations change them over time. i'd actually prefer a better explanation of this optimization behavior but ðŸ¤· we get issues from time to time on exact ticks changing as Promises adopt eachother's state","date":"2018-06-11T23:06:29.497Z","type":"message"}
{"nick":"littledan","message":"Well, the current specification implies specific tick counts. Personally I wouldn't mind weakening that, but I was under the impression that some felt strongly about reliability here.","date":"2018-06-11T23:07:35.826Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: I think the opposite is more true","date":"2018-06-11T23:08:13.079Z","type":"message"}
{"nick":"littledan","message":"You mean you oppose the current specification's specificity? Sounds like we have people on both sides then","date":"2018-06-11T23:09:07.646Z","type":"message"}
{"nick":"bradleymeck","message":"i need to dig up the conversation that I'm looking for about optimization but https://github.com/nodejs/node/issues/12356 was the last major visible thing that brought this up","date":"2018-06-11T23:10:20.805Z","type":"message"}
{"nick":"ljharb","message":"test262 should be verifying precise tick counts.","date":"2018-06-11T23:11:06.964Z","type":"message"}
{"nick":"ljharb","message":"the promise finally tests do, for example.","date":"2018-06-11T23:11:11.341Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not convinced of the value of precise ticks","date":"2018-06-11T23:12:01.740Z","type":"message"}
{"nick":"bradleymeck","message":"ensuring 1+ ticks occur vs exactly n ticks seems the sides of debate on this","date":"2018-06-11T23:12:25.396Z","type":"message"}
{"nick":"ljharb","message":"it's important that the spec be explicit, otherwise implementations will vary","date":"2018-06-11T23:12:41.921Z","type":"message"}
{"nick":"bradleymeck","message":"i think variance here is actually a potential good thing","date":"2018-06-11T23:13:01.002Z","type":"message"}
{"nick":"bradleymeck","message":"the fewer ticks we waste adopting state, the fewer things like async hooks for node need to be fired","date":"2018-06-11T23:13:30.415Z","type":"message"}
{"nick":"ljharb","message":"users need to be able to write code that works on every JS engine the same, even if async_hooks is only in node","date":"2018-06-11T23:13:49.210Z","type":"message"}
{"nick":"ljharb","message":"at least, if it's observable, then it needs to be exact - if it's unobservable then the spec doesn't need to require it","date":"2018-06-11T23:14:09.364Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: i think users explicitly declaring their dependence for timing rather than knowing number of ticks is going to lead to better results","date":"2018-06-11T23:14:24.855Z","type":"message"}
{"nick":"bradleymeck","message":"if number of ticks becomes reliable then libraries and hosts need to stay at the same tick count to be considered reliable","date":"2018-06-11T23:14:54.252Z","type":"message"}
{"nick":"arai","date":"2018-06-11T23:15:17.756Z","type":"join"}
{"nick":"bradleymeck","message":"because like that issue above shows, they will try to judge how many ticks occur between their calls just by doing counting, which allows harder to enforce implementation guarantees for hosts","date":"2018-06-11T23:15:39.101Z","type":"message"}
{"nick":"bradleymeck","message":"and fewer chances to drop unneeded ticks","date":"2018-06-11T23:15:48.085Z","type":"message"}
{"nick":"ljharb","message":"it is already reliable, per spec, and yes, they all need to stay at the same tick count","date":"2018-06-11T23:16:12.160Z","type":"message"}
{"nick":"bradleymeck","message":"i explicitly don't want hosts to have to keep exact tick counts as they evolve their implementations","date":"2018-06-11T23:16:16.364Z","type":"message"}
{"nick":"bradleymeck","message":"i disagree and engines aren't giving reliable tick counts","date":"2018-06-11T23:16:27.962Z","type":"message"}
{"nick":"ljharb","message":"i think the value of preventing variance is higher than the value of potential optimizations","date":"2018-06-11T23:16:28.829Z","type":"message"}
{"nick":"bradleymeck","message":"i think exposing implementation details of number of ticks for things you call is a bad idea","date":"2018-06-11T23:16:52.079Z","type":"message"}
{"nick":"bradleymeck","message":"it leads to bugs and fragility","date":"2018-06-11T23:17:01.153Z","type":"message"}
{"nick":"arai","reason":"Client Quit","date":"2018-06-11T23:18:05.851Z","type":"quit"}
{"nick":"arai","date":"2018-06-11T23:18:14.265Z","type":"join"}
{"nick":"ljharb","message":"i guess i'm coming from the opposite perspective, which is that the implementation details being allowed to vary has caused bugs and fragility across browsers, and locking everything down fixes that","date":"2018-06-11T23:18:35.636Z","type":"message"}
{"nick":"ljharb","message":"like object key ordering, and everything in annex b, eg","date":"2018-06-11T23:18:45.152Z","type":"message"}
{"nick":"bradleymeck","message":"i'm coming from the host perspective where we would be tied to problems of ordering of ticks if people rely on how long it takes our functions to run in the microtask queue","date":"2018-06-11T23:19:28.898Z","type":"message"}
{"nick":"bradleymeck","message":"we couldn't add/remove ticks without it being a major bump","date":"2018-06-11T23:19:44.742Z","type":"message"}
{"nick":"bradleymeck","message":"if there were clear reasons why not to await timing of an implementation instead of queueing \"n number of ticks\" i could see where variance would be bad","date":"2018-06-11T23:20:43.937Z","type":"message"}
{"nick":"bradleymeck","message":"but for now, I don't see how relying on the number of ticks is getting us anything except fragility of relying on timing info that I see as leaking out of implementations.","date":"2018-06-11T23:21:19.720Z","type":"message"}
{"nick":"ljharb","message":"timing info is part of the spec for promise tho","date":"2018-06-11T23:21:50.176Z","type":"message"}
{"nick":"bradleymeck","message":"it isn't how engines work tho","date":"2018-06-11T23:21:59.841Z","type":"message"}
{"nick":"ljharb","message":"so it's not leaking, it's intentionally locked down","date":"2018-06-11T23:22:01.145Z","type":"message"}
{"nick":"bradleymeck","message":"i disagree and think Domenic could comment on this better than I","date":"2018-06-11T23:22:17.453Z","type":"message"}
{"nick":"bradleymeck","message":"i think \"intentionally\" might be subject to debate","date":"2018-06-11T23:22:31.238Z","type":"message"}
{"nick":"bradleymeck","message":"written that way in current spec text, I agree that there is a specified timing","date":"2018-06-11T23:23:03.999Z","type":"message"}
{"nick":"littledan","message":"I think we can do both things--eliminate many meaningless ticks while maintaining a precise tick count","date":"2018-06-11T23:23:45.396Z","type":"message"}
{"nick":"bradleymeck","message":"I'm just stating having a weaker timing would match engines, remove people relying on internal details of things, and allow for refactoring of things with lighter timing oncstraints","date":"2018-06-11T23:23:49.381Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: if we can do that it would be ideal, but I still have concerns about leaking internal implementation details of how many ticks it takes library version 1 to do something versus library version 2","date":"2018-06-11T23:24:31.356Z","type":"message"}
{"nick":"bradleymeck","message":"where 1->2 could be a bugfix version that added a tick","date":"2018-06-11T23:24:45.922Z","type":"message"}
{"nick":"littledan","message":"We're just talking about the JS standard itself","date":"2018-06-11T23:24:54.437Z","type":"message"}
{"nick":"littledan","message":"It's observable no matter how much nondeterminism we put in the spec","date":"2018-06-11T23:25:12.007Z","type":"message"}
{"nick":"littledan","message":"Due to good test262 tests, many engines are actually correct on tick counts","date":"2018-06-11T23:25:27.562Z","type":"message"}
{"nick":"bradleymeck","message":"littledan: observable and reliable/precise are different to me in this area","date":"2018-06-11T23:25:37.822Z","type":"message"}
{"nick":"littledan","message":"I agree that, as a library author, it is not important to maintain a tick count","date":"2018-06-11T23:26:05.712Z","type":"message"}
{"nick":"bradleymeck","message":"in particular I worry because it makes libraries have reliable numbers of ticks","date":"2018-06-11T23:26:11.028Z","type":"message"}
{"nick":"bradleymeck","message":"if it is observable people will try to rely on it","date":"2018-06-11T23:26:22.241Z","type":"message"}
{"nick":"bradleymeck","message":"hence that node issue above","date":"2018-06-11T23:26:27.338Z","type":"message"}
{"nick":"littledan","message":"I don't think refusing to write down details in a spec makes things less reliable/observable","date":"2018-06-11T23:26:34.276Z","type":"message"}
{"nick":"devsnek","message":"whats the original scope here? how many ticks `await` takes?","date":"2018-06-11T23:27:02.345Z","type":"message"}
{"nick":"littledan","message":"As much as I agree with you from a design perspective","date":"2018-06-11T23:27:05.969Z","type":"message"}
{"nick":"littledan","message":"devsnek: yes, basically","date":"2018-06-11T23:27:20.108Z","type":"message"}
{"nick":"devsnek","message":"i've seen people do `await 'next tick'`","date":"2018-06-11T23:27:23.989Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: that just waits for a new tick, not necessarily the next one","date":"2018-06-11T23:27:46.941Z","type":"message"}
{"nick":"littledan","message":"devsnek: that would keep working","date":"2018-06-11T23:27:50.033Z","type":"message"}
{"nick":"zenparsing","message":"devsnek: `await Promise.resolve(1)` creates 3 jobs, whereas we think maybe it should create only 1","date":"2018-06-11T23:28:29.071Z","type":"message"}
{"nick":"devsnek","message":"so like if engines should be allowed to fold those as an optimisation","date":"2018-06-11T23:28:58.798Z","type":"message"}
{"nick":"devsnek","message":"that seems like a pretty sane thing to allow","date":"2018-06-11T23:29:13.351Z","type":"message"}
{"nick":"bradleymeck","message":"well not in the original topic, the original was changing the spec explicitly","date":"2018-06-11T23:29:21.774Z","type":"message"}
{"nick":"bradleymeck","message":"but i think relying on ordering is troublesome for hosts/libraries","date":"2018-06-11T23:29:47.166Z","type":"message"}
{"nick":"bradleymeck","message":"excluding the optimization concerns","date":"2018-06-11T23:29:53.699Z","type":"message"}
{"nick":"zenparsing","message":"devsnek: they can't currently, because user code can interleave jobs between those 3 and observe them","date":"2018-06-11T23:29:57.038Z","type":"message"}
{"nick":"zenparsing","message":"(can't currently optimize away the extra jobs)","date":"2018-06-11T23:30:22.567Z","type":"message"}
{"nick":"devsnek","message":"like relying that that async function's completion will be pushed back an extra n ticks","date":"2018-06-11T23:30:48.414Z","type":"message"}
{"nick":"devsnek","message":"that seems dangerous","date":"2018-06-11T23:31:20.031Z","type":"message"}
{"nick":"bradleymeck","message":"if i had a clearer understanding of why we should guarantee the ordering vs telling people to use `await` or similar to guarantee *an* ordering I would be fine keeping it ordered, but I don't think having a specific ordering is getting us valuable things right now and might cause me to have headaches for things like using `await`","date":"2018-06-11T23:31:27.270Z","type":"message"}
{"nick":"bradleymeck","message":"a lot of my vision is to have JS be a robust language for hosting environments/platforms, and this seems a behavior that makes that harder","date":"2018-06-11T23:32:10.989Z","type":"message"}
{"nick":"bradleymeck","message":"we could tell hosts to produce indeterminate number of ticks / pauses before queueing ticks to get the ordering variance to alleviate reliance on these but I just don't see the actual gain to be given to people producing es hosts implementations, library authors, or to some extent application authors","date":"2018-06-11T23:35:57.223Z","type":"message"}
{"nick":"littledan","message":"bradleymeck: I'm not the person to argue with here; in past conversations, IIRC, Mark Miller and Domenic were more opinionated, but maybe I'm remembering wrong","date":"2018-06-11T23:41:34.451Z","type":"message"}
{"nick":"littledan","message":"I just think we can get our work done within this framework, either way","date":"2018-06-11T23:41:53.722Z","type":"message"}
{"nick":"ljharb","message":"fewer ticks sounds great to me, regardless","date":"2018-06-11T23:43:44.229Z","type":"message"}
