{"nick":"plutoniix","date":"2018-05-09T00:07:46.616Z","type":"join"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-05-09T00:50:43.242Z","type":"quit"}
{"nick":"plutoniix","reason":"Quit: Leaving","date":"2018-05-09T03:42:16.439Z","type":"quit"}
{"nick":"Guest59","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2018-05-09T04:06:27.678Z","type":"quit"}
{"nick":"Guest59","date":"2018-05-09T05:10:50.545Z","type":"join"}
{"nick":"Guest59","reason":"Quit: My Mac has gone to sleep. ZZZzzz…","date":"2018-05-09T05:58:53.253Z","type":"quit"}
{"nick":"Guest59","date":"2018-05-09T06:04:30.573Z","type":"join"}
{"nick":"Guest59_","date":"2018-05-09T06:13:52.357Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: xaxxon","date":"2018-05-09T06:16:37.682Z","type":"quit"}
{"nick":"Guest59","reason":"Ping timeout: 260 seconds","date":"2018-05-09T06:16:44.575Z","type":"quit"}
{"nick":"Guest59","date":"2018-05-09T06:23:20.405Z","type":"join"}
{"nick":"Guest59_","reason":"Ping timeout: 256 seconds","date":"2018-05-09T06:26:06.355Z","type":"quit"}
{"nick":"Guest59","reason":"Ping timeout: 246 seconds","date":"2018-05-09T07:21:44.431Z","type":"quit"}
{"nick":"plutoniix","date":"2018-05-09T08:19:43.808Z","type":"join"}
{"nick":"trungl-bot`","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: closed (https://ci.chromium.org/buildbot/client.v8/V8%20Linux%20-%20arm64%20-%20sim%20-%20MSAN/21087 from 600641338d160ce2dc82d3cdec0f414946409b81)","date":"2018-05-09T09:30:11.774Z","type":"message"}
{"nick":"trungl-bot`","message":"\u00033\u0002Tree opened\u000f by clemensh@chromium.org: open - clemensh@ fixing MSAN","date":"2018-05-09T09:34:13.541Z","type":"message"}
{"nick":"xaxxon","date":"2018-05-09T09:40:17.620Z","type":"join"}
{"nick":"trungl-bot`","message":"\u00033\u0002Tree opened\u000f by clemensh@chromium.org: open","date":"2018-05-09T09:42:16.575Z","type":"message"}
{"nick":"trungl-bot`","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: closed (https://ci.chromium.org/buildbot/client.v8/V8%20Linux%20-%20arm64%20-%20sim%20-%20MSAN/21088 from 5945e1ccd0e97e995e5fdbb19f2ded084e2c444a)","date":"2018-05-09T10:14:29.910Z","type":"message"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-09T10:25:08.265Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-09T10:25:38.816Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: Leaving","date":"2018-05-09T10:28:19.724Z","type":"quit"}
{"nick":"trungl-bot`","message":"\u00033\u0002Tree opened\u000f by buildbot@chromium.org: Tree is open (Automatic: Boa sorte!)","date":"2018-05-09T10:57:49.878Z","type":"message"}
{"nick":"AtumT","date":"2018-05-09T11:10:15.809Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: xaxxon","date":"2018-05-09T11:38:42.252Z","type":"quit"}
{"nick":"trungl-bot`","message":"\u00034\u0002Tree closed\u000f by buildbot@chromium.org: closed (https://ci.chromium.org/buildbot/client.v8.fyi/Android%20Builder/8043 from d096508fe847e77d4922086fc26f9d90f51ec6ca)","date":"2018-05-09T11:41:09.389Z","type":"message"}
{"nick":"trungl-bot`","message":"\u00033\u0002Tree opened\u000f by clemensh@chromium.org: open","date":"2018-05-09T13:12:53.713Z","type":"message"}
{"nick":"bradleymeck","message":"i'm looking into cross realm caching for https://github.com/bmeck/proposal-richer-keys/tree/master/compositeKey and was wondering if anyone has had gripes about implementing it for Symbol.for","date":"2018-05-09T15:10:06.419Z","type":"message"}
{"nick":"Wes-","date":"2018-05-09T15:25:24.584Z","type":"join"}
{"nick":"caitp","message":"bmeck: what do you mean by caching?","date":"2018-05-09T15:26:31.290Z","type":"message"}
{"nick":"caitp","message":"the weakmap from the polyfill works cross-realm doesn't it?","date":"2018-05-09T15:28:24.411Z","type":"message"}
{"nick":"caitp","message":"i guess I should read the polyfill instead of just the readme, think I misunderstood.","date":"2018-05-09T15:30:29.608Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: Symbol.for('x') returns the \"same\" primitive if called in any realm","date":"2018-05-09T15:32:15.308Z","type":"message"}
{"nick":"bradleymeck","message":"I'm talking about the same behavior, can't be polyfilled exactly","date":"2018-05-09T15:32:33.969Z","type":"message"}
{"nick":"caitp","message":"right","date":"2018-05-09T15:32:48.674Z","type":"message"}
{"nick":"bradleymeck","message":"but am wanting to have the same reference returned for all the component parts of a compositeKey/compositeSymbol for any Realm","date":"2018-05-09T15:33:36.883Z","type":"message"}
{"nick":"bradleymeck","message":"so similar in nature","date":"2018-05-09T15:33:51.550Z","type":"message"}
{"nick":"bradleymeck","message":"maybe cache isn't the right word, table is probably better but I don't like table for things that add/remove over time really","date":"2018-05-09T15:34:37.028Z","type":"message"}
{"nick":"bradleymeck","message":"one question that I have is the fact that these objects wouldn't really have a realm associated with them","date":"2018-05-09T15:36:55.528Z","type":"message"}
{"nick":"bradleymeck","message":"idk if engines care though","date":"2018-05-09T15:37:00.979Z","type":"message"}
{"nick":"bradleymeck","message":"would change v8::Object::CreationContext though I guess somehow, or at least be unusual for it","date":"2018-05-09T15:38:48.702Z","type":"message"}
{"nick":"caitp","message":"yeah, I think what you want is something like a NameDictionary in the heap root list, which treats its keys as weak","date":"2018-05-09T15:41:29.663Z","type":"message"}
{"nick":"caitp","message":"and not necessarily strings","date":"2018-05-09T15:41:34.668Z","type":"message"}
{"nick":"caitp","message":"I dunno how far along the proposal is, and the readme seemed to indicate that some of tc39 don't want it to be cross-realm?","date":"2018-05-09T15:42:33.252Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: not a strong position but some wanted to look into being idempotent per realm (aklein was only person in particular w/ a more than mild opinion)","date":"2018-05-09T15:44:15.338Z","type":"message"}
{"nick":"bradleymeck","message":"having it be per realm has some complications though","date":"2018-05-09T15:44:25.147Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: oh, and the dictionary strongly holds things until a component GCs so not sure if that matches your idea, the keys are not a simple Name for compositeKey","date":"2018-05-09T15:49:59.804Z","type":"message"}
{"nick":"caitp","message":"I did understand that","date":"2018-05-09T15:51:55.714Z","type":"message"}
{"nick":"caitp","message":"I guess if GC of a single component gets rid of the whole thing, that's maybe a bit different than what I thought, though","date":"2018-05-09T15:52:32.360Z","type":"message"}
{"nick":"bradleymeck","message":"once a single component goes through GC then you can't get the key anymore using those functions","date":"2018-05-09T15:53:02.467Z","type":"message"}
{"nick":"bradleymeck","message":"since you can't populate the whole list of components anymore","date":"2018-05-09T15:53:23.121Z","type":"message"}
{"nick":"caitp","message":"interesting","date":"2018-05-09T15:57:32.203Z","type":"message"}
{"nick":"caitp","message":"I'm surprised you went that route instead of pushing for a CompositeWeakMap/Set primitive :p","date":"2018-05-09T15:58:16.181Z","type":"message"}
{"nick":"caitp","message":"usually people are happier with primitives that let userspace handle the higher level aspects of use cases like that","date":"2018-05-09T15:59:16.563Z","type":"message"}
{"nick":"caitp","message":"instead of baking something into the platform because some specific js framework (or Node) wants to use it","date":"2018-05-09T15:59:40.424Z","type":"message"}
