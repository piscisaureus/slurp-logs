{"nick":"bradleymeck","date":"2018-03-07T00:09:26.706Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-07T02:22:57.029Z","type":"quit"}
{"nick":"xaxxon","date":"2018-03-07T02:31:20.899Z","type":"join"}
{"nick":"bradleymeck","date":"2018-03-07T03:39:15.140Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-07T03:50:04.824Z","type":"quit"}
{"nick":"xaxxon","reason":"Quit: xaxxon","date":"2018-03-07T06:19:21.468Z","type":"quit"}
{"nick":"plutoniix","date":"2018-03-07T07:44:33.167Z","type":"join"}
{"nick":"zv","reason":"Ping timeout: 240 seconds","date":"2018-03-07T09:01:27.816Z","type":"quit"}
{"nick":"zv","date":"2018-03-07T09:03:50.536Z","type":"join"}
{"nick":"xaxxon","date":"2018-03-07T09:21:42.456Z","type":"join"}
{"nick":"xaxxon","message":"anyone know if in v8 there is a way to \"dynamic_cast\" between v8 types?   like a way to check if a v8::Value is a v8::XXX where XXX is a templated type?   .. other than writing a function that knows about each type and calls ->IsXXX() for each possible type?","date":"2018-03-07T09:23:30.592Z","type":"message"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-03-07T09:32:29.399Z","type":"quit"}
{"nick":"xaxxon","reason":"Quit: xaxxon","date":"2018-03-07T11:07:14.214Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-03-07T11:25:10.686Z","type":"quit"}
{"nick":"mylesborins","date":"2018-03-07T11:25:41.467Z","type":"join"}
{"nick":"AtumT","date":"2018-03-07T12:49:37.197Z","type":"join"}
{"nick":"bradleymeck","date":"2018-03-07T13:02:55.913Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-03-07T13:53:35.554Z","type":"quit"}
{"nick":"devsnek","message":"https://github.com/nodejs/node/blob/master/src/node_types.cc","date":"2018-03-07T14:27:28.740Z","type":"message"}
{"nick":"bradleymeck","date":"2018-03-07T14:33:05.814Z","type":"join"}
{"nick":"joyee","message":"I think that's basically doing \"writing a function that knows about each type and calls ->IsXXX() \"..","date":"2018-03-07T14:50:27.703Z","type":"message"}
{"nick":"joyee","message":"They is probably asking something like `->Is<T>()`...","date":"2018-03-07T14:51:07.112Z","type":"message"}
{"nick":"joyee","message":"Is possible to roll your own `->Is<T>()` with a macro that knows about every type though","date":"2018-03-07T14:52:12.743Z","type":"message"}
