{"nick":"RT|Chatzilla","date":"2018-02-24T00:22:58.450Z","type":"join"}
{"nick":"cjd","reason":"Ping timeout: 256 seconds","date":"2018-02-24T00:24:10.762Z","type":"quit"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-02-24T01:27:26.702Z","type":"quit"}
{"nick":"cloudshu","reason":"Quit: Connection closed for inactivity","date":"2018-02-24T01:31:12.940Z","type":"quit"}
{"nick":"xaxxon","date":"2018-02-24T02:27:12.050Z","type":"join"}
{"nick":"bradleymeck","date":"2018-02-24T04:11:07.378Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-24T04:16:08.412Z","type":"quit"}
{"nick":"zv","date":"2018-02-24T05:26:54.896Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: xaxxon","date":"2018-02-24T07:00:37.237Z","type":"quit"}
{"nick":"plutoniix","date":"2018-02-24T07:01:37.636Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 240 seconds","date":"2018-02-24T08:02:33.113Z","type":"quit"}
{"nick":"hatf0","date":"2018-02-24T08:07:23.423Z","type":"join"}
{"nick":"xaxxon","date":"2018-02-24T08:09:14.482Z","type":"join"}
{"nick":"hatf0","message":"x-post from #node-dev but i'm having a weird issue where the cstring returned from *v8::String::Utf8Value  manages to \"disappear\" leaving nonce/random stuff in it's wake after being stored in a variable","date":"2018-02-24T08:09:48.201Z","type":"message"}
{"nick":"hatf0","message":"https://pastebin.com/Smyhc8W3","date":"2018-02-24T08:09:50.051Z","type":"message"}
{"nick":"hatf0","message":"does anybody have a clue on this? running v8 6.5 release on wine (yes i know there exists a linux build but the implementation is for a windows application)","date":"2018-02-24T08:12:00.048Z","type":"message"}
{"nick":"hatf0","message":"https://cdn.discordapp.com/attachments/226544945887051779/416862068675837953/2018-02-24-004026_338x99_scrot.png here's an example of the bug.. the line should be printing out HOST: 0.0.0.0","date":"2018-02-24T08:12:55.443Z","type":"message"}
{"nick":"plutoniix","date":"2018-02-24T08:15:43.128Z","type":"join"}
{"nick":"plutoniix","reason":"Max SendQ exceeded","date":"2018-02-24T08:17:16.146Z","type":"quit"}
{"nick":"plutoniix","date":"2018-02-24T08:17:44.530Z","type":"join"}
{"nick":"plutoniix","reason":"Max SendQ exceeded","date":"2018-02-24T08:18:42.245Z","type":"quit"}
{"nick":"plutoniix","date":"2018-02-24T08:20:37.820Z","type":"join"}
{"nick":"xaxxon","reason":"Quit: xaxxon","date":"2018-02-24T08:34:40.454Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-02-24T11:25:11.021Z","type":"quit"}
{"nick":"mylesborins","date":"2018-02-24T11:25:41.871Z","type":"join"}
{"nick":"AtumT","date":"2018-02-24T11:54:04.645Z","type":"join"}
{"nick":"bradleymeck","date":"2018-02-24T13:26:45.345Z","type":"join"}
{"nick":"plutoniix","reason":"Ping timeout: 264 seconds","date":"2018-02-24T13:59:10.095Z","type":"quit"}
{"nick":"plutoniix","date":"2018-02-24T13:59:40.230Z","type":"join"}
{"nick":"cjihrig_","date":"2018-02-24T14:08:59.801Z","type":"join"}
{"nick":"cjihrig","reason":"Ping timeout: 264 seconds","date":"2018-02-24T14:10:29.589Z","type":"quit"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-24T14:15:38.138Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-24T14:23:43.257Z","type":"join"}
{"nick":"bradleymeck","reason":"Ping timeout: 264 seconds","date":"2018-02-24T14:31:27.205Z","type":"quit"}
{"nick":"bradleymeck","date":"2018-02-24T14:32:37.912Z","type":"join"}
{"nick":"bradleymeck","reason":"Quit: bradleymeck","date":"2018-02-24T15:14:48.682Z","type":"quit"}
{"nick":"devsnek","message":"hatf0: you have to copy the string","date":"2018-02-24T15:21:23.484Z","type":"message"}
{"nick":"devsnek","message":"thats how i do it anyway","date":"2018-02-24T15:21:32.781Z","type":"message"}
{"nick":"devsnek","message":"there's probably some secret","date":"2018-02-24T15:21:40.332Z","type":"message"}
{"nick":"joyee","message":"const char* cstr = *v8::String::Utf8Value(str);","date":"2018-02-24T15:24:25.781Z","type":"message"}
{"nick":"joyee","message":"Doesn't this go out of scope immediately?","date":"2018-02-24T15:25:47.470Z","type":"message"}
{"nick":"joyee","message":"The Utf8Value","date":"2018-02-24T15:26:25.298Z","type":"message"}
{"nick":"joyee","message":"You'll need to assign it to a local variable so it's still in the scope","date":"2018-02-24T15:27:18.939Z","type":"message"}
{"nick":"devsnek","message":"well its still in scope for the printf right?","date":"2018-02-24T15:28:58.179Z","type":"message"}
{"nick":"devsnek","message":"i only ran into this issue while passing stuff around between threads","date":"2018-02-24T15:29:12.133Z","type":"message"}
{"nick":"joyee","message":"Doing something like `const char* cstr = *v8::String::Utf8Value(str);` means the ~Utf8Value will be run almost as soon as it is created","date":"2018-02-24T15:30:06.334Z","type":"message"}
{"nick":"devsnek","message":"how so","date":"2018-02-24T15:31:18.071Z","type":"message"}
{"nick":"devsnek","message":"you mean cuz you do operator(*) inline?","date":"2018-02-24T15:31:44.861Z","type":"message"}
{"nick":"joyee","message":"Yep","date":"2018-02-24T15:31:53.018Z","type":"message"}
{"nick":"devsnek","message":"that makes a lot of sense kek","date":"2018-02-24T15:31:59.232Z","type":"message"}
{"nick":"joyee","message":"Try assigning the Utf8Value to a local variable","date":"2018-02-24T15:32:39.212Z","type":"message"}
{"nick":"devsnek","message":"hatf0: there's your answer","date":"2018-02-24T15:32:42.651Z","type":"message"}
{"nick":"joyee","message":"then do *","date":"2018-02-24T15:32:44.643Z","type":"message"}
{"nick":"AtumT_","date":"2018-02-24T16:27:46.653Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2018-02-24T16:30:33.176Z","type":"quit"}
{"nick":"AtumT","date":"2018-02-24T16:41:18.821Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 240 seconds","date":"2018-02-24T16:41:35.512Z","type":"quit"}
{"nick":"RT|Chatzilla","reason":"Quit: ChatZilla 0.9.86.1 [Firefox 2.0.0.22pre/2010030309]","date":"2018-02-24T16:57:51.995Z","type":"quit"}
{"nick":"AtumT_","date":"2018-02-24T17:02:02.181Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2018-02-24T17:02:27.787Z","type":"quit"}
{"nick":"austincheney","date":"2018-02-24T17:27:57.582Z","type":"join"}
{"nick":"austincheney","message":"either my thoughts on lexical scope are wrong or there is a bug in V8.  If a function has a recursive call are its locally declared references lexically available to the recursive instances in a lexical fashion?","date":"2018-02-24T17:28:19.475Z","type":"message"}
{"nick":"austincheney","message":"For example lets say I declare a reference as  myString = \"\"; but later assign a longer value to that reference `myString = \"somethingLonger\";` just before making a recursive call","date":"2018-02-24T17:29:37.424Z","type":"message"}
{"nick":"austincheney","message":"What value should the recursive instance see for the reference after the declaration point: \"\" or \"somethingLonger\" ?","date":"2018-02-24T17:30:15.021Z","type":"message"}
{"nick":"austincheney","message":"here is the function in question https://github.com/prettydiff/prettydiff/blob/3.0.0/api/node.ts#L311-L347","date":"2018-02-24T17:38:54.300Z","type":"message"}
{"nick":"austincheney","message":"what is curious is that the described behavior differs for the numbers from the string reference","date":"2018-02-24T17:39:15.037Z","type":"message"}
{"nick":"austincheney","message":"The number types are reassigned to the declared value, 0, at each function call.   The string value persists through the recursive calls as though the recursive calls are lexically nested and the string reference \"comm\" is only declared at the highest level (never redeclared in a lower scope)","date":"2018-02-24T17:41:27.821Z","type":"message"}
{"nick":"austincheney","message":"An example run of the mentioned code:  1. clone the code down.  2. run the typescript build `tsc` on the directory.  3. run the project build `node js/build`  4. run `node js/api/node options mode`","date":"2018-02-24T17:44:01.611Z","type":"message"}
{"nick":"austincheney","message":"disregard... i found the cause of my code defect","date":"2018-02-24T17:45:31.754Z","type":"message"}
{"nick":"hatf0","message":"we’ll see","date":"2018-02-24T18:15:29.744Z","type":"message"}
{"nick":"hatf0","message":"well see* the bug is strictly platform specific","date":"2018-02-24T18:15:41.874Z","type":"message"}
{"nick":"hatf0","message":"and thanks guys, i’ll see if that helps","date":"2018-02-24T18:16:33.456Z","type":"message"}
{"nick":"hatf0","message":"also joyee: on Windows am i just strictly running against the clock for the destructor to be called? i know i can strcpy the cstring before it disappears or wrap it in a local handle but the issue is actually non existent on windows entirely","date":"2018-02-24T18:20:07.272Z","type":"message"}
{"nick":"hatf0","message":"regardless it makes sense, thanks for your help, though","date":"2018-02-24T18:21:20.571Z","type":"message"}
{"nick":"joyee","message":"I guess that depends on your compiler settings, maybe you have the debug flag on and msvc (if you use that) do not actually put garbage in a freed block of memory that quick","date":"2018-02-24T18:21:53.541Z","type":"message"}
{"nick":"hatf0","message":"i guess seeing as the memory management models for *nix and windows are vastly different that makes sense","date":"2018-02-24T18:24:26.200Z","type":"message"}
{"nick":"RT|Chatzilla","date":"2018-02-24T23:17:42.092Z","type":"join"}
{"nick":"hatf0","date":"2018-02-24T23:57:20.895Z","type":"quit"}
{"nick":"hatf0","date":"2018-02-24T23:57:29.269Z","type":"join"}
