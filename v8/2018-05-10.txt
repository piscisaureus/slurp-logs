{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-05-10T00:35:23.146Z","type":"quit"}
{"nick":"plutoniix","date":"2018-05-10T03:28:02.808Z","type":"join"}
{"nick":"plutoniix","reason":"Quit: Leaving","date":"2018-05-10T07:50:05.835Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-10T10:25:08.561Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-10T10:25:39.216Z","type":"join"}
{"nick":"AtumT","date":"2018-05-10T10:35:54.757Z","type":"join"}
{"nick":"caitp","message":"bradleymeck: I'm not totally sure we were talking about the same thing with \"rooted\"? I was talking about the composite store being rooted","date":"2018-05-10T13:42:21.209Z","type":"message"}
{"nick":"caitp","message":"and I was thinking, if you let users create their own composite stores, they'd have to be able to create their own roots","date":"2018-05-10T13:42:57.633Z","type":"message"}
{"nick":"caitp","message":"stuff that can outlive the global context, which is probably a horrible idea","date":"2018-05-10T13:43:14.322Z","type":"message"}
{"nick":"caitp","message":"but yeah I'm not that familiar with the proposal so don't take anything I'm sayin too seriously :D","date":"2018-05-10T13:43:52.872Z","type":"message"}
{"nick":"bradleymeck","message":"ah","date":"2018-05-10T13:44:56.980Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: I was being fuzzy with term \"rooted\", my example just changes from the root being the GC root outside of any given global to being tied to a specific global","date":"2018-05-10T13:45:53.688Z","type":"message"}
{"nick":"bradleymeck","message":"tied to but not really placed there in a special way","date":"2018-05-10T13:47:31.628Z","type":"message"}
{"nick":"caitp","message":"yeah, I guess if the user is creating their own stores, the whole cross-realm thing is a moot point so long as other realms can still access their store","date":"2018-05-10T13:50:15.330Z","type":"message"}
{"nick":"caitp","message":"so it doesn't really need to be a gc root","date":"2018-05-10T13:50:32.535Z","type":"message"}
{"nick":"caitp","message":"but, it's important if the proposal is just \"give them a function to make a rich key\", because then they don't reference any specific key store","date":"2018-05-10T13:51:09.580Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: can you clarify, because that is what the proposal currently is and doesn't force them to use a specific store","date":"2018-05-10T13:52:22.553Z","type":"message"}
{"nick":"bradleymeck","message":"the key is opaque though so can't extract meaningful info from just obtaining the key","date":"2018-05-10T13:52:48.180Z","type":"message"}
{"nick":"caitp","message":"yesterday I was saying \"well heck why not just let useres make their own composite collections\" which is similar to making their own composite key stores","date":"2018-05-10T13:54:24.587Z","type":"message"}
{"nick":"caitp","message":"and I added something like \"well I guess all of these collections would need to be gc rooted for the cross-realm aspect\", but that's nonsense","date":"2018-05-10T13:56:03.594Z","type":"message"}
{"nick":"caitp","message":"I'm just saying I admit what I was saying did not make sense.","date":"2018-05-10T13:56:14.502Z","type":"message"}
{"nick":"bradleymeck","message":"mmm i think it made sense, but then again you are an implementer (insert ent picture from lord of the rings) ","date":"2018-05-10T13:58:15.631Z","type":"message"}
{"nick":"bradleymeck","message":"i don't have insight to certain bits of how machinery works","date":"2018-05-10T13:58:27.861Z","type":"message"}
{"nick":"caitp","message":"I think letting a user create as many GC roots as they want is probably a very bad idea, since they're basically constrained by the lifetime of the Isolate","date":"2018-05-10T13:58:56.610Z","type":"message"}
{"nick":"caitp","message":"very abusable thing to do","date":"2018-05-10T13:59:09.509Z","type":"message"}
{"nick":"caitp","message":"so, you wouldn't want that :x","date":"2018-05-10T13:59:14.393Z","type":"message"}
{"nick":"caitp","message":"I guess the thing you might want in some cases, is `let key1 = compositeKey(a, b), key2 = compositeKey(a, b); key1 !== key2`","date":"2018-05-10T14:05:20.946Z","type":"message"}
{"nick":"bradleymeck","message":"why?","date":"2018-05-10T14:05:39.455Z","type":"message"}
{"nick":"caitp","message":"if I understand it, in this proposal, compositeKey() has getOrCreate semantics","date":"2018-05-10T14:05:48.553Z","type":"message"}
{"nick":"bradleymeck","message":"yep","date":"2018-05-10T14:05:55.936Z","type":"message"}
{"nick":"caitp","message":"but, what if you want the same composite collection to produce distinct keys in some cases","date":"2018-05-10T14:06:04.512Z","type":"message"}
{"nick":"caitp","message":"I don't know why, I'm sure someone has a need for that","date":"2018-05-10T14:06:15.567Z","type":"message"}
{"nick":"bradleymeck","message":"use a sentinel first argument for each different distinct case","date":"2018-05-10T14:06:26.881Z","type":"message"}
{"nick":"bradleymeck","message":"let key1 = compositeKey(1, a, b), key2 = compositeKey(2, a, b); key1 !== key2","date":"2018-05-10T14:06:37.115Z","type":"message"}
{"nick":"bradleymeck","message":"you could do it in other positions too, but that gets weird","date":"2018-05-10T14:06:55.666Z","type":"message"}
{"nick":"caitp","message":"\"but bradley, your proposal says to throw a TypeError if you pass an Smi to compositeKey()!\"","date":"2018-05-10T14:07:03.659Z","type":"message"}
{"nick":"caitp","message":"kidding","date":"2018-05-10T14:07:06.877Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: it shouldn't as long as a or b are able to be weakmap keys","date":"2018-05-10T14:07:27.280Z","type":"message"}
{"nick":"bradleymeck","message":"you just need to associate 1+ lifetimes with a Key 0 lifetimes with a Symbol","date":"2018-05-10T14:07:45.797Z","type":"message"}
{"nick":"bradleymeck","message":"we could change Key to have 0 lifetimes requires but that seems at odds with how it should be used","date":"2018-05-10T14:08:10.308Z","type":"message"}
{"nick":"caitp","message":"maybe I misread the polyfill","date":"2018-05-10T14:08:12.497Z","type":"message"}
{"nick":"caitp","message":"I thought it was \"if any argument is a primitive, throw\"","date":"2018-05-10T14:08:20.911Z","type":"message"}
{"nick":"bradleymeck","message":"no, that would make it very complicated for some things like the above","date":"2018-05-10T14:08:37.191Z","type":"message"}
{"nick":"bradleymeck","message":"it does a loop to find referential parts, makes a weakmap trie path using those","date":"2018-05-10T14:08:59.516Z","type":"message"}
{"nick":"bradleymeck","message":"then it makes a strong map path with the non-referential primitive parts","date":"2018-05-10T14:09:13.221Z","type":"message"}
{"nick":"caitp","message":"well you'd probably have like a `const sentinelForMyModule = {};` and use that","date":"2018-05-10T14:09:17.144Z","type":"message"}
{"nick":"caitp","message":"I guess that's not super horrible","date":"2018-05-10T14:09:29.073Z","type":"message"}
{"nick":"bradleymeck","message":"not horrible but unclear on why it needs to be all objects","date":"2018-05-10T14:09:58.704Z","type":"message"}
{"nick":"bradleymeck","message":"primitives have one nasty bit that they can keep things alive for a long time if you have an immortal object","date":"2018-05-10T14:10:17.135Z","type":"message"}
{"nick":"bradleymeck","message":"compositeKey(global, 1) is... leaky","date":"2018-05-10T14:10:40.532Z","type":"message"}
{"nick":"bradleymeck","message":"but so is compositeKey(compositeKey)... so ðŸ¤·","date":"2018-05-10T14:10:53.483Z","type":"message"}
{"nick":"caitp","message":"I'm not sure how it's leaky, since the composite store wouldn't retain the global","date":"2018-05-10T14:11:21.621Z","type":"message"}
{"nick":"caitp","message":"(assuming global is \"global object\"","date":"2018-05-10T14:11:41.306Z","type":"message"}
{"nick":"caitp","message":")","date":"2018-05-10T14:11:43.352Z","type":"message"}
{"nick":"caitp","message":"one thing that might be nice is an optional serialization value for these keys, for debugging you know/","date":"2018-05-10T14:12:27.679Z","type":"message"}
{"nick":"caitp","message":"?","date":"2018-05-10T14:12:28.507Z","type":"message"}
{"nick":"caitp","message":"I can just imagine being the hapless programmer trying to figure out what a particular key was for in devtools","date":"2018-05-10T14:13:09.257Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: as long as that serialization isn't exposed to userland that isn't bad","date":"2018-05-10T14:13:38.403Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: the above are leaky in the sense that as long as the global is alive, that path will be alive, and as long as compositeKey is alive that path is alive","date":"2018-05-10T14:14:18.275Z","type":"message"}
{"nick":"bradleymeck","message":"you would need to destroy the global to free that path which seems like an unlikely intent","date":"2018-05-10T14:14:49.184Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: is there any reason that devtools couldn't just show the path to the key?","date":"2018-05-10T14:15:31.792Z","type":"message"}
{"nick":"bradleymeck","message":"this does give my ideas for my debugger though...","date":"2018-05-10T14:16:18.620Z","type":"message"}
{"nick":"caitp","message":"well, I'm sure it could, but more than likely you end up with a bunch of components that look identical","date":"2018-05-10T14:16:24.225Z","type":"message"}
{"nick":"caitp","message":"not very good instance granularity","date":"2018-05-10T14:16:30.398Z","type":"message"}
{"nick":"bradleymeck","message":"like why can't we just attach random debugger data to references","date":"2018-05-10T14:16:30.407Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: idk, most of my debugging workflows end up with tons of components that look similar","date":"2018-05-10T14:17:46.139Z","type":"message"}
{"nick":"bradleymeck","message":"also you could just do stuff like `compositeKey(user, `${user.email}`); to add descriptions to the path","date":"2018-05-10T14:18:14.119Z","type":"message"}
{"nick":"bradleymeck","message":"there are some really weird things you can do with that fn though which are... uggg","date":"2018-05-10T14:21:35.736Z","type":"message"}
{"nick":"bradleymeck","message":"const key_with_lifetime_of_a_and_b = compositeKey(compositeKey(a), b)","date":"2018-05-10T14:22:35.465Z","type":"message"}
{"nick":"bradleymeck","message":"and if WeakRefs land... it gets really interesting","date":"2018-05-10T14:23:16.556Z","type":"message"}
{"nick":"caitp","message":"how is `compositeKey(compositeKey(a), b)` different from `compositeKey(a, b)`? since the thing from `compositeKey(a)`? `compositeKey(a)` would be orphaned when `a` is collected, so it's sort of the same as `a` being orphaned, just the timing is subtly different?","date":"2018-05-10T14:40:01.982Z","type":"message"}
{"nick":"bradleymeck","message":"well we don't unwrap the `compositeKey(a)` so technically it is tied to that lifetime not `a` but `compositeKey(a)` is tied to `a`'s lifetime","date":"2018-05-10T14:42:29.824Z","type":"message"}
{"nick":"bradleymeck","message":"if someone saved `compositeKey(a)` to a variable it could keep `compositeKey(compositeKey(a), b)`'s path alive","date":"2018-05-10T14:42:55.414Z","type":"message"}
{"nick":"bradleymeck","message":"which is... :-/","date":"2018-05-10T14:43:06.023Z","type":"message"}
{"nick":"bradleymeck","message":"but I think unwrapping has worse effects","date":"2018-05-10T14:43:18.617Z","type":"message"}
{"nick":"caitp","message":"what I'm saying is, if `compositeKey(a)` dies when a dies, and compositeKey(compositeKey(a), b) dies when compositeKey(a) dies, then doesn't compositeKey(compositeKey(a), b) die when a dies?","date":"2018-05-10T14:43:43.039Z","type":"message"}
{"nick":"caitp","message":"since compositeKey(a) isn't kept alive by anything in that particular example","date":"2018-05-10T14:43:56.702Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: yes","date":"2018-05-10T14:44:04.414Z","type":"message"}
{"nick":"bradleymeck","message":"keys die when any of their components die","date":"2018-05-10T14:44:17.010Z","type":"message"}
{"nick":"bradleymeck","message":"path to keys die*","date":"2018-05-10T14:44:24.966Z","type":"message"}
{"nick":"caitp","message":"right, so I was just wondering how it's weird :p","date":"2018-05-10T14:44:35.592Z","type":"message"}
{"nick":"caitp","message":"unless compositeKey(a) gets retained beyond the lifetime of a","date":"2018-05-10T14:44:52.610Z","type":"message"}
{"nick":"caitp","message":"then yes, that kind of breaks things a bit","date":"2018-05-10T14:44:57.480Z","type":"message"}
{"nick":"bradleymeck","message":"it can be retained past the lifetime of a","date":"2018-05-10T14:45:39.190Z","type":"message"}
{"nick":"caitp","message":"of course you could keep the world simple by making that illegal","date":"2018-05-10T14:45:47.644Z","type":"message"}
{"nick":"caitp","message":"\"throw a type error if any component part is a composite key\"","date":"2018-05-10T14:45:59.234Z","type":"message"}
{"nick":"bradleymeck","message":"cause people could do `global.yolo = compositeKey(a)`","date":"2018-05-10T14:46:00.834Z","type":"message"}
{"nick":"bradleymeck","message":"we could throw, but I'm not sure that we need to","date":"2018-05-10T14:46:23.804Z","type":"message"}
{"nick":"bradleymeck","message":"it is just... weird, not complicated","date":"2018-05-10T14:46:30.718Z","type":"message"}
{"nick":"bradleymeck","message":"being able to add to an existing key or combine keys to get a larger set of lifetime bounds seems useful","date":"2018-05-10T14:47:12.318Z","type":"message"}
{"nick":"bradleymeck","message":"well can't add to lifetime of an existing key, make a new key based upon another key*","date":"2018-05-10T14:47:32.735Z","type":"message"}
{"nick":"caitp","message":"my pov is kind of \"weird is a form of complicated\"","date":"2018-05-10T14:48:27.331Z","type":"message"}
{"nick":"caitp","message":"more things to think about","date":"2018-05-10T14:48:36.348Z","type":"message"}
{"nick":"bradleymeck","message":"making exceptions makes things more complicated to me","date":"2018-05-10T14:49:57.040Z","type":"message"}
{"nick":"bradleymeck","message":"more things to know","date":"2018-05-10T14:50:00.377Z","type":"message"}
{"nick":"bradleymeck","message":"having something be weird but act the same as anything else seems easier to learn","date":"2018-05-10T14:50:17.502Z","type":"message"}
{"nick":"bradleymeck","message":"but... I also am still in love with control flow graphs like google draw lets you do (not compiler stuff), more branches makes things much more complicated in those","date":"2018-05-10T14:51:01.702Z","type":"message"}
{"nick":"caitp","message":"I think it's a different way of approaching problem solving --- the error paths are good for like real-time blind programming","date":"2018-05-10T14:52:07.912Z","type":"message"}
{"nick":"caitp","message":"\"oh lets do this --- oh I can't, better try this other approach\"","date":"2018-05-10T14:52:16.050Z","type":"message"}
{"nick":"caitp","message":"where the more open-ended way means everything \"works\" and you have to spend more time finding the best way to do it","date":"2018-05-10T14:52:33.286Z","type":"message"}
{"nick":"caitp","message":"instead of having something sort of prescribed","date":"2018-05-10T14:52:51.889Z","type":"message"}
{"nick":"bradleymeck","message":"if there was a reason to prevent doing it that was more concrete than it being \"weird\", it seems fine to enforce","date":"2018-05-10T14:53:18.682Z","type":"message"}
{"nick":"bradleymeck","message":"since it is an error, could even make it not an error in the future","date":"2018-05-10T14:53:29.435Z","type":"message"}
{"nick":"bradleymeck","message":"otherwise it would act as a testing fn for if something is a compositeKey, which is a bit odd in itself","date":"2018-05-10T14:53:46.065Z","type":"message"}
{"nick":"caitp","message":"I'm not sure there's any reason to not expose that something is a composite key, does it matter?","date":"2018-05-10T14:54:17.044Z","type":"message"}
{"nick":"bradleymeck","message":"idk","date":"2018-05-10T14:54:36.898Z","type":"message"}
{"nick":"bradleymeck","message":"but idk if there is any reason to prevent parts from being a composite key either","date":"2018-05-10T14:54:51.434Z","type":"message"}
{"nick":"caitp","message":"if there's a security reason to hide it, that sesems like the wrong kind of security","date":"2018-05-10T14:54:57.569Z","type":"message"}
{"nick":"caitp","message":"*shrug*","date":"2018-05-10T14:55:08.273Z","type":"message"}
{"nick":"bradleymeck","message":"caitp: i'm not sure about security, but it does mean that polyfills have to consider this cross realm, but cross realm anything with polyfills is nightmares anyway","date":"2018-05-10T14:56:28.076Z","type":"message"}
{"nick":"bradleymeck","message":"weakref on someone elses composite key to test finalization exposes the lifetime of the inner part which is a bit concerning","date":"2018-05-10T14:57:11.967Z","type":"message"}
{"nick":"bradleymeck","message":"that might be true even w/o nesting...","date":"2018-05-10T14:58:55.106Z","type":"message"}
{"nick":"caitp","message":"I should probably get back to work on the class fields stuff, but it's an interesting discussion :)","date":"2018-05-10T15:02:20.201Z","type":"message"}
{"nick":"bradleymeck","message":"made tracking issue thanks to this convo https://github.com/bmeck/proposal-richer-keys/issues/3","date":"2018-05-10T15:05:47.396Z","type":"message"}
{"nick":"mmarchini","message":"is there any way inside V8 to know if a JSObject is a class (`class Foo() {}`) or an instance (`let foo = new Foo()`)?","date":"2018-05-10T15:23:52.431Z","type":"message"}
{"nick":"mmarchini","message":"any flags or bit fields?","date":"2018-05-10T15:24:09.043Z","type":"message"}
{"nick":"bradleymeck","message":"mmarchini: you can check IsConstructor()","date":"2018-05-10T15:24:47.409Z","type":"message"}
{"nick":"caitp","message":"SharedFunctionInfo has a IsClassConstructorBit, the api might expose that somewhere","date":"2018-05-10T15:29:37.640Z","type":"message"}
{"nick":"caitp","message":"if the es6 class-ness is important","date":"2018-05-10T15:30:10.642Z","type":"message"}
{"nick":"mmarchini","message":"The bit is set on instances as well :(","date":"2018-05-10T15:42:38.170Z","type":"message"}
{"nick":"mmarchini","message":"For context: I'm trying to distinguish between classes and instances on llnode","date":"2018-05-10T15:42:57.160Z","type":"message"}
{"nick":"mmarchini","message":"bradleymeck: thanks, I'll look into it later","date":"2018-05-10T15:43:14.851Z","type":"message"}
{"nick":"caitp","message":"that's a bit strane","date":"2018-05-10T15:43:19.654Z","type":"message"}
{"nick":"caitp","message":"how is the bit set on instances, it's part of SharedFunctionInfo","date":"2018-05-10T15:43:34.722Z","type":"message"}
{"nick":"caitp","message":"which is only connected to instances of a function","date":"2018-05-10T15:43:40.023Z","type":"message"}
{"nick":"mmarchini","message":"I mean, if you follow the constructor_or_backpointer tree in the instance map, you'll get the class constructor, which will have the bit set","date":"2018-05-10T15:44:44.595Z","type":"message"}
{"nick":"caitp","message":"if you're working with the api you shouldn't be dealing with maps (or SFI) at all, though?","date":"2018-05-10T15:45:37.311Z","type":"message"}
{"nick":"mmarchini","message":"llnode accesses internal stuff, so not dealing with the API","date":"2018-05-10T15:46:03.208Z","type":"message"}
