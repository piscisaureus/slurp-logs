{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-04-05T00:01:42.514Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T00:19:13.785Z","type":"join"}
{"nick":"d10n-work","reason":"Quit: Connection closed for inactivity","date":"2019-04-05T00:21:18.193Z","type":"quit"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-05T00:23:36.786Z","type":"quit"}
{"nick":"wawasho","reason":"Remote host closed the connection","date":"2019-04-05T00:32:10.310Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T00:47:20.836Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-05T00:51:45.800Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-04-05T00:56:55.467Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T01:07:15.809Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-05T01:12:00.804Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T01:27:21.252Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-05T01:32:04.773Z","type":"quit"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2019-04-05T02:04:06.075Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T02:28:14.375Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-04-05T02:32:58.370Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T02:47:23.374Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 268 seconds","date":"2019-04-05T02:52:09.770Z","type":"quit"}
{"nick":"neo4","date":"2019-04-05T02:53:01.719Z","type":"join"}
{"nick":"dbevenius","date":"2019-04-05T03:09:23.298Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-05T03:13:46.323Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T03:16:04.828Z","type":"join"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-04-05T03:22:41.458Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T03:22:56.910Z","type":"join"}
{"nick":"lpin","date":"2019-04-05T04:58:46.875Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 246 seconds","date":"2019-04-05T06:14:43.268Z","type":"quit"}
{"nick":"wi24rd","reason":"Write error: Connection reset by peer","date":"2019-04-05T06:31:49.863Z","type":"quit"}
{"nick":"wi24rd","date":"2019-04-05T06:41:16.055Z","type":"join"}
{"nick":"lundibundi","date":"2019-04-05T06:57:07.775Z","type":"join"}
{"nick":"richardlau_","date":"2019-04-05T06:59:53.271Z","type":"join"}
{"nick":"richardlau","reason":"Ping timeout: 268 seconds","date":"2019-04-05T07:02:31.862Z","type":"quit"}
{"nick":"richardlau_","reason":"Client Quit","date":"2019-04-05T07:04:24.228Z","type":"quit"}
{"nick":"richardlau","date":"2019-04-05T07:04:40.400Z","type":"join"}
{"nick":"mgol","date":"2019-04-05T07:10:03.362Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 250 seconds","date":"2019-04-05T07:45:13.702Z","type":"quit"}
{"nick":"lundibundi","date":"2019-04-05T07:46:13.868Z","type":"join"}
{"nick":"lpin","reason":"Ping timeout: 244 seconds","date":"2019-04-05T07:59:19.350Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 268 seconds","date":"2019-04-05T08:43:39.902Z","type":"quit"}
{"nick":"lundibundi","date":"2019-04-05T08:56:50.843Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 255 seconds","date":"2019-04-05T09:19:21.828Z","type":"quit"}
{"nick":"lundibundi","date":"2019-04-05T09:28:36.917Z","type":"join"}
{"nick":"wi24rd","reason":"Read error: Connection reset by peer","date":"2019-04-05T09:53:37.794Z","type":"quit"}
{"nick":"wi24rd","date":"2019-04-05T10:02:13.044Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 250 seconds","date":"2019-04-05T11:50:52.886Z","type":"quit"}
{"nick":"lundibundi","date":"2019-04-05T11:54:06.819Z","type":"join"}
{"nick":"zsocw","date":"2019-04-05T13:20:58.842Z","type":"join"}
{"nick":"zsoc","reason":"Disconnected by services","date":"2019-04-05T13:20:58.954Z","type":"quit"}
{"nick":"octetcloud","date":"2019-04-05T13:33:26.847Z","type":"join"}
{"nick":"neo4","reason":"Ping timeout: 268 seconds","date":"2019-04-05T13:34:43.851Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 264 seconds","date":"2019-04-05T13:43:42.735Z","type":"quit"}
{"nick":"julianduque","date":"2019-04-05T13:44:37.354Z","type":"join"}
{"nick":"julianduque","reason":"Ping timeout: 244 seconds","date":"2019-04-05T13:55:18.356Z","type":"quit"}
{"nick":"julianduque","date":"2019-04-05T14:12:05.349Z","type":"join"}
{"nick":"julianduque","reason":"Ping timeout: 245 seconds","date":"2019-04-05T14:16:43.402Z","type":"quit"}
{"nick":"julianduque","date":"2019-04-05T14:32:44.425Z","type":"join"}
{"nick":"julianduque","reason":"Quit: Lost terminal","date":"2019-04-05T14:49:08.915Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-05T15:02:17.629Z","type":"quit"}
{"nick":"julianduque","date":"2019-04-05T15:02:47.840Z","type":"join"}
{"nick":"al-damiri","date":"2019-04-05T15:41:41.720Z","type":"join"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-04-05T16:00:27.557Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T16:09:08.847Z","type":"join"}
{"nick":"lundibundi","date":"2019-04-05T16:09:25.898Z","type":"join"}
{"nick":"zeds","date":"2019-04-05T16:10:02.314Z","type":"join"}
{"nick":"zeds","date":"2019-04-05T16:10:36.372Z","type":"part"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-05T16:16:30.824Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 268 seconds","date":"2019-04-05T16:24:18.778Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T16:27:55.127Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-05T16:32:21.021Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T17:08:40.366Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-05T17:13:04.280Z","type":"quit"}
{"nick":"joepie91","new_nick":"mr`pie","date":"2019-04-05T17:21:53.843Z","type":"nick"}
{"nick":"devsnek","message":"anyone on tsc/release teams, is 27033 going to make v12?","date":"2019-04-05T17:22:09.640Z","type":"message"}
{"nick":"mr`pie","new_nick":"joepie91","date":"2019-04-05T17:22:39.327Z","type":"nick"}
{"nick":"dbevenius","date":"2019-04-05T17:29:25.350Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-04-05T17:33:51.350Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T17:57:53.169Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-04-05T18:02:32.283Z","type":"quit"}
{"nick":"lundibundi","date":"2019-04-05T18:15:14.301Z","type":"join"}
{"nick":"dbevenius","date":"2019-04-05T18:17:38.121Z","type":"join"}
{"nick":"gamelaster","date":"2019-04-05T18:21:18.086Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-05T18:22:15.053Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T18:37:38.177Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 258 seconds","date":"2019-04-05T18:42:33.108Z","type":"quit"}
{"nick":"lundibundi","reason":"Remote host closed the connection","date":"2019-04-05T18:45:26.162Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T18:58:00.953Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-05T19:02:28.784Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T19:30:00.823Z","type":"join"}
{"nick":"shree","date":"2019-04-05T19:31:27.301Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-05T19:34:30.792Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T19:57:44.834Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-05T20:02:24.752Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T20:06:32.015Z","type":"join"}
{"nick":"joyee","message":"addaleax: maybe you want to weigh in in https://chromium-review.googlesource.com/c/v8/v8/+/1546559 ? The V8 folks would prefer us to use inspector for displaying private names instead.I dug around and realized that we have been using Object::PreviewEntires for displaying Weak collections in util.inspect(), that kind of goes into the direction of \"embedder API over inspector\".","date":"2019-04-05T20:22:18.912Z","type":"message"}
{"nick":"joyee","message":" I wonder if it's technically possible to use inspector synchronously in util.inspect, have  you tried that before?","date":"2019-04-05T20:23:22.154Z","type":"message"}
{"nick":"joyee","message":"devsnek: I think you'll need to ping the release team in the thread if you want it to be in v12","date":"2019-04-05T20:25:24.110Z","type":"message"}
{"nick":"devsnek","message":"joyee: a put a comment on the v12.x pr, is that good?","date":"2019-04-05T20:26:23.604Z","type":"message"}
{"nick":"devsnek","message":"also the inspector API can be used synchronously","date":"2019-04-05T20:26:32.258Z","type":"message"}
{"nick":"joyee","message":"yeah sounds good","date":"2019-04-05T20:26:34.366Z","type":"message"}
{"nick":"devsnek","message":"if you use it from the same VM it's inspecting it will always be sync","date":"2019-04-05T20:26:46.597Z","type":"message"}
{"nick":"joyee","message":"There are async methods, though","date":"2019-04-05T20:27:00.587Z","type":"message"}
{"nick":"devsnek","message":"well the API is designed async because it's RPC","date":"2019-04-05T20:27:15.998Z","type":"message"}
{"nick":"joyee","message":"And I think we'd need to use one of those to get objectId","date":"2019-04-05T20:27:25.359Z","type":"message"}
{"nick":"devsnek","message":"i have a thing somewhere 1 sec","date":"2019-04-05T20:27:25.556Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/devsnek/v8-inspector-test","date":"2019-04-05T20:28:14.571Z","type":"message"}
{"nick":"devsnek","message":"inspector.js looks like it should be async","date":"2019-04-05T20:28:59.786Z","type":"message"}
{"nick":"devsnek","message":"but since the inspector is evaluating in the main thread, it's actually sync","date":"2019-04-05T20:29:14.930Z","type":"message"}
{"nick":"joyee","message":"There are async methods in the protocol, those are the ones I am wondering about","date":"2019-04-05T20:29:44.499Z","type":"message"}
{"nick":"joyee","message":"Only very few of them","date":"2019-04-05T20:29:53.510Z","type":"message"}
{"nick":"devsnek","message":"hmmm","date":"2019-04-05T20:29:58.561Z","type":"message"}
{"nick":"joyee","message":"Like Runtime.evaluate","date":"2019-04-05T20:30:00.942Z","type":"message"}
{"nick":"devsnek","message":"Runtime.evaluate is sync","date":"2019-04-05T20:30:56.789Z","type":"message"}
{"nick":"joyee","message":"The profilers integration is based on the fact that all profiler methods are synchronous","date":"2019-04-05T20:30:57.005Z","type":"message"}
{"nick":"joyee","message":"It says async in the protocol though?","date":"2019-04-05T20:31:26.739Z","type":"message"}
{"nick":"devsnek","message":"uhhhh","date":"2019-04-05T20:31:43.204Z","type":"message"}
{"nick":"devsnek","message":"not seeing anything about it here https://chromedevtools.github.io/devtools-protocol/v8/Runtime/","date":"2019-04-05T20:31:57.241Z","type":"message"}
{"nick":"joyee","message":"The issue is, can you guarantee to get the result back during the invocation of sending the method","date":"2019-04-05T20:32:16.489Z","type":"message"}
{"nick":"joyee","message":"I am looking at the protocol json","date":"2019-04-05T20:32:23.855Z","type":"message"}
{"nick":"devsnek","message":"I never had any issues with my test repo, maybe things have changed though","date":"2019-04-05T20:32:43.962Z","type":"message"}
{"nick":"devsnek","message":"I'm about to go to the airport but once I'm there I can look into this more","date":"2019-04-05T20:33:09.556Z","type":"message"}
{"nick":"devsnek","message":"on a sidenote though, using the inspector will add a lot of overhead to inspect","date":"2019-04-05T20:33:40.760Z","type":"message"}
{"nick":"joyee","message":"Only when showHidden = true","date":"2019-04-05T20:34:18.547Z","type":"message"}
{"nick":"devsnek","message":"🤷","date":"2019-04-05T20:34:32.000Z","type":"message"}
{"nick":"joyee","message":"The bigger issue is actually, how do you get contextId of yourselve","date":"2019-04-05T20:34:39.896Z","type":"message"}
{"nick":"joyee","message":"I supposed we could use consoleCalled notification, but it feels awkward","date":"2019-04-05T20:34:57.750Z","type":"message"}
{"nick":"devsnek","message":"there's a getCurrentContextId I think","date":"2019-04-05T20:35:07.438Z","type":"message"}
{"nick":"joyee","message":"I can't find that in the protocol at least, our inspector tests all use the notification to do reflection","date":"2019-04-05T20:35:48.679Z","type":"message"}
{"nick":"devsnek","message":"oh I was thinking of the context created event","date":"2019-04-05T20:36:13.728Z","type":"message"}
{"nick":"devsnek","message":"yeah you have a point","date":"2019-04-05T20:36:23.005Z","type":"message"}
{"nick":"devsnek","message":"maybe we could look into generating a c++ API to call the inspector methods with in addition to the RPC interface","date":"2019-04-05T20:36:58.042Z","type":"message"}
{"nick":"joyee","message":"What do you mean? Like doing what inspector_profiler.cc does?","date":"2019-04-05T20:37:27.456Z","type":"message"}
{"nick":"devsnek","message":"no like","date":"2019-04-05T20:37:57.905Z","type":"message"}
{"nick":"devsnek","message":"V8 generates impl classes from protocol.json","date":"2019-04-05T20:38:08.269Z","type":"message"}
{"nick":"devsnek","message":"actual c++ functions that get mapped to inspector commands","date":"2019-04-05T20:38:19.000Z","type":"message"}
{"nick":"devsnek","message":"we could maybe generate a wrapper around those c++ functions to call them instead of doing rpc","date":"2019-04-05T20:38:38.891Z","type":"message"}
{"nick":"devsnek","message":"which would fix the async issue","date":"2019-04-05T20:38:43.821Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-05T20:38:44.999Z","type":"quit"}
{"nick":"devsnek","message":"and get rid of some overhead","date":"2019-04-05T20:38:48.730Z","type":"message"}
{"nick":"joyee","message":"I think that's already possible, that's how we generate Node.js specific protocol","date":"2019-04-05T20:38:52.626Z","type":"message"}
{"nick":"joyee","message":"But it seems...too much for util.inspect","date":"2019-04-05T20:39:00.677Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-04-05T20:39:09.279Z","type":"message"}
{"nick":"devsnek","message":"never let reason stop you /s","date":"2019-04-05T20:39:18.846Z","type":"message"}
{"nick":"devsnek","message":"anyway it should be possible to add a sync inspector interface like I have and like the profiler uses","date":"2019-04-05T20:40:07.044Z","type":"message"}
{"nick":"joyee","message":"Would be much easier if we can just call an embedder API and be done with it","date":"2019-04-05T20:40:11.621Z","type":"message"}
{"nick":"devsnek","message":"I agree","date":"2019-04-05T20:40:18.970Z","type":"message"}
{"nick":"dbevenius","date":"2019-04-05T20:42:09.434Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-04-05T20:46:43.369Z","type":"quit"}
{"nick":"gamelaster","reason":"Read error: Connection reset by peer","date":"2019-04-05T21:00:01.395Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T21:38:24.787Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-05T21:43:12.800Z","type":"quit"}
{"nick":"zsoc","date":"2019-04-05T21:56:27.267Z","type":"join"}
{"nick":"zsoc","reason":"Changing host","date":"2019-04-05T21:56:27.377Z","type":"quit"}
{"nick":"zsoc","date":"2019-04-05T21:56:27.377Z","type":"join"}
{"nick":"mmarchini","date":"2019-04-05T21:59:34.414Z","type":"join"}
{"nick":"qbit1","date":"2019-04-05T22:01:04.055Z","type":"join"}
{"nick":"julian_duque","date":"2019-04-05T22:01:11.349Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 255 seconds","date":"2019-04-05T22:01:14.177Z","type":"quit"}
{"nick":"julianduque","reason":"Ping timeout: 255 seconds","date":"2019-04-05T22:01:14.607Z","type":"quit"}
{"nick":"qbit","reason":"Ping timeout: 255 seconds","date":"2019-04-05T22:01:14.818Z","type":"quit"}
{"nick":"mmarchini_","reason":"Ping timeout: 246 seconds","date":"2019-04-05T22:01:18.695Z","type":"quit"}
{"nick":"Wes-","reason":"Ping timeout: 246 seconds","date":"2019-04-05T22:01:19.405Z","type":"quit"}
{"nick":"zsocw","reason":"Ping timeout: 246 seconds","date":"2019-04-05T22:01:19.616Z","type":"quit"}
{"nick":"lanceball","reason":"Ping timeout: 246 seconds","date":"2019-04-05T22:01:19.807Z","type":"quit"}
{"nick":"Wes-","date":"2019-04-05T22:01:32.712Z","type":"join"}
{"nick":"qbit1","new_nick":"qbit","date":"2019-04-05T22:02:47.246Z","type":"nick"}
{"nick":"octetcloud","date":"2019-04-05T22:03:05.749Z","type":"join"}
{"nick":"lanceball","date":"2019-04-05T22:04:25.878Z","type":"join"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-05T22:10:42.340Z","type":"quit"}
{"nick":"addaleax","message":"joyee: soo … for your “For instance, is it possible to reflect the object passed into the inspect function as arguments?” question, I think the answer is yes, because you can get function arguments (and local variables and much more) by inspecting the current stack trace … I did that in https://github.com/addaleax/stuck/blob/master/index.js – it’s not, err, a pretty approach","date":"2019-04-05T22:21:57.403Z","type":"message"}
{"nick":"joyee","message":"addaleax: thanks! it seems possible to walk the scope chain to get the object id (though that seems uh...quite heavy for something like util.inspect)","date":"2019-04-05T22:25:24.018Z","type":"message"}
{"nick":"addaleax","message":"joyee: yeah, I prefer your CL, but I’m still thinking on how to best voice support for it","date":"2019-04-05T22:25:54.024Z","type":"message"}
{"nick":"joyee","message":"Does that work synchronously? i.e. all callbacks guarntees to finish before __getStack finishes","date":"2019-04-05T22:25:59.506Z","type":"message"}
{"nick":"addaleax","message":"joyee: yeah, the whole thing’s synchronous :D","date":"2019-04-05T22:26:08.245Z","type":"message"}
{"nick":"dbevenius","date":"2019-04-05T22:28:10.062Z","type":"join"}
{"nick":"joyee","message":"addaleax: interesting, I thought something like Runtime.callFunctionOn is supposed to be async...I'll dig into our dispatcher to see what's going on there","date":"2019-04-05T22:28:55.845Z","type":"message"}
{"nick":"joyee","message":"Maybe it just calls all queued callbacks before returning to JS land","date":"2019-04-05T22:29:34.754Z","type":"message"}
{"nick":"addaleax","message":"joyee: I am not sure, but I think it’s genuinely synchronous code (it’s in v8/src/inspector/v8-runtime-agent-impl.cc, if you’re looking)","date":"2019-04-05T22:31:48.111Z","type":"message"}
{"nick":"addaleax","message":"it does look like it has its own MicrotasksScope, which is kinda interesting/surprising to me","date":"2019-04-05T22:32:12.350Z","type":"message"}
{"nick":"joyee","message":"I've only looked into the synchronous methods, they are called immediately, whereas async methods are queued, but I did not look into further about when the queue is processed","date":"2019-04-05T22:32:30.019Z","type":"message"}
{"nick":"joyee","message":"(^ was talking about callbacks)","date":"2019-04-05T22:33:03.446Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 264 seconds","date":"2019-04-05T22:33:04.031Z","type":"quit"}
{"nick":"joyee","message":"My guess was it's up to the embedder to handle that","date":"2019-04-05T22:34:20.010Z","type":"message"}
{"nick":"joyee","message":"The actual implementation is generated with jinja, so it's a bit hard to grok","date":"2019-04-05T22:36:15.758Z","type":"message"}
{"nick":"dbevenius","date":"2019-04-05T22:38:14.025Z","type":"join"}
{"nick":"mgol","date":"2019-04-05T22:41:45.642Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 252 seconds","date":"2019-04-05T22:42:34.081Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-05T22:51:54.372Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T22:57:52.121Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 258 seconds","date":"2019-04-05T23:02:27.151Z","type":"quit"}
{"nick":"joyee","message":"Looks like it's all synchronous in Node, because `ChannelImpl::sendProtocolResponse` etc. just invokes `InspectorSessionDelegate::sendMessageToFrontend` immediately, which in the case of the inspector module, just does `MakeCallback` eventually","date":"2019-04-05T23:04:25.176Z","type":"message"}
{"nick":"devsnek","message":"addaleax: the microtask scope is needed to preempt the loop in case the await option is used","date":"2019-04-05T23:06:33.287Z","type":"message"}
{"nick":"joyee","message":"Chromium seems to do something more sophisticated though, I guess the async field in the protocol just stands for \"it is guaranteed to be async or not\"","date":"2019-04-05T23:06:41.743Z","type":"message"}
{"nick":"addaleax","message":"joyee: yeah, and tbh, I like that it’s sync :)","date":"2019-04-05T23:07:03.588Z","type":"message"}
{"nick":"devsnek","message":"sync is nice","date":"2019-04-05T23:07:09.293Z","type":"message"}
{"nick":"devsnek","message":"now if there was just a c++ api for this instead of needing to make json strings and such...","date":"2019-04-05T23:07:42.088Z","type":"message"}
{"nick":"addaleax","message":"devsnek: that makes sense, I was just a bit surprised because I think it also means that microtasks created outside of the scope also run at the end of it (right?)","date":"2019-04-05T23:07:47.396Z","type":"message"}
{"nick":"devsnek","message":"i am unsure of that","date":"2019-04-05T23:08:01.724Z","type":"message"}
{"nick":"joyee","message":"Well, I think json strings is kind of the point of the protocol?","date":"2019-04-05T23:08:07.305Z","type":"message"}
{"nick":"devsnek","message":"the microtask queue logic is all CSA and impossible to read","date":"2019-04-05T23:08:15.850Z","type":"message"}
{"nick":"joyee","message":"And all those templates","date":"2019-04-05T23:08:18.050Z","type":"message"}
{"nick":"joyee","message":"Otherwise, you'll have to map all the types in the protocol into C++, probably as tons of classes/structs, which seem to be..a lot of code","date":"2019-04-05T23:11:19.621Z","type":"message"}
{"nick":"devsnek","message":"i have still not been able to solve why this https://github.com/v8/v8/blob/master/src/builtins/builtins-microtask-queue-gen.cc#L309-L317","date":"2019-04-05T23:12:07.060Z","type":"message"}
{"nick":"devsnek","message":"doesn't seem to actually trigger a message","date":"2019-04-05T23:12:14.769Z","type":"message"}
{"nick":"joyee","message":"You can break into Runtime_ReportMessage I guess?","date":"2019-04-05T23:12:50.562Z","type":"message"}
{"nick":"devsnek","message":"yeah it sets the pending exception and does an unhandled exception call","date":"2019-04-05T23:13:25.362Z","type":"message"}
{"nick":"devsnek","message":"which node should then pick up","date":"2019-04-05T23:13:29.730Z","type":"message"}
{"nick":"devsnek","message":"but it just doesn't","date":"2019-04-05T23:13:34.558Z","type":"message"}
{"nick":"dbevenius","date":"2019-04-05T23:18:07.146Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 264 seconds","date":"2019-04-05T23:22:52.033Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T23:42:15.355Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 240 seconds","date":"2019-04-05T23:46:47.316Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-05T23:50:34.156Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-05T23:55:01.686Z","type":"quit"}
