{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-05-09T00:28:50.868Z","type":"quit"}
{"nick":"antsmartian","date":"2019-05-09T01:13:32.556Z","type":"join"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-05-09T01:52:57.048Z","type":"quit"}
{"nick":"devsnek","message":"Domenic: fwiw i'm not aware of any cases of people using util.inspect output to get internal data from things","date":"2019-05-09T02:12:34.245Z","type":"message"}
{"nick":"devsnek","message":"probably because its difficult to grok and changes a lot","date":"2019-05-09T02:12:45.295Z","type":"message"}
{"nick":"Domenic","message":"It's not terribly comforting to say \"we provide a facility to break language invariants but most people don't use it\"","date":"2019-05-09T02:13:06.100Z","type":"message"}
{"nick":"devsnek","message":"i mean ideally we just want to be able to debug without opening engine specific tooling","date":"2019-05-09T02:13:51.844Z","type":"message"}
{"nick":"Domenic","message":"A program should not be able to debug itself, is my contention.","date":"2019-05-09T02:14:16.793Z","type":"message"}
{"nick":"devsnek","message":"hmmmm","date":"2019-05-09T02:14:36.798Z","type":"message"}
{"nick":"devsnek","message":"i don't think you can really get away with that in js","date":"2019-05-09T02:14:53.327Z","type":"message"}
{"nick":"Domenic","message":"Just really looking forward to deno, these days. Between this and the latest frozen intrinsics work, Node just has a completely wacky security model for my tastes.","date":"2019-05-09T02:14:57.762Z","type":"message"}
{"nick":"Domenic","message":"I mean, we do in the browser.","date":"2019-05-09T02:15:02.303Z","type":"message"}
{"nick":"Domenic","message":"(And in deno)","date":"2019-05-09T02:15:06.593Z","type":"message"}
{"nick":"devsnek","message":"people do all sorts of insane things in browser to inject debug stuff","date":"2019-05-09T02:15:14.693Z","type":"message"}
{"nick":"devsnek","message":"sentry and error listeners and etc","date":"2019-05-09T02:15:21.888Z","type":"message"}
{"nick":"Domenic","message":"They can't break language invariants.","date":"2019-05-09T02:15:25.659Z","type":"message"}
{"nick":"devsnek","message":"true","date":"2019-05-09T02:15:31.272Z","type":"message"}
{"nick":"Domenic","message":"There's a clear process boundary between inspector and JS engine. Same with I/O.","date":"2019-05-09T02:15:44.597Z","type":"message"}
{"nick":"devsnek","message":"it is kinda weird that the inspector module exists","date":"2019-05-09T02:16:29.614Z","type":"message"}
{"nick":"octetcloud","message":"Domenic: What's wacky about the frozen intrinsics, in your opinion? I  think it has some issues, but I don't know if they are same ones as you.","date":"2019-05-09T02:18:12.726Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: this is a long debate, with a history in TC39. A vocal very small minority has a strange \"ocap\" security model where you protect things by freezing and so on and only handing out access to certain code paths. This imposes terribly strange requirements on both the language design (because that minority has a veto because they paid Ecma $$$) and on programmers who try to use their systems (cannot add properties to","date":"2019-05-09T02:20:24.399Z","type":"message"}
{"nick":"Domenic","message":"frozen objects, can't use polyfills, etc.). Whereas all the browser teams rely on process isolation (especially in the post-Spectre world) to prevent unauthorized access, and when people report an \"oh no frozenness is broken\" test262 failure, it is not treated as a security issue at all, because we just fundamentally disagree with a security model based on ocap.","date":"2019-05-09T02:20:24.511Z","type":"message"}
{"nick":"devsnek","message":"jesse js ftw","date":"2019-05-09T02:21:24.887Z","type":"message"}
{"nick":"octetcloud","message":"fwiw, ruby's and lua's debugger is written in ruby and lua, respectively, having a language able to debug itself is seen as \"completion\" by some. node might be different, but its not obviously different to me.","date":"2019-05-09T02:21:29.694Z","type":"message"}
{"nick":"Domenic","message":"I'm really excited that deno is picking up on the browser security model with process isolation and a dedicated I/O process which only interfaces via IPC","date":"2019-05-09T02:21:33.965Z","type":"message"}
{"nick":"devsnek","message":"i think deno has some good stuff","date":"2019-05-09T02:21:46.142Z","type":"message"}
{"nick":"devsnek","message":"it falls short of what i would want overall though","date":"2019-05-09T02:21:54.721Z","type":"message"}
{"nick":"Domenic","message":"I'm starting to convert my personal scripts to it","date":"2019-05-09T02:22:12.537Z","type":"message"}
{"nick":"devsnek","message":"octetcloud: its not about the debug stuff being written in js, its that random js code in node can inspect other js code in node","date":"2019-05-09T02:22:22.167Z","type":"message"}
{"nick":"octetcloud","message":"Interesting feedback. I'm just getting up to speed on the state of this stuff, so its helpful to know what the points of view are. Personally, given that node has the same sec model as every programming language I've ever used - the program has access to the whole program, I'm trying really hard to get understand why there are some vocal security folks saying its broken.","date":"2019-05-09T02:23:44.966Z","type":"message"}
{"nick":"devsnek","message":"i don't much understand it either","date":"2019-05-09T02:23:59.745Z","type":"message"}
{"nick":"devsnek","message":"browsers make sense","date":"2019-05-09T02:24:04.415Z","type":"message"}
{"nick":"devsnek","message":"but for a raw runtime","date":"2019-05-09T02:24:10.032Z","type":"message"}
{"nick":"devsnek","message":"if you're running untrusted code you already have a problem","date":"2019-05-09T02:24:28.973Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: in languages with strong encapsulation (which are admittedly rare), there is no way to access private variables","date":"2019-05-09T02:24:59.978Z","type":"message"}
{"nick":"octetcloud","message":"devsnek: yep, I see that, what little protection js gives you the C++ bindings used by util.inspect are tunneling through?  I don't have a strong opinion, but I see the concern. And btw, that's exactly what lua's (and ruby's, IIRC) debug libs let you do.","date":"2019-05-09T02:25:04.977Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: in JS there is no way to access private variables","date":"2019-05-09T02:25:10.105Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: but in Node, there is a way. That is frustrating. It makes private fields pointless, I might as well use symbols or underscored properties.","date":"2019-05-09T02:25:29.391Z","type":"message"}
{"nick":"devsnek","message":"yeah i don't want to let random code access private data","date":"2019-05-09T02:25:33.529Z","type":"message"}
{"nick":"devsnek","message":"i'm legit not sure why the inspector module exists","date":"2019-05-09T02:25:55.608Z","type":"message"}
{"nick":"devsnek","message":"but i want console.log to show the private data, because that's actually useful","date":"2019-05-09T02:26:03.670Z","type":"message"}
{"nick":"octetcloud","message":"I think there are two concepts, and they get confused.","date":"2019-05-09T02:26:21.489Z","type":"message"}
{"nick":"Domenic","message":"Also yeah let's be clear the difference between encapsulation (private fields) and security (process isolation). I don't think my concerns about private fields are security concerns. With Spectre nothing's private in the end.","date":"2019-05-09T02:26:22.603Z","type":"message"}
{"nick":"devsnek","message":"does deno have a native api interop of some sort","date":"2019-05-09T02:26:49.477Z","type":"message"}
{"nick":"Domenic","message":"devsnek: I would rather console.log() not show private data. That prevents me from emulating Array/Map/Promise/etc.","date":"2019-05-09T02:26:49.565Z","type":"message"}
{"nick":"octetcloud","message":"one is expression of intent. If I make a c++ class have private data, I can't refer to it with valid C++. The intent is expressed. But its in memory, I can walk over to it with a pointer and access it. It's not a security mechanism.","date":"2019-05-09T02:27:10.271Z","type":"message"}
{"nick":"devsnek","message":"console.log in a browser does","date":"2019-05-09T02:27:10.564Z","type":"message"}
{"nick":"devsnek","message":"i don't see the difference","date":"2019-05-09T02:27:17.045Z","type":"message"}
{"nick":"Domenic","message":"devsnek: you are right it does in the browser. It's a bit sad. I guess \"what shows on the console\" is not something you can write tests against though (in the browser at least), so in practice it's fine.","date":"2019-05-09T02:28:09.703Z","type":"message"}
{"nick":"Domenic","message":"devsnek: deno's native API interop is IPC to another process. As it should be :D","date":"2019-05-09T02:28:21.005Z","type":"message"}
{"nick":"joyee","message":"devsnek: even if the inspector module does not exist you can still use the protocol by creating a Websocket client that interacts with the inspector server","date":"2019-05-09T02:28:30.070Z","type":"message"}
{"nick":"octetcloud","message":"same with util.inspect/any kind of debug hack to gain access to a private class var. When I change my class to not have that private var, and your code broke, I get the right to laugh at you for depending on my private properties. If you use util.inspect to get them and break app security, I should get laughed at for thinking anything in process is that secure.","date":"2019-05-09T02:28:41.728Z","type":"message"}
{"nick":"devsnek","message":"joyee: sure, but the inspector module lets you create that session","date":"2019-05-09T02:28:45.481Z","type":"message"}
{"nick":"devsnek","message":"at the very least i would expect it to be under the v8 module","date":"2019-05-09T02:28:54.024Z","type":"message"}
{"nick":"devsnek","message":"its still experimental, maybe we can limit/(re)move it?","date":"2019-05-09T02:29:10.279Z","type":"message"}
{"nick":"joyee","message":"Wait it is?","date":"2019-05-09T02:29:24.741Z","type":"message"}
{"nick":"devsnek","message":"big orange banner in the docs","date":"2019-05-09T02:29:34.089Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: those are the same arguments people say about \"don't use _-prefixed fields. If you touch them, I get to the right to laugh at you.\" If all we wanted was \"right to laugh at you\", we never should have added private fields to JavaScript. But, some of us wanted actual encapsulation.","date":"2019-05-09T02:29:45.187Z","type":"message"}
{"nick":"octetcloud","message":"Domenic: I'm an old QNX4 dev, I *loved* uservice via IPC as an O/S construction mechanism, but... so it goes. Didn't take off, hard to make as fast as linux system calls. We'll see how deno does.","date":"2019-05-09T02:30:04.828Z","type":"message"}
{"nick":"devsnek","message":"i'm sad that \"fields\" exist in js tbh","date":"2019-05-09T02:30:13.334Z","type":"message"}
{"nick":"ljharb","message":"private fields are great tho","date":"2019-05-09T02:30:32.651Z","type":"message"}
{"nick":"devsnek","message":"in languages with permission capability systems maybe","date":"2019-05-09T02:30:56.740Z","type":"message"}
{"nick":"ljharb","message":"in JS","date":"2019-05-09T02:31:02.586Z","type":"message"}
{"nick":"ljharb","message":"wait, is there a way to show private fields in node? O.o","date":"2019-05-09T02:31:08.269Z","type":"message"}
{"nick":"devsnek","message":"no","date":"2019-05-09T02:31:12.087Z","type":"message"}
{"nick":"ljharb","message":"util.inspect isn't showing them","date":"2019-05-09T02:31:12.174Z","type":"message"}
{"nick":"devsnek","message":"we want to show them in console.log","date":"2019-05-09T02:31:18.842Z","type":"message"}
{"nick":"ljharb","message":"why","date":"2019-05-09T02:31:24.254Z","type":"message"}
{"nick":"ljharb","message":"why is that useful","date":"2019-05-09T02:31:26.453Z","type":"message"}
{"nick":"devsnek","message":"debugging things is hard when you can't see them","date":"2019-05-09T02:31:34.327Z","type":"message"}
{"nick":"octetcloud","message":"In the presence of C++ addons, there is no encapsulation. _ was just a convention, now you have to work harder. Anyhow, I wasn't one of  the folks asking for private classes properties, so I guess I'm not the right person to be upset if it turns out you can still access any data within the process.","date":"2019-05-09T02:31:35.114Z","type":"message"}
{"nick":"ljharb","message":"devsnek: you don't show closed-over variables when you log a function. this is the same thing.","date":"2019-05-09T02:31:53.448Z","type":"message"}
{"nick":"ljharb","message":"devsnek: that's where the debugger becomes useful, not console.log.","date":"2019-05-09T02:32:03.900Z","type":"message"}
{"nick":"devsnek","message":"ljharb: chrome's console shows them 🤷","date":"2019-05-09T02:32:11.356Z","type":"message"}
{"nick":"Domenic","message":"ljharb: https://github.com/nodejs/node/issues/27404","date":"2019-05-09T02:32:17.624Z","type":"message"}
{"nick":"ljharb","message":"eesh, it shouldn't","date":"2019-05-09T02:32:20.671Z","type":"message"}
{"nick":"devsnek","message":"chrome's console is the debugger","date":"2019-05-09T02:32:30.314Z","type":"message"}
{"nick":"devsnek","message":"and i can't even tell you the last time i had to open chrome to debug my node code","date":"2019-05-09T02:32:43.314Z","type":"message"}
{"nick":"Domenic","message":"util.inspect() is worse than console.log() because you can get the output as a string and then grep it","date":"2019-05-09T02:32:49.498Z","type":"message"}
{"nick":"Domenic","message":"In the browser there's no way to inspect console.log() output","date":"2019-05-09T02:32:57.173Z","type":"message"}
{"nick":"devsnek","message":"i think i was trying to debug async module loading in node core itself","date":"2019-05-09T02:33:00.426Z","type":"message"}
{"nick":"Domenic","message":"In Node I guess you could probably listen on your own stdout somehow anyway","date":"2019-05-09T02:33:07.888Z","type":"message"}
{"nick":"devsnek","message":"yeah util.inspect is weird","date":"2019-05-09T02:33:16.456Z","type":"message"}
{"nick":"devsnek","message":"i don't know that you can intercept stdout in node","date":"2019-05-09T02:33:23.725Z","type":"message"}
{"nick":"devsnek","message":"i mean you can probably do native module stuff","date":"2019-05-09T02:33:49.330Z","type":"message"}
{"nick":"ljharb","message":"`process.stdout.on()` works","date":"2019-05-09T02:33:49.969Z","type":"message"}
{"nick":"ljharb","message":"oh but maybe that won't prevent it from logging","date":"2019-05-09T02:34:02.894Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-05-09T02:34:02.983Z","type":"message"}
{"nick":"octetcloud","message":"Domenic: actually, I'm confused what camp you are in, or if there ones. You seemed to be saying that using language mechanisms to assert accessibilty was misguided, but now are saying that you are unhappy that class privacy assertions on access can be penetrated. I think I may have misunderstood you.","date":"2019-05-09T02:34:12.583Z","type":"message"}
{"nick":"devsnek","message":"no you make a good point","date":"2019-05-09T02:34:15.782Z","type":"message"}
{"nick":"devsnek","message":"its as weak as the structure of eventemitter","date":"2019-05-09T02:34:20.944Z","type":"message"}
{"nick":"ljharb","message":"private fields shouldn't show up in chrome's console either imo.","date":"2019-05-09T02:34:42.544Z","type":"message"}
{"nick":"ljharb","message":"i should have to be on a breakpoint inside the class body to be able to even see they exist","date":"2019-05-09T02:35:00.592Z","type":"message"}
{"nick":"joyee","message":"You can monkey patch the streams that console.log use (shrug) and there is a test for it because testing frameworks depend knit","date":"2019-05-09T02:35:02.228Z","type":"message"}
{"nick":"octetcloud","message":"listen on own stdout: `process.stdout._write = ...` :-)","date":"2019-05-09T02:35:10.592Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: I agree I haven't been super clear. I think language mechanisms are not security mechanisms, they are encapsulation mechanisms. I am sad when we totally lose encapsulation, as I learned we did today in Node due to the inspector module. But this is not a security issue. Separately, I think it's bad that Node is doing this frozen intrinsics stuff as a security thing, as that is explicitly not how to do security.","date":"2019-05-09T02:35:48.427Z","type":"message"}
{"nick":"Domenic","message":"Together this points toward a confused attitude toward both security & encapsulation in Node.","date":"2019-05-09T02:35:48.539Z","type":"message"}
{"nick":"devsnek","message":"frozen intrinsics make no sense to me","date":"2019-05-09T02:36:32.898Z","type":"message"}
{"nick":"devsnek","message":"because they fall into the thing where you don't trust code you're running","date":"2019-05-09T02:36:40.678Z","type":"message"}
{"nick":"devsnek","message":"and that makes no sense to me","date":"2019-05-09T02:36:44.013Z","type":"message"}
{"nick":"joyee","message":"ljharb: to implement this in Node you need to break your own code in JS which is possible through the inspector module","date":"2019-05-09T02:36:59.211Z","type":"message"}
{"nick":"ljharb","message":"joyee: not sure what that means exactly","date":"2019-05-09T02:37:26.888Z","type":"message"}
{"nick":"joyee","message":"And then get the previews by inspecting your scope chain","date":"2019-05-09T02:37:31.107Z","type":"message"}
{"nick":"devsnek","message":"its not possible to pass an object to the inspector","date":"2019-05-09T02:37:33.034Z","type":"message"}
{"nick":"devsnek","message":"you have to be cleverer","date":"2019-05-09T02:37:41.986Z","type":"message"}
{"nick":"devsnek","message":"like save the object in a variable then call the inspector within that frame and grab the variable","date":"2019-05-09T02:38:00.740Z","type":"message"}
{"nick":"octetcloud","message":"ok, so to people who demo exploiting apps by convincing them to assign into Object and replace parts of the intrinsic objects with malicious code, and who point out that wouldn't be possible, you say what? (btw, in case its not clear enough, I am totally NOT trolling, I'm trying to understand the very strong and contradictory points of view I'm seeing)","date":"2019-05-09T02:38:02.010Z","type":"message"}
{"nick":"octetcloud","message":"\"wouldn't be possible\" -> \"be possible if intrinsics were frozen\" I meant.","date":"2019-05-09T02:38:27.237Z","type":"message"}
{"nick":"joyee","message":"ljharb: you can set a breakpoint at your own code when you run you code. From there you get access to your own scope chain in the same process","date":"2019-05-09T02:40:16.796Z","type":"message"}
{"nick":"joyee","message":"it’s like reflection on crack","date":"2019-05-09T02:40:38.881Z","type":"message"}
{"nick":"ljharb","message":"hm","date":"2019-05-09T02:41:15.926Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: well a) intrinsic frozenness will not stop all such attacks. Running untrusted code in your own process is fundamentally insecure and not a security model that V8 supports. There are many ways such code can cause problems, such as the just-discovered inspect module. Frozen intrinsics won't hack it. b) Frozenness is not a security boundary that is protected by the V8 team. Problems in frozenness are treated as","date":"2019-05-09T02:41:43.792Z","type":"message"}
{"nick":"Domenic","message":"correctness issues, not security issues. So attempting to use it as the foundation for protection is not well aligned with the priorities of the people maintaining that infrastructure.","date":"2019-05-09T02:41:43.879Z","type":"message"}
{"nick":"joyee","message":"Oh and you can do crazy things if you Runtime.Evaluate objects in your scope chain...","date":"2019-05-09T02:41:44.433Z","type":"message"}
{"nick":"devsnek","message":"if private fields don't show up in chrome console, where do they show up","date":"2019-05-09T02:42:35.446Z","type":"message"}
{"nick":"devsnek","message":"you would just have to set breakpoints?","date":"2019-05-09T02:42:51.238Z","type":"message"}
{"nick":"joyee","message":"I am not sure how liveedit work through the protocol yet but you may even be able to live edit your own code while it’s running which is.....pure evil","date":"2019-05-09T02:43:35.074Z","type":"message"}
{"nick":"devsnek","message":"only works within context boundaries","date":"2019-05-09T02:43:56.572Z","type":"message"}
{"nick":"octetcloud","message":"Domenic: ok. one follow on question, then: why does frozen exist? is it part of the stuff you feel was forced into the language inappropriately and misguidedly?","date":"2019-05-09T02:44:10.976Z","type":"message"}
{"nick":"joyee","message":"you get access to your context once you break at your own code","date":"2019-05-09T02:44:33.681Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: that's definitely a big part of it. Someone refused to approve ES5 unless we added it.","date":"2019-05-09T02:44:35.439Z","type":"message"}
{"nick":"octetcloud","message":"Domenic: thanks, clarifies some things.","date":"2019-05-09T02:44:52.540Z","type":"message"}
{"nick":"Domenic","message":"octetcloud: otherwise, it can be useful as a kind of runtime TypeScript, from the days before we had the technology. Get a nice error if you accidentally change something that other parts of (YOUR OWN) code suggested should not be changed.","date":"2019-05-09T02:45:11.970Z","type":"message"}
{"nick":"devsnek","message":"fields were inappropriate and misguided :(","date":"2019-05-09T02:45:31.457Z","type":"message"}
{"nick":"octetcloud","message":"about inspector, interesting, my memory is getting jogged.... there used to be Debug object exposed by V8 that had js methods... but it wasn't exposed by node by default, it took explicit CLI switches.","date":"2019-05-09T02:46:45.069Z","type":"message"}
{"nick":"devsnek","message":"yeah that was removed a while ago","date":"2019-05-09T02:47:21.208Z","type":"message"}
{"nick":"devsnek","message":"was fun to play with though","date":"2019-05-09T02:47:27.393Z","type":"message"}
{"nick":"devsnek","message":"i remember you could create a new vm context with the exposeDebug thing","date":"2019-05-09T02:47:35.097Z","type":"message"}
{"nick":"joyee","message":"octetcloud you can programmically turn on v8 flags through v8.setFlagsFromCommandLine (? don’t remember the exact name)","date":"2019-05-09T02:48:24.296Z","type":"message"}
{"nick":"devsnek","message":"its documented","date":"2019-05-09T02:48:47.137Z","type":"message"}
{"nick":"octetcloud","message":"yeah, but they don't all work when called after the fact (and I don't think v8 existed in node at the time, this was 0.10/0.12 IIRC - and I may not)","date":"2019-05-09T02:49:24.204Z","type":"message"}
{"nick":"joyee","message":"To be fair at the moment the inspector only allows you to read private data. That’s not super severe compared to having write access to your private data - which is much more problematic - user land monkey-patching makes Node core super conservative about changing certain internals.","date":"2019-05-09T02:52:17.888Z","type":"message"}
{"nick":"joyee","message":"(net.Server.prototype._listen2, I am looking at you)","date":"2019-05-09T02:56:11.027Z","type":"message"}
{"nick":"fcanela","reason":"Ping timeout: 258 seconds","date":"2019-05-09T03:07:15.926Z","type":"quit"}
{"nick":"fcanela","date":"2019-05-09T03:59:24.299Z","type":"join"}
{"nick":"howdoi","date":"2019-05-09T04:10:29.247Z","type":"join"}
{"nick":"ljharb","message":"devsnek: yes, the same way you can find closed-over variables.","date":"2019-05-09T04:24:51.433Z","type":"message"}
{"nick":"lpin","date":"2019-05-09T05:14:49.792Z","type":"join"}
{"nick":"octetcloud","reason":"Ping timeout: 246 seconds","date":"2019-05-09T05:30:43.354Z","type":"quit"}
{"nick":"nnyk","date":"2019-05-09T06:27:14.149Z","type":"join"}
{"nick":"mgol","date":"2019-05-09T07:03:42.269Z","type":"join"}
{"nick":"nnyk","reason":"Ping timeout: 245 seconds","date":"2019-05-09T07:27:32.161Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-09T07:29:54.222Z","type":"quit"}
{"nick":"nnyk","date":"2019-05-09T07:50:32.017Z","type":"join"}
{"nick":"mgol","date":"2019-05-09T08:05:47.733Z","type":"join"}
{"nick":"lundibundi","date":"2019-05-09T08:21:09.105Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-09T08:23:39.877Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 255 seconds","date":"2019-05-09T08:40:37.986Z","type":"quit"}
{"nick":"mgol","date":"2019-05-09T09:06:15.296Z","type":"join"}
{"nick":"lundibundi","date":"2019-05-09T11:13:39.069Z","type":"join"}
{"nick":"lundibundi","reason":"Client Quit","date":"2019-05-09T11:14:33.840Z","type":"quit"}
{"nick":"nnyk","reason":"Ping timeout: 245 seconds","date":"2019-05-09T11:43:48.435Z","type":"quit"}
{"nick":"nnyk","date":"2019-05-09T12:01:45.025Z","type":"join"}
{"nick":"ryzokuken","message":"Did someone record https://addaleax.net/node-cpp-vancouver/#1?","date":"2019-05-09T13:02:26.464Z","type":"message"}
{"nick":"ryzokuken","message":"I sadly couldn't make it to the summit.","date":"2019-05-09T13:02:37.446Z","type":"message"}
{"nick":"antsmartian","date":"2019-05-09T13:26:02.475Z","type":"join"}
{"nick":"nnyk","reason":"Ping timeout: 246 seconds","date":"2019-05-09T14:03:00.144Z","type":"quit"}
{"nick":"nnyk","date":"2019-05-09T14:05:50.394Z","type":"join"}
{"nick":"devsnek","message":"joyee: i changed the prepare stack trace callback to match what you suggested","date":"2019-05-09T14:09:20.625Z","type":"message"}
{"nick":"devsnek","message":"i feel like its a bit of a loss though","date":"2019-05-09T14:09:26.840Z","type":"message"}
{"nick":"devsnek","message":"if we have an error before we set the callback, it uses v8's built in one","date":"2019-05-09T14:09:44.293Z","type":"message"}
{"nick":"devsnek","message":"instead of `exception->ToString()`","date":"2019-05-09T14:09:49.548Z","type":"message"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-05-09T14:14:18.854Z","type":"quit"}
{"nick":"octetcloud","date":"2019-05-09T14:28:44.076Z","type":"join"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-05-09T15:06:44.373Z","type":"quit"}
{"nick":"AtumT","date":"2019-05-09T15:21:58.120Z","type":"join"}
{"nick":"nnyk","reason":"Ping timeout: 245 seconds","date":"2019-05-09T15:40:53.357Z","type":"quit"}
{"nick":"nnyk","date":"2019-05-09T15:42:11.535Z","type":"join"}
