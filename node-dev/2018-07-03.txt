{"nick":"doodadjs","date":"2018-07-03T00:33:59.234Z","type":"join"}
{"nick":"BridgeAR","reason":"Ping timeout: 245 seconds","date":"2018-07-03T00:34:25.368Z","type":"quit"}
{"nick":"doodadjs","reason":"Quit: Leaving","date":"2018-07-03T01:09:40.740Z","type":"quit"}
{"nick":"TimothyGu","message":"addaleax: hey, would you mind reviewing https://github.com/nodejs/node/pull/21540 when you get the time? thx : )","date":"2018-07-03T01:34:19.963Z","type":"message"}
{"nick":"marthinal","date":"2018-07-03T01:35:16.019Z","type":"join"}
{"nick":"not-an-aardvark","date":"2018-07-03T01:37:48.848Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 255 seconds","date":"2018-07-03T01:39:35.851Z","type":"quit"}
{"nick":"doodadjs","date":"2018-07-03T01:55:55.271Z","type":"join"}
{"nick":"ljharb","message":"the stacks proposal will mean nobody has to parse anything.","date":"2018-07-03T02:18:37.869Z","type":"message"}
{"nick":"ljharb","message":"and v8 will probably have to get rid of prepareStackTrace, since the spec will require the stack to be populated in the constructor ¯\\_(ツ)_/¯","date":"2018-07-03T02:19:55.126Z","type":"message"}
{"nick":"doodadjs","message":"ljharb: so throwing will be slow ? what about a .stack getter which does it ?","date":"2018-07-03T02:35:03.616Z","type":"message"}
{"nick":"doodadjs","message":"(a lazy getter, or else keep that \"prepare\" function)","date":"2018-07-03T02:37:44.924Z","type":"message"}
{"nick":"doodadjs","message":"(I did extend my Error with a \"parse\" function to lazy parse the stack)","date":"2018-07-03T02:38:47.375Z","type":"message"}
{"nick":"doodadjs","message":"I mean... I just hope that collecting info from the stack frames will not be too expensive.","date":"2018-07-03T02:47:06.900Z","type":"message"}
{"nick":"devsnek","message":"ljharb: they'll just change when they call it","date":"2018-07-03T03:12:59.678Z","type":"message"}
{"nick":"devsnek","message":"they really have an aversion to removing it","date":"2018-07-03T03:13:09.975Z","type":"message"}
{"nick":"doodadjs","message":"I like the new workers, but why they are not just accepting a function for the starting threads, instead of a full script ?","date":"2018-07-03T03:15:53.578Z","type":"message"}
{"nick":"devsnek","message":"you can stringify a function","date":"2018-07-03T03:16:18.575Z","type":"message"}
{"nick":"devsnek","message":"they accept strings","date":"2018-07-03T03:16:24.464Z","type":"message"}
{"nick":"devsnek","message":"we're trying not to step on a feature proposal to javascript which adds detached code blocks","date":"2018-07-03T03:16:45.113Z","type":"message"}
{"nick":"doodadjs","message":"devsnek: which feature ?","date":"2018-07-03T03:17:43.586Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/domenic/proposal-blocks","date":"2018-07-03T03:17:51.874Z","type":"message"}
{"nick":"doodadjs","message":"devsnek: so no @lock mechanism by using some special decorators or so ?","date":"2018-07-03T03:20:02.349Z","type":"message"}
{"nick":"devsnek","message":"huh?","date":"2018-07-03T03:20:09.599Z","type":"message"}
{"nick":"doodadjs","message":"devsnek: I mean... like locking an object between threads when writing to it, then release it after","date":"2018-07-03T03:21:08.216Z","type":"message"}
{"nick":"devsnek","message":"what kind of object","date":"2018-07-03T03:21:13.533Z","type":"message"}
{"nick":"doodadjs","message":"a Map, a Set, ...","date":"2018-07-03T03:21:30.097Z","type":"message"}
{"nick":"devsnek","message":"you can pass maps and sets back and forth between workers","date":"2018-07-03T03:21:47.714Z","type":"message"}
{"nick":"devsnek","message":"and you can use SharedArrayBuffer","date":"2018-07-03T03:22:00.954Z","type":"message"}
{"nick":"devsnek","message":"which exposes shared memory","date":"2018-07-03T03:22:03.503Z","type":"message"}
{"nick":"doodadjs","message":"devsnek: are they serialized/deserialized ?","date":"2018-07-03T03:22:12.147Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2018-07-03T03:22:18.167Z","type":"message"}
{"nick":"doodadjs","message":"devsnek: :(","date":"2018-07-03T03:22:22.460Z","type":"message"}
{"nick":"devsnek","message":"its not slow","date":"2018-07-03T03:22:29.859Z","type":"message"}
{"nick":"devsnek","message":"v8 just moves some memory around","date":"2018-07-03T03:22:44.796Z","type":"message"}
{"nick":"devsnek","message":"your bottlenecks aren't going to come from serdes","date":"2018-07-03T03:23:18.214Z","type":"message"}
{"nick":"doodadjs","message":"and what about a user object ? can we have control on serdes ?","date":"2018-07-03T03:26:06.244Z","type":"message"}
{"nick":"devsnek","message":"huh?","date":"2018-07-03T03:26:46.463Z","type":"message"}
{"nick":"doodadjs","message":":) I mean a \"class\" instance that gets shared across threads, and has to re-assemble every changes...","date":"2018-07-03T03:28:53.958Z","type":"message"}
{"nick":"devsnek","message":"don't do it like that","date":"2018-07-03T03:29:52.621Z","type":"message"}
{"nick":"doodadjs","message":"I don't know how ser-des is working and I think I should take a look on code :)","date":"2018-07-03T03:30:39.542Z","type":"message"}
{"nick":"ljharb","message":"devsnek: it can’t be observable tho.","date":"2018-07-03T03:32:35.143Z","type":"message"}
{"nick":"ljharb","message":"devsnek: meaning, i don’t care how they implement it internally but deleting it off of the prototype can’t change how it works","date":"2018-07-03T03:32:57.376Z","type":"message"}
{"nick":"devsnek","message":"exotic objects ftw","date":"2018-07-03T03:33:23.950Z","type":"message"}
{"nick":"ljharb","message":"doodadjs: throwing is slow in every engine already, changing when the stack populated won’t really impact that.","date":"2018-07-03T03:33:25.166Z","type":"message"}
{"nick":"ljharb","message":"(however, stack will be a getter, so they're totally free to lazily populate the information - including calling their internal \"prepareStackTrace\" implementation. and if they want to expose it separately, they can do that too)","date":"2018-07-03T03:37:19.576Z","type":"message"}
{"nick":"devsnek","message":"__SECRET_STACK_TRACE_PREPARE_FUNCTION_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","date":"2018-07-03T03:38:13.944Z","type":"message"}
{"nick":"srl295","date":"2018-07-03T04:29:27.293Z","type":"join"}
{"nick":"doodadjs","reason":"Quit: Leaving","date":"2018-07-03T04:37:43.693Z","type":"quit"}
{"nick":"marthinal","date":"2018-07-03T04:41:57.713Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 260 seconds","date":"2018-07-03T04:46:40.374Z","type":"quit"}
{"nick":"marthinal","date":"2018-07-03T04:55:53.660Z","type":"join"}
{"nick":"lpin","date":"2018-07-03T05:19:03.469Z","type":"join"}
{"nick":"lpin","reason":"Read error: Connection reset by peer","date":"2018-07-03T06:24:32.021Z","type":"quit"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-07-03T06:27:31.795Z","type":"quit"}
{"nick":"seishun","date":"2018-07-03T06:33:01.314Z","type":"join"}
{"nick":"sgimeno","reason":"Ping timeout: 248 seconds","date":"2018-07-03T06:58:09.544Z","type":"quit"}
{"nick":"sgimeno","date":"2018-07-03T06:59:03.466Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 265 seconds","date":"2018-07-03T07:32:08.366Z","type":"quit"}
{"nick":"seishun","date":"2018-07-03T07:35:00.892Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 256 seconds","date":"2018-07-03T07:39:37.400Z","type":"quit"}
{"nick":"m00dy","date":"2018-07-03T07:40:50.942Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-07-03T07:41:36.873Z","type":"quit"}
{"nick":"m00dy","date":"2018-07-03T07:42:06.379Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-07-03T07:42:13.615Z","type":"quit"}
{"nick":"m00dy","date":"2018-07-03T07:42:46.308Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-07-03T07:49:17.734Z","type":"quit"}
{"nick":"m00dy","date":"2018-07-03T07:49:51.289Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 240 seconds","date":"2018-07-03T07:53:57.768Z","type":"quit"}
{"nick":"m00dy","date":"2018-07-03T07:57:10.854Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-07-03T07:58:24.011Z","type":"quit"}
{"nick":"m00dy","date":"2018-07-03T07:59:00.940Z","type":"join"}
