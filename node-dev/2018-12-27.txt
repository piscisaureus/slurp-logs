{"nick":"Trott","message":"What are the constraints and goals of esm?","date":"2018-12-27T02:08:12.701Z","type":"message"}
{"nick":"devsnek","message":"Trott: stuff like why .mjs exists, why import 'cjs' is hard, etc","date":"2018-12-27T02:08:47.857Z","type":"message"}
{"nick":"Guest4","date":"2018-12-27T03:43:36.329Z","type":"join"}
{"nick":"Guest4","reason":"Client Quit","date":"2018-12-27T03:44:39.221Z","type":"quit"}
{"nick":"lpin","date":"2018-12-27T05:55:24.015Z","type":"join"}
{"nick":"bhughes","reason":"Read error: Connection reset by peer","date":"2018-12-27T05:57:25.249Z","type":"quit"}
{"nick":"bhughes","date":"2018-12-27T05:57:34.892Z","type":"join"}
{"nick":"lpin","reason":"Read error: Connection reset by peer","date":"2018-12-27T06:17:10.952Z","type":"quit"}
{"nick":"seishun","date":"2018-12-27T06:21:53.473Z","type":"join"}
{"nick":"lpin","date":"2018-12-27T06:27:43.794Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 246 seconds","date":"2018-12-27T07:03:28.262Z","type":"quit"}
{"nick":"seishun","date":"2018-12-27T07:33:34.497Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 250 seconds","date":"2018-12-27T07:40:14.460Z","type":"quit"}
{"nick":"seishun","date":"2018-12-27T07:48:47.252Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-12-27T08:00:06.712Z","type":"quit"}
{"nick":"rtn","date":"2018-12-27T11:09:56.055Z","type":"join"}
{"nick":"antsmartian","date":"2018-12-27T12:11:45.049Z","type":"join"}
{"nick":"rtn","reason":"Ping timeout: 250 seconds","date":"2018-12-27T12:45:44.824Z","type":"quit"}
{"nick":"antsmart_","date":"2018-12-27T12:50:51.216Z","type":"join"}
{"nick":"antsmartian","reason":"Ping timeout: 252 seconds","date":"2018-12-27T12:54:06.932Z","type":"quit"}
{"nick":"antsmart_","reason":"Remote host closed the connection","date":"2018-12-27T12:54:26.861Z","type":"quit"}
{"nick":"rtn","date":"2018-12-27T12:56:04.396Z","type":"join"}
{"nick":"Hu0p","date":"2018-12-27T14:33:46.998Z","type":"join"}
{"nick":"antsmartian","date":"2018-12-27T14:35:40.509Z","type":"join"}
{"nick":"howdoi","date":"2018-12-27T14:46:17.747Z","type":"join"}
{"nick":"lundibundi","date":"2018-12-27T14:48:43.112Z","type":"join"}
{"nick":"antsmartian","reason":"Read error: Connection reset by peer","date":"2018-12-27T15:26:40.095Z","type":"quit"}
{"nick":"antsmartian","date":"2018-12-27T15:28:05.424Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 246 seconds","date":"2018-12-27T15:29:47.967Z","type":"quit"}
{"nick":"antsmartian","reason":"Ping timeout: 264 seconds","date":"2018-12-27T15:33:40.020Z","type":"quit"}
{"nick":"devsnek","message":"joyee: I was of the understanding that CompileFunctionInContext didn't bind a script or module context","date":"2018-12-27T15:46:27.788Z","type":"message"}
{"nick":"devsnek","message":"and using import() would defer to GetActiveScriptOrModule etc","date":"2018-12-27T15:46:57.306Z","type":"message"}
{"nick":"rtn","reason":"Ping timeout: 272 seconds","date":"2018-12-27T15:52:40.910Z","type":"quit"}
{"nick":"al-damiri","date":"2018-12-27T16:27:33.682Z","type":"join"}
{"nick":"bradleymeck","message":"Trott: need to actually determine exports of a module, need to actually determine a parse goal of a source text, need to figure out how to make ecosystem things like mocking/APM even doable properly, need to explain that ESM has static semantics that are unlike `babel`, `typescript`, or `esm`","date":"2018-12-27T16:34:44.287Z","type":"message"}
{"nick":"devsnek","message":"@std/esm","date":"2018-12-27T16:37:24.623Z","type":"message"}
{"nick":"bradleymeck","message":"@devsnek @devsnek not anymore","date":"2018-12-27T16:38:42.658Z","type":"message"}
{"nick":"bradleymeck","message":"https://www.npmjs.com/package/esm","date":"2018-12-27T16:38:44.281Z","type":"message"}
{"nick":"devsnek","message":"yes but its confusing to just call it esm","date":"2018-12-27T16:38:55.230Z","type":"message"}
{"nick":"bradleymeck","message":"and now it can be initialized via `npm init esm` due to https://www.npmjs.com/package/create-esm which is how people are recommending they do things","date":"2018-12-27T16:39:21.338Z","type":"message"}
{"nick":"devsnek","message":"ineed","date":"2018-12-27T16:39:31.355Z","type":"message"}
{"nick":"devsnek","message":"indeed*","date":"2018-12-27T16:39:32.843Z","type":"message"}
{"nick":"bradleymeck","message":"which just makes it more logical not to call it @std/esm to me","date":"2018-12-27T16:39:35.848Z","type":"message"}
{"nick":"devsnek","message":"it makes it more logical to call it @std/esm to me","date":"2018-12-27T16:39:48.662Z","type":"message"}
{"nick":"bradleymeck","message":"the chaos and overlap in terms isn't really helped by prefacing an uncommon recommendation","date":"2018-12-27T16:39:59.639Z","type":"message"}
{"nick":"devsnek","message":"because its not initializing a generic es module template","date":"2018-12-27T16:40:05.331Z","type":"message"}
{"nick":"bradleymeck","message":"we might want to reframe our acronym for modules to note be ESM, but people think of `esm` as that library quite often, they think it is ESM","date":"2018-12-27T16:40:39.955Z","type":"message"}
{"nick":"bradleymeck","message":"the `esm` term has been tainted by ecosystem just like other naming problems in ecosystem","date":"2018-12-27T16:41:07.996Z","type":"message"}
{"nick":"devsnek","message":"ü§∑‚Äç‚ôÇÔ∏è","date":"2018-12-27T16:41:17.359Z","type":"message"}
{"nick":"seishun","date":"2018-12-27T16:54:42.046Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-12-27T17:57:02.709Z","type":"quit"}
{"nick":"rtn","date":"2018-12-27T17:59:10.560Z","type":"join"}
{"nick":"rtn","reason":"Client Quit","date":"2018-12-27T17:59:19.225Z","type":"quit"}
{"nick":"seishun","date":"2018-12-27T17:59:38.961Z","type":"join"}
{"nick":"ljharb","message":"i still think we should avoid an acronym that‚Äôs easily misused like ‚Äústd‚Äù; i wish it wasn‚Äôt the placeholder everyone kept using","date":"2018-12-27T18:05:00.398Z","type":"message"}
{"nick":"rtn","date":"2018-12-27T18:05:29.671Z","type":"join"}
{"nick":"AtumT","date":"2018-12-27T18:05:47.894Z","type":"join"}
{"nick":"bradleymeck","message":"@ljharb want my name squating of @builtin ?","date":"2018-12-27T18:06:01.787Z","type":"message"}
{"nick":"ljharb","message":"I‚Äôd prefer that for sure :-) sufficient to know it‚Äôs obtainable, i think","date":"2018-12-27T18:06:34.380Z","type":"message"}
{"nick":"bradleymeck","message":"I'd prefer not to use it up an place it as definitively reserved still for now","date":"2018-12-27T18:08:09.538Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: though honestly i think the fact that @std has historical entries makes it undesirable even if the name is nice","date":"2018-12-27T18:09:54.225Z","type":"message"}
{"nick":"devsnek","message":"`import { Instant } from builtins.time` sounds good to me","date":"2018-12-27T18:14:06.503Z","type":"message"}
{"nick":"bradleymeck","message":"i'd personally rather it stay a string if it has the same mutability constraints as polyfillable userland","date":"2018-12-27T18:20:15.186Z","type":"message"}
{"nick":"bradleymeck","message":"not really clear what we gain by making it a special syntax","date":"2018-12-27T18:20:27.567Z","type":"message"}
{"nick":"bradleymeck","message":"especially if hosts define their own stuff","date":"2018-12-27T18:20:45.215Z","type":"message"}
{"nick":"bradleymeck","message":"if builtins.time was a thing, i'd expect node.fs to be a thing","date":"2018-12-27T18:21:04.821Z","type":"message"}
{"nick":"bradleymeck","message":"since that is a host builtin","date":"2018-12-27T18:21:17.571Z","type":"message"}
{"nick":"rtn","reason":"Ping timeout: 244 seconds","date":"2018-12-27T18:22:43.432Z","type":"quit"}
{"nick":"devsnek","message":"bradleymeck: cuz it feels weird to me to touch the specifier strings","date":"2018-12-27T18:23:48.905Z","type":"message"}
{"nick":"devsnek","message":"they're entirely left up to implementations atm","date":"2018-12-27T18:24:10.229Z","type":"message"}
{"nick":"devsnek","message":"which could include an implementation defining its own @std or @builtin","date":"2018-12-27T18:24:19.455Z","type":"message"}
{"nick":"devsnek","message":"and yes things like node make it quite messy","date":"2018-12-27T18:24:57.490Z","type":"message"}
{"nick":"devsnek","message":"in either direction","date":"2018-12-27T18:25:03.553Z","type":"message"}
{"nick":"ljharb","message":"implementations will always be able to define their own whatever tho, specifiers and syntax included (they can do both now)","date":"2018-12-27T18:28:38.926Z","type":"message"}
{"nick":"ljharb","message":"and yes, builtin modules must have identical constraints to globals - mutable (can add/replace/remove/patch), and synchronously available in Scripts and Modules.","date":"2018-12-27T18:29:29.813Z","type":"message"}
{"nick":"devsnek","message":"ljharb: not if the spec says they have to do something with a specific string","date":"2018-12-27T18:30:13.848Z","type":"message"}
{"nick":"ljharb","message":"the spec wouldn‚Äôt be able to prevent `@builtin/foo`, it‚Äôd only mandate `@builtin/bar`, say","date":"2018-12-27T18:31:17.282Z","type":"message"}
{"nick":"ljharb","message":"so true, using a string would restrict what they can do - but any addition to the language does that","date":"2018-12-27T18:31:43.212Z","type":"message"}
{"nick":"devsnek","message":"what if i have a pluggable ntp server that uses js extensions","date":"2018-12-27T18:31:50.259Z","type":"message"}
{"nick":"devsnek","message":"and it happens to use `@std/time`","date":"2018-12-27T18:31:57.543Z","type":"message"}
{"nick":"ljharb","message":"then it‚Äôd break","date":"2018-12-27T18:32:14.873Z","type":"message"}
{"nick":"ljharb","message":"just like if you‚Äôd been using a global Promise, and ES6 landed","date":"2018-12-27T18:32:37.632Z","type":"message"}
{"nick":"devsnek","message":"still feels icky","date":"2018-12-27T18:33:06.080Z","type":"message"}
{"nick":"ljharb","message":"same question if you‚Äôre currently using a syntax extension for `import from something.something`","date":"2018-12-27T18:33:06.413Z","type":"message"}
{"nick":"devsnek","message":"yeah but people know that extending syntax is messy and dangerous","date":"2018-12-27T18:33:33.805Z","type":"message"}
{"nick":"ljharb","message":"impls can do anything, but there‚Äôs very few ways they‚Äôre protected from not breaking, if they extend the spec","date":"2018-12-27T18:33:37.955Z","type":"message"}
{"nick":"ljharb","message":"extending anything is messy and dangerous","date":"2018-12-27T18:33:45.087Z","type":"message"}
{"nick":"ljharb","message":"chrome added methods to Promise for awhile, before it finally got cleaned up","date":"2018-12-27T18:33:57.162Z","type":"message"}
{"nick":"devsnek","message":"isn't the whole point here to stop taking up space in the shared global namespace","date":"2018-12-27T18:34:11.988Z","type":"message"}
{"nick":"devsnek","message":"i don't think that syntax extensions are on the same level as globals or specifiers","date":"2018-12-27T18:35:10.205Z","type":"message"}
{"nick":"ljharb","message":"it‚Äôs not clear that we can ever avoid adding new globals, even with builtin modules.","date":"2018-12-27T18:36:31.781Z","type":"message"}
{"nick":"devsnek","message":"then why have builtin modules","date":"2018-12-27T18:36:47.545Z","type":"message"}
{"nick":"ljharb","message":"yep","date":"2018-12-27T18:37:01.218Z","type":"message"}
{"nick":"devsnek","message":"no really","date":"2018-12-27T18:37:20.535Z","type":"message"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-12-27T18:39:04.346Z","type":"quit"}
{"nick":"ljharb","message":"I‚Äôm asking the same question","date":"2018-12-27T18:40:18.699Z","type":"message"}
{"nick":"devsnek","message":"ljharb: why would we need to keep adding globals","date":"2018-12-27T18:40:45.240Z","type":"message"}
{"nick":"ljharb","message":"well, for one, atm anything that‚Äôs an instance method can‚Äôt go in a builtin module, because there‚Äôs no method extraction operator (and pipeline ignores the receiver)","date":"2018-12-27T18:41:54.833Z","type":"message"}
{"nick":"ljharb","message":"but in general, it‚Äôs all tangled together - polyfills/shims, deniability, virtualization, sync access in Scripts","date":"2018-12-27T18:42:57.522Z","type":"message"}
{"nick":"ljharb","message":"at some point it‚Äôs just going to be a nicer syntax for accessing globals, in a way that avoids increasing the number of keys on globalThis","date":"2018-12-27T18:43:28.557Z","type":"message"}
{"nick":"ljharb","message":"Is that worth adding the syntax? i dunno","date":"2018-12-27T18:43:52.115Z","type":"message"}
{"nick":"ljharb","message":"(we can create globals that aren‚Äôt properties on the global, ftr, we just don‚Äôt)","date":"2018-12-27T18:44:19.102Z","type":"message"}
{"nick":"lundibundi","date":"2018-12-27T19:08:29.109Z","type":"join"}
{"nick":"Hu0p","reason":"Quit: See You Space Cowboy. . .","date":"2018-12-27T19:33:25.191Z","type":"quit"}
{"nick":"rtn","date":"2018-12-27T19:39:07.424Z","type":"join"}
{"nick":"bradleymeck","message":"@ljharb sync available is not clear to me as mandated since the only true constraint is ordering not sync","date":"2018-12-27T19:43:30.435Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: instance methods are often different from protocols based functions, i think protocols are more suited towards modules","date":"2018-12-27T19:44:16.275Z","type":"message"}
{"nick":"bradleymeck","message":"as it stands existing collisions and namespacing concerns we see in the ecosystem make me find globals to be sub optimal and I am not comfortable with relying on them nor do I find them to be optimal","date":"2018-12-27T19:45:14.789Z","type":"message"}
{"nick":"bradleymeck","message":"also, even if the builtins are mutable that does not mean that they remain mutable","date":"2018-12-27T19:45:39.356Z","type":"message"}
{"nick":"bradleymeck","message":"introducing a polyfill lifecycle to realms does not mean that they must be done so during general evaluation of other modules/scripts","date":"2018-12-27T19:46:06.556Z","type":"message"}
{"nick":"ljharb","message":"i see the constraint as ‚Äúblocking‚Äù, i suppose, not sync.","date":"2018-12-27T19:46:08.902Z","type":"message"}
{"nick":"bradleymeck","message":"blocking is also not required to my knowledge","date":"2018-12-27T19:46:25.067Z","type":"message"}
{"nick":"ljharb","message":"iow no code must be able to run until my polyfill/shim is complete","date":"2018-12-27T19:46:28.228Z","type":"message"}
{"nick":"bradleymeck","message":"if you import another module that is a polyfill / builtin and your code does not evaluate prior to it, the code does not need to bloc","date":"2018-12-27T19:46:50.940Z","type":"message"}
{"nick":"bradleymeck","message":"block*","date":"2018-12-27T19:46:51.561Z","type":"message"}
{"nick":"ljharb","message":"in Modules, sure. I‚Äôm talking about Scripts.","date":"2018-12-27T19:47:09.599Z","type":"message"}
{"nick":"bradleymeck","message":"and why does it need to be blocking in scripts except convenience?","date":"2018-12-27T19:47:59.530Z","type":"message"}
{"nick":"devsnek","message":"can we just put scripts in annex b","date":"2018-12-27T19:48:04.260Z","type":"message"}
{"nick":"bradleymeck","message":"it just needs to finish evaluation prior to next script and/or the main non-polyfill source texts","date":"2018-12-27T19:48:22.631Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: annex b would not remove them, so it would not matter","date":"2018-12-27T19:48:38.131Z","type":"message"}
{"nick":"ljharb","message":"the point is to guarantee that no code can access original builtins that i replace, assuming my code runs first","date":"2018-12-27T19:49:21.922Z","type":"message"}
{"nick":"devsnek","message":"that's not true now","date":"2018-12-27T19:49:37.904Z","type":"message"}
{"nick":"devsnek","message":"is it?","date":"2018-12-27T19:49:49.617Z","type":"message"}
{"nick":"ljharb","message":"sure it is, for most","date":"2018-12-27T19:50:48.124Z","type":"message"}
{"nick":"ljharb","message":"the deniable ones","date":"2018-12-27T19:50:51.254Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: sure, but nothing requiring sync or blocking access","date":"2018-12-27T19:50:57.414Z","type":"message"}
{"nick":"ljharb","message":"bradleymeck: i mean, maybe we‚Äôre talking past each other","date":"2018-12-27T19:51:12.578Z","type":"message"}
{"nick":"devsnek","message":"actually you'd only need the deniable part for replacing the builtin itself","date":"2018-12-27T19:51:25.866Z","type":"message"}
{"nick":"ljharb","message":"i don‚Äôt care about parsing or graph building, only evaluation","date":"2018-12-27T19:51:27.908Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: it is currently true, but would not be true given getOriginals as proposed through whatwg","date":"2018-12-27T19:51:40.991Z","type":"message"}
{"nick":"ljharb","message":"and if that goes through as is, it will decimate many valid use cases on the web","date":"2018-12-27T19:52:05.205Z","type":"message"}
{"nick":"bradleymeck","message":"ljharb: go talk to whatwg about that one, I'm not getting involved currently","date":"2018-12-27T19:52:25.666Z","type":"message"}
{"nick":"ljharb","message":"including salesforce‚Äòs platform, iirc","date":"2018-12-27T19:52:38.788Z","type":"message"}
{"nick":"ljharb","message":"lol yeah I‚Äôm trying","date":"2018-12-27T19:52:44.150Z","type":"message"}
{"nick":"ljharb","message":"but it doesn‚Äôt exist yet, at any rate","date":"2018-12-27T19:52:50.845Z","type":"message"}
{"nick":"devsnek","message":"i still disagree with the existence of salseforce's platform","date":"2018-12-27T19:52:57.583Z","type":"message"}
{"nick":"ljharb","message":"luckily disagreement with parts of the web don‚Äôt invalidate them or we‚Äôd have nothing left","date":"2018-12-27T19:53:20.267Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: what about bloombergs, or etheriums? ;p","date":"2018-12-27T19:53:48.688Z","type":"message"}
{"nick":"bradleymeck","message":"there are many using OCAP in the wild","date":"2018-12-27T19:53:55.988Z","type":"message"}
{"nick":"bradleymeck","message":"even web stuff with layered APIs is starting to move towards OCAP","date":"2018-12-27T19:54:06.121Z","type":"message"}
{"nick":"devsnek","message":"what is ocap","date":"2018-12-27T19:54:15.419Z","type":"message"}
{"nick":"devsnek","message":"proxy+with+eval?","date":"2018-12-27T19:54:30.073Z","type":"message"}
{"nick":"bradleymeck","message":"no, it is a security model around how authority is checked","date":"2018-12-27T19:55:01.411Z","type":"message"}
{"nick":"devsnek","message":"does it stand for something","date":"2018-12-27T19:55:12.506Z","type":"message"}
{"nick":"bradleymeck","message":"it uses object passing instead of call location","date":"2018-12-27T19:55:14.629Z","type":"message"}
{"nick":"bradleymeck","message":"Object Capability Model","date":"2018-12-27T19:55:19.137Z","type":"message"}
{"nick":"devsnek","message":"oh its just like","date":"2018-12-27T19:55:41.515Z","type":"message"}
{"nick":"devsnek","message":"give something permission to use fs by giving it fs","date":"2018-12-27T19:55:50.634Z","type":"message"}
{"nick":"bradleymeck","message":"instead of saying \"this module source text can call this function\" it revolves around \"this module source text can obtain a reference to this function\"","date":"2018-12-27T19:56:07.648Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: yes","date":"2018-12-27T19:56:18.058Z","type":"message"}
{"nick":"devsnek","message":"i have no problem with that","date":"2018-12-27T19:56:35.496Z","type":"message"}
{"nick":"devsnek","message":"i have a problem with proxy+with+eval","date":"2018-12-27T19:56:53.230Z","type":"message"}
{"nick":"bradleymeck","message":"with+proxy+eval just is used due to lack of spec hooks","date":"2018-12-27T19:56:57.371Z","type":"message"}
{"nick":"bradleymeck","message":"the spec hooks are pretty minor and not as hacky","date":"2018-12-27T19:57:09.999Z","type":"message"}
{"nick":"bradleymeck","message":"but it means multiple global env records per realm","date":"2018-12-27T19:57:22.556Z","type":"message"}
{"nick":"bradleymeck","message":"which is ~= to what that gross hack i achieving","date":"2018-12-27T19:57:39.183Z","type":"message"}
{"nick":"devsnek","message":"but anyone who happens to have a website using the evil thing","date":"2018-12-27T19:57:46.364Z","type":"message"}
{"nick":"bradleymeck","message":"is*","date":"2018-12-27T19:57:46.898Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: ?","date":"2018-12-27T19:58:00.410Z","type":"message"}
{"nick":"devsnek","message":"like ljharb said about getoriginals and salesforce","date":"2018-12-27T19:58:52.180Z","type":"message"}
{"nick":"devsnek","message":"why didn't they just compile spidermonkey into wasm and ship that instead","date":"2018-12-27T19:59:17.980Z","type":"message"}
{"nick":"rtn","reason":"Ping timeout: 246 seconds","date":"2018-12-27T19:59:25.254Z","type":"quit"}
{"nick":"bradleymeck","message":"devsnek: what is the gain?","date":"2018-12-27T20:00:54.969Z","type":"message"}
{"nick":"bradleymeck","message":"shipping a huge runtime and having slower runtime perf? vs a fairly robust method of doing what they want (no matter how ugly)","date":"2018-12-27T20:01:31.182Z","type":"message"}
{"nick":"bradleymeck","message":"we can't remove any of the features they are using","date":"2018-12-27T20:01:46.078Z","type":"message"}
{"nick":"devsnek","message":"because it requires keeping up with the host's js capabilities","date":"2018-12-27T20:02:16.924Z","type":"message"}
{"nick":"devsnek","message":"which means if someone uses an outdated build it breaks things and then when browsers/js tries to add new things it could break it","date":"2018-12-27T20:02:37.598Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: how does it use outdated things?","date":"2018-12-27T20:03:26.698Z","type":"message"}
{"nick":"bradleymeck","message":"it grabs the primordials off the global","date":"2018-12-27T20:03:32.254Z","type":"message"}
{"nick":"bradleymeck","message":"s/primordials/intrinsics/","date":"2018-12-27T20:03:46.266Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: i mean if a website uses an outdated version of the library","date":"2018-12-27T20:03:47.178Z","type":"message"}
{"nick":"devsnek","message":"for example if someone had a version of this that didn't account for dynamic import","date":"2018-12-27T20:04:09.065Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: i don't understand, the library doesn't stop the global from growing?","date":"2018-12-27T20:04:13.747Z","type":"message"}
{"nick":"devsnek","message":"then a browser ships dynamic import","date":"2018-12-27T20:04:25.408Z","type":"message"}
{"nick":"devsnek","message":"website owner complains","date":"2018-12-27T20:04:27.985Z","type":"message"}
{"nick":"bradleymeck","message":"currently it early errors on dynamic import and is part of the framework restriction for SES, it isn't really related to the hacky form they are using","date":"2018-12-27T20:05:07.319Z","type":"message"}
{"nick":"bradleymeck","message":"they don't want dynamic import currently for a variety of reasons","date":"2018-12-27T20:05:22.272Z","type":"message"}
{"nick":"devsnek","message":"but there could be more things in the future is my point","date":"2018-12-27T20:05:37.854Z","type":"message"}
{"nick":"bradleymeck","message":"sure, and SES restrictions only apply to code loaded by SES","date":"2018-12-27T20:05:51.468Z","type":"message"}
{"nick":"bradleymeck","message":"SES is allowed to ban certain productions similar to people deleting globals","date":"2018-12-27T20:06:27.096Z","type":"message"}
{"nick":"lundibundi","reason":"Ping timeout: 246 seconds","date":"2018-12-27T20:06:38.959Z","type":"quit"}
{"nick":"devsnek","message":"but that only works if everyone using ses keeps update","date":"2018-12-27T20:06:52.643Z","type":"message"}
{"nick":"devsnek","message":"updated*","date":"2018-12-27T20:06:55.155Z","type":"message"}
{"nick":"devsnek","message":"its like a jenga tower","date":"2018-12-27T20:06:58.668Z","type":"message"}
{"nick":"bradleymeck","message":"google apps script and other cloud functions of similar nature also have stripped down environments and productions","date":"2018-12-27T20:07:01.062Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: i don't understand that last statement","date":"2018-12-27T20:07:14.222Z","type":"message"}
{"nick":"bradleymeck","message":"what do they get by updating?","date":"2018-12-27T20:07:19.000Z","type":"message"}
{"nick":"devsnek","message":"a browser could have a new syntatic production that their library isn't aware of","date":"2018-12-27T20:07:38.641Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: they blacklist not whitelist banned productions","date":"2018-12-27T20:07:55.406Z","type":"message"}
{"nick":"bradleymeck","message":"you can add all sorts of new productions and SES won't care","date":"2018-12-27T20:08:08.251Z","type":"message"}
{"nick":"devsnek","message":"i thought they purposely don't ship a js parser","date":"2018-12-27T20:08:10.811Z","type":"message"}
{"nick":"bradleymeck","message":"they do a minimal top level parse to ban import() right now","date":"2018-12-27T20:08:26.492Z","type":"message"}
{"nick":"bradleymeck","message":"they are also planning (idk if shipped) on doing the same for import.meta","date":"2018-12-27T20:08:45.197Z","type":"message"}
{"nick":"devsnek","message":"isn't that just regex","date":"2018-12-27T20:08:47.966Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: sure, it isn't the best, but SES isn't in the standard and I hope it never becomes the standard","date":"2018-12-27T20:09:09.864Z","type":"message"}
{"nick":"bradleymeck","message":"deniability though is certainly useful","date":"2018-12-27T20:09:16.823Z","type":"message"}
{"nick":"bradleymeck","message":"CSP has similar ability to disable things","date":"2018-12-27T20:09:25.155Z","type":"message"}
{"nick":"bradleymeck","message":"no-unsafe-eval etc","date":"2018-12-27T20:09:29.929Z","type":"message"}
{"nick":"devsnek","message":"csp is provided by the host so it matches host behaviour","date":"2018-12-27T20:09:43.915Z","type":"message"}
{"nick":"bradleymeck","message":"sure, and SES is desiring to expose APIs so they don't need to rely on host behavior","date":"2018-12-27T20:10:07.735Z","type":"message"}
{"nick":"bradleymeck","message":"it doesn't prevent hosts from doing things","date":"2018-12-27T20:10:23.644Z","type":"message"}
{"nick":"bradleymeck","message":"i wouldn't ban vm.* just because it doesn't match host behavior","date":"2018-12-27T20:10:42.154Z","type":"message"}
{"nick":"devsnek","message":"vm.* *is* the host","date":"2018-12-27T20:11:16.318Z","type":"message"}
{"nick":"bradleymeck","message":"but the behavior / code it executes is done by the app","date":"2018-12-27T20:11:55.449Z","type":"message"}
{"nick":"bradleymeck","message":"same as what SES does","date":"2018-12-27T20:12:00.333Z","type":"message"}
{"nick":"bradleymeck","message":"just because the host exposes hooks doesn't mean that userland can alter host behavior","date":"2018-12-27T20:12:23.969Z","type":"message"}
{"nick":"bradleymeck","message":"thats why I join the Realms calls and reassert that this stuff won't work on the Node root Realm","date":"2018-12-27T20:12:54.521Z","type":"message"}
{"nick":"bradleymeck","message":"but if they want help using their own nested compartments/realms thats fine","date":"2018-12-27T20:13:12.206Z","type":"message"}
{"nick":"bradleymeck","message":"vm.* generally has most of the behavior they want except this global env record proxying stuff","date":"2018-12-27T20:13:35.348Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-12-27T20:15:29.833Z","type":"quit"}
{"nick":"rtn","date":"2018-12-27T20:18:36.459Z","type":"join"}
{"nick":"lundibundi","date":"2018-12-27T20:20:50.841Z","type":"join"}
{"nick":"rtn","reason":"Ping timeout: 246 seconds","date":"2018-12-27T20:33:01.255Z","type":"quit"}
{"nick":"gamelaster","date":"2018-12-27T21:03:41.152Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 268 seconds","date":"2018-12-27T21:06:21.813Z","type":"quit"}
{"nick":"lundibundi","date":"2018-12-27T21:28:04.472Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2018-12-27T21:29:18.285Z","type":"quit"}
{"nick":"AtumT","date":"2018-12-27T21:29:59.470Z","type":"join"}
{"nick":"lundibundi","reason":"Remote host closed the connection","date":"2018-12-27T21:35:43.533Z","type":"quit"}
{"nick":"rtn","date":"2018-12-27T22:24:36.852Z","type":"join"}
{"nick":"rtn","reason":"Client Quit","date":"2018-12-27T22:24:39.651Z","type":"quit"}
{"nick":"rtn","date":"2018-12-27T22:24:49.497Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-12-27T22:43:48.513Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 245 seconds","date":"2018-12-27T22:59:13.327Z","type":"quit"}
{"nick":"d10n","date":"2018-12-27T23:40:06.939Z","type":"join"}
