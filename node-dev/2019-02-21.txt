{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-02-21T00:02:34.157Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T00:07:09.698Z","type":"join"}
{"nick":"devsnek","message":"MylesBorins: do you have more information on the performance of resolution? i know that searching slows it down some but i'd love to have some specific numbers so i could measure it against other stuff like reading fields from package.json and loaders and whatnot","date":"2019-02-21T00:08:36.751Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-02-21T00:11:49.352Z","type":"quit"}
{"nick":"zsoc","reason":"Ping timeout: 245 seconds","date":"2019-02-21T01:42:08.339Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T03:33:19.157Z","type":"join"}
{"nick":"howdoi","date":"2019-02-21T04:07:44.768Z","type":"join"}
{"nick":"dbeveniu_","date":"2019-02-21T04:08:44.065Z","type":"join"}
{"nick":"dbevenius","reason":"Read error: Connection reset by peer","date":"2019-02-21T04:08:44.138Z","type":"quit"}
{"nick":"lpin","date":"2019-02-21T05:52:27.158Z","type":"join"}
{"nick":"julianduque","reason":"Ping timeout: 246 seconds","date":"2019-02-21T06:01:45.036Z","type":"quit"}
{"nick":"dbeveniu_","reason":"Remote host closed the connection","date":"2019-02-21T06:15:05.816Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T06:16:01.287Z","type":"join"}
{"nick":"julianduque","date":"2019-02-21T06:18:07.829Z","type":"join"}
{"nick":"julianduque","reason":"Ping timeout: 272 seconds","date":"2019-02-21T06:23:06.800Z","type":"quit"}
{"nick":"julianduque","date":"2019-02-21T06:39:19.694Z","type":"join"}
{"nick":"julianduque","reason":"Ping timeout: 255 seconds","date":"2019-02-21T06:45:29.732Z","type":"quit"}
{"nick":"lundibundi","date":"2019-02-21T07:46:36.433Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 245 seconds","date":"2019-02-21T08:03:48.327Z","type":"quit"}
{"nick":"lundibundi","date":"2019-02-21T08:28:25.934Z","type":"join"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-02-21T08:29:40.606Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 268 seconds","date":"2019-02-21T08:47:14.740Z","type":"quit"}
{"nick":"lpin","date":"2019-02-21T08:57:02.468Z","type":"join"}
{"nick":"lundibundi","date":"2019-02-21T09:43:38.889Z","type":"join"}
{"nick":"orangemocha__","date":"2019-02-21T11:51:17.959Z","type":"part"}
{"nick":"srl295","reason":"Quit: Connection closed for inactivity","date":"2019-02-21T12:55:21.203Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 268 seconds","date":"2019-02-21T14:09:08.789Z","type":"quit"}
{"nick":"lundibundi","date":"2019-02-21T14:14:51.416Z","type":"join"}
{"nick":"bradleymeck","message":"resolution speed shouldn't be too big a focus given we are seeing pre-resolvers show up. if it is statically analyzable you can beat runtime resolution with those anyway","date":"2019-02-21T14:48:21.379Z","type":"message"}
{"nick":"bradleymeck","message":"also import maps are like limited pre-resolvers and were built that way somewhat for speed. it seems odd if you champion that pre-resolution workflow in one place but not the other","date":"2019-02-21T14:58:44.161Z","type":"message"}
{"nick":"bradleymeck","message":"especially when the web is more sensitive to speed of resolution generally","date":"2019-02-21T14:59:03.080Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-02-21T15:16:59.674Z","type":"quit"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-21T15:43:11.829Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T15:44:04.875Z","type":"join"}
{"nick":"gamelaster","date":"2019-02-21T15:45:16.065Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-02-21T15:49:05.718Z","type":"quit"}
{"nick":"gamelaster","reason":"Ping timeout: 246 seconds","date":"2019-02-21T15:51:09.066Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T15:52:06.557Z","type":"join"}
{"nick":"zsoc","date":"2019-02-21T16:05:05.210Z","type":"join"}
{"nick":"zsoc","reason":"Changing host","date":"2019-02-21T16:05:05.355Z","type":"quit"}
{"nick":"zsoc","date":"2019-02-21T16:05:05.356Z","type":"join"}
{"nick":"zsoc","reason":"Ping timeout: 246 seconds","date":"2019-02-21T16:12:58.397Z","type":"quit"}
{"nick":"devsnek","message":"bradleymeck: i'm thinking the same thing","date":"2019-02-21T16:16:40.445Z","type":"message"}
{"nick":"bradleymeck","message":"i still don't see why the first iteration must include all features we want eventually","date":"2019-02-21T16:18:43.895Z","type":"message"}
{"nick":"devsnek","message":"performance is the last argument against searching, but all the other stuff we're adding is orders of magnitude worse","date":"2019-02-21T16:18:54.159Z","type":"message"}
{"nick":"bradleymeck","message":"loaders are a completely odd thing here as well","date":"2019-02-21T16:18:59.847Z","type":"message"}
{"nick":"bradleymeck","message":"people keep leaning on them, but not talking about how they can/should work","date":"2019-02-21T16:19:09.569Z","type":"message"}
{"nick":"devsnek","message":"like if we say that we eventually want X, Y, and Z","date":"2019-02-21T16:19:27.073Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: depends on what perf you are looking to get XD","date":"2019-02-21T16:19:32.561Z","type":"message"}
{"nick":"devsnek","message":"why would we unflag before we have those","date":"2019-02-21T16:19:34.517Z","type":"message"}
{"nick":"devsnek","message":"look at how everything else in node gets unflagged","date":"2019-02-21T16:19:42.188Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: because we have a working solution that solves a large amount of use cases?","date":"2019-02-21T16:19:49.623Z","type":"message"}
{"nick":"zsoc","date":"2019-02-21T16:19:59.699Z","type":"join"}
{"nick":"zsoc","reason":"Changing host","date":"2019-02-21T16:19:59.844Z","type":"quit"}
{"nick":"zsoc","date":"2019-02-21T16:19:59.845Z","type":"join"}
{"nick":"bradleymeck","message":"devsnek: i mean, the flagging of other features is interesting because i certainly feel we unflag before the entire problemspace is solved","date":"2019-02-21T16:20:23.784Z","type":"message"}
{"nick":"devsnek","message":"even complex stuff like loaders can be finished before april","date":"2019-02-21T16:21:02.621Z","type":"message"}
{"nick":"bradleymeck","message":"i doubt it as I work on memory issues","date":"2019-02-21T16:21:15.931Z","type":"message"}
{"nick":"bradleymeck","message":"making them run, sure","date":"2019-02-21T16:21:26.170Z","type":"message"}
{"nick":"bradleymeck","message":"making them not leak,... idk how we are gonna fix that for cycles","date":"2019-02-21T16:21:36.771Z","type":"message"}
{"nick":"devsnek","message":"how are they leaking btw","date":"2019-02-21T16:21:47.183Z","type":"message"}
{"nick":"bradleymeck","message":"with graph a -> a","date":"2019-02-21T16:21:56.736Z","type":"message"}
{"nick":"bradleymeck","message":"loader must keep ref to `a` to resolve the next ref somehow","date":"2019-02-21T16:22:12.887Z","type":"message"}
{"nick":"bradleymeck","message":"so we have to expose that ref to users, cannot be a string due to leakage as seen with URL.createObjectURL","date":"2019-02-21T16:22:41.432Z","type":"message"}
{"nick":"bradleymeck","message":"so we need to use something that cannot be forged","date":"2019-02-21T16:22:52.711Z","type":"message"}
{"nick":"bradleymeck","message":"~= Symbol or Object lifetime semantics","date":"2019-02-21T16:23:01.716Z","type":"message"}
{"nick":"bradleymeck","message":"Symbols are not forgable but use an internal slot instead of identity semantics","date":"2019-02-21T16:23:20.384Z","type":"message"}
{"nick":"bradleymeck","message":"Objects are not forgable but use identity semantics (thus GC)","date":"2019-02-21T16:23:30.192Z","type":"message"}
{"nick":"devsnek","message":"graph a -> a is a cycle in terms of the resulting graph","date":"2019-02-21T16:23:55.061Z","type":"message"}
{"nick":"julianduque","date":"2019-02-21T16:24:04.753Z","type":"join"}
{"nick":"devsnek","message":"but initialization only goes once","date":"2019-02-21T16:24:05.818Z","type":"message"}
{"nick":"bradleymeck","message":"for either we have to keep that ref alive as long as it can be recreated so that loaders can do map<ref, *>","date":"2019-02-21T16:24:07.723Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: yup","date":"2019-02-21T16:24:15.661Z","type":"message"}
{"nick":"bradleymeck","message":"but you still resolve that ahead of time","date":"2019-02-21T16:24:26.627Z","type":"message"}
{"nick":"devsnek","message":"i would expect loaders to be killed after init","date":"2019-02-21T16:24:33.532Z","type":"message"}
{"nick":"bradleymeck","message":"this is all before initialization","date":"2019-02-21T16:24:43.266Z","type":"message"}
{"nick":"bradleymeck","message":" /* a */ import 'a';","date":"2019-02-21T16:24:52.650Z","type":"message"}
{"nick":"bradleymeck","message":"gets 2 resolves","date":"2019-02-21T16:24:57.395Z","type":"message"}
{"nick":"bradleymeck","message":"1 for loading up the a, one for the import","date":"2019-02-21T16:25:07.812Z","type":"message"}
{"nick":"devsnek","message":"i'm not following","date":"2019-02-21T16:25:27.991Z","type":"message"}
{"nick":"bradleymeck","message":"lets say we have `node --loader foo a` where `a` is `import './a'` and imports itself","date":"2019-02-21T16:25:58.464Z","type":"message"}
{"nick":"devsnek","message":"ok","date":"2019-02-21T16:26:05.228Z","type":"message"}
{"nick":"bradleymeck","message":"we get resolve('a', cwd)","date":"2019-02-21T16:26:08.669Z","type":"message"}
{"nick":"bradleymeck","message":"we also get resolve('./a', a)","date":"2019-02-21T16:26:17.048Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2019-02-21T16:26:21.247Z","type":"message"}
{"nick":"bradleymeck","message":"so for `./a` we need to return a ref to a","date":"2019-02-21T16:26:35.698Z","type":"message"}
{"nick":"bradleymeck","message":"and that means resolve needs to be able to obtain / hold a reference to a","date":"2019-02-21T16:27:00.899Z","type":"message"}
{"nick":"devsnek","message":"yeah just let v8 handle that","date":"2019-02-21T16:27:23.711Z","type":"message"}
{"nick":"bradleymeck","message":"and thats the leak, holding onto the reference means we don't know when it will be used / when `a` could be reaped","date":"2019-02-21T16:27:27.657Z","type":"message"}
{"nick":"devsnek","message":"use something gc'd","date":"2019-02-21T16:27:27.856Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: even if we do that, we still have to keep all those refs alive","date":"2019-02-21T16:27:44.239Z","type":"message"}
{"nick":"devsnek","message":"whatever holds the refs keeps them alive","date":"2019-02-21T16:27:55.906Z","type":"message"}
{"nick":"bradleymeck","message":"there just isn't a signal that the ref will not be used","date":"2019-02-21T16:28:04.655Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: yup, and holding the ref is the leak","date":"2019-02-21T16:28:15.109Z","type":"message"}
{"nick":"devsnek","message":"yeah but that's not a node leak","date":"2019-02-21T16:28:21.906Z","type":"message"}
{"nick":"bradleymeck","message":"but we need to let people hold the ref to make a cycle","date":"2019-02-21T16:28:23.947Z","type":"message"}
{"nick":"devsnek","message":"that's whoever took the ref leaking it","date":"2019-02-21T16:28:26.146Z","type":"message"}
{"nick":"devsnek","message":"and then you shut down loaders and v8 gc's everything","date":"2019-02-21T16:28:41.355Z","type":"message"}
{"nick":"devsnek","message":"are you thinking we could collect these during resolution","date":"2019-02-21T16:29:02.329Z","type":"message"}
{"nick":"bradleymeck","message":"we don't shut down loaders eagerly since import()","date":"2019-02-21T16:29:04.251Z","type":"message"}
{"nick":"bradleymeck","message":"no, but we need to collect them sometime","date":"2019-02-21T16:29:19.528Z","type":"message"}
{"nick":"devsnek","message":"hmm i would have assumed that would start up new loaders","date":"2019-02-21T16:29:24.304Z","type":"message"}
{"nick":"devsnek","message":"loaders are weird","date":"2019-02-21T16:29:31.201Z","type":"message"}
{"nick":"bradleymeck","message":"in theory","date":"2019-02-21T16:29:32.144Z","type":"message"}
{"nick":"bradleymeck","message":"but loaders are just too damn costly to spin up currently","date":"2019-02-21T16:29:40.547Z","type":"message"}
{"nick":"bradleymeck","message":"adding 20ms + time to init the loader, is non-trivial","date":"2019-02-21T16:29:55.668Z","type":"message"}
{"nick":"devsnek","message":"and i think its fair to assume modules are never collected","date":"2019-02-21T16:30:26.306Z","type":"message"}
{"nick":"bradleymeck","message":"that would be odd for vm.Context ?","date":"2019-02-21T16:30:46.664Z","type":"message"}
{"nick":"MylesBorins","message":"bradleymeck do workers have a thread pool?","date":"2019-02-21T16:30:49.370Z","type":"message"}
{"nick":"devsnek","message":"i don't think most engines even bother to collect them beyond tearing down the vm","date":"2019-02-21T16:30:49.799Z","type":"message"}
{"nick":"bradleymeck","message":"wouldn't it always leak then?","date":"2019-02-21T16:30:53.652Z","type":"message"}
{"nick":"devsnek","message":"a bit","date":"2019-02-21T16:31:08.124Z","type":"message"}
{"nick":"bradleymeck","message":"MylesBorins: we could make one, but it wouldn't make it signif faster","date":"2019-02-21T16:31:08.235Z","type":"message"}
{"nick":"devsnek","message":"i've been meaning to talk to hashseed about it","date":"2019-02-21T16:31:14.715Z","type":"message"}
{"nick":"devsnek","message":"MylesBorins: can you ask about that at the v8 tsc meeting","date":"2019-02-21T16:31:24.523Z","type":"message"}
{"nick":"bradleymeck","message":"browsers reap on Realm","date":"2019-02-21T16:31:25.280Z","type":"message"}
{"nick":"devsnek","message":"brad i know that the v8::Module we use will be destroyed","date":"2019-02-21T16:32:10.984Z","type":"message"}
{"nick":"bradleymeck","message":"with workers this got a bit more complicated than when i last did this all too","date":"2019-02-21T16:32:12.798Z","type":"message"}
{"nick":"devsnek","message":"but i'm not sure how much of the actual internals v8 will destroy","date":"2019-02-21T16:32:19.355Z","type":"message"}
{"nick":"AtumT","date":"2019-02-21T16:38:09.561Z","type":"join"}
{"nick":"bradleymeck","message":"service workers kind of get around this by using a similar odd workaround with request->response matching for caches instead of identity->response; they give a new request and a copied response per lookup","date":"2019-02-21T16:39:14.170Z","type":"message"}
{"nick":"bradleymeck","message":" but we roughly need to allow a response->response match instead where the key isn't something we get fresh every time, if i could figure out how to make it work so that people could reobtain the same matching that you get with the SW style approach that would work, but we are unable to use forgeable refs","date":"2019-02-21T16:40:40.087Z","type":"message"}
{"nick":"bradleymeck","message":"this complication is in part because we had some demand to create purely in-memory resources and those don't have a consistent id, because if we give them one, then we have to keep it unique across all the realm/threads/etc. that a loader covers and we wouldn't know when it become unusable so we have to keep it alive","date":"2019-02-21T16:41:49.787Z","type":"message"}
{"nick":"lundibundi","reason":"Ping timeout: 245 seconds","date":"2019-02-21T16:42:08.356Z","type":"quit"}
{"nick":"bradleymeck","message":"goofy custom cache system would work, but be kind of painful","date":"2019-02-21T16:42:27.922Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: in vm i just tie the lifetime of the module to the object representation","date":"2019-02-21T16:47:17.508Z","type":"message"}
{"nick":"devsnek","message":"and v8 has its own lifetime","date":"2019-02-21T16:47:28.641Z","type":"message"}
{"nick":"bradleymeck","message":"in loaders, they run on a separate isolated area, so you are roughly representing remote objects","date":"2019-02-21T16:48:09.087Z","type":"message"}
{"nick":"devsnek","message":"oh right they're in different isolates","date":"2019-02-21T16:48:32.376Z","type":"message"}
{"nick":"bradleymeck","message":"vm.* lives in the same agent at least so you can just use a destructor on one agent","date":"2019-02-21T16:48:40.766Z","type":"message"}
{"nick":"bradleymeck","message":"here there is a kind of dance if we use destructors that is really... gross","date":"2019-02-21T16:48:56.770Z","type":"message"}
{"nick":"bradleymeck","message":"main thread reaps if loader can reap. if main thread reaps, loader reaps","date":"2019-02-21T16:49:23.962Z","type":"message"}
{"nick":"bradleymeck","message":"which is 2 round trips that are affected by jank, and a lot of scary book keeping (to my eye)","date":"2019-02-21T16:50:09.627Z","type":"message"}
{"nick":"bradleymeck","message":"also this brings up, if loader prevents the Realm from being reaped... thats not a small amount of mem","date":"2019-02-21T16:57:00.197Z","type":"message"}
{"nick":"devsnek","message":"what if loaders run in main thread","date":"2019-02-21T17:00:15.296Z","type":"message"}
{"nick":"devsnek","message":"they can still delegate out complex work they do to their own workers","date":"2019-02-21T17:00:33.936Z","type":"message"}
{"nick":"bradleymeck","message":"same problem to my knowledge","date":"2019-02-21T17:14:31.700Z","type":"message"}
{"nick":"bradleymeck","message":"the workers would still be able to hold refs","date":"2019-02-21T17:14:40.984Z","type":"message"}
{"nick":"bradleymeck","message":"any form of isolation would have the same issues","date":"2019-02-21T17:15:12.228Z","type":"message"}
{"nick":"bradleymeck","message":"its all solvable, but nothing looks like a good solution","date":"2019-02-21T17:15:37.465Z","type":"message"}
{"nick":"bradleymeck","message":"could take the .deref approach that WeakRefs take? hmmm","date":"2019-02-21T17:17:47.168Z","type":"message"}
{"nick":"bradleymeck","message":"where it only keeps the ref alive for 1 tick","date":"2019-02-21T17:18:01.385Z","type":"message"}
{"nick":"bradleymeck","message":"people could still leak if they strongly hold it, but thats there problem","date":"2019-02-21T17:18:21.083Z","type":"message"}
{"nick":"bradleymeck","message":"their*","date":"2019-02-21T17:18:23.678Z","type":"message"}
{"nick":"devsnek","message":"they couldn't pass refs to their workers","date":"2019-02-21T17:18:35.221Z","type":"message"}
{"nick":"bradleymeck","message":"?","date":"2019-02-21T17:18:43.806Z","type":"message"}
{"nick":"devsnek","message":"the only refs would be in the main thread","date":"2019-02-21T17:19:06.076Z","type":"message"}
{"nick":"bradleymeck","message":"how would that work when the worker is referring to the ref?","date":"2019-02-21T17:19:16.806Z","type":"message"}
{"nick":"bradleymeck","message":"or rather, what do you expect the worker to be able to do?","date":"2019-02-21T17:19:34.905Z","type":"message"}
{"nick":"devsnek","message":"i dunno","date":"2019-02-21T17:21:24.639Z","type":"message"}
{"nick":"devsnek","message":"compiling code or something","date":"2019-02-21T17:21:28.983Z","type":"message"}
{"nick":"devsnek","message":"they would just use the normal worker api","date":"2019-02-21T17:21:36.518Z","type":"message"}
{"nick":"devsnek","message":"the resolve and whatnot calls would happen in the main thread","date":"2019-02-21T17:22:07.208Z","type":"message"}
{"nick":"bradleymeck","message":"ok, so even then the main thread would have an isolated realm, that does that dance?","date":"2019-02-21T17:23:11.561Z","type":"message"}
{"nick":"devsnek","message":"loaders are only running for the main realm though","date":"2019-02-21T17:23:37.108Z","type":"message"}
{"nick":"bradleymeck","message":"ok, but they still hold refs to another realm","date":"2019-02-21T17:24:43.468Z","type":"message"}
{"nick":"bradleymeck","message":"since they themselves even if they run on main thread, would be isolated","date":"2019-02-21T17:24:55.949Z","type":"message"}
{"nick":"devsnek","message":"what other realm","date":"2019-02-21T17:25:22.715Z","type":"message"}
{"nick":"bradleymeck","message":"the one the loader code runs in","date":"2019-02-21T17:25:35.394Z","type":"message"}
{"nick":"bradleymeck","message":"if we run in the main realm we get into all sorts of confusion","date":"2019-02-21T17:25:49.524Z","type":"message"}
{"nick":"devsnek","message":"do we though :(","date":"2019-02-21T17:25:55.921Z","type":"message"}
{"nick":"devsnek","message":"this seems more confusing","date":"2019-02-21T17:26:02.931Z","type":"message"}
{"nick":"bradleymeck","message":"circularity/jank/head of line/poisoning to reach privileged ops/etc.","date":"2019-02-21T17:26:14.438Z","type":"message"}
{"nick":"bradleymeck","message":"it is certainly not a simple API, but power tools rarely are?","date":"2019-02-21T17:26:35.128Z","type":"message"}
{"nick":"bradleymeck","message":"this has a lot of overlap with the design space of service workers","date":"2019-02-21T17:26:47.107Z","type":"message"}
{"nick":"devsnek","message":"hmmmm","date":"2019-02-21T17:27:53.862Z","type":"message"}
{"nick":"bradleymeck","message":"i have another call w/ realms people about the impact of reentrancy during HostResolve...","date":"2019-02-21T17:29:09.735Z","type":"message"}
{"nick":"bradleymeck","message":"Tuesday they did agree it still sounded like a spec bug that it is allowed, but unclear on how to explicitly forbid","date":"2019-02-21T17:29:36.678Z","type":"message"}
{"nick":"bradleymeck","message":"afk","date":"2019-02-21T17:30:17.613Z","type":"message"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-21T17:36:52.922Z","type":"quit"}
{"nick":"srl295","date":"2019-02-21T18:46:46.987Z","type":"join"}
{"nick":"dbevenius","date":"2019-02-21T18:47:09.714Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-02-21T18:51:47.736Z","type":"quit"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-02-21T18:54:26.571Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T19:11:49.054Z","type":"join"}
{"nick":"lundibundi","date":"2019-02-21T19:13:15.738Z","type":"join"}
{"nick":"neo4","date":"2019-02-21T19:32:19.527Z","type":"join"}
{"nick":"gamelaster","date":"2019-02-21T19:33:15.738Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 255 seconds","date":"2019-02-21T19:46:41.738Z","type":"quit"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-21T20:22:49.232Z","type":"quit"}
{"nick":"lundibundi","date":"2019-02-21T20:28:06.107Z","type":"join"}
{"nick":"lundibundi","reason":"Remote host closed the connection","date":"2019-02-21T20:28:16.476Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T20:29:46.384Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-02-21T20:34:25.304Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T20:47:19.854Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-02-21T20:51:56.924Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T21:07:06.810Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-21T21:11:18.502Z","type":"quit"}
{"nick":"neo4","reason":"Quit: neo4","date":"2019-02-21T21:23:31.035Z","type":"quit"}
{"nick":"neo4","date":"2019-02-21T21:24:01.725Z","type":"join"}
{"nick":"dbevenius","date":"2019-02-21T21:28:09.087Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-02-21T21:35:54.040Z","type":"quit"}
{"nick":"AtumT_","date":"2019-02-21T21:41:10.784Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 240 seconds","date":"2019-02-21T21:44:07.495Z","type":"quit"}
{"nick":"zsoc","reason":"Ping timeout: 255 seconds","date":"2019-02-21T21:53:35.699Z","type":"quit"}
{"nick":"AtumT","date":"2019-02-21T21:53:53.980Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 255 seconds","date":"2019-02-21T21:55:23.767Z","type":"quit"}
{"nick":"zsoc","date":"2019-02-21T21:57:04.579Z","type":"join"}
{"nick":"zsoc","reason":"Changing host","date":"2019-02-21T21:57:04.652Z","type":"quit"}
{"nick":"zsoc","date":"2019-02-21T21:57:04.652Z","type":"join"}
{"nick":"neo4","reason":"Quit: neo4","date":"2019-02-21T22:22:58.094Z","type":"quit"}
{"nick":"gamelaster","reason":"Ping timeout: 268 seconds","date":"2019-02-21T22:55:09.841Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T23:31:15.463Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-02-21T23:35:53.377Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-21T23:47:17.352Z","type":"join"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-02-21T23:50:54.786Z","type":"quit"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-02-21T23:51:49.294Z","type":"quit"}
