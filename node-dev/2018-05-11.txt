{"nick":"devsnek","message":"addaleax: should i spec this api as like (env, value, void*) or (env, value, engineSpecificType*)","date":"2018-05-11T00:23:31.694Z","type":"message"}
{"nick":"addaleax","message":"devsnek: the latter … I guess for now we just have to implement Local<Value>, because the chakra shim provides that anyway","date":"2018-05-11T00:26:34.984Z","type":"message"}
{"nick":"addaleax","message":"you could probably also make the value a return type directly?","date":"2018-05-11T00:26:54.263Z","type":"message"}
{"nick":"AtumT","reason":"Remote host closed the connection","date":"2018-05-11T00:28:25.259Z","type":"quit"}
{"nick":"devsnek","message":"i assumed it would be napi_status as the return value","date":"2018-05-11T00:28:52.596Z","type":"message"}
{"nick":"devsnek","message":"addaleax: so people writing addons using this would use preprocessor macros yea?","date":"2018-05-11T00:29:52.038Z","type":"message"}
{"nick":"addaleax","message":"devsnek: why would they do that?","date":"2018-05-11T00:31:16.281Z","type":"message"}
{"nick":"devsnek","message":"i dunno how would you write an addon that works in any engine and uses this method","date":"2018-05-11T00:31:37.773Z","type":"message"}
{"nick":"addaleax","message":"i think you can’t, that would kind of go against the point of having it, right?","date":"2018-05-11T00:32:03.237Z","type":"message"}
{"nick":"addaleax","message":"oh","date":"2018-05-11T00:32:07.057Z","type":"message"}
{"nick":"addaleax","message":"you meant, preprocessor macros for feature detection?","date":"2018-05-11T00:32:15.376Z","type":"message"}
{"nick":"addaleax","message":"yeah","date":"2018-05-11T00:32:16.105Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-05-11T00:32:19.981Z","type":"message"}
{"nick":"addaleax","message":"i thought you wanted the function itself to be defined as a macro","date":"2018-05-11T00:32:34.609Z","type":"message"}
{"nick":"devsnek","message":"oh no","date":"2018-05-11T00:33:07.638Z","type":"message"}
{"nick":"devsnek","message":"even i know that would be silly","date":"2018-05-11T00:33:13.045Z","type":"message"}
{"nick":"devsnek","message":"funny story that new XS js engine from moddable's public api is mostly macros","date":"2018-05-11T00:34:06.760Z","type":"message"}
{"nick":"devsnek","message":"absolutely terrible to use","date":"2018-05-11T00:34:15.567Z","type":"message"}
{"nick":"devsnek","message":"addaleax: if i include v8.h in node_api.h it will expose everything in v8.h right?","date":"2018-05-11T00:57:23.605Z","type":"message"}
{"nick":"devsnek","message":"also i'm thinking about napi_create_value(env, engineSpecificType, napi_value*)","date":"2018-05-11T01:08:43.580Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-05-11T01:13:43.212Z","type":"quit"}
{"nick":"devsnek","message":"oh these are being built with gcc and that doesn't support the c++ v8 stuff","date":"2018-05-11T01:14:16.146Z","type":"message"}
{"nick":"devsnek","message":"i should have expected that","date":"2018-05-11T01:14:19.626Z","type":"message"}
{"nick":"devsnek","message":"roadblock yay","date":"2018-05-11T01:14:25.947Z","type":"message"}
{"nick":"devsnek","message":"perhaps this is a feature better suited for node-addon-api","date":"2018-05-11T01:14:47.849Z","type":"message"}
{"nick":"devsnek","message":"but then again header only wouldn't be a good place","date":"2018-05-11T01:17:46.227Z","type":"message"}
{"nick":"m00dy","date":"2018-05-11T01:21:43.345Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T01:27:08.523Z","type":"quit"}
{"nick":"BridgeAR","reason":"Ping timeout: 260 seconds","date":"2018-05-11T01:27:54.582Z","type":"quit"}
{"nick":"juggernaut451","reason":"Quit: Leaving...","date":"2018-05-11T01:29:24.302Z","type":"quit"}
{"nick":"joyee","message":"I just managed to compile v10.1.0 on CentOS5 with devtoolset 2. Surprised that it even worked","date":"2018-05-11T01:39:14.615Z","type":"message"}
{"nick":"joyee","message":"That’s gcc 4.8 I think","date":"2018-05-11T01:40:25.048Z","type":"message"}
{"nick":"ryzokuken","reason":"Remote host closed the connection","date":"2018-05-11T01:48:16.159Z","type":"quit"}
{"nick":"doodadjs","reason":"Ping timeout: 240 seconds","date":"2018-05-11T01:50:51.367Z","type":"quit"}
{"nick":"juggernaut_451","date":"2018-05-11T01:51:39.389Z","type":"join"}
{"nick":"juggernaut_451","reason":"Client Quit","date":"2018-05-11T01:53:29.256Z","type":"quit"}
{"nick":"juggernaut_451","date":"2018-05-11T01:55:22.390Z","type":"join"}
{"nick":"juggernaut_451","reason":"Client Quit","date":"2018-05-11T01:56:16.415Z","type":"quit"}
{"nick":"juggernaut_451","date":"2018-05-11T01:57:32.825Z","type":"join"}
{"nick":"juggernaut_451","reason":"Client Quit","date":"2018-05-11T02:00:55.826Z","type":"quit"}
{"nick":"juggernaut451","date":"2018-05-11T02:02:29.789Z","type":"join"}
{"nick":"devsnek","message":"bradleymeck: success! https://youtu.be/mIWCLOftfRw?t=512","date":"2018-05-11T02:11:11.271Z","type":"message"}
{"nick":"juggernaut451","reason":"Remote host closed the connection","date":"2018-05-11T02:35:16.784Z","type":"quit"}
{"nick":"juggernaut451","date":"2018-05-11T02:35:56.584Z","type":"join"}
{"nick":"juggernaut451","reason":"Ping timeout: 260 seconds","date":"2018-05-11T02:40:14.596Z","type":"quit"}
{"nick":"juggernaut451","date":"2018-05-11T02:56:26.489Z","type":"join"}
{"nick":"Snakesnp","date":"2018-05-11T03:33:21.723Z","type":"join"}
{"nick":"Snakesnp","reason":"Remote host closed the connection","date":"2018-05-11T03:35:25.126Z","type":"quit"}
{"nick":"adempus","date":"2018-05-11T03:38:16.652Z","type":"join"}
{"nick":"gryffusiz","date":"2018-05-11T03:38:41.220Z","type":"join"}
{"nick":"gryffusiz","reason":"K-Lined","date":"2018-05-11T03:40:35.296Z","type":"quit"}
{"nick":"marthinal","date":"2018-05-11T03:46:27.716Z","type":"join"}
{"nick":"adempus","reason":"Remote host closed the connection","date":"2018-05-11T03:48:26.289Z","type":"quit"}
{"nick":"marthinal","reason":"Ping timeout: 246 seconds","date":"2018-05-11T03:50:50.404Z","type":"quit"}
{"nick":"juggernaut451","reason":"Ping timeout: 248 seconds","date":"2018-05-11T03:56:49.433Z","type":"quit"}
{"nick":"LittleJ","date":"2018-05-11T03:59:56.584Z","type":"join"}
{"nick":"LittleJ","reason":"Remote host closed the connection","date":"2018-05-11T04:05:42.233Z","type":"quit"}
{"nick":"juggernaut451","date":"2018-05-11T04:06:10.869Z","type":"join"}
{"nick":"juggernaut451","reason":"Ping timeout: 268 seconds","date":"2018-05-11T04:12:57.760Z","type":"quit"}
{"nick":"not-an-aardvark","date":"2018-05-11T04:34:05.356Z","type":"join"}
{"nick":"marthinal","date":"2018-05-11T04:55:24.869Z","type":"join"}
{"nick":"juggernaut451","date":"2018-05-11T05:00:53.759Z","type":"join"}
{"nick":"juggernaut451","reason":"Remote host closed the connection","date":"2018-05-11T05:31:24.918Z","type":"quit"}
{"nick":"juggernaut451","date":"2018-05-11T05:32:03.418Z","type":"join"}
{"nick":"lpin","date":"2018-05-11T05:34:15.047Z","type":"join"}
{"nick":"juggernaut451","reason":"Ping timeout: 265 seconds","date":"2018-05-11T05:36:50.421Z","type":"quit"}
{"nick":"juggernaut451","date":"2018-05-11T06:00:10.616Z","type":"join"}
{"nick":"adapterA1SHI6","date":"2018-05-11T06:08:37.420Z","type":"join"}
{"nick":"adapterA1SHI6","reason":"Remote host closed the connection","date":"2018-05-11T06:10:39.525Z","type":"quit"}
{"nick":"blZongva","date":"2018-05-11T06:17:18.439Z","type":"join"}
{"nick":"blZongva","reason":"Remote host closed the connection","date":"2018-05-11T06:19:26.687Z","type":"quit"}
{"nick":"addaleax","message":"devsnek: sorry, went to sleep, but: you don’t want to include it in node_api.h, because that’s a C-only header … this would probably rather go into node.h","date":"2018-05-11T07:16:23.913Z","type":"message"}
{"nick":"CustosLimen","reason":"Ping timeout: 256 seconds","date":"2018-05-11T08:12:00.680Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T08:13:45.099Z","type":"join"}
{"nick":"m00dy","reason":"Read error: Connection reset by peer","date":"2018-05-11T08:14:31.128Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T08:21:06.976Z","type":"join"}
{"nick":"m00dy","reason":"Read error: Connection reset by peer","date":"2018-05-11T08:21:39.435Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T08:22:11.793Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T08:22:12.647Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T08:22:51.826Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T08:25:22.901Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T08:25:41.807Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T08:25:46.079Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T08:26:11.801Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T08:28:00.030Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T08:28:34.710Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 240 seconds","date":"2018-05-11T08:34:21.643Z","type":"quit"}
{"nick":"CustosLimen","date":"2018-05-11T08:37:01.059Z","type":"join"}
{"nick":"m00dy","date":"2018-05-11T08:39:14.614Z","type":"join"}
{"nick":"doodadjs","date":"2018-05-11T09:09:18.816Z","type":"join"}
{"nick":"seishun","date":"2018-05-11T09:37:20.221Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 256 seconds","date":"2018-05-11T09:40:31.501Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T09:47:21.795Z","type":"join"}
{"nick":"not-an-aardvark","reason":"Quit: Connection closed for inactivity","date":"2018-05-11T09:52:36.737Z","type":"quit"}
{"nick":"lpin","reason":"Ping timeout: 240 seconds","date":"2018-05-11T10:06:57.807Z","type":"quit"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T10:10:53.436Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T10:11:08.511Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T10:13:24.521Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T10:13:58.598Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 255 seconds","date":"2018-05-11T10:18:39.266Z","type":"quit"}
{"nick":"mylesborins","reason":"Quit: farewell for now","date":"2018-05-11T10:25:07.642Z","type":"quit"}
{"nick":"mylesborins","date":"2018-05-11T10:25:38.256Z","type":"join"}
{"nick":"BridgeAR","date":"2018-05-11T10:37:51.611Z","type":"join"}
{"nick":"m00dy","date":"2018-05-11T11:05:39.987Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T11:10:36.470Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T11:26:19.711Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 240 seconds","date":"2018-05-11T11:34:51.462Z","type":"quit"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T12:37:14.232Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T12:37:47.616Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T12:39:25.013Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T12:39:40.420Z","type":"join"}
{"nick":"bradleymeck","message":"devsnek: for https://github.com/nodejs/node/pull/20134#issuecomment-388235282 why does it remove snapshotting?","date":"2018-05-11T12:45:50.553Z","type":"message"}
{"nick":"devsnek","message":"because I was trying a misguided attempt to respect query","date":"2018-05-11T12:46:44.877Z","type":"message"}
{"nick":"devsnek","message":"I should just drop the query ya?","date":"2018-05-11T12:46:56.200Z","type":"message"}
{"nick":"bradleymeck","message":"probably easiest","date":"2018-05-11T12:48:53.563Z","type":"message"}
{"nick":"bradleymeck","message":"drop hash too","date":"2018-05-11T12:49:04.980Z","type":"message"}
{"nick":"devsnek","message":"and I want to figure out how to kill the query/hash for builtins","date":"2018-05-11T12:50:05.014Z","type":"message"}
{"nick":"devsnek","message":"do you think splitting on /?|#/ is safe","date":"2018-05-11T12:50:23.134Z","type":"message"}
{"nick":"bradleymeck","message":"it isn't... let me bring up that code","date":"2018-05-11T12:50:40.343Z","type":"message"}
{"nick":"bradleymeck","message":"you pretty much have to go through the URL parser :-/","date":"2018-05-11T12:50:48.643Z","type":"message"}
{"nick":"bradleymeck","message":"I think at the point builtins load it is a `node:fs` url or w/e","date":"2018-05-11T12:51:10.689Z","type":"message"}
{"nick":"devsnek","message":"I don't think that will parse though","date":"2018-05-11T12:52:09.547Z","type":"message"}
{"nick":"BridgeAR","reason":"Ping timeout: 260 seconds","date":"2018-05-11T12:53:19.595Z","type":"quit"}
{"nick":"bradleymeck","message":"`fs`? no it won't","date":"2018-05-11T12:53:25.812Z","type":"message"}
{"nick":"bradleymeck","message":"`node:fs?x` will","date":"2018-05-11T12:53:32.303Z","type":"message"}
{"nick":"devsnek","message":"iirc trying to parse node:x?y failed when I tried","date":"2018-05-11T12:54:12.564Z","type":"message"}
{"nick":"devsnek","message":"I can look again","date":"2018-05-11T12:54:16.110Z","type":"message"}
{"nick":"bradleymeck","message":"it shouldn't","date":"2018-05-11T12:54:48.816Z","type":"message"}
{"nick":"devsnek","message":"I'm probably wrong","date":"2018-05-11T12:55:09.251Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/nodejs/node/blob/master/lib/internal/modules/esm/default_resolve.js#L54 is checking before converting","date":"2018-05-11T12:55:23.059Z","type":"message"}
{"nick":"bradleymeck","message":"mmmm","date":"2018-05-11T12:55:30.470Z","type":"message"}
{"nick":"bradleymeck","message":"for purely a builtin check we could probably do your splitting actually","date":"2018-05-11T12:55:48.230Z","type":"message"}
{"nick":"bradleymeck","message":"can't do it in most places","date":"2018-05-11T12:55:51.545Z","type":"message"}
{"nick":"bradleymeck","message":"would match the dropping of query/hash from other places since I don't think we are going to load multiple builtins","date":"2018-05-11T12:56:18.354Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-05-11T12:56:38.559Z","type":"message"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-05-11T12:58:30.885Z","type":"quit"}
{"nick":"AtumT","date":"2018-05-11T13:06:10.008Z","type":"join"}
{"nick":"seishun","date":"2018-05-11T13:13:05.752Z","type":"join"}
{"nick":"BridgeAR","date":"2018-05-11T13:17:10.371Z","type":"join"}
{"nick":"marthinal","date":"2018-05-11T13:52:30.035Z","type":"join"}
{"nick":"geoid","date":"2018-05-11T14:03:13.580Z","type":"join"}
{"nick":"juggernaut451","reason":"Remote host closed the connection","date":"2018-05-11T14:12:52.680Z","type":"quit"}
{"nick":"BridgeAR1","date":"2018-05-11T14:21:56.396Z","type":"join"}
{"nick":"BridgeAR","reason":"Ping timeout: 240 seconds","date":"2018-05-11T14:23:21.350Z","type":"quit"}
{"nick":"BridgeAR1","new_nick":"BridgeAR","date":"2018-05-11T14:25:34.904Z","type":"nick"}
{"nick":"ryzokuken","date":"2018-05-11T15:11:41.632Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T15:14:10.421Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T15:14:42.468Z","type":"join"}
{"nick":"CustosLimen","reason":"Ping timeout: 240 seconds","date":"2018-05-11T15:17:27.828Z","type":"quit"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T15:18:01.480Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T15:18:18.587Z","type":"join"}
{"nick":"geoid","reason":"Quit: Be back later ...","date":"2018-05-11T15:22:40.124Z","type":"quit"}
{"nick":"geoid","date":"2018-05-11T15:42:03.501Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T15:56:54.640Z","type":"quit"}
{"nick":"addaleax","message":"do we currently have any features behind flags?","date":"2018-05-11T15:57:18.892Z","type":"message"}
{"nick":"m00dy","date":"2018-05-11T15:57:41.757Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T15:57:50.467Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T15:58:37.849Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T15:59:08.154Z","type":"quit"}
{"nick":"ljharb","message":"addaleax: besides modules?","date":"2018-05-11T16:01:32.686Z","type":"message"}
{"nick":"addaleax","message":"oh, right","date":"2018-05-11T16:01:53.095Z","type":"message"}
{"nick":"addaleax","message":"that one :D","date":"2018-05-11T16:01:54.428Z","type":"message"}
{"nick":"bradleymeck","message":"addaleax: i'd happily accept workers under a flag if that is what it takes","date":"2018-05-11T16:06:34.832Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: literally what i’m doing rn :)","date":"2018-05-11T16:08:22.570Z","type":"message"}
{"nick":"bradleymeck","message":"i will throw money for tea/coffee/whatever your way if it goes up XD / idk if you even have a donation system","date":"2018-05-11T16:09:20.585Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: yea i’m up for tea or something. :D but not really in need of donations right now, this is working for me as a student job","date":"2018-05-11T16:10:44.725Z","type":"message"}
{"nick":"addaleax","message":"and yea i plan to have something up in the form of a PR by the end of the weekend","date":"2018-05-11T16:10:54.500Z","type":"message"}
{"nick":"addaleax","message":"still gonna take time","date":"2018-05-11T16:10:58.790Z","type":"message"}
{"nick":"bradleymeck","message":"i tend to work on years timeline these days, rushing just makes me stressed","date":"2018-05-11T16:11:30.703Z","type":"message"}
{"nick":"devsnek","message":"i'll give away all my internet points to whoever makes node workers a thing","date":"2018-05-11T16:18:19.326Z","type":"message"}
{"nick":"devsnek","message":"addaleax: i'm seeing esm, vm.Module, and repl top level await","date":"2018-05-11T16:20:43.971Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: cjs pr updated","date":"2018-05-11T16:36:14.284Z","type":"message"}
{"nick":"Wes-","message":"devsnek: I did a version of workers that messages via JSON over TCP/IP. I ain't fast, but it works and meets my use-case.  Wasn't hard.   The hard part will be doing something better, than can exchange objects that can't be serialized to JSON.  And/or is fast.","date":"2018-05-11T16:39:15.531Z","type":"message"}
{"nick":"Wes-","message":"Is the v8 API threadsafe yet?  That will be a major impediment if not, it will require some kind of IPC","date":"2018-05-11T16:39:41.086Z","type":"message"}
{"nick":"devsnek","message":"v8 API will never be thread safe","date":"2018-05-11T16:39:55.477Z","type":"message"}
{"nick":"Wes-","message":"devsnek: That's a bummer, was hoping that when they added Isolates etc that they'd looked at that.","date":"2018-05-11T16:40:40.959Z","type":"message"}
{"nick":"devsnek","message":"it has lockers","date":"2018-05-11T16:41:12.661Z","type":"message"}
{"nick":"devsnek","message":"which lock handles","date":"2018-05-11T16:41:16.696Z","type":"message"}
{"nick":"devsnek","message":"but you can't like move values between threads and stuff","date":"2018-05-11T16:43:47.998Z","type":"message"}
{"nick":"devsnek","message":"my thread solution uses the serialisation api","date":"2018-05-11T16:44:26.992Z","type":"message"}
{"nick":"Wes-","message":"devsnek: Yeah, that will never happen, but as long as you can run two concurrent, completely separate, v8 instances safely in different threads of the same process, you'll be able to get fast workers","date":"2018-05-11T16:44:30.070Z","type":"message"}
{"nick":"Wes-","message":"I'm curious now how they did it in chromium, should have a look","date":"2018-05-11T16:44:49.623Z","type":"message"}
{"nick":"bradleymeck","message":"Wes-: part of the problem is how unsafe it is to share JS Objects","date":"2018-05-11T16:44:55.501Z","type":"message"}
{"nick":"devsnek","message":"they make a new thread","date":"2018-05-11T16:44:59.693Z","type":"message"}
{"nick":"bradleymeck","message":"like at the language level","date":"2018-05-11T16:45:02.832Z","type":"message"}
{"nick":"devsnek","message":"use the serialisation api to copy values between","date":"2018-05-11T16:45:12.018Z","type":"message"}
{"nick":"devsnek","message":"which is pretty much what i do but mine is 300x unsafer","date":"2018-05-11T16:45:28.605Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: only because you guys don't want to do webkit's strawman /s","date":"2018-05-11T16:45:44.240Z","type":"message"}
{"nick":"bradleymeck","message":"because it breaks the object model, yea","date":"2018-05-11T16:46:01.535Z","type":"message"}
{"nick":"devsnek","message":"just put a mutex on every object member :p","date":"2018-05-11T16:46:55.664Z","type":"message"}
{"nick":"bradleymeck","message":"wasn't the point you wanted speed?","date":"2018-05-11T16:47:15.418Z","type":"message"}
{"nick":"devsnek","message":"ye, that was a joke","date":"2018-05-11T16:47:31.955Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: Yep - which is why it's easy to do with string serialization, but the object exchange crap gets nutty.  Maybe something like a Proxy at each end communicating post-serialization deltas.","date":"2018-05-11T16:47:52.526Z","type":"message"}
{"nick":"bradleymeck","message":"Wes-: wouldn't that also be insanely costly? just use a SharedArrayBuffer for syncing","date":"2018-05-11T16:48:31.052Z","type":"message"}
{"nick":"devsnek","message":"thats what isolated-vm does","date":"2018-05-11T16:48:31.575Z","type":"message"}
{"nick":"devsnek","message":"the proxy stuff","date":"2018-05-11T16:48:38.082Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: in theory would like a SharedPrimitiveArray be possible","date":"2018-05-11T16:49:22.643Z","type":"message"}
{"nick":"devsnek","message":"with strings and bigints and such","date":"2018-05-11T16:50:01.628Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: If I was doing this I would probably cheat and share data on the C side. ;)   Does the browser still have SharedArrayBuffer?  I thought that went away with Spectre et al.     That's a whole class of interesting problems for sure. Any kind of shared object is going to cost, though, which is why either shared buffers or immutable data will almost always win the day.   Interrupting...","date":"2018-05-11T16:55:56.280Z","type":"message"}
{"nick":"Wes-","message":"...object property access to guard with a mutex in JS can get really hairy ..... for example if a type mutates in another thread while you are using it in a loop.  BOOM, you are now locking each prop per loop iteration to check...and if it happens, any JIT you have on the go gets thrown out the widnow.","date":"2018-05-11T16:55:57.768Z","type":"message"}
{"nick":"devsnek","message":"wow sometimes i baffle myself with how silly my questions are","date":"2018-05-11T16:57:50.131Z","type":"message"}
{"nick":"devsnek","message":"lowkey forgetting about postMessage","date":"2018-05-11T16:58:24.997Z","type":"message"}
{"nick":"m00dy","date":"2018-05-11T17:44:28.127Z","type":"join"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-05-11T18:01:25.153Z","type":"quit"}
{"nick":"bradleymeck","message":"Wes-: it was just disabled until mitigations are in place and reviews finish","date":"2018-05-11T18:18:17.019Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck++","date":"2018-05-11T18:18:39.589Z","type":"message"}
{"nick":"bradleymeck","message":"even with mutex guards you can't share prototypes across threads","date":"2018-05-11T18:18:43.866Z","type":"message"}
{"nick":"bradleymeck","message":"thats part of the problem with the webkit proposal because you still have shared mutable state in the object model due to inheritance","date":"2018-05-11T18:19:10.476Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: did we not add the get() trap to the named exports proxy","date":"2018-05-11T18:21:59.136Z","type":"message"}
{"nick":"bradleymeck","message":"?","date":"2018-05-11T18:22:01.016Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: you're right.  SpiderMonkey had thread-shareable objects up until version 1.7 (around 2006).  Even then, there had to be guards in place to ensure that the object was evaluated in the right context -- specifically if those guards were turned off and cx->globalObject was something unexpected........very ugly things could happen","date":"2018-05-11T18:22:02.255Z","type":"message"}
{"nick":"bradleymeck","message":"ctypes stored in typedarrays could possibly be put into JS spec as value types","date":"2018-05-11T18:22:49.518Z","type":"message"}
{"nick":"bradleymeck","message":"as long as they cannot delegate / have non-primitive reference types, it should be fine","date":"2018-05-11T18:23:26.913Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: what would it do","date":"2018-05-11T18:24:05.723Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: only if they are immutable, or are aligned and quantized with the CPU word size. I think.","date":"2018-05-11T18:24:06.775Z","type":"message"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-05-11T18:24:09.667Z","type":"quit"}
{"nick":"bradleymeck","message":"could use copy/transfer on access maybe to get around some shared state issues?","date":"2018-05-11T18:24:16.491Z","type":"message"}
{"nick":"bradleymeck","message":"Wes-: yea, unsure if it needs to be immutable if it can be backed like a SharedArrayBuffer","date":"2018-05-11T18:24:40.567Z","type":"message"}
{"nick":"geoid","reason":"Quit: Lingo: www.lingoirc.com","date":"2018-05-11T18:24:45.559Z","type":"quit"}
{"nick":"devsnek","message":"wait who was the message about copy/transfer for","date":"2018-05-11T18:24:56.790Z","type":"message"}
{"nick":"bradleymeck","message":"was for Wes-","date":"2018-05-11T18:25:06.696Z","type":"message"}
{"nick":"bradleymeck","message":"alignment is questionable because I hope we wouldn't expose the underlying byte blob","date":"2018-05-11T18:25:29.711Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: There's an interesting issue that came up with SpiderMonkey in that era.  Imagine this struct being read by two separate cores:  struct { uint16 a; uint16 b; }; ... Now image","date":"2018-05-11T18:25:47.128Z","type":"message"}
{"nick":"bradleymeck","message":"but, i'm not up for taking on that proposal","date":"2018-05-11T18:25:48.219Z","type":"message"}
{"nick":"devsnek","message":"js alloc() when :p","date":"2018-05-11T18:25:51.809Z","type":"message"}
{"nick":"Wes-","message":"(continuing my thought in a sec:  this only matters if you don't have a guard in the right place)","date":"2018-05-11T18:26:07.245Z","type":"message"}
{"nick":"bradleymeck","message":"Wes-: but that detail doesn't need to be show to JS runtime land I don't think?","date":"2018-05-11T18:26:35.648Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: There's an interesting issue that came up with SpiderMonkey in that era.  Imagine this struct being read by two separate cores:  struct { uint16 a; uint16 b; } S.a; ... Now imagine CPU A reads and increments S.a, and CPU B reads and increments S.b.  If the timing is just wrong, the memory written back will only show one of those two increments, because even though S.a and S.b...","date":"2018-05-11T18:27:23.617Z","type":"message"}
{"nick":"Wes-","message":"...appear to be okay to use locklessly, the CPU still reads and writes 32 bit words.","date":"2018-05-11T18:27:24.901Z","type":"message"}
{"nick":"bradleymeck","message":"yea, definitely something needs to be done for that","date":"2018-05-11T18:27:58.983Z","type":"message"}
{"nick":"bradleymeck","message":"not sure it changes exposed API to JS though","date":"2018-05-11T18:28:05.995Z","type":"message"}
{"nick":"devsnek","message":"bradley do you have a concern about lack of get trap","date":"2018-05-11T18:28:21.356Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: It doesn't change the API, it changes perf.  (I am remembering more the more I think about this)","date":"2018-05-11T18:28:22.118Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: idc much either way, but without the trap `fs.foo = fs.foo` fires an update but `fs.foo` doesn't","date":"2018-05-11T18:28:54.848Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: The problem doing a full memory sync around each read and write was one of the reasons JSAPI had major perf problems around lockless property access","date":"2018-05-11T18:29:03.373Z","type":"message"}
{"nick":"Wes-","message":"and in a funny way, this is at the nucleus of the core of what that team dropped thread-safe JS objects","date":"2018-05-11T18:29:28.400Z","type":"message"}
{"nick":"bradleymeck","message":"Wes-: sure, but you only need those locks if there is cross thread going on right?","date":"2018-05-11T18:29:28.579Z","type":"message"}
{"nick":"devsnek","message":"why would we want to fire update on get?","date":"2018-05-11T18:29:37.885Z","type":"message"}
{"nick":"bradleymeck","message":"we have to use locks in shared array buffers as well","date":"2018-05-11T18:29:39.197Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: Yes.  These aren't locks, though, crap, I wish I could remember the word I'm searching for.","date":"2018-05-11T18:30:20.249Z","type":"message"}
{"nick":"Wes-","message":"jslock.c!  That's where it was. Lemme go rtfs.","date":"2018-05-11T18:30:27.699Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: see https://github.com/nodejs/node/pull/20403#discussion_r187347182","date":"2018-05-11T18:30:31.432Z","type":"message"}
{"nick":"devsnek","message":"mfw github still doesn't autoscroll on mobile","date":"2018-05-11T18:30:59.400Z","type":"message"}
{"nick":"bradleymeck","message":"it just keeps things more in sync, don't have strong desire","date":"2018-05-11T18:31:02.384Z","type":"message"}
{"nick":"bradleymeck","message":"without it you can make setters that go out of sync with exports more easily","date":"2018-05-11T18:31:28.192Z","type":"message"}
{"nick":"bradleymeck","message":"but making those getters is so goofy that :Shrug:","date":"2018-05-11T18:31:39.202Z","type":"message"}
{"nick":"devsnek","message":"sounds hacky","date":"2018-05-11T18:32:41.389Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: welcome to getters/setters, they are the land of making things edge casey","date":"2018-05-11T18:33:35.969Z","type":"message"}
{"nick":"bradleymeck","message":"which also brings up, value types should never support get/set traps","date":"2018-05-11T18:33:54.031Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: brains coming back. It's really like grey matter has mag tape!   JSAPI's main problem was that it was available on JSObject, which was a huge perf suck.  Property access was nominally lockless but mediated through memory barrier to avoid the bug I was talking about. membar was the instruction in sparc assembly,  This sucker messes pipeline timing and OooE perf IIRC.  When prop...","date":"2018-05-11T18:36:38.009Z","type":"message"}
{"nick":"Wes-","message":"...locks were needed, they were using atomic compare and swap to be cheaper than pthread_mutex and friends.   Conclusion:  I agree with everything you've said. :D","date":"2018-05-11T18:36:39.511Z","type":"message"}
{"nick":"bradleymeck","message":"i would giggle so hard if `typeof value_type === 'value'` was a thing","date":"2018-05-11T18:36:50.193Z","type":"message"}
{"nick":"Wes-","message":"bradleymeck: once upon a time, you could assign a value to undefined.  That gave me a chuckle. And then I filed a bug report. LOL.","date":"2018-05-11T18:37:41.886Z","type":"message"}
{"nick":"bradleymeck","message":"you can still if you make a non-global variable","date":"2018-05-11T18:37:54.831Z","type":"message"}
{"nick":"Wes-","message":"true","date":"2018-05-11T18:38:03.508Z","type":"message"}
{"nick":"bradleymeck","message":"now i want someone to take up the old value types strawman","date":"2018-05-11T18:38:50.855Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: funny you bring that up","date":"2018-05-11T18:43:48.505Z","type":"message"}
{"nick":"devsnek","message":"we were just discussing type stuff in the tc39 channel","date":"2018-05-11T18:44:01.166Z","type":"message"}
{"nick":"devsnek","message":"oh wait you were part of that discussion lol","date":"2018-05-11T18:44:27.359Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: value types is pretty big compared to Builtins.is","date":"2018-05-11T19:08:39.383Z","type":"message"}
{"nick":"bradleymeck","message":"it basically requires someone to make a big ugly object model that is contained within the current model","date":"2018-05-11T19:09:06.134Z","type":"message"}
{"nick":"fluffybori","date":"2018-05-11T19:09:22.764Z","type":"join"}
{"nick":"bradleymeck","message":"unlike some I'm not 100% convinced we need to make it serialize to well defined byte strings","date":"2018-05-11T19:10:00.413Z","type":"message"}
{"nick":"devsnek","message":"aren't value types already like","date":"2018-05-11T19:10:15.344Z","type":"message"}
{"nick":"devsnek","message":"all the immutable types we have","date":"2018-05-11T19:10:22.913Z","type":"message"}
{"nick":"devsnek","message":"number and string etc","date":"2018-05-11T19:10:33.055Z","type":"message"}
{"nick":"bradleymeck","message":"those a primitive, they can't contain other values","date":"2018-05-11T19:10:58.970Z","type":"message"}
{"nick":"bradleymeck","message":"generally they are a value type of sorts, but value types in discussion generally talk about being able to have structs / vectors that can contain other value types","date":"2018-05-11T19:11:37.755Z","type":"message"}
{"nick":"devsnek","message":"maybe i'm misunderstanding what a value type is","date":"2018-05-11T19:11:39.991Z","type":"message"}
{"nick":"devsnek","message":"i'm using c#'s definition","date":"2018-05-11T19:12:50.233Z","type":"message"}
{"nick":"bradleymeck","message":"the main thing at least in TC39 history is the concept of using structural equality instead of referential : x = valuetype{x: 1}; y = valuetype{x: 1}; assert(x === y);","date":"2018-05-11T19:13:12.990Z","type":"message"}
{"nick":"bradleymeck","message":"but that has a whole slew of things that fall out of it","date":"2018-05-11T19:13:24.971Z","type":"message"}
{"nick":"bradleymeck","message":"and being able to share these values is also a big desire","date":"2018-05-11T19:13:40.935Z","type":"message"}
{"nick":"devsnek","message":"so you want types that refer to what x and y hold","date":"2018-05-11T19:13:44.670Z","type":"message"}
{"nick":"bradleymeck","message":"not exactly , but that is an aspect of them, yes","date":"2018-05-11T19:14:05.901Z","type":"message"}
{"nick":"bradleymeck","message":"being able to be sent to other realms / create structural copies is another","date":"2018-05-11T19:14:32.763Z","type":"message"}
{"nick":"devsnek","message":"\"the value of the object becomes the type of the object\"","date":"2018-05-11T19:14:36.767Z","type":"message"}
{"nick":"devsnek","message":"is that what valuetype means here","date":"2018-05-11T19:14:43.311Z","type":"message"}
{"nick":"bradleymeck","message":"well it doesn't change the type, but it does change equality","date":"2018-05-11T19:15:17.397Z","type":"message"}
{"nick":"bradleymeck","message":"this is a very fuzzy term without spec text in front of me","date":"2018-05-11T19:15:42.841Z","type":"message"}
{"nick":"devsnek","message":"so there is some definition of \"valuetype\" in the context of js somewhere","date":"2018-05-11T19:16:01.687Z","type":"message"}
{"nick":"bradleymeck","message":"old strawman... need to dig it up","date":"2018-05-11T19:16:45.973Z","type":"message"}
{"nick":"devsnek","message":"i see a lot of strawmans for static types in the search results here lel","date":"2018-05-11T19:18:29.206Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: no clear explanation but it kind of spiders out from https://web.archive.org/web/20160323031823/http://wiki.ecmascript.org/doku.php?id=strawman:value_types","date":"2018-05-11T19:20:04.040Z","type":"message"}
{"nick":"devsnek","message":"you know its good when its on the wayback machine","date":"2018-05-11T19:20:34.685Z","type":"message"}
{"nick":"bradleymeck","message":"they were more ambitious back in the day with the language","date":"2018-05-11T19:21:36.127Z","type":"message"}
{"nick":"m00dy","date":"2018-05-11T19:52:14.424Z","type":"join"}
{"nick":"m00dy","reason":"Read error: Connection reset by peer","date":"2018-05-11T19:53:19.344Z","type":"quit"}
{"nick":"m00dy","date":"2018-05-11T19:53:29.454Z","type":"join"}
{"nick":"m00dy","reason":"Read error: Connection reset by peer","date":"2018-05-11T20:31:20.807Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 248 seconds","date":"2018-05-11T21:06:41.456Z","type":"quit"}
{"nick":"CustosLimen","date":"2018-05-11T21:10:05.007Z","type":"join"}
{"nick":"doodadjs","reason":"Quit: Leaving","date":"2018-05-11T21:43:43.253Z","type":"quit"}
{"nick":"fluffybori","reason":"Quit: Connection closed for inactivity","date":"2018-05-11T21:44:01.420Z","type":"quit"}
{"nick":"gajus","date":"2018-05-11T21:56:54.371Z","type":"join"}
{"nick":"gajus","message":"Hello, I've got a question about Node's handling of stdout buffer upon process termination, e.g. in case of an uncaught exception","date":"2018-05-11T21:57:38.280Z","type":"message"}
{"nick":"gajus","message":"It appears that the program is terminated without first ensuring that the buffer is sent in full.","date":"2018-05-11T21:58:18.918Z","type":"message"}
{"nick":"gajus","message":"e.g.","date":"2018-05-11T21:58:28.210Z","type":"message"}
{"nick":"gajus","message":"`node --eval \"let index = 0; let output = ''; while (index < 1000000) { output += ' ' + (index++); } console.log(output); throw new Error('test');\" | cat`","date":"2018-05-11T21:58:31.044Z","type":"message"}
{"nick":"gajus","message":"This will produce final number 12773 instead of 999999.","date":"2018-05-11T21:58:50.016Z","type":"message"}
{"nick":"gajus","message":"This can be easily fixed by ensuring that all stdout writes have successful completed before terminating the process, e.g. https://gist.github.com/gajus/e9143c4bfbe17725fdb45b83ded7e555","date":"2018-05-11T21:59:43.969Z","type":"message"}
{"nick":"gajus","message":"However, whats the reason Node does not handle this by default?","date":"2018-05-11T21:59:59.741Z","type":"message"}
{"nick":"gajus","message":"I cannot think of any scenario where the current behaviour would be preferred over the latter described solution.","date":"2018-05-11T22:00:40.134Z","type":"message"}
{"nick":"BridgeAR","reason":"Ping timeout: 265 seconds","date":"2018-05-11T22:01:23.392Z","type":"quit"}
{"nick":"ryzokuken","reason":"Remote host closed the connection","date":"2018-05-11T22:21:59.496Z","type":"quit"}
{"nick":"robink","reason":"Ping timeout: 260 seconds","date":"2018-05-11T23:03:22.275Z","type":"quit"}
{"nick":"robink","date":"2018-05-11T23:04:13.595Z","type":"join"}
{"nick":"mmarchini","message":"Does anybody know if Node Summit speakers get a conference pass?","date":"2018-05-11T23:33:44.008Z","type":"message"}
