{"nick":"al-damiri","reason":"Quit: Connection closed for inactivity","date":"2018-08-24T00:01:48.844Z","type":"quit"}
{"nick":"lundibundi","reason":"Quit: WeeChat 2.2","date":"2018-08-24T00:16:18.838Z","type":"quit"}
{"nick":"lundibundi","date":"2018-08-24T00:16:33.054Z","type":"join"}
{"nick":"Fishrock123","date":"2018-08-24T00:21:38.729Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 268 seconds","date":"2018-08-24T00:23:26.701Z","type":"quit"}
{"nick":"marthinal","date":"2018-08-24T01:07:11.933Z","type":"join"}
{"nick":"TimothyGu","message":"addaleax: sorry about the delay on the vm PR… it's been pretty difficult to find time unfortunately","date":"2018-08-24T01:09:42.607Z","type":"message"}
{"nick":"MylesBorins","reason":"Ping timeout: 260 seconds","date":"2018-08-24T01:09:48.550Z","type":"quit"}
{"nick":"ruksii","reason":"Ping timeout: 240 seconds","date":"2018-08-24T01:09:57.784Z","type":"quit"}
{"nick":"TimothyGu","message":"there isn't really anything blocking the pr but I also wanted to write a nicer description of the changes involved as requested by jdalton before merging, so…","date":"2018-08-24T01:10:25.344Z","type":"message"}
{"nick":"TimothyGu","message":"I guess I'll do that now","date":"2018-08-24T01:11:11.852Z","type":"message"}
{"nick":"marthinal","reason":"Ping timeout: 268 seconds","date":"2018-08-24T01:12:09.702Z","type":"quit"}
{"nick":"MylesBorins","date":"2018-08-24T01:12:15.185Z","type":"join"}
{"nick":"ruksi","date":"2018-08-24T01:12:31.330Z","type":"join"}
{"nick":"tellnes","reason":"*.net *.split","date":"2018-08-24T01:46:43.325Z","type":"quit"}
{"nick":"chrisdickinson","reason":"*.net *.split","date":"2018-08-24T01:46:50.147Z","type":"quit"}
{"nick":"chrisdickinson","date":"2018-08-24T01:47:12.996Z","type":"join"}
{"nick":"lholmquist","reason":"Ping timeout: 240 seconds","date":"2018-08-24T01:48:57.782Z","type":"quit"}
{"nick":"lholmquist","date":"2018-08-24T01:52:09.556Z","type":"join"}
{"nick":"tellnes","date":"2018-08-24T02:04:31.243Z","type":"join"}
{"nick":"Wot_where","date":"2018-08-24T02:21:14.091Z","type":"join"}
{"nick":"cspotcode","reason":"*.net *.split","date":"2018-08-24T02:28:46.498Z","type":"quit"}
{"nick":"ofrobots","reason":"*.net *.split","date":"2018-08-24T02:28:46.649Z","type":"quit"}
{"nick":"rvagg_","reason":"*.net *.split","date":"2018-08-24T02:28:46.650Z","type":"quit"}
{"nick":"Guest11409___","reason":"*.net *.split","date":"2018-08-24T02:28:46.650Z","type":"quit"}
{"nick":"mmarchini_","reason":"*.net *.split","date":"2018-08-24T02:28:46.650Z","type":"quit"}
{"nick":"doodadjs_","reason":"*.net *.split","date":"2018-08-24T02:28:47.875Z","type":"quit"}
{"nick":"nikc_","reason":"*.net *.split","date":"2018-08-24T02:28:53.862Z","type":"quit"}
{"nick":"cspotcode","date":"2018-08-24T02:30:02.002Z","type":"join"}
{"nick":"ofrobots","date":"2018-08-24T02:30:02.153Z","type":"join"}
{"nick":"rvagg_","date":"2018-08-24T02:30:02.153Z","type":"join"}
{"nick":"Guest11409___","date":"2018-08-24T02:30:02.153Z","type":"join"}
{"nick":"mmarchini_","date":"2018-08-24T02:30:02.153Z","type":"join"}
{"nick":"doodadjs_","date":"2018-08-24T02:30:02.154Z","type":"join"}
{"nick":"nikc_","date":"2018-08-24T02:30:02.154Z","type":"join"}
{"nick":"richardlau_","reason":"*.net *.split","date":"2018-08-24T02:32:00.589Z","type":"quit"}
{"nick":"mgol","reason":"*.net *.split","date":"2018-08-24T02:32:02.506Z","type":"quit"}
{"nick":"lanceball","reason":"*.net *.split","date":"2018-08-24T02:32:02.816Z","type":"quit"}
{"nick":"ExoticEmu","reason":"*.net *.split","date":"2018-08-24T02:32:04.295Z","type":"quit"}
{"nick":"zaiste","reason":"*.net *.split","date":"2018-08-24T02:32:07.384Z","type":"quit"}
{"nick":"paul_irish_","reason":"*.net *.split","date":"2018-08-24T02:32:08.137Z","type":"quit"}
{"nick":"robertkowalski","reason":"*.net *.split","date":"2018-08-24T02:32:08.296Z","type":"quit"}
{"nick":"Wes-","reason":"*.net *.split","date":"2018-08-24T02:32:09.038Z","type":"quit"}
{"nick":"ryzokuken_","reason":"*.net *.split","date":"2018-08-24T02:32:09.517Z","type":"quit"}
{"nick":"ilkka","reason":"*.net *.split","date":"2018-08-24T02:32:10.007Z","type":"quit"}
{"nick":"FruitieX","reason":"*.net *.split","date":"2018-08-24T02:32:12.794Z","type":"quit"}
{"nick":"zaiste","date":"2018-08-24T02:32:15.878Z","type":"join"}
{"nick":"robertkowalski","date":"2018-08-24T02:32:25.272Z","type":"join"}
{"nick":"Wes-","date":"2018-08-24T02:32:27.339Z","type":"join"}
{"nick":"pendo324","date":"2018-08-24T02:32:31.317Z","type":"join"}
{"nick":"ilkka","date":"2018-08-24T02:32:38.005Z","type":"join"}
{"nick":"lanceball","date":"2018-08-24T02:32:42.417Z","type":"join"}
{"nick":"FruitieX","date":"2018-08-24T02:32:47.667Z","type":"join"}
{"nick":"paul_irish","date":"2018-08-24T02:32:47.667Z","type":"join"}
{"nick":"richardlau","date":"2018-08-24T02:33:13.946Z","type":"join"}
{"nick":"mgol","date":"2018-08-24T02:35:13.609Z","type":"join"}
{"nick":"robertkowalski","reason":"Changing host","date":"2018-08-24T02:37:09.843Z","type":"quit"}
{"nick":"robertkowalski","date":"2018-08-24T02:37:09.993Z","type":"join"}
{"nick":"gabrielschulhof","date":"2018-08-24T02:40:12.464Z","type":"join"}
{"nick":"mgol","new_nick":"Guest97406","date":"2018-08-24T02:43:42.253Z","type":"nick"}
{"nick":"gabrielschulhof","reason":"Ping timeout: 268 seconds","date":"2018-08-24T02:46:55.354Z","type":"quit"}
{"nick":"lholmquist","reason":"Changing host","date":"2018-08-24T02:48:51.813Z","type":"quit"}
{"nick":"lholmquist","date":"2018-08-24T02:48:51.963Z","type":"join"}
{"nick":"gabrielschulhof","date":"2018-08-24T02:49:49.448Z","type":"join"}
{"nick":"gabrielschulhof","reason":"Ping timeout: 244 seconds","date":"2018-08-24T02:54:19.441Z","type":"quit"}
{"nick":"MylesBorins","reason":"*.net *.split","date":"2018-08-24T03:05:50.381Z","type":"quit"}
{"nick":"ruksi","reason":"*.net *.split","date":"2018-08-24T03:05:50.381Z","type":"quit"}
{"nick":"bradleymeck","reason":"*.net *.split","date":"2018-08-24T03:05:52.987Z","type":"quit"}
{"nick":"a0viedo","reason":"*.net *.split","date":"2018-08-24T03:05:53.706Z","type":"quit"}
{"nick":"joepie91","reason":"*.net *.split","date":"2018-08-24T03:05:54.843Z","type":"quit"}
{"nick":"maclover7","reason":"*.net *.split","date":"2018-08-24T03:05:56.429Z","type":"quit"}
{"nick":"sergiocrisostomo","reason":"*.net *.split","date":"2018-08-24T03:05:56.932Z","type":"quit"}
{"nick":"abernix_","reason":"*.net *.split","date":"2018-08-24T03:05:58.091Z","type":"quit"}
{"nick":"tolmasky___","reason":"*.net *.split","date":"2018-08-24T03:05:58.405Z","type":"quit"}
{"nick":"tellnes","reason":"*.net *.split","date":"2018-08-24T03:05:59.075Z","type":"quit"}
{"nick":"chrisdickinson","reason":"*.net *.split","date":"2018-08-24T03:05:59.625Z","type":"quit"}
{"nick":"ChALkeR","reason":"*.net *.split","date":"2018-08-24T03:06:01.014Z","type":"quit"}
{"nick":"bhughes_","reason":"*.net *.split","date":"2018-08-24T03:06:01.014Z","type":"quit"}
{"nick":"arkadio","reason":"*.net *.split","date":"2018-08-24T03:06:01.164Z","type":"quit"}
{"nick":"scott_gonzalez","reason":"*.net *.split","date":"2018-08-24T03:06:04.026Z","type":"quit"}
{"nick":"mhdawson__","reason":"*.net *.split","date":"2018-08-24T03:06:06.416Z","type":"quit"}
{"nick":"Ultrasauce","reason":"*.net *.split","date":"2018-08-24T03:06:07.147Z","type":"quit"}
{"nick":"dbevenius","reason":"*.net *.split","date":"2018-08-24T03:06:08.216Z","type":"quit"}
{"nick":"joaocgreis","reason":"*.net *.split","date":"2018-08-24T03:06:08.375Z","type":"quit"}
{"nick":"ruksi","date":"2018-08-24T03:06:35.629Z","type":"join"}
{"nick":"MylesBorins","date":"2018-08-24T03:06:35.719Z","type":"join"}
{"nick":"bradleymeck","date":"2018-08-24T03:06:35.719Z","type":"join"}
{"nick":"a0viedo","date":"2018-08-24T03:06:35.719Z","type":"join"}
{"nick":"joepie91","date":"2018-08-24T03:06:35.719Z","type":"join"}
{"nick":"maclover7","date":"2018-08-24T03:06:35.719Z","type":"join"}
{"nick":"sergiocrisostomo","date":"2018-08-24T03:06:35.719Z","type":"join"}
{"nick":"abernix_","date":"2018-08-24T03:06:35.719Z","type":"join"}
{"nick":"tolmasky___","date":"2018-08-24T03:06:35.719Z","type":"join"}
{"nick":"tellnes","date":"2018-08-24T03:07:57.811Z","type":"join"}
{"nick":"chrisdickinson","date":"2018-08-24T03:07:57.961Z","type":"join"}
{"nick":"ChALkeR","date":"2018-08-24T03:07:57.962Z","type":"join"}
{"nick":"bhughes_","date":"2018-08-24T03:07:57.962Z","type":"join"}
{"nick":"arkadio","date":"2018-08-24T03:07:57.962Z","type":"join"}
{"nick":"scott_gonzalez","date":"2018-08-24T03:07:57.962Z","type":"join"}
{"nick":"mhdawson__","date":"2018-08-24T03:07:57.962Z","type":"join"}
{"nick":"Ultrasauce","date":"2018-08-24T03:07:57.962Z","type":"join"}
{"nick":"dbevenius","date":"2018-08-24T03:07:57.962Z","type":"join"}
{"nick":"joaocgreis","date":"2018-08-24T03:07:57.962Z","type":"join"}
{"nick":"ChALkeR","reason":"Ping timeout: 264 seconds","date":"2018-08-24T03:46:42.711Z","type":"quit"}
{"nick":"Wot_where","reason":"Quit: Page closed","date":"2018-08-24T04:09:45.169Z","type":"quit"}
{"nick":"marthinal","date":"2018-08-24T04:36:41.694Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 268 seconds","date":"2018-08-24T04:41:37.356Z","type":"quit"}
{"nick":"Fishrock123","reason":"Ping timeout: 240 seconds","date":"2018-08-24T04:46:57.734Z","type":"quit"}
{"nick":"marthinal","date":"2018-08-24T04:58:47.925Z","type":"join"}
{"nick":"ryzokuken_","date":"2018-08-24T05:20:28.255Z","type":"join"}
{"nick":"Fishrock123","date":"2018-08-24T05:20:36.406Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-08-24T05:25:51.193Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-08-24T05:26:10.021Z","type":"join"}
{"nick":"Fishrock123","reason":"Client Quit","date":"2018-08-24T05:28:00.963Z","type":"quit"}
{"nick":"lpin","date":"2018-08-24T05:30:52.186Z","type":"join"}
{"nick":"lpin","reason":"Read error: Connection reset by peer","date":"2018-08-24T05:37:11.643Z","type":"quit"}
{"nick":"lpin","date":"2018-08-24T05:39:39.946Z","type":"join"}
{"nick":"seishun","date":"2018-08-24T07:56:01.854Z","type":"join"}
{"nick":"sgimeno","date":"2018-08-24T09:59:23.596Z","type":"join"}
{"nick":"lanceball","reason":"Changing host","date":"2018-08-24T10:04:29.304Z","type":"quit"}
{"nick":"lanceball","date":"2018-08-24T10:04:29.462Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-08-24T10:14:00.555Z","type":"quit"}
{"nick":"seishun","date":"2018-08-24T10:35:37.373Z","type":"join"}
{"nick":"lundibundi","date":"2018-08-24T10:37:09.903Z","type":"join"}
{"nick":"ChALkeR","date":"2018-08-24T12:04:18.392Z","type":"join"}
{"nick":"CC66","date":"2018-08-24T12:06:00.760Z","type":"join"}
{"nick":"CC66","new_nick":"Guest40748","date":"2018-08-24T12:06:24.010Z","type":"nick"}
{"nick":"gabrielschulhof","date":"2018-08-24T12:06:51.759Z","type":"join"}
{"nick":"Guest40748","reason":"Remote host closed the connection","date":"2018-08-24T12:10:25.319Z","type":"quit"}
{"nick":"buriedalive17","date":"2018-08-24T12:19:07.665Z","type":"join"}
{"nick":"buriedalive17","reason":"Remote host closed the connection","date":"2018-08-24T12:21:40.781Z","type":"quit"}
{"nick":"addaleax","message":"TimothyGu: yeah, no problem :) and thanks for the great write-up!","date":"2018-08-24T12:36:17.774Z","type":"message"}
{"nick":"gabrielschulhof","reason":"Ping timeout: 252 seconds","date":"2018-08-24T12:46:54.766Z","type":"quit"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-08-24T13:09:11.787Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 264 seconds","date":"2018-08-24T13:23:54.714Z","type":"quit"}
{"nick":"marthinal","date":"2018-08-24T13:34:42.087Z","type":"join"}
{"nick":"ChALkeR","reason":"Quit: Konversation terminated!","date":"2018-08-24T13:54:37.847Z","type":"quit"}
{"nick":"ChALkeR","date":"2018-08-24T13:54:50.530Z","type":"join"}
{"nick":"ChALkeR","reason":"Ping timeout: 244 seconds","date":"2018-08-24T14:37:30.575Z","type":"quit"}
{"nick":"gabrielschulhof","date":"2018-08-24T14:41:53.712Z","type":"join"}
{"nick":"ChALkeR","date":"2018-08-24T15:09:45.810Z","type":"join"}
{"nick":"Ricky","date":"2018-08-24T15:40:58.614Z","type":"join"}
{"nick":"Ricky","new_nick":"Guest85472","date":"2018-08-24T15:41:23.143Z","type":"nick"}
{"nick":"Guest85472","reason":"Quit: Page closed","date":"2018-08-24T15:47:12.354Z","type":"quit"}
{"nick":"ChALkeR","reason":"Ping timeout: 272 seconds","date":"2018-08-24T16:04:24.933Z","type":"quit"}
{"nick":"ChALkeR","date":"2018-08-24T16:13:52.078Z","type":"join"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-08-24T16:34:29.246Z","type":"quit"}
{"nick":"Trott","message":"Do we have a policy on when or how often we update V8 in master?","date":"2018-08-24T16:42:05.094Z","type":"message"}
{"nick":"Trott","message":"I thought we did, but now I'm not so sure.","date":"2018-08-24T16:42:12.894Z","type":"message"}
{"nick":"Trott","message":"I think I found it: https://github.com/nodejs/node/blob/8b4af64f50c5e41ce0155716f294c24ccdecad03/doc/guides/maintaining-V8.md#major-updates","date":"2018-08-24T16:44:29.913Z","type":"message"}
{"nick":"marthinal","date":"2018-08-24T16:48:08.963Z","type":"join"}
{"nick":"Trott","message":"The table in that doc probably should be updated to add 10.x and remove 9.x?","date":"2018-08-24T16:48:32.581Z","type":"message"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-08-24T16:49:00.567Z","type":"quit"}
{"nick":"devsnek","message":"Trott: isn't it just like whenever a version is cut that is abi compatible","date":"2018-08-24T16:50:46.309Z","type":"message"}
{"nick":"Trott","message":"Doc says: \"We upgrade the version of V8 in Node.js master whenever a V8 release goes stable upstream, that is, whenever a new release of Chrome comes out.\" I guess if it's not ABI-compatible, it gets marked as semver-major and doesn't end up in a current release?","date":"2018-08-24T16:52:24.513Z","type":"message"}
{"nick":"devsnek","message":"sometimes we also patch it to be abi compatible","date":"2018-08-24T16:53:15.256Z","type":"message"}
{"nick":"devsnek","message":"like we patched 6.8 to be compat with 6.7","date":"2018-08-24T16:53:29.890Z","type":"message"}
{"nick":"AtumT","date":"2018-08-24T16:59:45.070Z","type":"join"}
{"nick":"ChALkeR","reason":"Ping timeout: 252 seconds","date":"2018-08-24T17:05:16.017Z","type":"quit"}
{"nick":"gabrielschulhof","reason":"Ping timeout: 264 seconds","date":"2018-08-24T17:08:18.746Z","type":"quit"}
{"nick":"gabrielschulhof","date":"2018-08-24T17:08:32.355Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 264 seconds","date":"2018-08-24T17:13:06.730Z","type":"quit"}
{"nick":"seishun","date":"2018-08-24T17:19:53.801Z","type":"join"}
{"nick":"dc13ff","date":"2018-08-24T17:27:39.809Z","type":"join"}
{"nick":"gabrielschulhof","reason":"Ping timeout: 268 seconds","date":"2018-08-24T17:34:18.355Z","type":"quit"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2018-08-24T17:36:20.017Z","type":"quit"}
{"nick":"lundibundi","date":"2018-08-24T17:46:27.973Z","type":"join"}
{"nick":"ChALkeR","date":"2018-08-24T17:49:40.768Z","type":"join"}
{"nick":"gabrielschulhof","date":"2018-08-24T17:52:49.607Z","type":"join"}
{"nick":"Fishrock123","date":"2018-08-24T18:01:49.378Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-08-24T18:23:23.611Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-08-24T18:31:02.455Z","type":"join"}
{"nick":"Fishrock123","reason":"Remote host closed the connection","date":"2018-08-24T19:00:46.245Z","type":"quit"}
{"nick":"Fishrock123","date":"2018-08-24T19:12:56.099Z","type":"join"}
{"nick":"ChALkeR","reason":"Ping timeout: 272 seconds","date":"2018-08-24T19:25:48.799Z","type":"quit"}
{"nick":"joepie91","message":"hmm. implementation question: why do Node.js streams have an internal buffer?","date":"2018-08-24T19:41:05.671Z","type":"message"}
{"nick":"joepie91","message":"like, what's the implementation rationale?","date":"2018-08-24T19:41:22.291Z","type":"message"}
{"nick":"Fishrock123","message":"joepie91: yes","date":"2018-08-24T19:41:29.747Z","type":"message"}
{"nick":"Fishrock123","message":"oh","date":"2018-08-24T19:41:34.341Z","type":"message"}
{"nick":"zsoc","message":"hehe","date":"2018-08-24T19:41:37.621Z","type":"message"}
{"nick":"zsoc","message":"I imagine it has something to do with backpressure and a configurable highWaterMark?","date":"2018-08-24T19:41:52.219Z","type":"message"}
{"nick":"Fishrock123","message":"well it's part of what i'm trying to eliminate","date":"2018-08-24T19:41:54.849Z","type":"message"}
{"nick":"ChALkeR","date":"2018-08-24T19:42:06.057Z","type":"join"}
{"nick":"joepie91","message":"zsoc: backpressure can be pull-based and buffer-less, though? at least afaik that's how futures.rs streams do it","date":"2018-08-24T19:42:19.722Z","type":"message"}
{"nick":"Fishrock123","message":"it's a combination of back pressure, ergonomics, and state management around event emitters","date":"2018-08-24T19:42:21.530Z","type":"message"}
{"nick":"devsnek","message":"i hear whatwg streams are pretty cool","date":"2018-08-24T19:42:34.899Z","type":"message"}
{"nick":"Fishrock123","message":"you can't do buffer less streaming","date":"2018-08-24T19:42:36.917Z","type":"message"}
{"nick":"Fishrock123","message":"you can do streaming without buffering SO much","date":"2018-08-24T19:42:53.496Z","type":"message"}
{"nick":"Fishrock123","message":"but somewhere you still need... something","date":"2018-08-24T19:43:02.678Z","type":"message"}
{"nick":"Fishrock123","message":"even if it's the kernal buffering","date":"2018-08-24T19:43:15.697Z","type":"message"}
{"nick":"Fishrock123","message":"(Which it does, for e.g. TCP)","date":"2018-08-24T19:43:30.757Z","type":"message"}
{"nick":"joepie91","message":"mind that I'm talking about the more abstract concept of streams, not just I/O","date":"2018-08-24T19:43:38.690Z","type":"message"}
{"nick":"joepie91","message":"also","date":"2018-08-24T19:43:45.945Z","type":"message"}
{"nick":"joepie91","message":"[21:42] <Fishrock123> it's a combination of back pressure, ergonomics, and state management around event emitters","date":"2018-08-24T19:43:47.447Z","type":"message"}
{"nick":"joepie91","message":"what are the specifics of each of those points? because I've never seen any rationale document anywhere describing it","date":"2018-08-24T19:44:00.236Z","type":"message"}
{"nick":"Fishrock123","message":"I am not an expert on streams3's implementation, mind you","date":"2018-08-24T19:44:35.599Z","type":"message"}
{"nick":"Fishrock123","message":"but streams3 is pull based with push based ergonomics and api-compat","date":"2018-08-24T19:45:01.930Z","type":"message"}
{"nick":"Fishrock123","message":"so to do .write() on a pull stream you need to buffer","date":"2018-08-24T19:45:20.931Z","type":"message"}
{"nick":"Fishrock123","message":"Check out https://github.com/Fishrock123/bob - my streams project. The protocol has no buffering","date":"2018-08-24T19:45:38.074Z","type":"message"}
{"nick":"devsnek","message":"buffers are important","date":"2018-08-24T19:45:48.369Z","type":"message"}
{"nick":"devsnek","message":"whatwg streams wink wink","date":"2018-08-24T19:46:07.195Z","type":"message"}
{"nick":"Fishrock123","message":"but to do something like a .write(), I had to do this for my socket: https://github.com/Fishrock123/socket/blob/master/buffered-source.js","date":"2018-08-24T19:46:11.006Z","type":"message"}
{"nick":"joepie91","message":"Fishrock123: 'strategic initiatives' link is dead","date":"2018-08-24T19:46:20.649Z","type":"message"}
{"nick":"joepie91","message":"(in readme)","date":"2018-08-24T19:46:30.778Z","type":"message"}
{"nick":"Fishrock123","message":"it;s github messing up","date":"2018-08-24T19:46:34.309Z","type":"message"}
{"nick":"Fishrock123","message":"https://github.com/nodejs/TSC/blob/master/Strategic-Initiatives.md","date":"2018-08-24T19:46:59.598Z","type":"message"}
{"nick":"Fishrock123","message":"if people want whatwg streams there is user modules","date":"2018-08-24T19:47:35.344Z","type":"message"}
{"nick":"Fishrock123","message":"we aren't a web browser","date":"2018-08-24T19:47:41.081Z","type":"message"}
{"nick":"devsnek","message":"we want new streams","date":"2018-08-24T19:47:52.721Z","type":"message"}
{"nick":"devsnek","message":"and whatwg streams are really well designed","date":"2018-08-24T19:47:58.136Z","type":"message"}
{"nick":"devsnek","message":"there's nothing explicitly browser about them","date":"2018-08-24T19:48:04.891Z","type":"message"}
{"nick":"Fishrock123","message":"I think you will find that people strongly disagree with them being well designed","date":"2018-08-24T19:48:32.626Z","type":"message"}
{"nick":"devsnek","message":"the only people who disagree i can find are on the node streams team","date":"2018-08-24T19:48:45.977Z","type":"message"}
{"nick":"Fishrock123","message":"a lot of time was spent on it sure","date":"2018-08-24T19:48:56.474Z","type":"message"}
{"nick":"Fishrock123","message":"that doesn't mean it is fast or simple","date":"2018-08-24T19:49:02.540Z","type":"message"}
{"nick":"devsnek","message":"its as fast as you make it","date":"2018-08-24T19:49:36.294Z","type":"message"}
{"nick":"Fishrock123","message":"(Also they a push streams. Not to mention complex backpressure problems that isn't the way kernel apis work)","date":"2018-08-24T19:49:41.905Z","type":"message"}
{"nick":"devsnek","message":"whatwg streams allow pull lol","date":"2018-08-24T19:49:50.604Z","type":"message"}
{"nick":"joepie91","message":"devsnek: what are the error semantics of whatwg streams?","date":"2018-08-24T19:49:52.721Z","type":"message"}
{"nick":"devsnek","message":"joepie91: wdym","date":"2018-08-24T19:50:03.835Z","type":"message"}
{"nick":"devsnek","message":"there's a \"error\" function","date":"2018-08-24T19:50:31.545Z","type":"message"}
{"nick":"devsnek","message":"which stops the stream and future pulls are rejected with that error","date":"2018-08-24T19:50:43.971Z","type":"message"}
{"nick":"joepie91","message":"and what does that error function do, in terms of affecting a pipeline of streams?","date":"2018-08-24T19:50:52.227Z","type":"message"}
{"nick":"devsnek","message":"bubbles","date":"2018-08-24T19:51:01.632Z","type":"message"}
{"nick":"Fishrock123","message":"bubbles which way","date":"2018-08-24T19:51:25.089Z","type":"message"}
{"nick":"devsnek","message":"https://streams.spec.whatwg.org/","date":"2018-08-24T19:51:34.095Z","type":"message"}
{"nick":"devsnek","message":"check out pipeTo and pipeThrough","date":"2018-08-24T19:52:03.358Z","type":"message"}
{"nick":"zsoc","message":"pipeTo returning a promise... that's interesting","date":"2018-08-24T19:53:16.942Z","type":"message"}
{"nick":"devsnek","message":"promises are used in many places here","date":"2018-08-24T19:53:36.853Z","type":"message"}
{"nick":"Fishrock123","message":"That's kinda a bad idea","date":"2018-08-24T19:54:04.806Z","type":"message"}
{"nick":"devsnek","message":"the only thing that i would say makes whatwg streams awkward for node is that the default reader doesn't support async iterator","date":"2018-08-24T19:54:13.309Z","type":"message"}
{"nick":"Fishrock123","message":"especially if you have sync throughs or transforms","date":"2018-08-24T19:54:13.705Z","type":"message"}
{"nick":"devsnek","message":"but i'm adding that in","date":"2018-08-24T19:54:16.971Z","type":"message"}
{"nick":"ChALkeR","reason":"Ping timeout: 252 seconds","date":"2018-08-24T19:54:40.016Z","type":"quit"}
{"nick":"Fishrock123","message":"using promises with anything sync is a good way to destroy application perf","date":"2018-08-24T19:54:42.154Z","type":"message"}
{"nick":"TimothyGu","message":"I feel like there is a feature/bug thing here","date":"2018-08-24T19:55:06.741Z","type":"message"}
{"nick":"devsnek","message":"^","date":"2018-08-24T19:55:11.581Z","type":"message"}
{"nick":"TimothyGu","message":"One could argue that sync streams are against user expectations","date":"2018-08-24T19:55:21.437Z","type":"message"}
{"nick":"devsnek","message":"i would argue that","date":"2018-08-24T19:55:29.184Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-08-24T19:55:29.920Z","type":"message"}
{"nick":"TimothyGu","message":"and cause zalgos","date":"2018-08-24T19:55:33.503Z","type":"message"}
{"nick":"devsnek","message":"yes this","date":"2018-08-24T19:55:40.628Z","type":"message"}
{"nick":"joepie91","message":"a sync stream is just an... iterator?","date":"2018-08-24T19:55:42.560Z","type":"message"}
{"nick":"TimothyGu","message":"even worse is when a stream is _sometimes_ sync","date":"2018-08-24T19:55:45.250Z","type":"message"}
{"nick":"bhughes_","reason":"Quit: ZNC - http://znc.in","date":"2018-08-24T19:56:29.074Z","type":"quit"}
{"nick":"joepie91","action":"grumbles at the mess around streams and async in JS","date":"2018-08-24T19:56:33.496Z","type":"action"}
{"nick":"bhughes","date":"2018-08-24T19:56:38.923Z","type":"join"}
{"nick":"devsnek","message":"i just want to pass responses across node workers","date":"2018-08-24T19:57:14.228Z","type":"message"}
{"nick":"TimothyGu","message":"Also a personal rant is around the multiple events and functions in Node.js streams that means \"end\"","date":"2018-08-24T19:57:25.660Z","type":"message"}
{"nick":"devsnek","message":"EOF vs end event","date":"2018-08-24T19:57:38.448Z","type":"message"}
{"nick":"devsnek","message":"multiple errors","date":"2018-08-24T19:57:44.264Z","type":"message"}
{"nick":"TimothyGu","message":"end, close, destroy, error","date":"2018-08-24T19:57:45.165Z","type":"message"}
{"nick":"joepie91","message":"honestly, what I want is just a clean set of concepts around resolution and iteration, a la Rust + futures.rs","date":"2018-08-24T19:58:08.643Z","type":"message"}
{"nick":"devsnek","message":"import spaces from future.rs","date":"2018-08-24T19:58:27.629Z","type":"message"}
{"nick":"joepie91","message":"Result and Iterator for sync stuff, Future and Stream for async stuff","date":"2018-08-24T19:58:34.487Z","type":"message"}
{"nick":"joepie91","message":"neatly integrates wherever needed, obvious semantics","date":"2018-08-24T19:58:43.115Z","type":"message"}
{"nick":"joepie91","message":"only downside I've seen so far is that there's no obvious way to 'fork' a stream in futures.rs","date":"2018-08-24T19:59:03.583Z","type":"message"}
{"nick":"TimothyGu","message":"stream teeing is a hard problem","date":"2018-08-24T19:59:19.169Z","type":"message"}
{"nick":"devsnek","message":"whatwg streams have tee","date":"2018-08-24T19:59:19.929Z","type":"message"}
{"nick":"devsnek","message":"but its still awkard","date":"2018-08-24T19:59:25.887Z","type":"message"}
{"nick":"TimothyGu","message":"i.e., how much should one buffer?","date":"2018-08-24T19:59:34.921Z","type":"message"}
{"nick":"joepie91","message":"it's incompatible with a few other mechanics, it seems :P","date":"2018-08-24T19:59:36.375Z","type":"message"}
{"nick":"devsnek","message":"node streams have yolo","date":"2018-08-24T19:59:39.446Z","type":"message"}
{"nick":"bradleymeck","message":"tee is awkward by nature","date":"2018-08-24T20:00:03.118Z","type":"message"}
{"nick":"joepie91","message":"devsnek: is there some kind of resource on the design of whatwg streams and how they are used, that isn't an excessively verbose spec?","date":"2018-08-24T20:00:23.524Z","type":"message"}
{"nick":"devsnek","message":"uhhhh","date":"2018-08-24T20:00:31.484Z","type":"message"}
{"nick":"devsnek","message":"there's mdn","date":"2018-08-24T20:00:34.899Z","type":"message"}
{"nick":"devsnek","message":"and random blogs","date":"2018-08-24T20:00:39.320Z","type":"message"}
{"nick":"devsnek","message":"and a FAQ.md in the streams repo","date":"2018-08-24T20:00:45.513Z","type":"message"}
{"nick":"TimothyGu","message":"joepie91: have you checked out the nonnormative sections of the spec?","date":"2018-08-24T20:00:49.161Z","type":"message"}
{"nick":"TimothyGu","message":"I found those to be much more helpful than the spec itself","date":"2018-08-24T20:01:01.357Z","type":"message"}
{"nick":"joepie91","message":"TimothyGu: section 2 you mean?","date":"2018-08-24T20:01:12.197Z","type":"message"}
{"nick":"TimothyGu","message":"https://streams.spec.whatwg.org/#creating-examples","date":"2018-08-24T20:01:23.709Z","type":"message"}
{"nick":"joepie91","message":"right","date":"2018-08-24T20:01:35.721Z","type":"message"}
{"nick":"joepie91","message":"will have a look","date":"2018-08-24T20:01:39.259Z","type":"message"}
{"nick":"Fishrock123","message":"matteo has a streams3 multicast that is correct","date":"2018-08-24T20:01:44.357Z","type":"message"}
{"nick":"devsnek","message":"what is streams3","date":"2018-08-24T20:01:56.741Z","type":"message"}
{"nick":"Fishrock123","message":"...","date":"2018-08-24T20:02:07.895Z","type":"message"}
{"nick":"devsnek","message":"is that like eventemitter3","date":"2018-08-24T20:02:14.285Z","type":"message"}
{"nick":"devsnek","message":"404 on npm","date":"2018-08-24T20:02:25.618Z","type":"message"}
{"nick":"Fishrock123","message":"what are you talking about","date":"2018-08-24T20:02:33.796Z","type":"message"}
{"nick":"zsoc","message":"the current streams implementation is referred to as streams 3","date":"2018-08-24T20:02:34.641Z","type":"message"}
{"nick":"zsoc","message":"for... some reason","date":"2018-08-24T20:02:36.220Z","type":"message"}
{"nick":"bradleymeck","message":"no it is just the version of the streams api impl","date":"2018-08-24T20:02:38.644Z","type":"message"}
{"nick":"devsnek","message":"oh","date":"2018-08-24T20:02:42.829Z","type":"message"}
{"nick":"joepie91","message":"for what seems like a very loose definition of 'version' :P","date":"2018-08-24T20:02:49.815Z","type":"message"}
{"nick":"devsnek","message":"yeah thats not documented anywhere","date":"2018-08-24T20:02:51.919Z","type":"message"}
{"nick":"TimothyGu","message":"tbh the legacy is like the biggest barrier to using Node.js streams","date":"2018-08-24T20:03:00.905Z","type":"message"}
{"nick":"devsnek","message":"the weird api","date":"2018-08-24T20:03:07.862Z","type":"message"}
{"nick":"bradleymeck","message":"there is history on the \"implementation\"s of the streams api and attempts to upgrade to a different model","date":"2018-08-24T20:03:08.241Z","type":"message"}
{"nick":"devsnek","message":"would streams 1 just be like node 0.8 emitting \"data\" events","date":"2018-08-24T20:03:28.338Z","type":"message"}
{"nick":"joepie91","action":"dreads working with Node streams due to their bizarre and seemingly unpredictable semantics","date":"2018-08-24T20:03:36.947Z","type":"action"}
{"nick":"bradleymeck","message":"most people are still using streams2 style coding even though streams3 is quite old","date":"2018-08-24T20:03:38.197Z","type":"message"}
{"nick":"TimothyGu","message":"https://stackoverflow.com/questions/21538812/what-is-streams3-in-node-js-and-how-does-it-differ-from-streams2","date":"2018-08-24T20:03:53.229Z","type":"message"}
{"nick":"bradleymeck","message":"i avoid streams3 even, so 🤷","date":"2018-08-24T20:04:10.850Z","type":"message"}
{"nick":"TimothyGu","message":"also https://web.archive.org/web/20150119223238/https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/","date":"2018-08-24T20:04:38.441Z","type":"message"}
{"nick":"devsnek","message":"confusion is here","date":"2018-08-24T20:04:42.367Z","type":"message"}
{"nick":"heinrich599129","date":"2018-08-24T20:04:55.531Z","type":"join"}
{"nick":"zsoc","message":"Is there some reason why flags (like --trace-warnings) only works when placed before the target file to run? Is this like... a per shell thing? Or some other case outside of the control of the runtime","date":"2018-08-24T20:05:47.552Z","type":"message"}
{"nick":"TimothyGu","message":"anyone knows why strongloop removed that article from their blog?","date":"2018-08-24T20:06:02.904Z","type":"message"}
{"nick":"joepie91","message":"zsoc: because everything after the target file is interpreted as an argument to the application code","date":"2018-08-24T20:06:12.334Z","type":"message"}
{"nick":"zsoc","message":"oh... oh. oh. Duh me.","date":"2018-08-24T20:06:22.271Z","type":"message"}
{"nick":"devsnek","message":"exec args vs args","date":"2018-08-24T20:06:22.851Z","type":"message"}
{"nick":"zsoc","message":"ty","date":"2018-08-24T20:06:28.921Z","type":"message"}
{"nick":"heinrich599129","reason":"Remote host closed the connection","date":"2018-08-24T20:08:06.259Z","type":"quit"}
{"nick":"bradleymeck","message":"the entire streams API makes an interesting case on iterative development of APIs vs creating new APIs","date":"2018-08-24T20:08:53.639Z","type":"message"}
{"nick":"devsnek","message":"yes","date":"2018-08-24T20:09:14.555Z","type":"message"}
{"nick":"Fishrock123","message":"holy how many thousands of loc is this whatwg pr","date":"2018-08-24T20:09:30.252Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-08-24T20:09:36.999Z","type":"message"}
{"nick":"devsnek","message":"it vendors web platform tests","date":"2018-08-24T20:09:50.548Z","type":"message"}
{"nick":"devsnek","message":"just look at the first commit","date":"2018-08-24T20:09:54.977Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: wait I haven't looked at the PR recently, did you vendor the ENTIRE wpt?","date":"2018-08-24T20:10:21.979Z","type":"message"}
{"nick":"devsnek","message":"no","date":"2018-08-24T20:10:27.142Z","type":"message"}
{"nick":"TimothyGu","message":"oh ok","date":"2018-08-24T20:10:31.590Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-08-24T20:10:34.064Z","type":"message"}
{"nick":"TimothyGu","message":"lol","date":"2018-08-24T20:10:37.443Z","type":"message"}
{"nick":"ChALkeR","date":"2018-08-24T20:10:57.771Z","type":"join"}
{"nick":"joepie91","message":"bradleymeck: mm, don't forget to consider the \"iterative development with appropriate escape hatches for future versions\" option :)","date":"2018-08-24T20:10:58.089Z","type":"message"}
{"nick":"joepie91","message":"tends to fare better than the \"yolo iterative dev\" approach","date":"2018-08-24T20:11:06.229Z","type":"message"}
{"nick":"devsnek","message":"it originally had all the interfaces node had","date":"2018-08-24T20:11:06.942Z","type":"message"}
{"nick":"devsnek","message":"but joyee asked me to cut it down more","date":"2018-08-24T20:11:10.984Z","type":"message"}
{"nick":"TimothyGu","message":"tbh do we even need wpts","date":"2018-08-24T20:11:50.485Z","type":"message"}
{"nick":"Fishrock123","message":"stream-whatwg: add whatwg streams +3,584","date":"2018-08-24T20:11:51.594Z","type":"message"}
{"nick":"TimothyGu","message":"if we don't maintain the impl","date":"2018-08-24T20:11:54.978Z","type":"message"}
{"nick":"devsnek","message":"Fishrock123: fwiw","date":"2018-08-24T20:12:09.530Z","type":"message"}
{"nick":"devsnek","message":"its straight from chromium","date":"2018-08-24T20:12:12.973Z","type":"message"}
{"nick":"devsnek","message":"so we know it works","date":"2018-08-24T20:12:16.254Z","type":"message"}
{"nick":"bradleymeck","message":"joepie91: yea, but those are hard to design and often mean compromise","date":"2018-08-24T20:12:25.822Z","type":"message"}
{"nick":"joepie91","message":"devsnek: \"for some definition of 'works'\", says my inner ex-chromium users","date":"2018-08-24T20:12:37.280Z","type":"message"}
{"nick":"bradleymeck","message":"lots of people don't want to compromise DX for future safety","date":"2018-08-24T20:12:37.508Z","type":"message"}
{"nick":"joepie91","message":"user*","date":"2018-08-24T20:12:42.680Z","type":"message"}
{"nick":"devsnek","message":"joepie91: all the tests pass","date":"2018-08-24T20:12:47.834Z","type":"message"}
{"nick":"joepie91","message":"bradleymeck: aware","date":"2018-08-24T20:13:02.105Z","type":"message"}
{"nick":"joepie91","message":"the option exists nevertheless","date":"2018-08-24T20:13:05.633Z","type":"message"}
{"nick":"joepie91","message":":p","date":"2018-08-24T20:13:07.140Z","type":"message"}
{"nick":"bradleymeck","message":"yea, hard to fight for though","date":"2018-08-24T20:13:12.223Z","type":"message"}
{"nick":"bradleymeck","message":"people don't like DX suffering I feel like, even if it is temporary","date":"2018-08-24T20:13:28.650Z","type":"message"}
{"nick":"bradleymeck","message":"they just want things to be pretty / fewer API calls oftentimes :(","date":"2018-08-24T20:13:54.507Z","type":"message"}
{"nick":"bradleymeck","message":"like i'm pushing hard to not include `import.meta.require` in ESM for example","date":"2018-08-24T20:14:18.830Z","type":"message"}
{"nick":"joepie91","action":"mumbles something about \"pretty has to die\"","date":"2018-08-24T20:14:20.737Z","type":"action"}
{"nick":"bradleymeck","message":"it is an attractive API, but actually makes DX worse for writing code that can run in both web and node","date":"2018-08-24T20:14:42.889Z","type":"message"}
{"nick":"bradleymeck","message":"vs some alternatives","date":"2018-08-24T20:14:49.274Z","type":"message"}
{"nick":"joepie91","message":"what's it do?","date":"2018-08-24T20:15:10.870Z","type":"message"}
{"nick":"bradleymeck","message":"joepie91: it is just `require()` from CJS, injected into ESM","date":"2018-08-24T20:15:26.722Z","type":"message"}
{"nick":"bradleymeck","message":"it is both familiar and a simpler thing to explain than alternatives","date":"2018-08-24T20:15:42.416Z","type":"message"}
{"nick":"bradleymeck","message":"createRequireFunction and import of CJS have tradeoffs people find annoying","date":"2018-08-24T20:15:51.284Z","type":"message"}
{"nick":"bradleymeck","message":"`createRequireFunction(url)` gives roughly the same capabilities as `import.meta.require()` but has some important aspects to compatibility at the cost of writing an extra statement when you need `require()` in ESM","date":"2018-08-24T20:17:08.970Z","type":"message"}
{"nick":"devsnek","message":"i still want createRequireFunction for non-esm things 😢","date":"2018-08-24T20:17:35.182Z","type":"message"}
{"nick":"bradleymeck","message":"`import` of CJS leads to all sorts of spidery discussions as well, lots of claims that you can't compile a CJS bundle in a way that loads as ESM in browsers, but polymer is doing that today already so...","date":"2018-08-24T20:18:08.415Z","type":"message"}
{"nick":"bradleymeck","message":"a lot of the problems is attachment to familiarity and sentiments around such for this as a means of defining \"pretty\" in this case","date":"2018-08-24T20:18:48.444Z","type":"message"}
{"nick":"bradleymeck","message":"but that doesn't always mean it is the best choice","date":"2018-08-24T20:18:56.827Z","type":"message"}
{"nick":"bradleymeck","message":"chrome headless gaining USB, serial port, and filesystem APIs makes it actually a contender with a lot of things that Node does","date":"2018-08-24T20:19:24.337Z","type":"message"}
{"nick":"bradleymeck","message":"and people will eventually find a problem of only being familiar with one environment","date":"2018-08-24T20:19:44.079Z","type":"message"}
{"nick":"bradleymeck","message":"attachment to the status quo that Node currently holds seems odd to me, when there are obvious things coming in the future that pose opposition to the status quo","date":"2018-08-24T20:20:13.969Z","type":"message"}
{"nick":"TimothyGu","message":"bradleymeck: would be great if you could comment on that PR :)","date":"2018-08-24T20:21:42.191Z","type":"message"}
{"nick":"bradleymeck","message":"deno, headless chrome APIs, a lot of these direct competitions have valuable things that I feel should be seen as direct competition. competition that is open and can even be assimilated into Node itself","date":"2018-08-24T20:21:44.226Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: I got enough heat on my mental burden already with ESM and now security","date":"2018-08-24T20:22:03.686Z","type":"message"}
{"nick":"TimothyGu","message":":(","date":"2018-08-24T20:22:12.311Z","type":"message"}
{"nick":"TimothyGu","message":"how was the membranes talk?","date":"2018-08-24T20:22:18.264Z","type":"message"}
{"nick":"Fishrock123","message":"I wish we had serialport support","date":"2018-08-24T20:22:30.604Z","type":"message"}
{"nick":"devsnek","message":"eeeeeee","date":"2018-08-24T20:22:36.077Z","type":"message"}
{"nick":"ChALkeR","reason":"Quit: Konversation terminated!","date":"2018-08-24T20:22:52.247Z","type":"quit"}
{"nick":"Fishrock123","message":"no one that made node-serial port ever had enough enough investment to do anything though so v0v","date":"2018-08-24T20:23:02.769Z","type":"message"}
{"nick":"ChALkeR","date":"2018-08-24T20:23:06.736Z","type":"join"}
{"nick":"TimothyGu","message":"also bradleymeck you could just leave a comment and then unsubscribe","date":"2018-08-24T20:23:19.590Z","type":"message"}
{"nick":"devsnek","message":"fs.open('/dev/whatever')","date":"2018-08-24T20:23:30.857Z","type":"message"}
{"nick":"bradleymeck","message":"TimothyGu: it went well, but I think people were confused on what implementing it in node would mean","date":"2018-08-24T20:23:41.997Z","type":"message"}
{"nick":"bradleymeck","message":"i'm working with mark to write up a phased proof of concept plan that we can dev on a fork of node","date":"2018-08-24T20:24:06.207Z","type":"message"}
{"nick":"bradleymeck","message":"hardest part is v8 lacking a real Realm API for compartments for now","date":"2018-08-24T20:24:21.306Z","type":"message"}
{"nick":"bradleymeck","message":"since that is still going through TC39 slowly","date":"2018-08-24T20:24:28.478Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: what are you making with mark?","date":"2018-08-24T20:24:31.462Z","type":"message"}
{"nick":"devsnek","message":"usb and serial ports?","date":"2018-08-24T20:24:39.050Z","type":"message"}
{"nick":"bradleymeck","message":"so a proof of concept would require a single frame stack inspection on global access","date":"2018-08-24T20:24:47.249Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: no, membranes and security model for Node","date":"2018-08-24T20:24:56.657Z","type":"message"}
{"nick":"devsnek","message":"i just hacked into v8's api","date":"2018-08-24T20:25:14.400Z","type":"message"}
{"nick":"bradleymeck","message":"basically restrictions of permissions within a package","date":"2018-08-24T20:25:15.965Z","type":"message"}
{"nick":"devsnek","message":"for the execution contexts","date":"2018-08-24T20:25:21.915Z","type":"message"}
{"nick":"bradleymeck","message":"I'm not keen on that XD","date":"2018-08-24T20:25:30.484Z","type":"message"}
{"nick":"devsnek","message":"then i just std::unordered_map those pointers to permissions information","date":"2018-08-24T20:25:48.289Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: compartments are a lightweight context within a context","date":"2018-08-24T20:26:05.304Z","type":"message"}
{"nick":"devsnek","message":"yeah i saw the presentation","date":"2018-08-24T20:26:17.157Z","type":"message"}
{"nick":"bradleymeck","message":"so they don't actually have a clear API from V8 side yet","date":"2018-08-24T20:26:17.357Z","type":"message"}
{"nick":"devsnek","message":"can we not shim that stuff","date":"2018-08-24T20:26:33.935Z","type":"message"}
{"nick":"bradleymeck","message":"not without some heavy lifting in V8's codebase","date":"2018-08-24T20:26:44.785Z","type":"message"}
{"nick":"devsnek","message":"mark keeps saying he wants to block stuff because it will break the shim","date":"2018-08-24T20:26:56.602Z","type":"message"}
{"nick":"bradleymeck","message":"we can make a fancy global proxy for proof of concept","date":"2018-08-24T20:26:57.382Z","type":"message"}
{"nick":"devsnek","message":"the shim just shouldn't exist","date":"2018-08-24T20:27:00.290Z","type":"message"}
{"nick":"devsnek","message":"don't shim security","date":"2018-08-24T20:27:05.821Z","type":"message"}
{"nick":"lundibundi","reason":"Remote host closed the connection","date":"2018-08-24T20:27:18.946Z","type":"quit"}
{"nick":"bradleymeck","message":"shimming security is ok if you compile it into the runtime bootstrap","date":"2018-08-24T20:27:21.293Z","type":"message"}
{"nick":"bradleymeck","message":"which is what bloomberg does","date":"2018-08-24T20:27:26.469Z","type":"message"}
{"nick":"bradleymeck","message":"it is just harder to ensure the userland solution is as robust (hence an entire company basically devoted to this problem)","date":"2018-08-24T20:27:54.605Z","type":"message"}
{"nick":"devsnek","message":"i still don't really understand the security model","date":"2018-08-24T20:28:18.578Z","type":"message"}
{"nick":"devsnek","message":"node doesn't run untrusted code","date":"2018-08-24T20:28:55.258Z","type":"message"}
{"nick":"bradleymeck","message":"currently ya","date":"2018-08-24T20:29:18.857Z","type":"message"}
{"nick":"devsnek","message":"have you seen isolated-vm","date":"2018-08-24T20:29:28.959Z","type":"message"}
{"nick":"bradleymeck","message":"but we do run unaudited code that probably shouldn't have perms","date":"2018-08-24T20:29:37.948Z","type":"message"}
{"nick":"bradleymeck","message":"the big problem is how to get all the code that we have today into a workable auditable/feasibly secure runtime","date":"2018-08-24T20:30:09.495Z","type":"message"}
{"nick":"devsnek","message":"compile your own v8","date":"2018-08-24T20:30:27.408Z","type":"message"}
{"nick":"bradleymeck","message":"isolated-vm and things like pivot require code rewriting etc","date":"2018-08-24T20:30:35.846Z","type":"message"}
{"nick":"bradleymeck","message":"marks stuff (all his stuff) was built around object capabilities in a shared heap","date":"2018-08-24T20:31:06.275Z","type":"message"}
{"nick":"bradleymeck","message":"the shared heap is pretty essential if you want to run code in the typical JS programming model","date":"2018-08-24T20:31:53.117Z","type":"message"}
{"nick":"bradleymeck","message":"the big hard thing to swallow is needing to freeze globals/primordials","date":"2018-08-24T20:32:53.871Z","type":"message"}
{"nick":"devsnek","message":"like you want to run untrusted code but still interact with it","date":"2018-08-24T20:33:12.350Z","type":"message"}
{"nick":"bradleymeck","message":"but in general most npm modules do fine running in such an environment","date":"2018-08-24T20:33:14.128Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: of course! I'd consider `eslint` untrusted to perform network access for example, but trusted to read off disk","date":"2018-08-24T20:33:45.600Z","type":"message"}
{"nick":"devsnek","message":"why","date":"2018-08-24T20:34:11.826Z","type":"message"}
{"nick":"devsnek","message":"maybe a linter rule performs advanced computation over the network","date":"2018-08-24T20:34:22.182Z","type":"message"}
{"nick":"bradleymeck","message":"then it can tell me in its manifest that it needs network access, because that is not typical","date":"2018-08-24T20:34:46.020Z","type":"message"}
{"nick":"bradleymeck","message":"the whole thing with all these models is trying to figure out what level of trust different packages need","date":"2018-08-24T20:35:01.973Z","type":"message"}
{"nick":"devsnek","message":"i think the node ecosystem is the wrong domain for trying to add that","date":"2018-08-24T20:35:20.725Z","type":"message"}
{"nick":"bradleymeck","message":"so that you can audit those aspects of the packages rather than trying to figure out all the other capabilities it could exploit","date":"2018-08-24T20:35:27.014Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: how would you approach it then?","date":"2018-08-24T20:35:37.416Z","type":"message"}
{"nick":"joepie91","action":"is more interested in granular capabilities than in un-granular permission systems","date":"2018-08-24T20:35:46.996Z","type":"action"}
{"nick":"devsnek","message":"bradleymeck: i would make my own runtime","date":"2018-08-24T20:35:55.285Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-08-24T20:36:02.586Z","type":"message"}
{"nick":"bradleymeck","message":"cause you get into really bad cases where, say a package need child_process access in your app, but you don't want **all** packages to suddenly get child_process access","date":"2018-08-24T20:36:34.037Z","type":"message"}
{"nick":"devsnek","message":"i think your goals (while in general i agree with them) don't really plug into the current ecosystem","date":"2018-08-24T20:36:36.739Z","type":"message"}
{"nick":"bradleymeck","message":"deno for example is taking the coarse grained capabilities approach and it faces problems of granting too much privilege because it cannot selectively grant to individual packages","date":"2018-08-24T20:37:19.127Z","type":"message"}
{"nick":"bradleymeck","message":"it has to solve the same problem","date":"2018-08-24T20:37:25.332Z","type":"message"}
{"nick":"bradleymeck","message":"a new runtime doesn't fix the least authority problem","date":"2018-08-24T20:37:42.582Z","type":"message"}
{"nick":"Fishrock123","reason":"Quit: Leaving...","date":"2018-08-24T20:37:47.558Z","type":"quit"}
{"nick":"joepie91","message":"yes, but even package-level permissions are going to produce granularity issues","date":"2018-08-24T20:37:50.674Z","type":"message"}
{"nick":"devsnek","message":"i'm working on module-specific permissions","date":"2018-08-24T20:37:51.732Z","type":"message"}
{"nick":"joepie91","message":"just... less of them","date":"2018-08-24T20:37:56.594Z","type":"message"}
{"nick":"devsnek","message":"like i said before about hacking execution contexts","date":"2018-08-24T20:37:57.679Z","type":"message"}
{"nick":"devsnek","message":"its just slow","date":"2018-08-24T20:38:10.176Z","type":"message"}
{"nick":"devsnek","message":"and deno is slow af because it RPCs everything","date":"2018-08-24T20:38:19.469Z","type":"message"}
{"nick":"bradleymeck","message":"joepie91: indeed, at which point i'll tell people to make subpackages cause too fine granularity is a difficult task","date":"2018-08-24T20:38:21.439Z","type":"message"}
{"nick":"joepie91","message":"bradleymeck: that's only looking at one half of the granularity problem; namely what it applies to","date":"2018-08-24T20:38:38.244Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: membranes are quite fast in modern vms","date":"2018-08-24T20:38:39.857Z","type":"message"}
{"nick":"joepie91","message":"bradleymeck: but the bigger problem is the other half; what it permits","date":"2018-08-24T20:38:47.038Z","type":"message"}
{"nick":"bradleymeck","message":"joepie91: the phrasing there is confusing to me","date":"2018-08-24T20:39:04.701Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: i'm not sure how membranes solve \"package x shouldn't be able to use require('net').createConnection`","date":"2018-08-24T20:39:16.691Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: membranes would wrap `net` and remove `.createConnection` within the membrane","date":"2018-08-24T20:39:58.881Z","type":"message"}
{"nick":"joepie91","message":"bradleymeck: if you have an isolated permission set for every package, and the permissions are as non-granular as \"can use the network\" or \"can access the filesystem\", this makes it trivial for eg. one package without special perms to find a 'vulnerability' (that would not otherwise be considered a vulnerability) in another dependency that gets *more* permissions, and supply bad input to have the package overstep its bounds on its behalf","date":"2018-08-24T20:40:04.569Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: that seems unsane","date":"2018-08-24T20:40:36.616Z","type":"message"}
{"nick":"devsnek","message":"unsafe*","date":"2018-08-24T20:40:38.426Z","type":"message"}
{"nick":"bradleymeck","message":"joepie91: i'd say that is true for most systems","date":"2018-08-24T20:40:42.249Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: unsafe how? you explicitly are not wanting a module to have that","date":"2018-08-24T20:40:56.584Z","type":"message"}
{"nick":"joepie91","message":"to prevent that kind of failure case, you'd need 1) remove-only capabilities down the tree, and 2) capabilities that are fine-grained enough that you can allow access to specific resources, not just resource *categories*","date":"2018-08-24T20:41:02.627Z","type":"message"}
{"nick":"devsnek","message":"because you haven't stopped the module from accessing the network","date":"2018-08-24T20:41:10.105Z","type":"message"}
{"nick":"joepie91","message":"bradleymeck: not for 'real' capability-based systems :P","date":"2018-08-24T20:41:11.973Z","type":"message"}
{"nick":"joepie91","message":"the problem is that when you ignore cases like this, you produce a permission system that looks vastly more secure than it really is","date":"2018-08-24T20:41:30.138Z","type":"message"}
{"nick":"bradleymeck","message":"joepie91: i disagree, also this comes down to complaints I have about scoping capabilities ;p","date":"2018-08-24T20:41:32.953Z","type":"message"}
{"nick":"bradleymeck","message":"scopes are a different dimension to me than the capability categories","date":"2018-08-24T20:41:49.634Z","type":"message"}
{"nick":"joepie91","message":"bradleymeck: disagree because?","date":"2018-08-24T20:41:54.395Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: how so? you stated you only wanted .createConnection to fail","date":"2018-08-24T20:42:24.412Z","type":"message"}
{"nick":"devsnek","message":"i want a module to not be able to access the network","date":"2018-08-24T20:42:36.151Z","type":"message"}
{"nick":"devsnek","message":"i don't care about which apis it uses","date":"2018-08-24T20:42:39.879Z","type":"message"}
{"nick":"devsnek","message":"or how it gets those apis","date":"2018-08-24T20:42:43.043Z","type":"message"}
{"nick":"bradleymeck","message":"well thats a different question","date":"2018-08-24T20:42:44.310Z","type":"message"}
{"nick":"devsnek","message":"thats the only question work asking lol","date":"2018-08-24T20:42:51.391Z","type":"message"}
{"nick":"devsnek","message":"worth*","date":"2018-08-24T20:42:55.796Z","type":"message"}
{"nick":"bradleymeck","message":"joepie91: i disagree because in JS you can just pass privileged values all over the place DI style","date":"2018-08-24T20:43:02.892Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: there are a variety of approaches, branding and boxing stand out in these areas","date":"2018-08-24T20:43:24.259Z","type":"message"}
{"nick":"devsnek","message":"like if i don't want eslint to access the network","date":"2018-08-24T20:43:38.107Z","type":"message"}
{"nick":"joepie91","message":"bradleymeck: not sure how that contradicts my point regarding 'real' capability systems not suffering from this issue...","date":"2018-08-24T20:43:47.642Z","type":"message"}
{"nick":"devsnek","message":"but it tricks some other package into giving it the net object","date":"2018-08-24T20:43:49.198Z","type":"message"}
{"nick":"bradleymeck","message":"joepie91: i'm stating it is not feasible in JS","date":"2018-08-24T20:43:59.863Z","type":"message"}
{"nick":"joepie91","message":"okay, that is possibly currently true, but that seems like a different discussion entirely :P","date":"2018-08-24T20:44:23.037Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: ah, well you could put membranes between modules if you want to stop that in a super aggressive way, but passing privileged values is the only way to avoid the RPC slowdown and the module that got net access was explicitly granted that privilege","date":"2018-08-24T20:45:13.734Z","type":"message"}
{"nick":"bradleymeck","message":"what difference is there in passing that around vs implementing an RPC through the privileged package","date":"2018-08-24T20:45:31.321Z","type":"message"}
{"nick":"devsnek","message":"so you think that passing is a grant of access","date":"2018-08-24T20:45:46.527Z","type":"message"}
{"nick":"devsnek","message":"i think its a breach","date":"2018-08-24T20:45:51.418Z","type":"message"}
{"nick":"bradleymeck","message":"privileged.exports = {createConnection(...a) {return net.createConnection(...a)}}","date":"2018-08-24T20:46:08.964Z","type":"message"}
{"nick":"bradleymeck","message":"you could membrane that up to prevent such a value being passed","date":"2018-08-24T20:46:31.737Z","type":"message"}
{"nick":"bradleymeck","message":"but thats not a threat in my mind","date":"2018-08-24T20:46:38.968Z","type":"message"}
{"nick":"devsnek","message":"this reminds me of like","date":"2018-08-24T20:46:50.810Z","type":"message"}
{"nick":"bradleymeck","message":"cause you could just proxy everything anyway","date":"2018-08-24T20:46:52.603Z","type":"message"}
{"nick":"devsnek","message":"that google engineer's keys thing","date":"2018-08-24T20:47:02.430Z","type":"message"}
{"nick":"bradleymeck","message":"yea, boxing is the other approach","date":"2018-08-24T20:47:19.091Z","type":"message"}
{"nick":"bradleymeck","message":"which is good for when you have to pass a value through untrusted code","date":"2018-08-24T20:47:36.513Z","type":"message"}
{"nick":"bradleymeck","message":"could be done with the module keys thing, or I generally use a frozen null proto empty object + weakmaps","date":"2018-08-24T20:48:00.037Z","type":"message"}
{"nick":"devsnek","message":"what is this untrusted code doing","date":"2018-08-24T20:48:37.004Z","type":"message"}
{"nick":"devsnek","message":"where it just wants to gobble your generic values without doing anything","date":"2018-08-24T20:48:46.825Z","type":"message"}
{"nick":"devsnek","message":"are you protecting against malicious map libraries","date":"2018-08-24T20:49:03.256Z","type":"message"}
{"nick":"bradleymeck","message":"doesn't matter what it is doing really, it shouldn't read random values that could have sensitive data somehow associated with it","date":"2018-08-24T20:49:25.261Z","type":"message"}
{"nick":"bradleymeck","message":"i was showing my mentee how to extract TLS keys off servers, that wasn't what the server with the vuln was intended to do, but it nonetheless did","date":"2018-08-24T20:50:10.951Z","type":"message"}
{"nick":"devsnek","message":"i just don't understand what untrusted data you're passing to code within the same heap that the code doesn't need the actual value but a standin boxed value that you can access later","date":"2018-08-24T20:51:28.831Z","type":"message"}
{"nick":"bradleymeck","message":"personal identifiable info is a big thing for GoDaddy at least, we can get into major trouble if we leak that","date":"2018-08-24T20:52:36.984Z","type":"message"}
{"nick":"devsnek","message":"so don't pass it into random code","date":"2018-08-24T20:52:47.472Z","type":"message"}
{"nick":"bradleymeck","action":"stares at all of npm","date":"2018-08-24T20:52:57.611Z","type":"action"}
{"nick":"devsnek","message":"if you're already passing in <random box>","date":"2018-08-24T20:53:07.996Z","type":"message"}
{"nick":"bradleymeck","message":"npm is random code","date":"2018-08-24T20:53:10.318Z","type":"message"}
{"nick":"devsnek","message":"i feel like i'm missing some crucial idea here","date":"2018-08-24T20:53:21.155Z","type":"message"}
{"nick":"devsnek","message":"you have an object with like a person's SSN and address","date":"2018-08-24T20:53:36.271Z","type":"message"}
{"nick":"devsnek","message":"and you need to pass that to third party code","date":"2018-08-24T20:54:03.376Z","type":"message"}
{"nick":"devsnek","message":"but the third party code doesn't actually use the object","date":"2018-08-24T20:54:10.086Z","type":"message"}
{"nick":"devsnek","message":"because you can also pass a random box","date":"2018-08-24T20:54:14.998Z","type":"message"}
{"nick":"bradleymeck","message":"i mean, we have our custom in house libs, but if `express` or something gets the data though arguments etc. we need to check all our middleware, and all the middleware deps whenever they upgrade etc. if we have a front loaded middleware that boxes the sensitive data we can skip a lot of that effort","date":"2018-08-24T20:54:36.313Z","type":"message"}
{"nick":"joepie91","message":"devsnek: am I understanding correctly that whatwg streams do not have any special behaviour for writing a Promise, and just treat it as any other value, rather than waiting for it to resolve/reject and writing/erroring the stream accordingly?","date":"2018-08-24T20:54:47.600Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: idgi","date":"2018-08-24T20:55:10.123Z","type":"message"}
{"nick":"devsnek","message":"so like making sure your data gets throug middleware okay","date":"2018-08-24T20:55:23.344Z","type":"message"}
{"nick":"devsnek","message":"but the middleware can't actually use the data you pass it","date":"2018-08-24T20:55:45.963Z","type":"message"}
{"nick":"bradleymeck","message":"as an example sure, but middleware could be replaced by *any API we don't control/audit very tightly*","date":"2018-08-24T20:55:57.659Z","type":"message"}
{"nick":"devsnek","message":"because you pass it a random object","date":"2018-08-24T20:56:08.996Z","type":"message"}
{"nick":"bradleymeck","message":"yea","date":"2018-08-24T20:56:12.376Z","type":"message"}
{"nick":"devsnek","message":"but then","date":"2018-08-24T20:56:15.966Z","type":"message"}
{"nick":"dc13ff","reason":"Quit: Connection closed for inactivity","date":"2018-08-24T20:56:16.354Z","type":"quit"}
{"nick":"devsnek","message":"what is the middleware doing","date":"2018-08-24T20:56:21.266Z","type":"message"}
{"nick":"bradleymeck","message":"it is just an opaque worthless thing to that middleware","date":"2018-08-24T20:56:24.550Z","type":"message"}
{"nick":"devsnek","message":"if you pass it some thing","date":"2018-08-24T20:56:27.069Z","type":"message"}
{"nick":"bradleymeck","message":"things not associated with the SSN","date":"2018-08-24T20:56:30.833Z","type":"message"}
{"nick":"devsnek","message":"it would be expected to operate on some thing in some way","date":"2018-08-24T20:56:33.660Z","type":"message"}
{"nick":"bradleymeck","message":"parsing some JSON, maybe doing authentication, etc.","date":"2018-08-24T20:56:41.877Z","type":"message"}
{"nick":"bradleymeck","message":"you don't box everything, just the sensitive bits","date":"2018-08-24T20:56:59.836Z","type":"message"}
{"nick":"devsnek","message":"yeah there's a definite disconnect here","date":"2018-08-24T20:57:12.616Z","type":"message"}
{"nick":"bradleymeck","message":"well ideally you box everything, but make exceptions for the non-sensitive bits","date":"2018-08-24T20:57:22.127Z","type":"message"}
{"nick":"devsnek","message":"i'm missing some part of the picture here","date":"2018-08-24T20:57:55.624Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: like... why would username/password auth need to know the SSN that was posted","date":"2018-08-24T20:58:06.467Z","type":"message"}
{"nick":"devsnek","message":"i dunno","date":"2018-08-24T20:58:17.017Z","type":"message"}
{"nick":"devsnek","message":"why are you passing the ssn to username/password auth","date":"2018-08-24T20:58:23.338Z","type":"message"}
{"nick":"devsnek","message":"just pass the username and password","date":"2018-08-24T20:58:30.907Z","type":"message"}
{"nick":"bradleymeck","message":"because someone sent POST /udateAccount","date":"2018-08-24T20:58:33.885Z","type":"message"}
{"nick":"devsnek","message":"and?","date":"2018-08-24T20:58:44.324Z","type":"message"}
{"nick":"bradleymeck","message":"and updateAccount takes a JSON body with the SSN in it","date":"2018-08-24T20:58:45.908Z","type":"message"}
{"nick":"devsnek","message":"ok so","date":"2018-08-24T20:58:49.005Z","type":"message"}
{"nick":"devsnek","message":"you have to own the JSON parser","date":"2018-08-24T20:58:52.837Z","type":"message"}
{"nick":"devsnek","message":"because otherwise the parser could steal the ssn","date":"2018-08-24T20:58:59.587Z","type":"message"}
{"nick":"devsnek","message":"and then once you have the object","date":"2018-08-24T20:59:05.457Z","type":"message"}
{"nick":"devsnek","message":"pass the username and password to your auth","date":"2018-08-24T20:59:09.647Z","type":"message"}
{"nick":"devsnek","message":"don't pass the ssn","date":"2018-08-24T20:59:17.488Z","type":"message"}
{"nick":"devsnek","message":"ez","date":"2018-08-24T20:59:18.783Z","type":"message"}
{"nick":"bradleymeck","message":"or audit the parser and feel it is safe to whitelist as coming before your censorship","date":"2018-08-24T20:59:26.286Z","type":"message"}
{"nick":"devsnek","message":"ok fine so you audit the parser","date":"2018-08-24T20:59:36.389Z","type":"message"}
{"nick":"devsnek","message":"the parser passes the object to ?? which boxes it which then passes it to authentiate?","date":"2018-08-24T20:59:49.051Z","type":"message"}
{"nick":"devsnek","message":"why doesn't ?? just only pass the username and password","date":"2018-08-24T20:59:58.286Z","type":"message"}
{"nick":"devsnek","message":"this is so confusing","date":"2018-08-24T21:00:00.745Z","type":"message"}
{"nick":"bradleymeck","message":"but using libs for auth are not written to avoid getting data","date":"2018-08-24T21:00:04.354Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 244 seconds","date":"2018-08-24T21:00:21.527Z","type":"quit"}
{"nick":"bradleymeck","message":"how are you going to use libs that do auth if they just get your whole request","date":"2018-08-24T21:00:21.678Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: this all revolves around usage, middleware gets the entire request/response","date":"2018-08-24T21:00:42.151Z","type":"message"}
{"nick":"bradleymeck","message":"thats just how all the frameworks evolved","date":"2018-08-24T21:00:49.196Z","type":"message"}
{"nick":"devsnek","message":"yeah so you have to stick your own middleware in here that does like","date":"2018-08-24T21:00:58.854Z","type":"message"}
{"nick":"devsnek","message":"i dunno boxes the request in this case","date":"2018-08-24T21:01:04.204Z","type":"message"}
{"nick":"bradleymeck","message":"yup","date":"2018-08-24T21:01:07.838Z","type":"message"}
{"nick":"bradleymeck","message":"or uses a membrane, etc.","date":"2018-08-24T21:01:23.760Z","type":"message"}
{"nick":"devsnek","message":"this seems really specific","date":"2018-08-24T21:01:25.108Z","type":"message"}
{"nick":"devsnek","message":"to like i said","date":"2018-08-24T21:01:26.742Z","type":"message"}
{"nick":"devsnek","message":"passing data around that doesn't get modified","date":"2018-08-24T21:01:31.023Z","type":"message"}
{"nick":"bradleymeck","message":"i don't want it read at all","date":"2018-08-24T21:01:49.023Z","type":"message"}
{"nick":"devsnek","message":"like basically people using express","date":"2018-08-24T21:01:51.935Z","type":"message"}
{"nick":"bradleymeck","message":"not just modification","date":"2018-08-24T21:01:53.463Z","type":"message"}
{"nick":"devsnek","message":"this could just be an api exposed by express","date":"2018-08-24T21:02:01.222Z","type":"message"}
{"nick":"bradleymeck","message":"people pass things to untrusted stuff all the time","date":"2018-08-24T21:02:04.241Z","type":"message"}
{"nick":"bradleymeck","message":"not just in express","date":"2018-08-24T21:02:07.177Z","type":"message"}
{"nick":"devsnek","message":"yeah but","date":"2018-08-24T21:02:12.045Z","type":"message"}
{"nick":"joepie91","message":"devsnek: did you see my question? :P","date":"2018-08-24T21:02:13.889Z","type":"message"}
{"nick":"devsnek","message":"in any case","date":"2018-08-24T21:02:16.789Z","type":"message"}
{"nick":"devsnek","message":"joepie91: yeah 1sec lol","date":"2018-08-24T21:02:22.810Z","type":"message"}
{"nick":"joepie91","message":"alright","date":"2018-08-24T21:02:30.438Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: you have to own both sides of the untrusted code","date":"2018-08-24T21:02:33.789Z","type":"message"}
{"nick":"devsnek","message":"the input and the output","date":"2018-08-24T21:02:36.035Z","type":"message"}
{"nick":"bradleymeck","message":"yup, true on all solutions i know of","date":"2018-08-24T21:03:11.272Z","type":"message"}
{"nick":"devsnek","message":"to me this is just another like \"coding pattern X has downside Y that you need to protect against\"","date":"2018-08-24T21:03:28.381Z","type":"message"}
{"nick":"devsnek","message":"but that doesn't mean node needs to ship with a fix for it","date":"2018-08-24T21:03:44.178Z","type":"message"}
{"nick":"devsnek","message":"its not that generalized","date":"2018-08-24T21:03:47.939Z","type":"message"}
{"nick":"bradleymeck","message":"yup, but this is just about boxing not about membrane policies","date":"2018-08-24T21:03:54.680Z","type":"message"}
{"nick":"devsnek","message":"joepie91: whatwg streams use things called controllers","date":"2018-08-24T21:04:15.674Z","type":"message"}
{"nick":"devsnek","message":"which handle the actual values you pass around","date":"2018-08-24T21:04:23.804Z","type":"message"}
{"nick":"bradleymeck","message":"membranes give you the ability to own the input/output of untrusted code but have usability and speed considerations","date":"2018-08-24T21:04:39.150Z","type":"message"}
{"nick":"devsnek","message":"the default controllers allow any value to be passed","date":"2018-08-24T21:04:41.530Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: but its still not a general fix","date":"2018-08-24T21:04:58.149Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: there isn't a general fix","date":"2018-08-24T21:05:09.450Z","type":"message"}
{"nick":"devsnek","message":"its a fix for your security considerations","date":"2018-08-24T21:05:10.452Z","type":"message"}
{"nick":"devsnek","message":"but it would just get in the way of someone else","date":"2018-08-24T21:05:22.973Z","type":"message"}
{"nick":"bradleymeck","message":"security is all about trading off convenience","date":"2018-08-24T21:05:46.827Z","type":"message"}
{"nick":"bradleymeck","message":"what is acceptable to trade off","date":"2018-08-24T21:05:53.457Z","type":"message"}
{"nick":"devsnek","message":"i'm saying your security model and my security model aren't the same","date":"2018-08-24T21:06:06.272Z","type":"message"}
{"nick":"bradleymeck","message":"i'd agree but i don't understand yours very well","date":"2018-08-24T21:06:24.149Z","type":"message"}
{"nick":"joepie91","message":"devsnek: I feel like looking at https://streams.spec.whatwg.org/#example-ts-sync-mapper the ergonomics aren't great, and they'd be even worse when dealing with promises","date":"2018-08-24T21:06:39.906Z","type":"message"}
{"nick":"bradleymeck","message":"pure RPC/message passing based stuff still suffers similar problems","date":"2018-08-24T21:06:49.446Z","type":"message"}
{"nick":"devsnek","message":"i don't even know the last time i used a middleware-style server approach","date":"2018-08-24T21:06:52.517Z","type":"message"}
{"nick":"devsnek","message":"or this idea of a bunch of hoops your code goes through","date":"2018-08-24T21:07:06.227Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: then lets talk about HTML generation","date":"2018-08-24T21:07:06.782Z","type":"message"}
{"nick":"devsnek","message":"that was the example that google dev gave","date":"2018-08-24T21:07:15.891Z","type":"message"}
{"nick":"bradleymeck","message":"your templating language probably shouldn't be doing child process stuff","date":"2018-08-24T21:07:19.829Z","type":"message"}
{"nick":"devsnek","message":"agreed","date":"2018-08-24T21:07:32.372Z","type":"message"}
{"nick":"devsnek","message":"so `setPermissions('pug', { child_process: false })`","date":"2018-08-24T21:07:46.639Z","type":"message"}
{"nick":"devsnek","message":"joepie91: not quire sure what you mean","date":"2018-08-24T21:08:01.437Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: any then what happens in `pug`'s code","date":"2018-08-24T21:08:32.227Z","type":"message"}
{"nick":"bradleymeck","message":"and*","date":"2018-08-24T21:08:35.413Z","type":"message"}
{"nick":"devsnek","message":"i dunno","date":"2018-08-24T21:08:39.810Z","type":"message"}
{"nick":"devsnek","message":"pug tries to use child_process.spawn","date":"2018-08-24T21:08:44.935Z","type":"message"}
{"nick":"devsnek","message":"and throws an error","date":"2018-08-24T21:08:47.426Z","type":"message"}
{"nick":"bradleymeck","message":"sounds sane","date":"2018-08-24T21:08:58.805Z","type":"message"}
{"nick":"joepie91","message":"devsnek: never mind","date":"2018-08-24T21:09:14.377Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: what is your idea of keeping pug from using child_process","date":"2018-08-24T21:09:33.500Z","type":"message"}
{"nick":"devsnek","message":"(my calling an api thing was just a generic example thing btw... it could be some manifest)","date":"2018-08-24T21:09:48.473Z","type":"message"}
{"nick":"bradleymeck","message":"now what happens when I need to give some partial to `pug` that has child_process as part of its implementation (say shelling out to some script in python etc)","date":"2018-08-24T21:09:49.045Z","type":"message"}
{"nick":"devsnek","message":"you should call that yourself","date":"2018-08-24T21:10:00.376Z","type":"message"}
{"nick":"bradleymeck","message":"and if you don't, and you pass it to pug?","date":"2018-08-24T21:10:12.283Z","type":"message"}
{"nick":"devsnek","message":"then you're stupid","date":"2018-08-24T21:10:26.765Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-08-24T21:10:27.402Z","type":"message"}
{"nick":"bradleymeck","message":"its the same problem that mine has","date":"2018-08-24T21:10:36.557Z","type":"message"}
{"nick":"bradleymeck","message":"you still have to setup the guards and show how they need to be audited","date":"2018-08-24T21:10:52.233Z","type":"message"}
{"nick":"devsnek","message":"i'm trying to say i think you've got a great idea for a library here","date":"2018-08-24T21:11:42.967Z","type":"message"}
{"nick":"devsnek","message":"but it doesn't make sense to happen at a spec/environment level","date":"2018-08-24T21:12:09.394Z","type":"message"}
{"nick":"bradleymeck","message":"i don't think it can happen at a library level","date":"2018-08-24T21:12:24.106Z","type":"message"}
{"nick":"bradleymeck","message":"you cant setup those guards for a variety of things at a library level","date":"2018-08-24T21:12:35.651Z","type":"message"}
{"nick":"devsnek","message":"if we do esm properly i think it would be a reasonable loader","date":"2018-08-24T21:12:56.695Z","type":"message"}
{"nick":"bradleymeck","message":"if you do source code transforms you can do anything XD","date":"2018-08-24T21:13:13.235Z","type":"message"}
{"nick":"bradleymeck","message":"so i never consider that a good solution","date":"2018-08-24T21:13:21.908Z","type":"message"}
{"nick":"devsnek","message":"i'm not saying you need to transform any source","date":"2018-08-24T21:13:31.159Z","type":"message"}
{"nick":"devsnek","message":"just intercept import requests","date":"2018-08-24T21:13:42.068Z","type":"message"}
{"nick":"bradleymeck","message":"and when people taint globals?","date":"2018-08-24T21:13:58.037Z","type":"message"}
{"nick":"bradleymeck","message":"or just start getting saucy with `process`","date":"2018-08-24T21:14:12.708Z","type":"message"}
{"nick":"devsnek","message":"you're the application","date":"2018-08-24T21:14:23.495Z","type":"message"}
{"nick":"devsnek","message":"your code runs first","date":"2018-08-24T21:14:27.117Z","type":"message"}
{"nick":"devsnek","message":"do whatever","date":"2018-08-24T21:14:30.638Z","type":"message"}
{"nick":"bradleymeck","message":"exactly, we need to figure out the \"whatever\" and do that in a well understood and audited way","date":"2018-08-24T21:14:52.185Z","type":"message"}
{"nick":"bradleymeck","message":"rolling your own security is terrifying even to people who deal with security","date":"2018-08-24T21:15:08.216Z","type":"message"}
{"nick":"devsnek","message":"of course","date":"2018-08-24T21:15:16.102Z","type":"message"}
{"nick":"bradleymeck","message":"i'd rather collaborate and get it build in a way that is able to work for the average user","date":"2018-08-24T21:16:12.401Z","type":"message"}
{"nick":"bradleymeck","message":"i don't think library based approached, or even loader based ones could feasibly handle all the state management for things like freezing down node core","date":"2018-08-24T21:16:38.286Z","type":"message"}
{"nick":"devsnek","message":"as an example here, openssl just deals with securing data in transport","date":"2018-08-24T21:16:47.376Z","type":"message"}
{"nick":"devsnek","message":"and it has like 500000 functions each with 50000 options","date":"2018-08-24T21:17:02.407Z","type":"message"}
{"nick":"devsnek","message":"because there is never a generalized approach","date":"2018-08-24T21:17:10.715Z","type":"message"}
{"nick":"bradleymeck","message":"i don't think we need to have tons of variation to our security model if thats what your concern is","date":"2018-08-24T21:19:38.612Z","type":"message"}
{"nick":"bradleymeck","message":"having packages declare \"permissions\" like PWAs do in manifest.json is more what I was thinking","date":"2018-08-24T21:20:37.882Z","type":"message"}
{"nick":"devsnek","message":"that seems fine to me","date":"2018-08-24T21:20:54.740Z","type":"message"}
{"nick":"devsnek","message":"well on a certain level it seems fine","date":"2018-08-24T21:21:10.890Z","type":"message"}
{"nick":"bradleymeck","message":"i'd leave code signing, subresource integrity, and message passing out of scope for 1st iteration but needs to be thought out","date":"2018-08-24T21:21:38.132Z","type":"message"}
{"nick":"bradleymeck","message":"i think you and i differ quite a bit on what it means to secure message passing","date":"2018-08-24T21:21:54.454Z","type":"message"}
{"nick":"bradleymeck","message":"i'm very much on the side of it being a grant and people needing to handle passing values between packages themselves","date":"2018-08-24T21:22:30.196Z","type":"message"}
{"nick":"bradleymeck","message":"if you want to censor all the message passing between packages, things get unruly for little overall affect i think personally","date":"2018-08-24T21:23:28.925Z","type":"message"}
{"nick":"bradleymeck","message":"cause then you get into cases where you have to write coordination packages that have the permissions of 2 different packages in order to get the lesser privileged packages to communicate and things like that","date":"2018-08-24T21:24:03.102Z","type":"message"}
{"nick":"devsnek","message":"i think when you start needing to put security mechanisms in your code because you don't trust your deps","date":"2018-08-24T21:24:38.518Z","type":"message"}
{"nick":"devsnek","message":"you have larger issues","date":"2018-08-24T21:24:41.102Z","type":"message"}
{"nick":"devsnek","message":"like maybe stop using npm","date":"2018-08-24T21:24:48.058Z","type":"message"}
{"nick":"ChALkeR","reason":"Ping timeout: 264 seconds","date":"2018-08-24T21:25:06.723Z","type":"quit"}
{"nick":"bradleymeck","message":"i think that isn't realistic, but alternatives also are unrealistic","date":"2018-08-24T21:25:18.394Z","type":"message"}
{"nick":"bradleymeck","message":"effect types are interesting here but aren't enough sometimes","date":"2018-08-24T21:25:32.682Z","type":"message"}
{"nick":"devsnek","message":"my thinking here is that if there's code you don't trust you should find some code you do trust","date":"2018-08-24T21:26:27.673Z","type":"message"}
{"nick":"bradleymeck","message":"thats for code signing bit yea","date":"2018-08-24T21:26:43.076Z","type":"message"}
{"nick":"bradleymeck","message":"only run trusted code","date":"2018-08-24T21:26:47.664Z","type":"message"}
{"nick":"devsnek","message":"your membranes are too small","date":"2018-08-24T21:26:52.595Z","type":"message"}
{"nick":"devsnek","message":"they should surround your entire application :P","date":"2018-08-24T21:27:01.216Z","type":"message"}
{"nick":"bradleymeck","message":"for a full scale level of trust yea","date":"2018-08-24T21:27:02.344Z","type":"message"}
{"nick":"bradleymeck","message":"that wouldn't help","date":"2018-08-24T21:27:08.976Z","type":"message"}
{"nick":"bradleymeck","message":"it would have to intercept basically every operation","date":"2018-08-24T21:27:17.590Z","type":"message"}
{"nick":"bradleymeck","message":"just use code signing and reject any untrusted code","date":"2018-08-24T21:27:29.258Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2018-08-24T21:27:32.986Z","type":"message"}
{"nick":"devsnek","message":"i should put quotes around membrane","date":"2018-08-24T21:27:44.038Z","type":"message"}
{"nick":"devsnek","message":"i just meant like bits of the application you trust","date":"2018-08-24T21:27:53.531Z","type":"message"}
{"nick":"bradleymeck","message":"if you want to deal with the nightmare that is public key infrastructure and adding it to node i'd be interested but would want people with CA experiences to vet it","date":"2018-08-24T21:28:33.324Z","type":"message"}
{"nick":"devsnek","message":"i've been planning out a new package repo idea for like months now","date":"2018-08-24T21:29:25.790Z","type":"message"}
{"nick":"bradleymeck","message":"revocation and expiration are my main desires, content verification leave to subresource integrity so that they aren't affected when keys go away","date":"2018-08-24T21:29:35.279Z","type":"message"}
{"nick":"devsnek","message":"i call it egg heh","date":"2018-08-24T21:29:38.783Z","type":"message"}
{"nick":"ChALkeR","date":"2018-08-24T21:34:27.774Z","type":"join"}
{"nick":"boneskull","message":"i'd like to be able to run untrusted code in a sandbox, but from what I can tell, if it's indeed possible to do that safely, it's not possible to do without loss of functionality at the JS level","date":"2018-08-24T21:50:01.365Z","type":"message"}
{"nick":"zeds","date":"2018-08-24T21:51:02.067Z","type":"join"}
{"nick":"zeds","reason":"Excess Flood","date":"2018-08-24T21:51:04.469Z","type":"quit"}
{"nick":"boneskull","message":"it occurs to me that I should be able to run any code--for instance, living in `node_modules`--in such a sandbox as a matter of normal operation","date":"2018-08-24T21:51:24.222Z","type":"message"}
{"nick":"zeds","date":"2018-08-24T21:51:42.029Z","type":"join"}
{"nick":"zeds","date":"2018-08-24T21:51:49.017Z","type":"part"}
{"nick":"boneskull","message":"but if I don't expect my own app to consume e.g., `zlib.*` then I should be able to disable it","date":"2018-08-24T21:52:27.314Z","type":"message"}
{"nick":"boneskull","message":"and it should be pretty to do so :D","date":"2018-08-24T21:52:46.275Z","type":"message"}
{"nick":"ChALkeR","reason":"Ping timeout: 252 seconds","date":"2018-08-24T21:55:48.795Z","type":"quit"}
{"nick":"zsoc","reason":"Quit: Leaving","date":"2018-08-24T21:57:56.493Z","type":"quit"}
{"nick":"ChALkeR","date":"2018-08-24T22:02:31.497Z","type":"join"}
{"nick":"AtumT_","date":"2018-08-24T23:11:22.421Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 252 seconds","date":"2018-08-24T23:13:46.027Z","type":"quit"}
{"nick":"AtumT","date":"2018-08-24T23:24:19.051Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 268 seconds","date":"2018-08-24T23:25:11.371Z","type":"quit"}
