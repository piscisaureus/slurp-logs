{"nick":"dbevenius","date":"2019-01-23T00:13:27.051Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-01-23T00:17:48.008Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-01-23T00:30:07.610Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T00:33:13.325Z","type":"join"}
{"nick":"devsnek","message":"that's... interesting","date":"2019-01-23T00:34:41.348Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 240 seconds","date":"2019-01-23T00:37:47.440Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T00:54:24.932Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-01-23T00:58:56.850Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T01:15:23.374Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 240 seconds","date":"2019-01-23T01:19:47.381Z","type":"quit"}
{"nick":"antsmartian","date":"2019-01-23T01:26:09.511Z","type":"join"}
{"nick":"dbevenius","date":"2019-01-23T01:34:31.391Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-01-23T01:38:48.348Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T01:44:38.111Z","type":"join"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-01-23T01:48:08.299Z","type":"quit"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-01-23T01:48:51.349Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T02:03:28.522Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-01-23T02:08:16.525Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T02:26:31.326Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-01-23T02:30:55.268Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T02:53:35.048Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-01-23T02:58:05.998Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T03:13:36.327Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-01-23T03:17:58.337Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T03:45:36.362Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-01-23T03:50:03.348Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T04:13:46.360Z","type":"join"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-01-23T04:19:03.095Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T04:19:17.332Z","type":"join"}
{"nick":"julianduque","reason":"Quit: Lost terminal","date":"2019-01-23T04:45:41.455Z","type":"quit"}
{"nick":"dbevenius","reason":"Read error: Connection reset by peer","date":"2019-01-23T04:46:41.813Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T04:46:49.727Z","type":"join"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-01-23T05:56:03.749Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T06:03:31.422Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-01-23T06:07:54.870Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T06:13:58.392Z","type":"join"}
{"nick":"seishun","date":"2019-01-23T06:29:24.910Z","type":"join"}
{"nick":"lpin","date":"2019-01-23T06:29:52.454Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 246 seconds","date":"2019-01-23T07:08:42.031Z","type":"quit"}
{"nick":"seishun","date":"2019-01-23T07:38:20.197Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2019-01-23T07:43:03.768Z","type":"quit"}
{"nick":"seishun","date":"2019-01-23T07:50:24.486Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 246 seconds","date":"2019-01-23T07:59:34.297Z","type":"quit"}
{"nick":"zeds","date":"2019-01-23T10:36:20.075Z","type":"join"}
{"nick":"zeds","date":"2019-01-23T10:36:48.983Z","type":"part"}
{"nick":"lundibundi","date":"2019-01-23T11:19:06.747Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 240 seconds","date":"2019-01-23T12:03:26.667Z","type":"quit"}
{"nick":"lundibundi","date":"2019-01-23T12:07:02.481Z","type":"join"}
{"nick":"antsmartian","date":"2019-01-23T12:22:34.894Z","type":"join"}
{"nick":"antsmartian","reason":"Ping timeout: 268 seconds","date":"2019-01-23T12:27:20.708Z","type":"quit"}
{"nick":"yaelhe","date":"2019-01-23T12:44:49.229Z","type":"join"}
{"nick":"yaelhe","reason":"Quit: Page closed","date":"2019-01-23T12:53:55.832Z","type":"quit"}
{"nick":"yaelhe","date":"2019-01-23T12:55:39.171Z","type":"join"}
{"nick":"yaelhe","message":"@devsnek, why is your weblocks PR stalled? Can I take it? https://github.com/nodejs/node/pull/22719","date":"2019-01-23T13:20:40.225Z","type":"message"}
{"nick":"yaelhe_","date":"2019-01-23T13:29:28.254Z","type":"join"}
{"nick":"yaelhe_","reason":"Remote host closed the connection","date":"2019-01-23T13:29:35.106Z","type":"quit"}
{"nick":"yaelhe_","date":"2019-01-23T13:32:21.800Z","type":"join"}
{"nick":"yaelhe","reason":"Ping timeout: 245 seconds","date":"2019-01-23T13:32:58.340Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 240 seconds","date":"2019-01-23T13:35:07.385Z","type":"quit"}
{"nick":"lundibundi","date":"2019-01-23T13:36:16.723Z","type":"join"}
{"nick":"yaelhe_","date":"2019-01-23T13:37:56.603Z","type":"quit"}
{"nick":"yaelhe","date":"2019-01-23T13:41:20.600Z","type":"join"}
{"nick":"yaelhe","reason":"Remote host closed the connection","date":"2019-01-23T13:46:15.062Z","type":"quit"}
{"nick":"antsmartian","date":"2019-01-23T13:59:04.427Z","type":"join"}
{"nick":"yaelhe","date":"2019-01-23T14:04:38.934Z","type":"join"}
{"nick":"yaelhe","reason":"Remote host closed the connection","date":"2019-01-23T14:24:44.955Z","type":"quit"}
{"nick":"yaelhe","date":"2019-01-23T14:28:46.385Z","type":"join"}
{"nick":"yaelhe","reason":"Remote host closed the connection","date":"2019-01-23T14:32:50.567Z","type":"quit"}
{"nick":"antsmartian","reason":"Read error: Connection reset by peer","date":"2019-01-23T14:56:29.364Z","type":"quit"}
{"nick":"antsmartian","date":"2019-01-23T14:56:57.015Z","type":"join"}
{"nick":"bradleymeck","message":"addaleax: might it make sense to introduce a more minor form of your PR that just disables child process and C++ loading?","date":"2019-01-23T15:15:20.133Z","type":"message"}
{"nick":"bradleymeck","message":"replacing the fns that do those operations with ones that error before any user code starts up","date":"2019-01-23T15:15:51.065Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: i don’t think that makes sense without effectively restricting fs access, and I don’t see how a reduced version would have advantages over the full version?","date":"2019-01-23T15:19:26.049Z","type":"message"}
{"nick":"bradleymeck","message":"why do we need to restrict fs access? my viewpoint comes from running with integrity checks already loaded into the process","date":"2019-01-23T15:20:45.034Z","type":"message"}
{"nick":"bradleymeck","message":"though, idk how workers load up policies as they are a bit confusing last i read","date":"2019-01-23T15:21:03.506Z","type":"message"}
{"nick":"bradleymeck","message":"but ideally they should be given the policy from the main thread instead of a new fs read?","date":"2019-01-23T15:21:20.614Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: idk, depends on how you implemented the feature","date":"2019-01-23T15:21:36.345Z","type":"message"}
{"nick":"bradleymeck","message":"it is loaded up during bootstrapping in node.js","date":"2019-01-23T15:21:55.562Z","type":"message"}
{"nick":"addaleax","message":"then you’ll probably end up with one fs access per Worker, yes","date":"2019-01-23T15:22:08.129Z","type":"message"}
{"nick":"bradleymeck","message":"how could I avoid that?","date":"2019-01-23T15:22:51.217Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: i assume you could pass the parent’s manifest to the worker during its startup?","date":"2019-01-23T15:23:05.727Z","type":"message"}
{"nick":"bradleymeck","message":"possible, but would need to be careful about it","date":"2019-01-23T15:23:20.446Z","type":"message"}
{"nick":"bradleymeck","message":"since it is a sync read by nature, maybe we could do it in C++ instead?","date":"2019-01-23T15:23:46.248Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: we could, but what’s the advantage?","date":"2019-01-23T15:24:09.714Z","type":"message"}
{"nick":"addaleax","message":"doesn’t really have anything do to with async/sync, we can do both in c++ without issues","date":"2019-01-23T15:24:30.918Z","type":"message"}
{"nick":"yaelhe","date":"2019-01-23T15:24:31.006Z","type":"join"}
{"nick":"bradleymeck","message":"store the source text in C++ where JS can't mutate it / intercept it when passing to the worker","date":"2019-01-23T15:24:39.900Z","type":"message"}
{"nick":"bradleymeck","message":"addaleax: i'm not comfy adding async bootstraps to core's startup (someone w/ more exp might be)","date":"2019-01-23T15:25:10.593Z","type":"message"}
{"nick":"bradleymeck","message":"in C++(","date":"2019-01-23T15:25:20.038Z","type":"message"}
{"nick":"bradleymeck","message":"*","date":"2019-01-23T15:25:21.579Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: storing text in C++ just to make it less mutable sounds unnecessarily complicated … it’s not like we can’t do that in JS pretty well","date":"2019-01-23T15:25:49.500Z","type":"message"}
{"nick":"bradleymeck","message":"addaleax: the manifest even with all the boilerplate I added to harden it still has some problems","date":"2019-01-23T15:26:21.709Z","type":"message"}
{"nick":"bradleymeck","message":"our JS core is not robust against mutation","date":"2019-01-23T15:26:32.470Z","type":"message"}
{"nick":"bradleymeck","message":"i can imagine i will be finding odd ways to get to and mutate things for quite a while that affect the manifest in JS","date":"2019-01-23T15:27:31.377Z","type":"message"}
{"nick":"addaleax","message":"yes, but neither is our C++ code","date":"2019-01-23T15:27:43.214Z","type":"message"}
{"nick":"bradleymeck","message":"true, but if you can't load C++ addons that is greatly reduced","date":"2019-01-23T15:28:16.353Z","type":"message"}
{"nick":"joyee","message":"If you simply do not want JS to be able to hijack anything maybe storing the manifest in C++ and verifying it in C++ would make the whole thing more encapsulated","date":"2019-01-23T15:30:26.065Z","type":"message"}
{"nick":"bradleymeck","message":"possible to do so, but parsing stuff would be quite a bit of C++ comparatively","date":"2019-01-23T15:31:44.796Z","type":"message"}
{"nick":"bradleymeck","message":"right now i think ironing out what is leaking where is a bit higher, plugging the fs race for workers by passing it down purely in JS seems a fine first pass","date":"2019-01-23T15:32:31.523Z","type":"message"}
{"nick":"joyee","message":"The policy files should has a fixed schema right?","date":"2019-01-23T15:32:34.635Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: yes, but fields could be missing / might change over time (it is experimental and people on Realms calls that implemented similar files in past had to add breaking changes)","date":"2019-01-23T15:33:12.930Z","type":"message"}
{"nick":"bradleymeck","message":"anywho, i'll probably write up a test/PR for addaleax 's idea of just passing to the worker via JS back channel","date":"2019-01-23T15:34:39.072Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: we already pass a bunch of information to the worker threads in a first startup message, that seems like a good location to me","date":"2019-01-23T15:35:17.823Z","type":"message"}
{"nick":"bradleymeck","message":"eventually will want to look at spinning up workers with subset of perms of thread that spawns them","date":"2019-01-23T15:36:14.702Z","type":"message"}
{"nick":"addaleax","message":"bradleymeck: fwiw, that’s exactly what my PR back then did","date":"2019-01-23T15:37:03.577Z","type":"message"}
{"nick":"bradleymeck","message":"sounds like a good idea then ;p","date":"2019-01-23T15:37:35.221Z","type":"message"}
{"nick":"bradleymeck","message":"bnoordhuis seems to want more eyes on this stuff though, and I'd somewhat agree","date":"2019-01-23T15:38:05.464Z","type":"message"}
{"nick":"bradleymeck","message":"even in my calls w/ security wg / etc. few ppl are actually helping review and write tests","date":"2019-01-23T15:38:22.042Z","type":"message"}
{"nick":"bradleymeck","message":"this might have been caught with more eyes","date":"2019-01-23T15:38:44.617Z","type":"message"}
{"nick":"lundibundi","reason":"Ping timeout: 240 seconds","date":"2019-01-23T15:39:26.656Z","type":"quit"}
{"nick":"addaleax","message":"no, of course, more review and help would be great","date":"2019-01-23T15:39:37.464Z","type":"message"}
{"nick":"lundibundi","date":"2019-01-23T15:55:09.728Z","type":"join"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-01-23T15:58:43.618Z","type":"quit"}
{"nick":"bradleymeck","message":"addaleax: if i'm reading this right, userland can never invoke \"LOAD_SCRIPT\" messages after the worker starts up? though they might be able to manually send it over [kPort] since that is publicly accessible?","date":"2019-01-23T16:00:59.246Z","type":"message"}
{"nick":"dbevenius","date":"2019-01-23T16:03:46.641Z","type":"join"}
{"nick":"addaleax","message":"bradleymeck: yes, I think currently they could send it over [kPort] … I guess we should make sure that LOAD_SCRIPT is only handled once per Worker ever","date":"2019-01-23T16:05:04.204Z","type":"message"}
{"nick":"bradleymeck","message":"yea, i'm looking at points where ppl could punch around the worker and it seems like this might be a bit hard to properly send over","date":"2019-01-23T16:05:40.633Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-01-23T16:07:58.390Z","type":"quit"}
{"nick":"bradleymeck","message":"could still do it, and just leave it up to a different feature of hardened/frozen core instead","date":"2019-01-23T16:10:11.089Z","type":"message"}
{"nick":"bradleymeck","message":"but a lot is falling into that and symbols aren't helping","date":"2019-01-23T16:10:28.293Z","type":"message"}
{"nick":"bradleymeck","message":"right now integrities are mostly only guaranteeing that source texts that don't mutate the core are the proper integrity and once oyu mutate the core that goes away","date":"2019-01-23T16:11:40.654Z","type":"message"}
{"nick":"bradleymeck","message":"leaving hardening the core up to the user :-/","date":"2019-01-23T16:11:57.653Z","type":"message"}
{"nick":"bradleymeck","message":"or auditing everything to make sure it doesn't mutate the core","date":"2019-01-23T16:12:18.189Z","type":"message"}
{"nick":"lundibundi","reason":"Ping timeout: 250 seconds","date":"2019-01-23T16:12:24.480Z","type":"quit"}
{"nick":"joyee","message":"bradleymeck: how would you audit that? I kind of doubt if any real-world application can even run if the process object is frozen","date":"2019-01-23T16:16:46.797Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: most do run fine","date":"2019-01-23T16:17:03.709Z","type":"message"}
{"nick":"bradleymeck","message":"Realms people  / bloomberg are running huge amounts of npm on a frozen state of things","date":"2019-01-23T16:17:28.741Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/bmeck/tofu is an example of an audit helper","date":"2019-01-23T16:17:43.633Z","type":"message"}
{"nick":"bradleymeck","message":"but even with that, it isn't sane","date":"2019-01-23T16:17:52.932Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: what would you expect to break when `process` is frozen/read-only?","date":"2019-01-23T16:18:18.522Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: a fresh one that comes out today: https://github.com/nodejs/node/pull/25655","date":"2019-01-23T16:20:24.383Z","type":"message"}
{"nick":"joyee","message":"And this is an undocumented API","date":"2019-01-23T16:21:01.987Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: yup, some things will break","date":"2019-01-23T16:21:08.630Z","type":"message"}
{"nick":"bradleymeck","message":"but we could change those to be accessors","date":"2019-01-23T16:21:19.907Z","type":"message"}
{"nick":"bradleymeck","message":"and that fixes that","date":"2019-01-23T16:21:29.053Z","type":"message"}
{"nick":"bradleymeck","message":"or if we don't want to allow that undocumented kind of mutation of core, we tell them to propose alternatives","date":"2019-01-23T16:21:48.393Z","type":"message"}
{"nick":"bradleymeck","message":"breaking things doing dangerous things is the point","date":"2019-01-23T16:22:01.531Z","type":"message"}
{"nick":"bradleymeck","message":"you don't want the dangerous things","date":"2019-01-23T16:22:07.858Z","type":"message"}
{"nick":"bradleymeck","message":"(dangerous being used loosely here)","date":"2019-01-23T16:22:23.874Z","type":"message"}
{"nick":"bradleymeck","message":"so breaking stuff is ok to even good for a variety of things","date":"2019-01-23T16:22:43.073Z","type":"message"}
{"nick":"bradleymeck","message":"it exposes what kinds of mutations are being used and what hooks for those are missing","date":"2019-01-23T16:22:56.937Z","type":"message"}
{"nick":"bradleymeck","message":"changing a data property to a getter/setter can often work for things that are not problematic","date":"2019-01-23T16:23:22.741Z","type":"message"}
{"nick":"joyee","message":"If we can follow that logic, `new Buffer` is already removed","date":"2019-01-23T16:23:41.461Z","type":"message"}
{"nick":"bradleymeck","message":"mmmm?","date":"2019-01-23T16:23:49.288Z","type":"message"}
{"nick":"bradleymeck","message":"how","date":"2019-01-23T16:23:51.070Z","type":"message"}
{"nick":"joyee","message":"it's breaking things doing dangerous things","date":"2019-01-23T16:24:16.443Z","type":"message"}
{"nick":"dbevenius","date":"2019-01-23T16:24:23.979Z","type":"join"}
{"nick":"bradleymeck","message":"it isn't removed, since it still functions","date":"2019-01-23T16:24:36.428Z","type":"message"}
{"nick":"bradleymeck","message":"just breaking some problematic behavior doesn't remove the problem, so I don't understand","date":"2019-01-23T16:25:02.854Z","type":"message"}
{"nick":"bradleymeck","message":"s/breaking/preventing/","date":"2019-01-23T16:25:22.128Z","type":"message"}
{"nick":"joyee","message":"we could not remove it because it causes too much mayhem for users","date":"2019-01-23T16:28:09.392Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-01-23T16:28:52.548Z","type":"quit"}
{"nick":"bradleymeck","message":"yup, and so you opt-in to the breakage rather than applying it by default","date":"2019-01-23T16:28:57.177Z","type":"message"}
{"nick":"bradleymeck","message":"we can't fix the default case, but if you want to opt into something you have to do the migration","date":"2019-01-23T16:29:17.791Z","type":"message"}
{"nick":"bradleymeck","message":"same as any CSP like opt-in ppl do in browsers","date":"2019-01-23T16:29:28.633Z","type":"message"}
{"nick":"joyee","message":"But then you could also argue that since Node.js is versioned, upgrade is opt-in","date":"2019-01-23T16:31:55.009Z","type":"message"}
{"nick":"joyee","message":"So why could we not remove something on the master?","date":"2019-01-23T16:32:12.597Z","type":"message"}
{"nick":"bradleymeck","message":"yup, but we focus on backwards compat not security on master, this is actually a really good example of that","date":"2019-01-23T16:32:41.362Z","type":"message"}
{"nick":"bradleymeck","message":"where we are compromising on usability","date":"2019-01-23T16:32:47.990Z","type":"message"}
{"nick":"bradleymeck","message":"but opting into a mode that does not compromise allows much more things to be guaranteed","date":"2019-01-23T16:33:09.703Z","type":"message"}
{"nick":"bradleymeck","message":"which allows for better auditing and the ability for the runtime to help","date":"2019-01-23T16:33:19.962Z","type":"message"}
{"nick":"bradleymeck","message":"at the cost of usability","date":"2019-01-23T16:33:23.281Z","type":"message"}
{"nick":"bradleymeck","message":"browsers don't remove things that they move to CSP","date":"2019-01-23T16:33:35.811Z","type":"message"}
{"nick":"bradleymeck","message":"but CSP is still useful to mitigate all sorts of things","date":"2019-01-23T16:33:45.794Z","type":"message"}
{"nick":"joyee","message":"fair enough","date":"2019-01-23T16:34:30.149Z","type":"message"}
{"nick":"bradleymeck","message":"eval() has a ton of concerns in browsers, you opt-in to disabling it with https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src","date":"2019-01-23T16:34:32.383Z","type":"message"}
{"nick":"bradleymeck","message":"so you start from the secure standpoint and allow users to remove things for the sake of usability","date":"2019-01-23T16:34:52.471Z","type":"message"}
{"nick":"bradleymeck","message":"it is the user's choice to disable things","date":"2019-01-23T16:35:00.801Z","type":"message"}
{"nick":"devsnek","message":"yaelhe: feel free","date":"2019-01-23T16:40:02.308Z","type":"message"}
{"nick":"devsnek","message":"i left my code here if you want to use it https://github.com/devsnek/node/commits/feature/locks-api","date":"2019-01-23T16:40:31.506Z","type":"message"}
{"nick":"al-damiri","date":"2019-01-23T16:42:13.922Z","type":"join"}
{"nick":"dbevenius","date":"2019-01-23T16:47:50.246Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 240 seconds","date":"2019-01-23T16:52:26.695Z","type":"quit"}
{"nick":"yaelhe","message":"devsnek: is it currently in a state that it works (in your branch)?","date":"2019-01-23T16:58:47.891Z","type":"message"}
{"nick":"devsnek","message":"yaelhe: it works but it doesn't adhere to the spec","date":"2019-01-23T16:59:03.953Z","type":"message"}
{"nick":"devsnek","message":"lock processing needs to occur entirely in background threads","date":"2019-01-23T16:59:48.132Z","type":"message"}
{"nick":"devsnek","message":"currently it doesn't do that","date":"2019-01-23T16:59:51.828Z","type":"message"}
{"nick":"devsnek","message":"if you're not already there, #whatwg is a good place to hang out","date":"2019-01-23T17:00:22.747Z","type":"message"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-01-23T17:04:42.085Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T17:06:52.175Z","type":"join"}
{"nick":"dbevenius","date":"2019-01-23T17:08:59.340Z","type":"join"}
{"nick":"yaelhe","message":"devsnek: ok got it, I'll look into it tomorrow. might have some questions later :)","date":"2019-01-23T17:10:18.240Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-01-23T17:13:16.324Z","type":"quit"}
{"nick":"seishun","date":"2019-01-23T17:17:17.245Z","type":"join"}
{"nick":"dbevenius","date":"2019-01-23T17:24:34.675Z","type":"join"}
{"nick":"lundibundi","date":"2019-01-23T17:27:27.424Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 240 seconds","date":"2019-01-23T17:28:56.585Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T17:33:29.682Z","type":"join"}
{"nick":"julianduque","date":"2019-01-23T17:37:17.396Z","type":"join"}
{"nick":"antsmartian","date":"2019-01-23T17:48:34.528Z","type":"join"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-01-23T17:57:36.319Z","type":"quit"}
{"nick":"yaelhe","reason":"Ping timeout: 240 seconds","date":"2019-01-23T18:20:26.640Z","type":"quit"}
{"nick":"lundibundi","reason":"Remote host closed the connection","date":"2019-01-23T18:31:16.787Z","type":"quit"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-01-23T18:35:43.122Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T18:44:51.582Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-01-23T18:49:38.650Z","type":"quit"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-01-23T18:58:22.190Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T18:59:49.465Z","type":"join"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-01-23T19:05:48.306Z","type":"quit"}
{"nick":"AtumT_","date":"2019-01-23T19:12:00.749Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 244 seconds","date":"2019-01-23T19:13:02.351Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T19:15:38.045Z","type":"join"}
{"nick":"AtumT_","reason":"Ping timeout: 240 seconds","date":"2019-01-23T19:17:26.692Z","type":"quit"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-01-23T19:18:03.620Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T19:19:06.129Z","type":"join"}
{"nick":"gamelaster","date":"2019-01-23T19:22:03.935Z","type":"join"}
{"nick":"AtumT","reason":"Ping timeout: 246 seconds","date":"2019-01-23T19:38:24.041Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T19:44:05.691Z","type":"join"}
{"nick":"AtumT","reason":"Read error: Connection reset by peer","date":"2019-01-23T19:47:00.255Z","type":"quit"}
{"nick":"AtumT","date":"2019-01-23T19:47:14.989Z","type":"join"}
{"nick":"yaelhe","date":"2019-01-23T19:56:48.392Z","type":"join"}
{"nick":"dbevenius","date":"2019-01-23T20:03:18.602Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-01-23T20:07:42.476Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2019-01-23T20:19:05.868Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T21:04:12.349Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-01-23T21:08:46.350Z","type":"quit"}
{"nick":"yaelhe","reason":"Remote host closed the connection","date":"2019-01-23T21:59:43.968Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T22:04:23.700Z","type":"join"}
{"nick":"seishun","date":"2019-01-23T22:09:00.197Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 268 seconds","date":"2019-01-23T22:09:28.760Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 240 seconds","date":"2019-01-23T22:16:07.372Z","type":"quit"}
{"nick":"seishun","date":"2019-01-23T22:19:07.430Z","type":"join"}
{"nick":"bradleymeck","message":"the inspector grabbing stuff overly early seems odd","date":"2019-01-23T22:19:20.700Z","type":"message"}
{"nick":"dbevenius","date":"2019-01-23T22:24:21.317Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 250 seconds","date":"2019-01-23T22:25:04.450Z","type":"quit"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-01-23T22:28:48.346Z","type":"quit"}
{"nick":"bradleymeck","message":"joyee: any complaints if I made the `require` command line thing for the inspector a getter so it fires a lot later?","date":"2019-01-23T22:33:21.104Z","type":"message"}
{"nick":"bradleymeck","message":"i cannot tell where the inspector actually gets started up/needs it to exist at ...","date":"2019-01-23T22:34:55.972Z","type":"message"}
{"nick":"dbevenius","date":"2019-01-23T22:54:04.149Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 240 seconds","date":"2019-01-23T22:58:26.601Z","type":"quit"}
{"nick":"dbevenius","date":"2019-01-23T23:14:24.621Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 240 seconds","date":"2019-01-23T23:18:56.653Z","type":"quit"}
{"nick":"gamelaster","reason":"Ping timeout: 272 seconds","date":"2019-01-23T23:50:32.829Z","type":"quit"}
