{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-09-24T00:19:29.118Z","type":"quit"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-09-24T00:54:50.655Z","type":"quit"}
{"nick":"mgol","date":"2019-09-24T01:19:10.951Z","type":"join"}
{"nick":"mgol","reason":"Client Quit","date":"2019-09-24T01:21:38.993Z","type":"quit"}
{"nick":"mgol","date":"2019-09-24T01:37:08.522Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-09-24T01:44:56.971Z","type":"quit"}
{"nick":"kumavis","message":"i want to run node.js with fs write permissions deactivated. it would be nice to be able to do this via cli options. eg, controlling what builtin modules are available","date":"2019-09-24T02:59:19.152Z","type":"message"}
{"nick":"ricson","message":"ir","date":"2019-09-24T03:01:20.737Z","type":"message"}
{"nick":"ricson","message":"oops, typo","date":"2019-09-24T03:02:08.474Z","type":"message"}
{"nick":"AbedB__","date":"2019-09-24T03:28:50.853Z","type":"join"}
{"nick":"AbedB_","reason":"Ping timeout: 250 seconds","date":"2019-09-24T03:31:12.083Z","type":"quit"}
{"nick":"dashed","reason":"Quit: Connection closed for inactivity","date":"2019-09-24T03:57:25.733Z","type":"quit"}
{"nick":"early","reason":"Quit: Leaving","date":"2019-09-24T04:53:47.106Z","type":"quit"}
{"nick":"early","date":"2019-09-24T04:56:45.456Z","type":"join"}
{"nick":"AbedB_","date":"2019-09-24T04:59:47.039Z","type":"join"}
{"nick":"early`","date":"2019-09-24T05:00:09.705Z","type":"join"}
{"nick":"AbedB__","reason":"Ping timeout: 268 seconds","date":"2019-09-24T05:01:30.820Z","type":"quit"}
{"nick":"early","reason":"Ping timeout: 265 seconds","date":"2019-09-24T05:01:40.408Z","type":"quit"}
{"nick":"AbedB__","date":"2019-09-24T05:07:45.987Z","type":"join"}
{"nick":"AbedB_","reason":"Ping timeout: 276 seconds","date":"2019-09-24T05:11:18.295Z","type":"quit"}
{"nick":"sergiocrisostomo","reason":"Ping timeout: 276 seconds","date":"2019-09-24T05:15:11.695Z","type":"quit"}
{"nick":"sergiocrisostomo","date":"2019-09-24T05:21:25.742Z","type":"join"}
{"nick":"AbedB__","reason":"Remote host closed the connection","date":"2019-09-24T05:29:18.300Z","type":"quit"}
{"nick":"AbedB__","date":"2019-09-24T05:29:48.224Z","type":"join"}
{"nick":"AbedB__","reason":"Read error: Connection reset by peer","date":"2019-09-24T05:31:06.580Z","type":"quit"}
{"nick":"AbedB__","date":"2019-09-24T05:31:37.215Z","type":"join"}
{"nick":"AbedB__","reason":"Read error: Connection reset by peer","date":"2019-09-24T05:31:38.293Z","type":"quit"}
{"nick":"AbedB__","date":"2019-09-24T05:32:18.554Z","type":"join"}
{"nick":"AbedB__","reason":"Read error: Connection reset by peer","date":"2019-09-24T05:35:23.836Z","type":"quit"}
{"nick":"devsnek","message":"kumavis: you can just replace the fs write methods","date":"2019-09-24T06:44:32.948Z","type":"message"}
{"nick":"kumavis","message":"devsnek: you mean at runtime, yeah?","date":"2019-09-24T06:45:20.044Z","type":"message"}
{"nick":"devsnek","message":"mhm","date":"2019-09-24T06:45:29.767Z","type":"message"}
{"nick":"sergiocrisostomo","reason":"Ping timeout: 240 seconds","date":"2019-09-24T06:47:16.150Z","type":"quit"}
{"nick":"kumavis","message":"id considered it, it may be my only option besides os controls like ACL","date":"2019-09-24T06:49:55.123Z","type":"message"}
{"nick":"sergiocrisostomo","date":"2019-09-24T06:52:09.096Z","type":"join"}
{"nick":"AbedB__","date":"2019-09-24T07:36:22.665Z","type":"join"}
{"nick":"scott_gonzalez","reason":"Ping timeout: 245 seconds","date":"2019-09-24T08:43:24.438Z","type":"quit"}
{"nick":"scott_gonzalez","date":"2019-09-24T08:47:56.617Z","type":"join"}
{"nick":"AtumT","date":"2019-09-24T10:19:11.573Z","type":"join"}
{"nick":"AbedB__","reason":"Ping timeout: 265 seconds","date":"2019-09-24T11:52:00.475Z","type":"quit"}
{"nick":"howdoi","date":"2019-09-24T13:23:04.049Z","type":"join"}
{"nick":"antsmartian","date":"2019-09-24T13:38:16.088Z","type":"join"}
{"nick":"bradleymeck","message":"kumavis: you can use policies for this, but the UX isn't great to just disable builtins","date":"2019-09-24T13:55:55.738Z","type":"message"}
{"nick":"bradleymeck","message":"i talk about this in the security wg slack if you want to move over there about what you need exactly, if it is just disabling the ability to get a ref to `fs` thats a bit different from removing the `fs` bindings entirely from all the different ways it can be grabbed.","date":"2019-09-24T13:57:39.671Z","type":"message"}
{"nick":"bradleymeck","message":"either way, running in a OS level sandboxing mechanism is ideal","date":"2019-09-24T14:01:28.612Z","type":"message"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-09-24T14:33:23.809Z","type":"quit"}
{"nick":"antsmartian","date":"2019-09-24T14:48:12.635Z","type":"join"}
{"nick":"mmarchini","message":"I want to get some thoughts on the community about this tc39 proposal: https://github.com/tc39/proposal-function-implementation-hiding, what's the recommended repository to open an issue? core or TSC?","date":"2019-09-24T15:25:16.915Z","type":"message"}
{"nick":"ljharb","message":"mmarchini: node core/tsc already know about the proposals; what community are you hoping to get thoughts from?","date":"2019-09-24T15:26:08.170Z","type":"message"}
{"nick":"mmarchini","message":"core developers mostly, to understand how this proposal would be used in core and if there's anything we'd like to see","date":"2019-09-24T15:31:19.142Z","type":"message"}
{"nick":"mmarchini","message":"for example, I can see the proposal being useful to hide implementation details of internal core modules and bootstrap scripts. I can also see a desire to ensure we can easily observe functions with hidden implmenetation on some case (while working on core, when reporting stack traces to an external aggregator, etc.)","date":"2019-09-24T15:33:09.024Z","type":"message"}
{"nick":"joyee","message":"There is https://github.com/nodejs/open-standards but not many people subscribe to that","date":"2019-09-24T15:34:16.487Z","type":"message"}
{"nick":"joyee","message":"Maybe opening an issue there with another issue about this in the core repo to get traction? But then the scope of this seems small enough to be just discussed in core","date":"2019-09-24T15:35:03.646Z","type":"message"}
{"nick":"mmarchini","message":"I think I'll open in core, seems to make sense","date":"2019-09-24T15:36:22.720Z","type":"message"}
{"nick":"joyee","message":"I remember Ben (?) or other people raising concerns about blackboxing internals in stack traces or devtools by default, since that may make bug reports less useful, so it would be good to get their opinions on this","date":"2019-09-24T15:36:37.267Z","type":"message"}
{"nick":"ljharb","message":"mmarchini: all core functions are already hidden, aren’t they?","date":"2019-09-24T15:36:46.948Z","type":"message"}
{"nick":"ljharb","message":"in terms of toString at least, if not stack traces","date":"2019-09-24T15:37:01.577Z","type":"message"}
{"nick":"joyee","message":"ljharb: the internals implemented in JS are not hidden.","date":"2019-09-24T15:37:23.771Z","type":"message"}
{"nick":"ljharb","message":"but either way it’d be fine for the debugger or the repl to be able to pierce the hiding; it’s only at runtime it’d be mandated","date":"2019-09-24T15:37:27.058Z","type":"message"}
{"nick":"joyee","message":"And they are in the majority I would say","date":"2019-09-24T15:37:32.191Z","type":"message"}
{"nick":"ljharb","message":"joyee: ah, gotcha","date":"2019-09-24T15:37:33.964Z","type":"message"}
{"nick":"joyee","message":"It's also intentional that we don't uglify the JS sources or strip the debug symbols out of binary","date":"2019-09-24T15:38:02.064Z","type":"message"}
{"nick":"mmarchini","message":"@ljharb yes, repl and devtools should be fine. I'm worried about the \"runtime it'd be mandated\" since this ignores production observability","date":"2019-09-24T15:38:25.021Z","type":"message"}
{"nick":"joyee","message":"Even though that makes the binary much bigger than the essentials","date":"2019-09-24T15:38:26.168Z","type":"message"}
{"nick":"ljharb","message":"for debugging core?","date":"2019-09-24T15:38:26.978Z","type":"message"}
{"nick":"joyee","message":"Yes, for better bug reports especially","date":"2019-09-24T15:38:38.243Z","type":"message"}
{"nick":"ljharb","message":"mmarchini: you control the code that runs; if you want it to be observable, you wouldn’t be hiding the impl","date":"2019-09-24T15:38:48.195Z","type":"message"}
{"nick":"joyee","message":"Also to lower the bar to contribute","date":"2019-09-24T15:38:55.292Z","type":"message"}
{"nick":"ljharb","message":"mmarchini: and users can already do that for toString it’s `.bind()` or closures","date":"2019-09-24T15:39:06.703Z","type":"message"}
{"nick":"mmarchini","message":"yes, but if core hides the implementation and we hit a bug in core, it can get harder to file a bug","date":"2019-09-24T15:39:13.775Z","type":"message"}
{"nick":"mmarchini","message":"same thing goes for dependencies","date":"2019-09-24T15:39:20.674Z","type":"message"}
{"nick":"ljharb","message":"in my experience the internal stack trace in node has never been anything but massively confusing and useless","date":"2019-09-24T15:39:33.113Z","type":"message"}
{"nick":"ljharb","message":"as a user, i mean","date":"2019-09-24T15:39:37.459Z","type":"message"}
{"nick":"ljharb","message":"it actually undermines my confidence in the platform.","date":"2019-09-24T15:39:47.537Z","type":"message"}
{"nick":"devsnek","message":"personally I would not want node hiding implementations","date":"2019-09-24T15:39:52.095Z","type":"message"}
{"nick":"mmarchini","message":"I agree, most users won't want to see internals","date":"2019-09-24T15:39:53.785Z","type":"message"}
{"nick":"ljharb","message":"i shouldn’t see internals of the platform I’m using.","date":"2019-09-24T15:39:58.235Z","type":"message"}
{"nick":"mmarchini","message":"but some will","date":"2019-09-24T15:39:58.235Z","type":"message"}
{"nick":"devsnek","message":"we already decorate stacks to make node internals dark grey","date":"2019-09-24T15:40:14.536Z","type":"message"}
{"nick":"ljharb","message":"mmarchini: node can always have a flag that bypasses the hiding somehow, assuming v8 allows that","date":"2019-09-24T15:40:14.999Z","type":"message"}
{"nick":"ljharb","message":"devsnek: not everyone uses colored log output/terminals,","date":"2019-09-24T15:40:27.203Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2019-09-24T15:40:32.841Z","type":"message"}
{"nick":"mmarchini","message":"@ljhard agreed, I'd love to see that proposal with a flag from V8 to ignore it if wanted","date":"2019-09-24T15:40:55.558Z","type":"message"}
{"nick":"joyee","message":"I had a PR trying to provide a way to blackbox all the internals in the DevTools but stalled due to breakages in error stack traces - since it was implemented through special URL schemes","date":"2019-09-24T15:40:55.648Z","type":"message"}
{"nick":"devsnek","message":"I can definitely say though that bug reporting would get a lot harder","date":"2019-09-24T15:41:01.558Z","type":"message"}
{"nick":"ljharb","message":"mmarchini: that wouldn’t be part of the proposal tho; that’s entirely out of scope","date":"2019-09-24T15:41:08.272Z","type":"message"}
{"nick":"ljharb","message":"mmarchini: file a v8 bug for that one","date":"2019-09-24T15:41:16.894Z","type":"message"}
{"nick":"mmarchini","message":"I know :+1:","date":"2019-09-24T15:41:29.016Z","type":"message"}
{"nick":"joyee","message":"Yang mentioned that idea (a special Script type) before, though we need extra plumbing to make it work with DevTools","date":"2019-09-24T15:43:03.474Z","type":"message"}
{"nick":"joyee","message":"https://github.com/nodejs/node/issues/11893","date":"2019-09-24T15:43:52.758Z","type":"message"}
{"nick":"joyee","message":"This was the issue","date":"2019-09-24T15:43:55.484Z","type":"message"}
{"nick":"devsnek","message":"V8 used to have a special script type back when it had js internals","date":"2019-09-24T15:44:01.930Z","type":"message"}
{"nick":"devsnek","message":"it marked all the js functions as native","date":"2019-09-24T15:44:14.636Z","type":"message"}
{"nick":"joyee","message":"I think if it's possible, using `node-internals://` or some sort of special scheme still seems easier to use than special script types - user land modules can also easily use this to distinguish internal frames","date":"2019-09-24T15:45:20.340Z","type":"message"}
{"nick":"joyee","message":"But then compatibility (shrug)","date":"2019-09-24T15:45:38.541Z","type":"message"}
{"nick":"devsnek","message":"in esm we use `node:`","date":"2019-09-24T15:45:45.704Z","type":"message"}
{"nick":"devsnek","message":"which can be devtools blackboxed","date":"2019-09-24T15:45:51.678Z","type":"message"}
{"nick":"joyee","message":"Yeah ESM all has origins (opaque ones though) while scripts are all without origin","date":"2019-09-24T15:48:45.963Z","type":"message"}
{"nick":"joyee","message":"But we can't switch to ESM internally any time soon","date":"2019-09-24T15:48:58.818Z","type":"message"}
