{"nick":"dbevenius","date":"2019-04-20T00:01:07.074Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T00:05:35.985Z","type":"quit"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-04-20T00:08:00.903Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T00:21:11.147Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-04-20T00:25:58.350Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T00:42:16.987Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T00:46:54.066Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T01:03:17.873Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-20T01:07:44.836Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T01:21:25.099Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-20T01:25:57.167Z","type":"quit"}
{"nick":"antsmartian","date":"2019-04-20T01:35:04.166Z","type":"join"}
{"nick":"zsoc","reason":"Ping timeout: 245 seconds","date":"2019-04-20T02:21:18.390Z","type":"quit"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-04-20T02:23:57.186Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T02:32:21.906Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-20T02:37:00.789Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T02:52:27.028Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T02:59:53.997Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T03:15:55.122Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-20T04:19:12.155Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T04:37:26.335Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T04:41:52.283Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T04:53:25.137Z","type":"join"}
{"nick":"lpin","date":"2019-04-20T04:56:29.450Z","type":"join"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-04-20T04:57:13.564Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T04:57:26.328Z","type":"join"}
{"nick":"dbeveniu_","date":"2019-04-20T05:22:12.067Z","type":"join"}
{"nick":"dbevenius","reason":"Read error: Connection reset by peer","date":"2019-04-20T05:22:12.179Z","type":"quit"}
{"nick":"dbeveniu_","reason":"Remote host closed the connection","date":"2019-04-20T06:54:47.329Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T07:03:30.644Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-04-20T07:07:56.350Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T07:41:46.352Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T07:46:19.279Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T08:11:34.417Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 268 seconds","date":"2019-04-20T08:16:30.701Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T08:34:29.286Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T08:38:49.350Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T08:52:50.134Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-20T09:00:00.083Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T09:23:51.995Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T09:28:23.999Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T10:22:50.748Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 268 seconds","date":"2019-04-20T10:27:51.752Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T10:43:57.089Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T10:48:11.993Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T10:57:21.167Z","type":"join"}
{"nick":"lundibundi","date":"2019-04-20T11:23:38.157Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T11:30:40.289Z","type":"quit"}
{"nick":"lundibundi","reason":"Remote host closed the connection","date":"2019-04-20T11:39:02.185Z","type":"quit"}
{"nick":"zeds","date":"2019-04-20T11:51:52.814Z","type":"join"}
{"nick":"dbevenius","date":"2019-04-20T11:56:53.267Z","type":"join"}
{"nick":"zeds","date":"2019-04-20T11:59:59.359Z","type":"part"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T12:01:28.263Z","type":"quit"}
{"nick":"lundibundi","date":"2019-04-20T12:09:47.421Z","type":"join"}
{"nick":"dbevenius","date":"2019-04-20T12:52:57.887Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-20T12:57:32.778Z","type":"quit"}
{"nick":"antsmartian","date":"2019-04-20T13:03:13.460Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 246 seconds","date":"2019-04-20T13:33:52.340Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T13:53:02.014Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-20T13:57:20.772Z","type":"quit"}
{"nick":"zsoc","date":"2019-04-20T14:02:45.624Z","type":"join"}
{"nick":"dbevenius","date":"2019-04-20T14:21:45.350Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-04-20T14:26:35.351Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T14:43:02.776Z","type":"join"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-04-20T14:43:17.572Z","type":"quit"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-20T14:47:36.789Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T15:43:05.082Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-20T15:47:42.120Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T16:01:51.348Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-04-20T16:06:18.348Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T16:22:03.276Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T16:26:25.269Z","type":"quit"}
{"nick":"devsnek","message":"mhdawson__: addaleax: would changing this to a static const be acceptable? i believe it would then become usable from rust bindgen and such https://github.com/nodejs/node-addon-api/blob/98161970c9a3c2aee1a4a0aaf57ae920ec215edb/src/node_api.h#L103","date":"2019-04-20T16:39:09.220Z","type":"message"}
{"nick":"addaleax","message":"devsnek: that should be acceptable-ish in terms of ABI compatibility… but you can also hardcode the value in rust entirely, because it’s guaranteed to be constant","date":"2019-04-20T16:41:42.752Z","type":"message"}
{"nick":"devsnek","message":"i suppose so, but copying is kinda nasty","date":"2019-04-20T16:42:02.521Z","type":"message"}
{"nick":"addaleax","message":"like, the one thing it could break is conflicting with local variables of that name","date":"2019-04-20T16:42:11.344Z","type":"message"}
{"nick":"addaleax","message":"but that seems super unlikely","date":"2019-04-20T16:42:13.947Z","type":"message"}
{"nick":"addaleax","message":"copying is fine for this kind of thing","date":"2019-04-20T16:42:59.558Z","type":"message"}
{"nick":"addaleax","message":"the value is guaranteed to remain the same forever :)","date":"2019-04-20T16:43:13.397Z","type":"message"}
{"nick":"devsnek","message":"this makes me very sad","date":"2019-04-20T16:43:36.001Z","type":"message"}
{"nick":"devsnek","message":"addaleax: is moving this down correct? https://www.irccloud.com/pastebin/YESIudCv/thing.diff","date":"2019-04-20T16:44:58.788Z","type":"message"}
{"nick":"addaleax","message":"devsnek: yes, but NAPI_EXTERN isn’t","date":"2019-04-20T16:45:34.786Z","type":"message"}
{"nick":"addaleax","message":"you specifically don’t want to introduce new visible symbols","date":"2019-04-20T16:45:58.597Z","type":"message"}
{"nick":"devsnek","message":"c symbols remain a mystery to me","date":"2019-04-20T16:46:01.741Z","type":"message"}
{"nick":"devsnek","message":"doesn't it have to be visible to be usable","date":"2019-04-20T16:46:13.487Z","type":"message"}
{"nick":"addaleax","message":"devsnek: no, it should only be available in the current compilation unit and be inlined there","date":"2019-04-20T16:46:51.739Z","type":"message"}
{"nick":"devsnek","message":"i see","date":"2019-04-20T16:46:59.643Z","type":"message"}
{"nick":"addaleax","message":"`NAPI_EXTERN` is basically only for things that we want to export from the `node` binary","date":"2019-04-20T16:47:51.113Z","type":"message"}
{"nick":"devsnek","message":"oh and then the static const can happen entirely from the header","date":"2019-04-20T16:48:24.628Z","type":"message"}
{"nick":"addaleax","message":"yes, exactly","date":"2019-04-20T16:52:10.235Z","type":"message"}
{"nick":"addaleax","message":"kind of like an inline function","date":"2019-04-20T16:52:13.668Z","type":"message"}
{"nick":"devsnek","message":"i've been out of the c game for too long","date":"2019-04-20T16:53:24.832Z","type":"message"}
{"nick":"devsnek","message":"have you used rust at all","date":"2019-04-20T16:53:30.859Z","type":"message"}
{"nick":"addaleax","message":"not really, although i’d like to :D","date":"2019-04-20T16:54:56.455Z","type":"message"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-04-20T16:55:10.372Z","type":"quit"}
{"nick":"devsnek","message":"i was exploring using it within core via some napi bindings","date":"2019-04-20T16:56:09.550Z","type":"message"}
{"nick":"devsnek","message":"but i never found something where we could do it without v8 bindings too","date":"2019-04-20T16:56:18.450Z","type":"message"}
{"nick":"addaleax","message":"devsnek: wouldn’t you want to modify the upstream definition in nodejs/node first?","date":"2019-04-20T16:57:17.156Z","type":"message"}
{"nick":"devsnek","message":"uhhhhh","date":"2019-04-20T16:57:22.829Z","type":"message"}
{"nick":"devsnek","message":"i have no idea","date":"2019-04-20T16:57:24.971Z","type":"message"}
{"nick":"devsnek","message":"i thought node-addon-api was the upstream","date":"2019-04-20T16:57:32.801Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-04-20T16:57:35.802Z","type":"message"}
{"nick":"addaleax","message":"it is not","date":"2019-04-20T16:57:36.995Z","type":"message"}
{"nick":"addaleax","message":":D","date":"2019-04-20T16:57:38.579Z","type":"message"}
{"nick":"devsnek","message":"good to know","date":"2019-04-20T16:57:43.611Z","type":"message"}
{"nick":"devsnek","message":"addaleax: also, do you know i can do the atomic replacement of the sigsegv_prev thing","date":"2019-04-20T17:00:48.545Z","type":"message"}
{"nick":"devsnek","message":"std::atomic::exchange is saying std::atomic isn't a thing even though i included atomic :(","date":"2019-04-20T17:01:21.002Z","type":"message"}
{"nick":"addaleax","message":"devsnek: you need std::atomic<Type>::exchange, and Type needs to be something for which this is defined (in partiular, not a function pointer but probably just a regular one)?","date":"2019-04-20T17:03:59.725Z","type":"message"}
{"nick":"devsnek","message":"interesting","date":"2019-04-20T17:04:16.624Z","type":"message"}
{"nick":"devsnek","message":"hmm atomic<sigaction> doesn't work","date":"2019-04-20T17:04:46.002Z","type":"message"}
{"nick":"addaleax","message":"right, because sigaction is not a pointer or number type","date":"2019-04-20T17:04:58.989Z","type":"message"}
{"nick":"addaleax","message":"atomic<sigaction*> should work, otoh","date":"2019-04-20T17:05:11.691Z","type":"message"}
{"nick":"devsnek","message":"do i have to take a reference to the static struct when i pass it in then","date":"2019-04-20T17:05:37.717Z","type":"message"}
{"nick":"devsnek","message":"actually that makes a lot of sense","date":"2019-04-20T17:05:51.322Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-04-20T17:05:57.056Z","type":"message"}
{"nick":"devsnek","message":"addaleax: someone told me they think that pr breaks the abi","date":"2019-04-20T17:15:01.596Z","type":"message"}
{"nick":"dbevenius","date":"2019-04-20T17:22:09.336Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-04-20T17:26:43.529Z","type":"quit"}
{"nick":"octetcloud","reason":"Ping timeout: 246 seconds","date":"2019-04-20T17:31:24.057Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T17:46:14.346Z","type":"join"}
{"nick":"addaleax","message":"devsnek: yeah i don’t think so? it changes something that is inlined into the calling code into something that is inlined into the calling code","date":"2019-04-20T18:18:37.968Z","type":"message"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-04-20T18:49:20.553Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T18:51:55.159Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-20T18:56:15.146Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T19:39:18.298Z","type":"join"}
{"nick":"octetcloud","date":"2019-04-20T19:43:14.069Z","type":"join"}
{"nick":"lundibundi","date":"2019-04-20T19:44:17.954Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T20:12:31.258Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T20:34:35.137Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-20T20:39:18.114Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 250 seconds","date":"2019-04-20T20:47:42.798Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T20:52:54.311Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-04-20T21:00:28.355Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T21:12:25.107Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-04-20T21:17:06.100Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T21:31:32.776Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 268 seconds","date":"2019-04-20T21:36:19.853Z","type":"quit"}
{"nick":"octetcloud","reason":"Ping timeout: 268 seconds","date":"2019-04-20T21:38:10.880Z","type":"quit"}
{"nick":"early","reason":"Quit: Leaving","date":"2019-04-20T21:51:22.593Z","type":"quit"}
{"nick":"dbevenius","date":"2019-04-20T21:53:10.922Z","type":"join"}
{"nick":"early","date":"2019-04-20T21:54:13.346Z","type":"join"}
{"nick":"early","reason":"Remote host closed the connection","date":"2019-04-20T21:55:42.801Z","type":"quit"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-04-20T21:57:54.890Z","type":"quit"}
{"nick":"early","date":"2019-04-20T21:58:50.097Z","type":"join"}
{"nick":"devsnek","message":"addaleax: do external arraybuffers take ownership of the data within them, or do you have to do some form of cleanup","date":"2019-04-20T21:58:55.455Z","type":"message"}
{"nick":"addaleax","message":"devsnek: externalized ArrayBuffers are those which aren’t owned by the JS engine, so, you are expected to do manual cleanup as the embedder/addon/etc.","date":"2019-04-20T22:00:24.818Z","type":"message"}
{"nick":"devsnek","message":"addaleax: so should i like, attach a persistent with a finalizer callback to the arraybuffer?","date":"2019-04-20T22:00:45.206Z","type":"message"}
{"nick":"addaleax","message":"devsnek: that’s exactly what Buffer::New() with a custom release function does, yes","date":"2019-04-20T22:01:11.666Z","type":"message"}
{"nick":"devsnek","message":"hmmm","date":"2019-04-20T22:01:25.108Z","type":"message"}
{"nick":"devsnek","message":"alternatively, is it possible to resize the data of a v8-owned arraybuffer","date":"2019-04-20T22:01:44.838Z","type":"message"}
{"nick":"devsnek","message":"i guess the only reason i'm doing external data is that i might need to resize it","date":"2019-04-20T22:02:31.774Z","type":"message"}
{"nick":"addaleax","message":"devsnek: pretty much “no”, I would think","date":"2019-04-20T22:03:36.816Z","type":"message"}
{"nick":"addaleax","message":"V8 doesn’t have an API for moving the pointer for the backing store","date":"2019-04-20T22:03:49.003Z","type":"message"}
{"nick":"addaleax","message":"which would at least be necessary when increasing the size","date":"2019-04-20T22:03:58.456Z","type":"message"}
{"nick":"devsnek","message":"oh damn napi's arraybuffer api has a callback option built into it","date":"2019-04-20T22:04:02.089Z","type":"message"}
{"nick":"addaleax","message":"devsnek: does that mean your problems are solved? :P","date":"2019-04-20T22:06:27.232Z","type":"message"}
{"nick":"devsnek","message":"addaleax: it seems so, thanks though","date":"2019-04-20T22:06:35.156Z","type":"message"}
{"nick":"addaleax","message":"one thing we can do through the V8 API is to neuter an ArrayBuffer, realloc() and create a new one, but I don’t think that’s expose through N-API","date":"2019-04-20T22:06:49.518Z","type":"message"}
{"nick":"devsnek","message":"well basically what i'm doing is decompressing some zstd buffer, then returning a new arraybuffer with the decompressed bytes","date":"2019-04-20T22:07:33.497Z","type":"message"}
{"nick":"devsnek","message":"but decompression sometimes involves realloc'ing the destination buffer","date":"2019-04-20T22:07:45.842Z","type":"message"}
{"nick":"addaleax","message":"devsnek: are you able to “just” create the ArrayBuffer instance after decompression is done? that’s probably the easiest way to do this","date":"2019-04-20T22:09:59.784Z","type":"message"}
{"nick":"devsnek","message":"yeah i am","date":"2019-04-20T22:10:10.520Z","type":"message"}
{"nick":"devsnek","message":"i was just concerned about the external data hanging around","date":"2019-04-20T22:10:22.833Z","type":"message"}
{"nick":"devsnek","message":"seems reasonable https://github.com/devsnek/node-zstd/blob/master/src/addon.cc#L32-L52","date":"2019-04-20T22:10:58.806Z","type":"message"}
{"nick":"addaleax","message":"devsnek: yeah, sure","date":"2019-04-20T22:13:12.570Z","type":"message"}
{"nick":"dbevenius","date":"2019-04-20T22:13:20.331Z","type":"join"}
{"nick":"addaleax","message":"also … this might point out an issue with N-API :/","date":"2019-04-20T22:13:43.409Z","type":"message"}
{"nick":"devsnek","message":"addaleax: what issue?","date":"2019-04-20T22:14:11.301Z","type":"message"}
{"nick":"devsnek","message":"honestly i'm really happy with how painless napi made making this","date":"2019-04-20T22:15:03.013Z","type":"message"}
{"nick":"devsnek","message":"not having to unbox weird pointers to get this->stream_ is fantastic","date":"2019-04-20T22:15:39.198Z","type":"message"}
{"nick":"addaleax","message":"devsnek: `napi_create_arraybuffer()` always creates an internalized ArrayBuffer, so it’s handled through the `ArrayBuffer::Allocator`, which in Node’s case uses `malloc()`/`free()` by default, but some embedders (e.g. Electron) use a different one which would crash when trying to free a `malloc()`ed buffer :|","date":"2019-04-20T22:15:39.557Z","type":"message"}
{"nick":"addaleax","message":"I think we should probably standardize on `malloc()`/`free()`, but, ouch","date":"2019-04-20T22:16:01.282Z","type":"message"}
{"nick":"devsnek","message":"oh that's interesting","date":"2019-04-20T22:16:01.610Z","type":"message"}
{"nick":"devsnek","message":"good thing i'm not using jemalloc i guess lol","date":"2019-04-20T22:16:55.288Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T22:17:49.301Z","type":"quit"}
{"nick":"addaleax","message":"devsnek: ok, sorry, I misread `napi_create_arraybuffer()` – it doesn’t accept an input pointer, it just allocates an `ArrayBuffer` and returns the pointer to the data which was allocated through V8","date":"2019-04-20T22:20:59.386Z","type":"message"}
{"nick":"addaleax","message":"so N-API doesn’t seem broken after all :P","date":"2019-04-20T22:21:05.728Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-04-20T22:21:07.814Z","type":"message"}
{"nick":"devsnek","message":"good to hear","date":"2019-04-20T22:21:11.246Z","type":"message"}
{"nick":"devsnek","message":"apparently zstd can be trained to become faster by feeding it bits of example data","date":"2019-04-20T22:21:36.191Z","type":"message"}
{"nick":"dbevenius","date":"2019-04-20T23:12:17.089Z","type":"join"}
{"nick":"shree","date":"2019-04-20T23:15:45.075Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-04-20T23:16:41.826Z","type":"quit"}
{"nick":"octetcloud","date":"2019-04-20T23:17:16.403Z","type":"join"}
{"nick":"dbevenius","date":"2019-04-20T23:32:21.124Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-04-20T23:36:47.996Z","type":"quit"}
