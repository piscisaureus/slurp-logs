{"nick":"mritunjay","reason":"Ping timeout: 256 seconds","date":"2018-10-03T00:00:51.176Z","type":"quit"}
{"nick":"niftylettuce","reason":"Quit: Connection closed for inactivity","date":"2018-10-03T00:02:01.813Z","type":"quit"}
{"nick":"marthinal","date":"2018-10-03T00:14:36.657Z","type":"join"}
{"nick":"nix","date":"2018-10-03T00:18:30.689Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 268 seconds","date":"2018-10-03T00:19:17.351Z","type":"quit"}
{"nick":"slacker_nlhn","date":"2018-10-03T00:19:23.824Z","type":"join"}
{"nick":"slacker_nlhn","reason":"Remote host closed the connection","date":"2018-10-03T00:22:01.975Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2018-10-03T00:32:49.405Z","type":"quit"}
{"nick":"nand1Rl","date":"2018-10-03T00:39:36.064Z","type":"join"}
{"nick":"nand1Rl","reason":"Remote host closed the connection","date":"2018-10-03T00:39:44.303Z","type":"quit"}
{"nick":"devsnek","message":"TimothyGu: the parser for URLSearchParams and URL is marked as having side effects","date":"2018-10-03T02:36:13.807Z","type":"message"}
{"nick":"dotdotug","date":"2018-10-03T02:36:50.117Z","type":"join"}
{"nick":"devsnek","message":"but aren't the side effects just modifying the parsing context, which is the entire point of the parser","date":"2018-10-03T02:36:51.453Z","type":"message"}
{"nick":"dotdotug","reason":"Ping timeout: 244 seconds","date":"2018-10-03T02:45:36.437Z","type":"quit"}
{"nick":"boneskull","message":"joyee: yes, `req->result` is nonzero.  yet `req->path` is present in e.g., `uv_fs_mkdir` regardless of whether or not the result is an error","date":"2018-10-03T02:56:18.585Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: yes, that's a side effect","date":"2018-10-03T02:57:12.187Z","type":"message"}
{"nick":"devsnek","message":"TimothyGu: sorry i should rephrase","date":"2018-10-03T02:57:27.050Z","type":"message"}
{"nick":"TimothyGu","message":"also URLSearchParams is in JavaScript so we can't change anything","date":"2018-10-03T02:57:31.821Z","type":"message"}
{"nick":"devsnek","message":"yeah its a side effect but the way its used isn't destructive right?","date":"2018-10-03T02:57:44.223Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: doesn't matter","date":"2018-10-03T02:57:53.225Z","type":"message"}
{"nick":"devsnek","message":"muh devtools autocomplete","date":"2018-10-03T02:58:04.533Z","type":"message"}
{"nick":"boneskull","message":"joyee: so if I can't get the `path` from the `req`, nor can I capture the variable, I'll need to store it somewhere else.  but honestly it seems broken that `path` is null","date":"2018-10-03T02:58:43.433Z","type":"message"}
{"nick":"jonssonssG","date":"2018-10-03T03:16:31.994Z","type":"join"}
{"nick":"jonssonssG","reason":"K-Lined","date":"2018-10-03T03:18:05.999Z","type":"quit"}
{"nick":"nix","reason":"Ping timeout: 252 seconds","date":"2018-10-03T03:27:08.685Z","type":"quit"}
{"nick":"marthinal","date":"2018-10-03T04:15:04.996Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 272 seconds","date":"2018-10-03T04:19:54.904Z","type":"quit"}
{"nick":"howdoi","date":"2018-10-03T04:27:23.679Z","type":"join"}
{"nick":"marthinal","date":"2018-10-03T04:48:47.093Z","type":"join"}
{"nick":"lpin","date":"2018-10-03T05:08:10.430Z","type":"join"}
{"nick":"lpin","reason":"Read error: Connection reset by peer","date":"2018-10-03T05:20:29.983Z","type":"quit"}
{"nick":"lundibundi","date":"2018-10-03T05:25:40.113Z","type":"join"}
{"nick":"CheezhZ","date":"2018-10-03T05:26:39.560Z","type":"join"}
{"nick":"CheezhZ","reason":"Remote host closed the connection","date":"2018-10-03T05:29:43.619Z","type":"quit"}
{"nick":"macdicemB","date":"2018-10-03T05:29:59.046Z","type":"join"}
{"nick":"lundibundi","reason":"Read error: Connection reset by peer","date":"2018-10-03T05:34:45.185Z","type":"quit"}
{"nick":"macdicemB","reason":"Remote host closed the connection","date":"2018-10-03T05:36:18.356Z","type":"quit"}
{"nick":"chaomi","date":"2018-10-03T05:42:05.271Z","type":"join"}
{"nick":"raindev_","date":"2018-10-03T05:42:54.867Z","type":"join"}
{"nick":"raindev_","reason":"Remote host closed the connection","date":"2018-10-03T05:48:44.040Z","type":"quit"}
{"nick":"chaomi","reason":"Remote host closed the connection","date":"2018-10-03T05:57:11.226Z","type":"quit"}
{"nick":"BridgeAR","date":"2018-10-03T07:05:28.959Z","type":"join"}
{"nick":"ShaRose_","date":"2018-10-03T07:12:18.604Z","type":"join"}
{"nick":"lanceball_","date":"2018-10-03T07:17:26.319Z","type":"join"}
{"nick":"ExoticEmu","reason":"*.net *.split","date":"2018-10-03T07:19:30.366Z","type":"quit"}
{"nick":"ShaRose","reason":"*.net *.split","date":"2018-10-03T07:19:30.366Z","type":"quit"}
{"nick":"ryzokuken","reason":"*.net *.split","date":"2018-10-03T07:19:30.366Z","type":"quit"}
{"nick":"joepie91","reason":"*.net *.split","date":"2018-10-03T07:19:30.662Z","type":"quit"}
{"nick":"othiym23","reason":"*.net *.split","date":"2018-10-03T07:19:30.663Z","type":"quit"}
{"nick":"wa7son","reason":"*.net *.split","date":"2018-10-03T07:19:30.663Z","type":"quit"}
{"nick":"littledan","reason":"*.net *.split","date":"2018-10-03T07:19:30.811Z","type":"quit"}
{"nick":"lanceball","reason":"*.net *.split","date":"2018-10-03T07:19:30.811Z","type":"quit"}
{"nick":"ShaRose_","new_nick":"ShaRose","date":"2018-10-03T07:19:31.107Z","type":"nick"}
{"nick":"m00dy","date":"2018-10-03T07:29:25.841Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T07:32:42.517Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T07:32:42.666Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T07:32:42.666Z","type":"quit"}
{"nick":"ExoticEmu","date":"2018-10-03T07:32:46.831Z","type":"join"}
{"nick":"ryzokuken","date":"2018-10-03T07:32:46.980Z","type":"join"}
{"nick":"joepie91","date":"2018-10-03T07:32:46.980Z","type":"join"}
{"nick":"wa7son","date":"2018-10-03T07:32:46.980Z","type":"join"}
{"nick":"othiym23","date":"2018-10-03T07:32:46.980Z","type":"join"}
{"nick":"littledan","date":"2018-10-03T07:32:46.980Z","type":"join"}
{"nick":"m00dy","date":"2018-10-03T07:34:30.539Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T07:34:33.170Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T07:34:45.523Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T07:39:51.407Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T07:41:39.268Z","type":"join"}
{"nick":"ExoticEmu","reason":"*.net *.split","date":"2018-10-03T08:13:56.105Z","type":"quit"}
{"nick":"ryzokuken","reason":"*.net *.split","date":"2018-10-03T08:13:56.253Z","type":"quit"}
{"nick":"joepie91","reason":"*.net *.split","date":"2018-10-03T08:13:56.367Z","type":"quit"}
{"nick":"wa7son","reason":"*.net *.split","date":"2018-10-03T08:13:56.367Z","type":"quit"}
{"nick":"othiym23","reason":"*.net *.split","date":"2018-10-03T08:13:56.368Z","type":"quit"}
{"nick":"littledan","reason":"*.net *.split","date":"2018-10-03T08:13:56.368Z","type":"quit"}
{"nick":"seishun","date":"2018-10-03T08:14:41.334Z","type":"join"}
{"nick":"ryanpetrellomr","date":"2018-10-03T08:17:22.162Z","type":"join"}
{"nick":"onculayn","date":"2018-10-03T08:18:54.507Z","type":"join"}
{"nick":"onculayn","reason":"Remote host closed the connection","date":"2018-10-03T08:25:17.482Z","type":"quit"}
{"nick":"ExoticEmu","date":"2018-10-03T08:27:19.180Z","type":"join"}
{"nick":"ryzokuken","date":"2018-10-03T08:27:19.870Z","type":"join"}
{"nick":"joepie91","date":"2018-10-03T08:27:19.871Z","type":"join"}
{"nick":"wa7son","date":"2018-10-03T08:27:19.871Z","type":"join"}
{"nick":"othiym23","date":"2018-10-03T08:27:19.871Z","type":"join"}
{"nick":"littledan","date":"2018-10-03T08:27:19.871Z","type":"join"}
{"nick":"ryanpetrellomr","reason":"Ping timeout: 252 seconds","date":"2018-10-03T08:27:36.899Z","type":"quit"}
{"nick":"ExoticEmu","reason":"*.net *.split","date":"2018-10-03T08:51:30.181Z","type":"quit"}
{"nick":"ryzokuken","reason":"*.net *.split","date":"2018-10-03T08:51:30.182Z","type":"quit"}
{"nick":"joepie91","reason":"*.net *.split","date":"2018-10-03T08:51:30.308Z","type":"quit"}
{"nick":"wa7son","reason":"*.net *.split","date":"2018-10-03T08:51:30.308Z","type":"quit"}
{"nick":"othiym23","reason":"*.net *.split","date":"2018-10-03T08:51:30.308Z","type":"quit"}
{"nick":"littledan","reason":"*.net *.split","date":"2018-10-03T08:51:30.456Z","type":"quit"}
{"nick":"joyee","message":"boneskull: IIUC, you mean that `req->path` is null when `req->result != 0`?","date":"2018-10-03T09:00:51.550Z","type":"message"}
{"nick":"joyee","message":"That's the contract of the API, it goes like `if (req->result == 0) { use(req->path); }`","date":"2018-10-03T09:01:29.553Z","type":"message"}
{"nick":"joyee","message":"Or `if (req->result != 0) { handleError(); } else { use (req->path); }`","date":"2018-10-03T09:02:06.676Z","type":"message"}
{"nick":"joyee","message":"req->path will always be there since it's C++ (well, C to be exact since libuv is in C)","date":"2018-10-03T09:02:39.015Z","type":"message"}
{"nick":"joyee","message":"(Correct me if I am wrong) but you probably were expecting an exception? We do not use C++ exception by the way, it's either error codes (C/libuv) or V8 Maybes(C++)","date":"2018-10-03T09:05:06.934Z","type":"message"}
{"nick":"ExoticEmu","date":"2018-10-03T09:05:09.698Z","type":"join"}
{"nick":"ryzokuken","date":"2018-10-03T09:05:09.846Z","type":"join"}
{"nick":"joepie91","date":"2018-10-03T09:05:09.846Z","type":"join"}
{"nick":"wa7son","date":"2018-10-03T09:05:09.846Z","type":"join"}
{"nick":"othiym23","date":"2018-10-03T09:05:09.847Z","type":"join"}
{"nick":"littledan","date":"2018-10-03T09:05:09.847Z","type":"join"}
{"nick":"Guest4","date":"2018-10-03T09:30:09.038Z","type":"join"}
{"nick":"Guest4","reason":"Client Quit","date":"2018-10-03T09:32:32.210Z","type":"quit"}
{"nick":"xeroksue","date":"2018-10-03T09:59:38.298Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T10:03:15.411Z","type":"quit"}
{"nick":"xeroksue","reason":"Remote host closed the connection","date":"2018-10-03T10:05:36.674Z","type":"quit"}
{"nick":"lpin","date":"2018-10-03T10:28:55.748Z","type":"join"}
{"nick":"joyee","message":"How many special `node::ReplacementForV8OrUvTypes` like `node::Persistent` `node::Mutex``node:: ConditionVariable` do we have..?","date":"2018-10-03T10:44:53.101Z","type":"message"}
{"nick":"m00dy","date":"2018-10-03T10:49:51.237Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T11:02:51.216Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T11:03:42.313Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T11:06:23.650Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T11:08:14.263Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T11:11:55.957Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T11:12:44.259Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 244 seconds","date":"2018-10-03T11:20:12.436Z","type":"quit"}
{"nick":"seishun","date":"2018-10-03T11:36:58.062Z","type":"join"}
{"nick":"simplefiedNP","date":"2018-10-03T11:37:01.727Z","type":"join"}
{"nick":"simplefiedNP","reason":"Remote host closed the connection","date":"2018-10-03T11:38:28.949Z","type":"quit"}
{"nick":"nix_","date":"2018-10-03T11:39:11.571Z","type":"join"}
{"nick":"troido","date":"2018-10-03T12:21:30.548Z","type":"join"}
{"nick":"troido","reason":"Ping timeout: 268 seconds","date":"2018-10-03T12:28:48.384Z","type":"quit"}
{"nick":"joyee","message":"Thinking out load: I am thinking about using k-means to organize the sessions, and then use something else to figure out a way to avoid having people miss sessions that they are interested in","date":"2018-10-03T12:29:58.206Z","type":"message"}
{"nick":"AtumT","date":"2018-10-03T12:39:36.719Z","type":"join"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-10-03T12:52:52.756Z","type":"quit"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T13:23:13.513Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T13:32:09.284Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2018-10-03T13:36:48.358Z","type":"quit"}
{"nick":"joyee","message":"BridgeAR: https://ci.nodejs.org/job/node-test-commit-linux/nodes=alpine-last-latest-x64/22059/console I think this is what I've talked with you about the cutoff issue in assert","date":"2018-10-03T13:38:44.973Z","type":"message"}
{"nick":"joyee","message":"https://www.irccloud.com/pastebin/lqSGY9cX/","date":"2018-10-03T13:39:02.264Z","type":"message"}
{"nick":"lanceball_","date":"2018-10-03T13:41:09.785Z","type":"part"}
{"nick":"joyee","message":"hmm, probably not a cutoff, but it looks weird, the expected in the stack trace doesn't seem to match the one in the source","date":"2018-10-03T13:41:12.807Z","type":"message"}
{"nick":"lanceball","date":"2018-10-03T13:42:01.112Z","type":"join"}
{"nick":"lanceball","reason":"Changing host","date":"2018-10-03T13:42:41.570Z","type":"quit"}
{"nick":"lanceball","date":"2018-10-03T13:42:41.719Z","type":"join"}
{"nick":"marthinal","date":"2018-10-03T13:51:27.121Z","type":"join"}
{"nick":"BridgeAR","message":"joyee: it's showing the full diff. The main issue here is that the color detection seems wrong","date":"2018-10-03T13:53:37.162Z","type":"message"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T13:56:51.020Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T13:58:04.202Z","type":"join"}
{"nick":"hspYJ","date":"2018-10-03T14:16:04.959Z","type":"join"}
{"nick":"hspYJ","reason":"K-Lined","date":"2018-10-03T14:17:06.856Z","type":"quit"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T14:25:46.255Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T14:27:50.584Z","type":"join"}
{"nick":"listenpreis_","date":"2018-10-03T14:28:13.364Z","type":"join"}
{"nick":"listenpreis_","reason":"Remote host closed the connection","date":"2018-10-03T14:29:02.445Z","type":"quit"}
{"nick":"lpin","reason":"Read error: Connection reset by peer","date":"2018-10-03T14:34:46.352Z","type":"quit"}
{"nick":"doodadjs","date":"2018-10-03T14:57:22.132Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T15:19:10.510Z","type":"quit"}
{"nick":"m00dy","date":"2018-10-03T15:21:53.468Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 272 seconds","date":"2018-10-03T15:28:04.957Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 252 seconds","date":"2018-10-03T15:52:05.975Z","type":"quit"}
{"nick":"al-damiri","date":"2018-10-03T15:53:21.307Z","type":"join"}
{"nick":"knikollaAF","date":"2018-10-03T15:55:44.062Z","type":"join"}
{"nick":"knikollaAF","reason":"Remote host closed the connection","date":"2018-10-03T15:56:48.773Z","type":"quit"}
{"nick":"seishun","date":"2018-10-03T16:12:44.663Z","type":"join"}
{"nick":"AranelNn","date":"2018-10-03T16:14:56.204Z","type":"join"}
{"nick":"AranelNn","reason":"Killed (Sigyn (Spam is off topic on freenode.))","date":"2018-10-03T16:17:32.042Z","type":"quit"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-10-03T16:19:28.458Z","type":"quit"}
{"nick":"marthinal","date":"2018-10-03T16:19:54.775Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 252 seconds","date":"2018-10-03T16:24:12.581Z","type":"quit"}
{"nick":"azrdevBs","date":"2018-10-03T16:32:29.110Z","type":"join"}
{"nick":"azrdevBs","reason":"Remote host closed the connection","date":"2018-10-03T16:38:14.534Z","type":"quit"}
{"nick":"marthinal","date":"2018-10-03T17:03:59.061Z","type":"join"}
{"nick":"nix_","reason":"Ping timeout: 252 seconds","date":"2018-10-03T17:09:18.580Z","type":"quit"}
{"nick":"addaleax","message":"devsnek: do you know what the status on BigInt in the buffer API is? I know there have been issues/PRs but it’s hard to keep track of","date":"2018-10-03T17:14:11.394Z","type":"message"}
{"nick":"devsnek","message":"addaleax: I'm not quite sure","date":"2018-10-03T17:17:02.843Z","type":"message"}
{"nick":"devsnek","message":"iirc there were two prs","date":"2018-10-03T17:17:07.144Z","type":"message"}
{"nick":"devsnek","message":"one of them was fairly far along","date":"2018-10-03T17:17:12.038Z","type":"message"}
{"nick":"addaleax","message":"was that https://github.com/nodejs/node/pull/22746 ?","date":"2018-10-03T17:19:38.580Z","type":"message"}
{"nick":"devsnek","message":"no it was another one","date":"2018-10-03T17:21:19.947Z","type":"message"}
{"nick":"devsnek","message":"I think we should just wait until we start using dataview","date":"2018-10-03T17:21:41.422Z","type":"message"}
{"nick":"devsnek","message":"new design etc","date":"2018-10-03T17:21:56.602Z","type":"message"}
{"nick":"addaleax","message":"okay, I trust you on that","date":"2018-10-03T17:22:25.717Z","type":"message"}
{"nick":"addaleax","message":"would be nice to have that feature in, tho :) and you mentioned there that dataview is faster now in V8 7.0?","date":"2018-10-03T17:22:42.674Z","type":"message"}
{"nick":"devsnek","message":"addaleax: 70 or 71 uhhh sec","date":"2018-10-03T17:23:40.470Z","type":"message"}
{"nick":"devsnek","message":"oh wait they might have backported it all the way to 6.9","date":"2018-10-03T17:24:56.130Z","type":"message"}
{"nick":"devsnek","message":"tracking features in v8 is so hard :(","date":"2018-10-03T17:25:07.555Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: the relevant crbug would usually have info","date":"2018-10-03T17:25:50.878Z","type":"message"}
{"nick":"TimothyGu","message":"on which branch it's backported to","date":"2018-10-03T17:25:55.744Z","type":"message"}
{"nick":"devsnek","message":"TimothyGu: i'm trying to track that down rn","date":"2018-10-03T17:26:07.470Z","type":"message"}
{"nick":"zeds","date":"2018-10-03T17:31:08.971Z","type":"join"}
{"nick":"m00dy","date":"2018-10-03T17:34:09.300Z","type":"join"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-10-03T17:46:28.563Z","type":"quit"}
{"nick":"okapia","date":"2018-10-03T17:47:29.071Z","type":"join"}
{"nick":"zeds","date":"2018-10-03T17:51:35.748Z","type":"part"}
{"nick":"okapia","reason":"Remote host closed the connection","date":"2018-10-03T17:53:51.533Z","type":"quit"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-10-03T18:49:31.730Z","type":"quit"}
{"nick":"Sail0rqb","date":"2018-10-03T19:02:26.788Z","type":"join"}
{"nick":"Sail0rqb","reason":"Remote host closed the connection","date":"2018-10-03T19:03:37.591Z","type":"quit"}
{"nick":"nix_","date":"2018-10-03T19:06:43.973Z","type":"join"}
{"nick":"boneskull","message":"joyee: what I need to do in case of `req->result != 0` is another operation on the `path`","date":"2018-10-03T19:07:53.449Z","type":"message"}
{"nick":"boneskull","message":"joyee: but if it's *expected* that `req->path` is null, then that helps answer my question about what needs to happen","date":"2018-10-03T19:08:46.371Z","type":"message"}
{"nick":"Sundiver","date":"2018-10-03T19:12:39.023Z","type":"join"}
{"nick":"boneskull","message":"joyee: it appears that a null `path` in case of nonzero result *is not* the expected behavior of `uv_fs_mkdir`, which is confusing me.","date":"2018-10-03T19:12:56.554Z","type":"message"}
{"nick":"Sundiver","reason":"Remote host closed the connection","date":"2018-10-03T19:14:38.275Z","type":"quit"}
{"nick":"boneskull","message":"joyee: in https://github.com/nodejs/node/blob/master/src/node_file.cc#L1321, `req->path` is *not* null, even if `req->result` is nonzero.","date":"2018-10-03T19:15:08.630Z","type":"message"}
{"nick":"BridgeAR","message":"devsnek: dataviews got optimized in 6.9 and they continued to optimize it in 7.0","date":"2018-10-03T19:17:55.073Z","type":"message"}
{"nick":"BridgeAR","message":"We can definitely see how that performs. Relatively recently there was an attempt to do that and it turned out to regress performance significantly","date":"2018-10-03T19:18:44.422Z","type":"message"}
{"nick":"boneskull","message":"joyee: wait.. maybe I'm misunderstanding you: \"req->path will always be there since it's C++ (well, C to be exact since libuv is in C)\". `req->path` is `null` here","date":"2018-10-03T19:18:45.737Z","type":"message"}
{"nick":"devsnek","message":"BridgeAR: yeah","date":"2018-10-03T19:18:50.202Z","type":"message"}
{"nick":"devsnek","message":"the change i was specifically looking for actually got reverted a few days ago so","date":"2018-10-03T19:18:51.481Z","type":"message"}
{"nick":"boneskull","message":"joyee: err `nullptr` sorry","date":"2018-10-03T19:18:58.660Z","type":"message"}
{"nick":"devsnek","message":"we might want to wait a little longer","date":"2018-10-03T19:18:58.970Z","type":"message"}
{"nick":"BridgeAR","message":"Yeah. I think we should get BigInt support using TypedArrays and then see if it's possible to reduce the code base / improve the performance with dataviews","date":"2018-10-03T19:20:03.014Z","type":"message"}
{"nick":"devsnek","message":"we should just deprecate buffer and make people use data views exclusively :(","date":"2018-10-03T19:20:46.616Z","type":"message"}
{"nick":"BridgeAR","message":"There are a couple of nice functions build into Buffer and moving away from it would break the whole ecosystem","date":"2018-10-03T19:22:38.723Z","type":"message"}
{"nick":"zeds1","date":"2018-10-03T19:24:53.359Z","type":"join"}
{"nick":"zeds1","date":"2018-10-03T19:24:58.390Z","type":"part"}
{"nick":"BridgeAR","message":"https://github.com/nodejs/node/pull/19691 this one actually seems in a fine state","date":"2018-10-03T19:30:51.309Z","type":"message"}
{"nick":"renchapYf","date":"2018-10-03T19:31:11.505Z","type":"join"}
{"nick":"marthinal","date":"2018-10-03T19:32:38.068Z","type":"join"}
{"nick":"devsnek","message":"BridgeAR: i definitely think we should allow variable byte length for bigint","date":"2018-10-03T19:33:31.481Z","type":"message"}
{"nick":"devsnek","message":"we could have fast paths for 32, 64, etc","date":"2018-10-03T19:33:50.828Z","type":"message"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-10-03T19:35:59.910Z","type":"quit"}
{"nick":"BridgeAR","message":"I agree","date":"2018-10-03T19:36:04.534Z","type":"message"}
{"nick":"renchapYf","reason":"Read error: Connection reset by peer","date":"2018-10-03T19:37:31.614Z","type":"quit"}
{"nick":"doodadjs","reason":"Ping timeout: 252 seconds","date":"2018-10-03T19:47:29.989Z","type":"quit"}
{"nick":"zeds","date":"2018-10-03T19:47:37.290Z","type":"join"}
{"nick":"zeds","date":"2018-10-03T19:50:40.528Z","type":"part"}
{"nick":"BridgeAR","message":"devsnek: I was not aware that you would want to _only_ add the variable ones. I guess you want to add the fath path transparent to the user?","date":"2018-10-03T19:51:28.834Z","type":"message"}
{"nick":"devsnek","message":"BridgeAR: yeah i think the alternative would just be a poor api","date":"2018-10-03T19:51:44.667Z","type":"message"}
{"nick":"devsnek","message":"readBigUint(64) vs readBigUint64()","date":"2018-10-03T19:52:05.081Z","type":"message"}
{"nick":"BridgeAR","message":"I personally like the explicit ones due to the explicit name and having a number as argument is not very obvious to every reader","date":"2018-10-03T19:52:07.498Z","type":"message"}
{"nick":"devsnek","message":"i think more thought needs to go into this then","date":"2018-10-03T19:52:39.913Z","type":"message"}
{"nick":"devsnek","message":"having both at the same time seems like a poor choice","date":"2018-10-03T19:52:53.808Z","type":"message"}
{"nick":"BridgeAR","message":"And we also have the offset","date":"2018-10-03T19:52:57.675Z","type":"message"}
{"nick":"devsnek","message":"i don't disagree that random numbers are bad","date":"2018-10-03T19:54:00.739Z","type":"message"}
{"nick":"BridgeAR","message":"It is the current API for the non BigInt versions and when I checked modules about it: they all use the explicit version, not the dynamic one","date":"2018-10-03T19:54:12.768Z","type":"message"}
{"nick":"devsnek","message":"yeah because its only like five methods","date":"2018-10-03T19:54:45.330Z","type":"message"}
{"nick":"devsnek","message":"bigints are (theoretically) arbitrary length","date":"2018-10-03T19:54:55.038Z","type":"message"}
{"nick":"BridgeAR","message":"Correct. But most users only use a single version in their code","date":"2018-10-03T19:55:27.212Z","type":"message"}
{"nick":"devsnek","message":"we're not dealing with the number type here, we're dealing with something new","date":"2018-10-03T19:55:30.210Z","type":"message"}
{"nick":"BridgeAR","message":"So what alternatives do we have? readBigUInt(offset, byteLength); readBigUInt({ offset, byteLength }); readBigUint64(offset); (and when having the write functions, we have to add a value)","date":"2018-10-03T19:57:48.869Z","type":"message"}
{"nick":"BridgeAR","message":"Another thing that I would like to have is a somewhat coherent API. So even though BigInt is new, it should still feel similar to the old one.","date":"2018-10-03T19:59:09.194Z","type":"message"}
{"nick":"devsnek","message":"I'm fine with having two number params","date":"2018-10-03T19:59:47.181Z","type":"message"}
{"nick":"devsnek","message":"i agree it's ambiguous but I don't think it's enough to disqualify it","date":"2018-10-03T20:00:26.217Z","type":"message"}
{"nick":"BridgeAR","message":"It's three with the write operation: writeBigU?Int(value, offset, byteLength)","date":"2018-10-03T20:01:03.043Z","type":"message"}
{"nick":"devsnek","message":"if you're not working with 8/16/32/64(/128?) bits though you need to use the other function anyway","date":"2018-10-03T20:02:40.357Z","type":"message"}
{"nick":"BridgeAR","message":"But thinking about it... just adding 64 is somewhat arbitrary since we'd also need BigInt functions for all other versions","date":"2018-10-03T20:02:51.608Z","type":"message"}
{"nick":"devsnek","message":"so let's just bikeshed that api instead","date":"2018-10-03T20:03:05.047Z","type":"message"}
{"nick":"BridgeAR","message":"Yes, you convinced me. It's best to only add those","date":"2018-10-03T20:03:29.449Z","type":"message"}
{"nick":"BridgeAR","message":"(the dynamic ones)","date":"2018-10-03T20:03:37.056Z","type":"message"}
{"nick":"devsnek","message":"woo","date":"2018-10-03T20:03:37.204Z","type":"message"}
{"nick":"seishun","message":"I guess 64 is much more common than all other lengths though","date":"2018-10-03T20:03:44.275Z","type":"message"}
{"nick":"BridgeAR","message":"That is probably true but it would be the only \"special\" BigInt one. And that seems somewhat arbitrary","date":"2018-10-03T20:04:15.120Z","type":"message"}
{"nick":"seishun","message":"DataView has (get|set)Big[U]Int64 in the proposal. Do you think it's wrong too?","date":"2018-10-03T20:06:48.661Z","type":"message"}
{"nick":"BridgeAR","message":"Let's make a small poll and see what others think","date":"2018-10-03T20:07:43.864Z","type":"message"}
{"nick":"devsnek","message":"seishun: i was just trying to find that","date":"2018-10-03T20:08:39.288Z","type":"message"}
{"nick":"devsnek","message":"got a link?","date":"2018-10-03T20:08:42.386Z","type":"message"}
{"nick":"seishun","message":"https://github.com/tc39/proposal-bigint","date":"2018-10-03T20:08:50.172Z","type":"message"}
{"nick":"devsnek","message":"is it in an issue or something?","date":"2018-10-03T20:09:11.527Z","type":"message"}
{"nick":"devsnek","message":"its not part of the official proposal","date":"2018-10-03T20:09:14.759Z","type":"message"}
{"nick":"seishun","message":"is it not? https://tc39.github.io/proposal-bigint/#sec-dataview.prototype.getbigint64","date":"2018-10-03T20:09:32.761Z","type":"message"}
{"nick":"ljharb","message":"typed arrays are arbitrary all over the place already","date":"2018-10-03T20:09:41.184Z","type":"message"}
{"nick":"devsnek","message":"mfw readme doesn't mention this","date":"2018-10-03T20:10:09.121Z","type":"message"}
{"nick":"devsnek","message":"seishun: from reading through this a bit more it seems like its just there to match the existence of the new TypedArray subclasses","date":"2018-10-03T20:13:03.246Z","type":"message"}
{"nick":"marthinal","date":"2018-10-03T20:14:09.528Z","type":"join"}
{"nick":"BridgeAR","message":"devsnek: does it hurt to add this even if we add the dynamical ones?","date":"2018-10-03T20:15:02.852Z","type":"message"}
{"nick":"devsnek","message":"BridgeAR: i'm feeling a bit more meh about this knowing that those dataview methods exist","date":"2018-10-03T20:15:32.654Z","type":"message"}
{"nick":"marthinal","reason":"Ping timeout: 245 seconds","date":"2018-10-03T20:18:23.328Z","type":"quit"}
{"nick":"doodadjs","date":"2018-10-03T20:24:05.837Z","type":"join"}
{"nick":"samf88WI","date":"2018-10-03T20:30:26.543Z","type":"join"}
{"nick":"samf88WI","reason":"Remote host closed the connection","date":"2018-10-03T20:33:43.770Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-10-03T21:22:13.398Z","type":"quit"}
{"nick":"marthinal","date":"2018-10-03T21:47:28.592Z","type":"join"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-10-03T22:04:03.968Z","type":"quit"}
{"nick":"AKPWD","reason":"Remote host closed the connection","date":"2018-10-03T22:07:29.797Z","type":"quit"}
{"nick":"AKPWD","date":"2018-10-03T22:07:41.388Z","type":"join"}
{"nick":"joyee","message":"boneskull: libuv will try to copy your path into req->path and there is no guarantee that the allocation will succeed, for example if it  fails to copy req->path could be null while the result is nonzero","date":"2018-10-03T22:19:12.832Z","type":"message"}
{"nick":"marthinal","date":"2018-10-03T22:19:34.403Z","type":"join"}
{"nick":"joyee","message":"I just got told about about a bunch of tales re. timing attacks against BigInt from my coworkers who are implementing and optimizing them in the JS engines...so I am somewhat skeptical about accepting BigInt in some APIs","date":"2018-10-03T22:22:29.058Z","type":"message"}
{"nick":"marthinal","reason":"Ping timeout: 246 seconds","date":"2018-10-03T22:23:43.254Z","type":"quit"}
{"nick":"joyee","message":"It’s not going to be a big deal to use it for timestamps and non-crypto calculations, but to accept buffers with BigInts....is probably going to be subtle","date":"2018-10-03T22:26:42.958Z","type":"message"}
{"nick":"boneskull","message":" joyee: thanks.  how should I guard against this?","date":"2018-10-03T22:28:28.193Z","type":"message"}
{"nick":"joyee","message":"boneskull: if you don’t really need the path, you can also skip stuff if it’s null","date":"2018-10-03T22:30:01.849Z","type":"message"}
{"nick":"joyee","message":"If you do, probably just wrap it in a class somewhere?","date":"2018-10-03T22:30:41.364Z","type":"message"}
{"nick":"boneskull","message":"okay, thanks","date":"2018-10-03T22:31:00.511Z","type":"message"}
{"nick":"joyee","message":"I am on the phone so don’t quite remember, but you should be able to get some custom data back out from the req","date":"2018-10-03T22:31:33.568Z","type":"message"}
{"nick":"BridgeAR","reason":"Ping timeout: 252 seconds","date":"2018-10-03T22:36:53.987Z","type":"quit"}
{"nick":"boneskull","message":"joyee: yes we have a `continuation_data` prop, which allows us to persist some stuff between async calls. this was created for the `mkdir -p` implementation, which needs to make _n_ calls into libuv, which is seemingly a new thing.  `rm -rf`, which I'm working on, needs to do something similar.  so I can use this object to store my path... though I'm not sure how to clean up after myself.","date":"2018-10-03T22:46:55.833Z","type":"message"}
{"nick":"boneskull","message":"joyee: I would have a `last_path` prop, which would always point to the last path I'm working on, but that prop's value will change over time.  right now its a std::string but maybe that's not the best to use here","date":"2018-10-03T22:48:11.824Z","type":"message"}
{"nick":"boneskull","message":"joyee: my last major experience with C++ was the classes I took in 1999.","date":"2018-10-03T22:49:07.405Z","type":"message"}
{"nick":"t0dd1v","date":"2018-10-03T23:19:13.302Z","type":"join"}
