{"nick":"dbevenius","date":"2019-02-22T00:08:24.915Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-22T00:12:52.808Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-22T01:07:27.884Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-22T01:11:48.792Z","type":"quit"}
{"nick":"neo4","date":"2019-02-22T01:20:54.526Z","type":"join"}
{"nick":"dbevenius","date":"2019-02-22T02:01:34.313Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-22T02:05:58.457Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-22T02:17:23.999Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-02-22T02:21:51.073Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-22T02:37:34.749Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-02-22T02:42:02.690Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-22T02:57:14.036Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-02-22T03:01:45.086Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-22T03:17:30.279Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-22T03:22:14.596Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-22T03:30:25.370Z","type":"join"}
{"nick":"zsocw","date":"2019-02-22T03:48:00.224Z","type":"join"}
{"nick":"zsoc","reason":"Disconnected by services","date":"2019-02-22T03:48:00.335Z","type":"quit"}
{"nick":"zsocw","reason":"Ping timeout: 246 seconds","date":"2019-02-22T03:56:28.333Z","type":"quit"}
{"nick":"wawasho","message":"names","date":"2019-02-22T04:00:33.526Z","type":"message"}
{"nick":"wawasho","message":"oops :)","date":"2019-02-22T04:00:49.737Z","type":"message"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-22T04:10:14.100Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-22T04:10:29.024Z","type":"join"}
{"nick":"not-an-aardvark","date":"2019-02-22T04:18:02.738Z","type":"join"}
{"nick":"not-an-aardvark","message":"I'm asking with the expectation that we could never do it for compatibility reasons, but how much of the ecosystem would break if Node ran `delete Object.prototype.__proto__` as part of its bootstrapping code?","date":"2019-02-22T04:21:14.512Z","type":"message"}
{"nick":"not-an-aardvark","message":"This would effectively prevent all \"prototype pollution\" attacks where some code forgets to account for `__proto__` in an untrusted object and gets tricked into modifying `Object.prototype`, or gets confused and sets the type of an object to something else. It also wouldn't violate the ES spec since `__proto__` is in Annex B and Node isn't a browser.","date":"2019-02-22T04:23:32.770Z","type":"message"}
{"nick":"howdoi","date":"2019-02-22T04:44:05.128Z","type":"join"}
{"nick":"ljharb","message":"not-an-aardvark: most of annex b is pretty defacto required anyways, but i'm not sure about that one","date":"2019-02-22T04:51:52.468Z","type":"message"}
{"nick":"ljharb","message":"not-an-aardvark: but also i think Object.prototype's [[Prototype]] is immutable now in the spec","date":"2019-02-22T04:52:21.164Z","type":"message"}
{"nick":"ljharb","message":"not-an-aardvark: see https://tc39.github.io/ecma262/#sec-immutable-prototype-exotic-objects and https://tc39.github.io/ecma262/#sec-properties-of-the-object-prototype-object","date":"2019-02-22T04:53:01.597Z","type":"message"}
{"nick":"ljharb","message":"not-an-aardvark: iow, all browsers, and node via v8, already will be doing that.","date":"2019-02-22T04:53:09.352Z","type":"message"}
{"nick":"not-an-aardvark","message":"It's not possible to do `Object.setPrototypeOf(Object.prototype, something)` but you can still modify or delete properties of `Object.prototype` itself.","date":"2019-02-22T04:53:20.412Z","type":"message"}
{"nick":"ljharb","message":"sure, but your suggestion wouldn't change that","date":"2019-02-22T04:54:49.978Z","type":"message"}
{"nick":"ljharb","message":"many things rely on modifying Object.prototype","date":"2019-02-22T04:55:06.469Z","type":"message"}
{"nick":"ljharb","message":"including es6-shim and core-js","date":"2019-02-22T04:55:12.163Z","type":"message"}
{"nick":"ljharb","message":"any symbol sham has to modify Object.prototype, eg.","date":"2019-02-22T04:55:26.531Z","type":"message"}
{"nick":"not-an-aardvark","message":"The thing it's trying to prevent is code that accesses a user-provided key on a user-provided object, then sets it to a user-provided value.","date":"2019-02-22T04:56:28.262Z","type":"message"}
{"nick":"ljharb","message":"right but __proto__ is immutable per the spec","date":"2019-02-22T04:57:16.376Z","type":"message"}
{"nick":"not-an-aardvark","message":"This works fine (and is common in deep-merge algorithms) unless the user-provided key is the string `__proto__`, in which case your application has a security vulnerability because network attackers can send JSON objects that modify `Object.prototype`.","date":"2019-02-22T04:57:18.024Z","type":"message"}
{"nick":"ljharb","message":"that's the attack","date":"2019-02-22T04:57:18.365Z","type":"message"}
{"nick":"ljharb","message":"hmm","date":"2019-02-22T04:57:34.934Z","type":"message"}
{"nick":"ljharb","message":"i'm a bit confused","date":"2019-02-22T04:57:55.170Z","type":"message"}
{"nick":"ljharb","message":"how does a vivified json object with a __proto__ of Object.prototype cause modification of Object.prototype?","date":"2019-02-22T04:58:23.756Z","type":"message"}
{"nick":"not-an-aardvark","message":"So if I want to deep-merge the object `{}` with a user-provided object, and the user provides `JSON.parse('{\"__proto__\": {\"foo\": \"bar\"}}')`","date":"2019-02-22T04:59:03.424Z","type":"message"}
{"nick":"not-an-aardvark","message":"Then my deep-merge function might access the `__proto__` property of `{}`, and add a `foo` property on the result with the value `bar`.","date":"2019-02-22T04:59:36.170Z","type":"message"}
{"nick":"ljharb","message":"aha, right","date":"2019-02-22T04:59:43.375Z","type":"message"}
{"nick":"ljharb","message":"lol i've fixed this CVE in like 4 libraries, i just spaced it","date":"2019-02-22T04:59:55.310Z","type":"message"}
{"nick":"not-an-aardvark","message":"(Lodash had this problem a few months ago, also see https://hackerone.com/reports/310443 )","date":"2019-02-22T04:59:57.273Z","type":"message"}
{"nick":"ljharb","message":"ok so, how would `delete Object.prototype.__proto__` fix that?","date":"2019-02-22T05:00:19.937Z","type":"message"}
{"nick":"not-an-aardvark","message":"Then when you access the `__proto__` property of `{}`, you get undefined rather than `Object.prototype`","date":"2019-02-22T05:00:41.856Z","type":"message"}
{"nick":"ljharb","message":"i don't think that's true","date":"2019-02-22T05:01:09.294Z","type":"message"}
{"nick":"ljharb","message":"`Object.prototype.__proto__` is the [[Prototype]] of Object.prototype itself, and it's null","date":"2019-02-22T05:01:25.785Z","type":"message"}
{"nick":"not-an-aardvark","message":"`Object.prototype.__proto__` is a getter that calls `Object.getPrototypeOf(this)`.","date":"2019-02-22T05:01:32.004Z","type":"message"}
{"nick":"ljharb","message":"O.o","date":"2019-02-22T05:01:37.639Z","type":"message"}
{"nick":"ljharb","message":"wow, ok, i did not realize that","date":"2019-02-22T05:01:53.918Z","type":"message"}
{"nick":"ljharb","message":"so it is https://tc39.github.io/ecma262/#sec-object.prototype.__proto__","date":"2019-02-22T05:02:12.589Z","type":"message"}
{"nick":"ljharb","message":"annex b strikes again","date":"2019-02-22T05:02:15.803Z","type":"message"}
{"nick":"ljharb","message":"in that case i'm not sure what it'd break","date":"2019-02-22T05:02:28.065Z","type":"message"}
{"nick":"ljharb","message":"but i imagine if browsers can't do it, node can't.","date":"2019-02-22T05:02:33.364Z","type":"message"}
{"nick":"ljharb","message":"(due to code relying on it)","date":"2019-02-22T05:02:40.032Z","type":"message"}
{"nick":"not-an-aardvark","message":"That's also my suspicion, but I wonder how common it is in practice.","date":"2019-02-22T05:03:41.197Z","type":"message"}
{"nick":"not-an-aardvark","message":"Like even if Node can't do it, if it doesn't break too many libraries then applications could start doing it to protect themselves from that attack.","date":"2019-02-22T05:04:14.620Z","type":"message"}
{"nick":"ljharb","message":"i mean, also they could avoid deep merging :-p","date":"2019-02-22T05:05:06.628Z","type":"message"}
{"nick":"not-an-aardvark","message":"Sure, but deep merging is sometimes useful and not inherently a problem aside from issues with `Object.prototype`.","date":"2019-02-22T05:06:38.496Z","type":"message"}
{"nick":"ljharb","message":"personally i find it to always be a code smell ¯\\_(ツ)_/¯","date":"2019-02-22T05:07:26.293Z","type":"message"}
{"nick":"ljharb","message":"despite the 2+ deep merging libs i maintain :-p","date":"2019-02-22T05:07:41.894Z","type":"message"}
{"nick":"not-an-aardvark","message":"Regardless, if I have a ton of application code and I want to prevent prototype pollution, it's much easier to run `delete Object.prototype.__proto__` once then to audit all of the code to make sure that no deep merging happens anywhere or in any libraries.","date":"2019-02-22T05:08:42.583Z","type":"message"}
{"nick":"ljharb","message":"true","date":"2019-02-22T05:11:22.855Z","type":"message"}
{"nick":"ljharb","message":"but it's even easier to `Object.freeze(Object.prototype)` after loading your shims","date":"2019-02-22T05:11:34.157Z","type":"message"}
{"nick":"ljharb","message":"and if you're worried about attacks, you'd lock down all the builtins after loading shims anyways","date":"2019-02-22T05:11:50.976Z","type":"message"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-22T05:11:54.390Z","type":"quit"}
{"nick":"not-an-aardvark","message":"Every application that receives untrusted user input should be worried about attacks, but I don't think many people lock down builtins or freeze `Object.prototype`. (A typical threat model would involve parsing untrusted input but not running untrusted code, in which case freezing builtins would be largely unnecessary outside of prototype pollution attack.)","date":"2019-02-22T05:16:44.587Z","type":"message"}
{"nick":"ljharb","message":"sure, but the same people who freeze Object.prototype, or don't, will delete Object.prototype.__proto__, or not","date":"2019-02-22T05:17:41.003Z","type":"message"}
{"nick":"not-an-aardvark","message":"...unless Node or someone's application framework deletes `Object.prototype.__proto__` for them, which may be more feasible than deleting `Object.prototype` because it doesn't violate the ES spec outside of browsers.","date":"2019-02-22T05:19:22.362Z","type":"message"}
{"nick":"ljharb","message":"perhaps","date":"2019-02-22T05:19:42.693Z","type":"message"}
{"nick":"not-an-aardvark","message":"Hmm, I guess deleting `Object.prototype.__proto__` might be insufficient because someone could do the same thing with `{}.constructor.prototype`.","date":"2019-02-22T05:30:24.868Z","type":"message"}
{"nick":"lpin","date":"2019-02-22T06:02:21.151Z","type":"join"}
{"nick":"dbevenius","date":"2019-02-22T06:37:00.532Z","type":"join"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-22T06:57:00.866Z","type":"quit"}
{"nick":"zeds","date":"2019-02-22T07:17:05.338Z","type":"join"}
{"nick":"zeds","date":"2019-02-22T07:17:12.293Z","type":"part"}
{"nick":"ljharb","message":"MylesBorins: what more is needed on https://github.com/nodejs/node/pull/26210?","date":"2019-02-22T07:40:27.226Z","type":"message"}
{"nick":"MylesBorins","message":"ljharb I kicked off CI","date":"2019-02-22T07:41:46.778Z","type":"message"}
{"nick":"MylesBorins","message":"if it is green this can land tomorrow","date":"2019-02-22T07:41:54.760Z","type":"message"}
{"nick":"ljharb","message":"yay ty","date":"2019-02-22T07:42:39.601Z","type":"message"}
