{"nick":"antsmartian","date":"2018-11-08T01:26:03.081Z","type":"join"}
{"nick":"indutny","message":"Hey y'all","date":"2018-11-08T01:26:20.322Z","type":"message"}
{"nick":"indutny","message":"Anyone wants to give a feedback on https://github.com/nodejs/node/pull/24059 ?","date":"2018-11-08T01:26:28.259Z","type":"message"}
{"nick":"indutny","message":"This is quite a serious change, so any extra check counts!","date":"2018-11-08T01:26:44.790Z","type":"message"}
{"nick":"indutny","message":"s/any/every/","date":"2018-11-08T01:45:07.508Z","type":"message"}
{"nick":"zeds1","date":"2018-11-08T01:45:11.927Z","type":"join"}
{"nick":"devsnek","message":"indutny: i see a bug","date":"2018-11-08T01:45:38.011Z","type":"message"}
{"nick":"indutny","message":"devsnek: nice catch!","date":"2018-11-08T01:45:45.610Z","type":"message"}
{"nick":"indutny","message":"what is it?","date":"2018-11-08T01:45:48.666Z","type":"message"}
{"nick":"devsnek","message":"it isn't merged yet!","date":"2018-11-08T01:45:51.117Z","type":"message"}
{"nick":"indutny","message":":D","date":"2018-11-08T01:46:21.999Z","type":"message"}
{"nick":"indutny","message":"You got me on this","date":"2018-11-08T01:46:28.917Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-11-08T01:46:33.856Z","type":"message"}
{"nick":"indutny","message":"Just want to make sure that everyone is on board with this change, many contributors are at NodeConf EU","date":"2018-11-08T01:47:01.247Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2018-11-08T01:47:07.706Z","type":"message"}
{"nick":"indutny","message":"Will probably land it in a couple of days, once everyone are back","date":"2018-11-08T01:47:16.967Z","type":"message"}
{"nick":"indutny","message":"Maybe even at Saturday","date":"2018-11-08T01:47:31.417Z","type":"message"}
{"nick":"zeds1","date":"2018-11-08T01:47:36.234Z","type":"part"}
{"nick":"doodadjs","reason":"Ping timeout: 244 seconds","date":"2018-11-08T02:05:03.565Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T02:17:16.089Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 252 seconds","date":"2018-11-08T02:21:33.945Z","type":"quit"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2018-11-08T02:56:35.974Z","type":"quit"}
{"nick":"t0dd1v","date":"2018-11-08T02:57:49.875Z","type":"join"}
{"nick":"doodadjs","date":"2018-11-08T03:26:30.384Z","type":"join"}
{"nick":"bradleymeck","message":"indutny: i'm trying to grok if this is generating C code or just a JS parser output from TS","date":"2018-11-08T03:31:05.616Z","type":"message"}
{"nick":"bradleymeck","message":"right now I'm not too keen on making a huge chunk of new JS code land if it could get into weird mutation problems","date":"2018-11-08T03:31:58.466Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: it generates the c code","date":"2018-11-08T03:33:53.966Z","type":"message"}
{"nick":"devsnek","message":"llhttp.c","date":"2018-11-08T03:33:57.102Z","type":"message"}
{"nick":"devsnek","message":"in theory it could also generate js","date":"2018-11-08T03:34:19.106Z","type":"message"}
{"nick":"doodadjs","reason":"Ping timeout: 245 seconds","date":"2018-11-08T03:34:38.363Z","type":"quit"}
{"nick":"indutny","message":"bradleymeck: it is C code that lands","date":"2018-11-08T04:12:36.414Z","type":"message"}
{"nick":"indutny","message":"just as devsnek described","date":"2018-11-08T04:12:49.438Z","type":"message"}
{"nick":"marthinal","date":"2018-11-08T04:31:44.441Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 246 seconds","date":"2018-11-08T04:36:07.251Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T05:05:04.050Z","type":"join"}
{"nick":"t0dd1v","reason":"Quit: Connection closed for inactivity","date":"2018-11-08T05:07:06.726Z","type":"quit"}
{"nick":"al-damiri","reason":"Quit: Connection closed for inactivity","date":"2018-11-08T06:01:19.279Z","type":"quit"}
{"nick":"lpin","date":"2018-11-08T06:16:00.527Z","type":"join"}
{"nick":"joyee","message":"Does anyone know if we still need to apply dont-land-on-6.x labels now that 6.x is in maintanence mode?","date":"2018-11-08T06:22:48.261Z","type":"message"}
{"nick":"joyee","message":"bradleymeck, devsnek: I am thinking about merging safe_globals and per_context - if the modified globals is returned back to C++, the C++ side can pass it back into every other native module to use, and that can be done as early as possible","date":"2018-11-08T06:29:56.504Z","type":"message"}
{"nick":"devsnek","message":"sgtm","date":"2018-11-08T06:30:37.127Z","type":"message"}
{"nick":"devsnek","message":"what will your scheme be for the globals","date":"2018-11-08T06:30:56.322Z","type":"message"}
{"nick":"devsnek","message":"i have a gist somewhere that builds it programmatically","date":"2018-11-08T06:31:13.637Z","type":"message"}
{"nick":"joyee","message":"What do you mean by programmatically?","date":"2018-11-08T06:31:25.390Z","type":"message"}
{"nick":"devsnek","message":"like you don't specify the globals","date":"2018-11-08T06:31:38.088Z","type":"message"}
{"nick":"devsnek","message":"it just scans over them and uses a set naming system","date":"2018-11-08T06:31:46.883Z","type":"message"}
{"nick":"joyee","message":"ummm...still don't quite understand, maybe it will be easier to see the gist","date":"2018-11-08T06:32:06.044Z","type":"message"}
{"nick":"joyee","message":"I am thinking about putting safe globals in the native module wrapeprs","date":"2018-11-08T06:32:38.074Z","type":"message"}
{"nick":"joyee","message":"Although, BTW, conceptually I don't see why safe_globals and per_context have to be done in JS?","date":"2018-11-08T06:33:22.519Z","type":"message"}
{"nick":"devsnek","message":"i guess they don't","date":"2018-11-08T06:33:34.324Z","type":"message"}
{"nick":"devsnek","message":"but its faster","date":"2018-11-08T06:33:42.139Z","type":"message"}
{"nick":"joyee","message":"Aren't those similar to Genesis in V8?","date":"2018-11-08T06:33:50.783Z","type":"message"}
{"nick":"joyee","message":"How though? You have to call into JS to set them up","date":"2018-11-08T06:34:02.785Z","type":"message"}
{"nick":"devsnek","message":"i don't recognize the name genesis with regard to v8","date":"2018-11-08T06:34:10.057Z","type":"message"}
{"nick":"devsnek","message":"https://gist.github.com/devsnek/76aab1dcd169c96b952fbe8c74404475","date":"2018-11-08T06:34:17.880Z","type":"message"}
{"nick":"joyee","message":"And essentially it is setting up dictionary mode objects because there is no way the globals can be in fast mode","date":"2018-11-08T06:34:24.618Z","type":"message"}
{"nick":"devsnek","message":"faster assuming snapshots","date":"2018-11-08T06:35:15.160Z","type":"message"}
{"nick":"joyee","message":"(potentially dumb question: what is primordials?)","date":"2018-11-08T06:35:19.058Z","type":"message"}
{"nick":"devsnek","message":"primordials is just a name for all the things that exist in js before user code runs","date":"2018-11-08T06:35:40.166Z","type":"message"}
{"nick":"devsnek","message":"i would use the name intrinsics but it isn't a 1:1 mapping","date":"2018-11-08T06:35:57.747Z","type":"message"}
{"nick":"joyee","message":"devsnek: I don't think there is a problem wrt. snapshots? v8 also set the builtins up in C++ and snapshot them just fine","date":"2018-11-08T06:36:01.622Z","type":"message"}
{"nick":"devsnek","message":"yeah but v8 isn't going through the api.cc apis","date":"2018-11-08T06:36:19.301Z","type":"message"}
{"nick":"devsnek","message":"they're setting raw pointers","date":"2018-11-08T06:36:29.015Z","type":"message"}
{"nick":"joyee","message":"the API calls also translate to those essentially?","date":"2018-11-08T06:36:57.827Z","type":"message"}
{"nick":"devsnek","message":"builtin setup in v8 is like \"the code for Array.prototype.push exists at this address\"","date":"2018-11-08T06:37:07.964Z","type":"message"}
{"nick":"devsnek","message":"we would need to do like","date":"2018-11-08T06:37:17.889Z","type":"message"}
{"nick":"devsnek","message":"global->Get(\"array\")","date":"2018-11-08T06:37:25.445Z","type":"message"}
{"nick":"joyee","message":"It's more about when you push the pause button and snapshot, less about how you set up this before you push the button","date":"2018-11-08T06:37:28.473Z","type":"message"}
{"nick":"devsnek","message":"array->Get(\"prototype\")","date":"2018-11-08T06:37:32.037Z","type":"message"}
{"nick":"devsnek","message":"then iterate over both of those","date":"2018-11-08T06:37:40.149Z","type":"message"}
{"nick":"devsnek","message":"and the same for every other intrinsic","date":"2018-11-08T06:37:46.739Z","type":"message"}
{"nick":"devsnek","message":"its just slow af","date":"2018-11-08T06:37:54.273Z","type":"message"}
{"nick":"joyee","message":"How is it slower compared to doing this in JS?","date":"2018-11-08T06:38:09.874Z","type":"message"}
{"nick":"devsnek","message":"the c++ api is always slower than doing x in js","date":"2018-11-08T06:38:40.292Z","type":"message"}
{"nick":"devsnek","message":"thats why we write core in js","date":"2018-11-08T06:38:50.906Z","type":"message"}
{"nick":"joyee","message":"We can totally implement APIs in v8 for this if there is a problem - that's what I did for the push values to array","date":"2018-11-08T06:38:56.198Z","type":"message"}
{"nick":"joyee","message":"I thought they are moving more things to C++?","date":"2018-11-08T06:39:23.781Z","type":"message"}
{"nick":"devsnek","message":"only if they need to be","date":"2018-11-08T06:39:39.042Z","type":"message"}
{"nick":"devsnek","message":"i like core using a lot of js","date":"2018-11-08T06:39:51.187Z","type":"message"}
{"nick":"joyee","message":"I think they do things in JS to avoid calling into JS","date":"2018-11-08T06:40:02.802Z","type":"message"}
{"nick":"devsnek","message":"yeah cuz its slow","date":"2018-11-08T06:40:17.738Z","type":"message"}
{"nick":"joyee","message":"Especially Array things that takes callbacks","date":"2018-11-08T06:40:19.015Z","type":"message"}
{"nick":"devsnek","message":"like i keep sayhing","date":"2018-11-08T06:40:24.846Z","type":"message"}
{"nick":"devsnek","message":"saying*","date":"2018-11-08T06:40:27.663Z","type":"message"}
{"nick":"joyee","message":"But there is no callbacks in our globals","date":"2018-11-08T06:40:28.267Z","type":"message"}
{"nick":"devsnek","message":"Object::Get is calling into js","date":"2018-11-08T06:40:41.759Z","type":"message"}
{"nick":"joyee","message":"We don't need to call into JS","date":"2018-11-08T06:40:42.450Z","type":"message"}
{"nick":"devsnek","message":"its not just function calls","date":"2018-11-08T06:41:21.211Z","type":"message"}
{"nick":"devsnek","message":"its interacting with the vm at all","date":"2018-11-08T06:41:26.252Z","type":"message"}
{"nick":"joyee","message":"Oh, I see what you mean, but that can be totally avoided if there is another API for manipulating globals","date":"2018-11-08T06:41:31.008Z","type":"message"}
{"nick":"joyee","message":"Since we are not manipulating some random object","date":"2018-11-08T06:41:49.506Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2018-11-08T06:41:55.622Z","type":"message"}
{"nick":"devsnek","message":"i don't see the reason that this needs to take place in c++ though","date":"2018-11-08T06:42:10.482Z","type":"message"}
{"nick":"joyee","message":"And conceptually, the whole point of hijacking globals is so that you should avoid to call into any user land JS when setting them up","date":"2018-11-08T06:42:43.696Z","type":"message"}
{"nick":"devsnek","message":"we aren't calling into any userland js though","date":"2018-11-08T06:42:58.810Z","type":"message"}
{"nick":"joyee","message":"Yes, because we hijack them, so you don't \"get\" an global.Set","date":"2018-11-08T06:43:33.733Z","type":"message"}
{"nick":"joyee","message":"You dictate them during startup","date":"2018-11-08T06:44:02.673Z","type":"message"}
{"nick":"devsnek","message":"i'm not sure what you're saying","date":"2018-11-08T06:44:09.290Z","type":"message"}
{"nick":"joyee","message":"umm, so I mean, if the .js bootstrapper you are calling do not accept any JS callback, there is little benefit to do them in JS","date":"2018-11-08T06:45:17.713Z","type":"message"}
{"nick":"joyee","message":"In the case of setting up array, there is benefit since Array.p.forEach and friends take callbacks","date":"2018-11-08T06:45:59.416Z","type":"message"}
{"nick":"devsnek","message":"well there's the speed benefit","date":"2018-11-08T06:46:11.268Z","type":"message"}
{"nick":"devsnek","message":"the maintainability benefit","date":"2018-11-08T06:46:15.522Z","type":"message"}
{"nick":"devsnek","message":"(since js is more accessible to people contributing to node)","date":"2018-11-08T06:46:31.618Z","type":"message"}
{"nick":"joyee","message":"I fail to see the maintainability benefit for doing this in JS TBH. There is benefit to do normal native modules in JS, but not really wrt. bootstrap","date":"2018-11-08T06:47:42.039Z","type":"message"}
{"nick":"devsnek","message":"bootstrap is a large concept","date":"2018-11-08T06:48:12.286Z","type":"message"}
{"nick":"devsnek","message":"there are parts of it i would expect to be in c++ and parts i would expect to be in js","date":"2018-11-08T06:48:25.402Z","type":"message"}
{"nick":"joyee","message":"The bootstrap is doing very high priest JS things in the first place, so you cannot attract normal JS devs, you only attract language enthusiasts","date":"2018-11-08T06:48:33.537Z","type":"message"}
{"nick":"devsnek","message":"if i were going to add the safe globals","date":"2018-11-08T06:49:55.081Z","type":"message"}
{"nick":"devsnek","message":"i would put my big loop above inside per_context, return the resulting object","date":"2018-11-08T06:50:15.381Z","type":"message"}
{"nick":"devsnek","message":"and then put that object on an internal slot of the context or something","date":"2018-11-08T06:50:24.270Z","type":"message"}
{"nick":"devsnek","message":"or just pass it straight to bootstrap/loader","date":"2018-11-08T06:50:53.245Z","type":"message"}
{"nick":"devsnek","message":"my memory of when contexts are created is hazy","date":"2018-11-08T06:51:02.327Z","type":"message"}
{"nick":"joyee","message":"What is the code doing exactly?","date":"2018-11-08T06:52:39.502Z","type":"message"}
{"nick":"joyee","message":"This is probably a bit too high priest JS for me..","date":"2018-11-08T06:53:08.764Z","type":"message"}
{"nick":"devsnek","message":"it loops through the global object","date":"2018-11-08T06:53:18.372Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T06:53:29.992Z","type":"join"}
{"nick":"devsnek","message":"takes all the methods of the prototypes of the constructors","date":"2018-11-08T06:53:33.777Z","type":"message"}
{"nick":"devsnek","message":"uncurries them","date":"2018-11-08T06:53:39.282Z","type":"message"}
{"nick":"devsnek","message":"saves them to a new object","date":"2018-11-08T06:53:48.642Z","type":"message"}
{"nick":"devsnek","message":"so you could do `primodials.ArrayMap(array, fn)`","date":"2018-11-08T06:54:02.358Z","type":"message"}
{"nick":"devsnek","message":"x = new primordials.Set(); primordials.SetAdd(x, 5)","date":"2018-11-08T06:54:48.111Z","type":"message"}
{"nick":"devsnek","message":"i was also considering doing what our current safe_globals does where it makes the frozen subclasses","date":"2018-11-08T06:55:10.292Z","type":"message"}
{"nick":"joyee","message":"But why can't you make a set of new globals anyway?","date":"2018-11-08T06:55:14.823Z","type":"message"}
{"nick":"devsnek","message":"but i never got around to it","date":"2018-11-08T06:55:15.392Z","type":"message"}
{"nick":"devsnek","message":"wdym","date":"2018-11-08T06:55:20.291Z","type":"message"}
{"nick":"joyee","message":"Separate the globals our builtins use and the ones that user land uses","date":"2018-11-08T06:55:48.132Z","type":"message"}
{"nick":"devsnek","message":"well they should be the same builtins","date":"2018-11-08T06:56:06.791Z","type":"message"}
{"nick":"devsnek","message":"the difference is just that we always have access to the originals","date":"2018-11-08T06:56:16.637Z","type":"message"}
{"nick":"devsnek","message":"like how in spec land, %Promise% is global.Promise","date":"2018-11-08T06:56:24.986Z","type":"message"}
{"nick":"devsnek","message":"but await always uses %Promise%","date":"2018-11-08T06:56:33.692Z","type":"message"}
{"nick":"devsnek","message":"its not a different promise, just an internal pointer to the original","date":"2018-11-08T06:56:42.179Z","type":"message"}
{"nick":"devsnek","message":"thats what the safe globals are for, constant references to the original globals and their original prototype methods","date":"2018-11-08T06:57:53.571Z","type":"message"}
{"nick":"joyee","message":"But our C++ code creating the promises are not creating global.Promise","date":"2018-11-08T06:57:57.234Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2018-11-08T06:58:07.088Z","type":"message"}
{"nick":"joyee","message":"They are using v8 APIs","date":"2018-11-08T06:58:07.236Z","type":"message"}
{"nick":"devsnek","message":"in C++ we don't really need to worry about it","date":"2018-11-08T06:58:18.267Z","type":"message"}
{"nick":"joyee","message":"That's my point","date":"2018-11-08T06:58:27.101Z","type":"message"}
{"nick":"devsnek","message":"safe globals are for our js core","date":"2018-11-08T06:58:36.445Z","type":"message"}
{"nick":"joyee","message":"We move \"the don't worry about it bit\" into one giant blob and pass it into native JS modules","date":"2018-11-08T06:58:56.673Z","type":"message"}
{"nick":"devsnek","message":"like patch the scope of our internals?","date":"2018-11-08T06:59:22.356Z","type":"message"}
{"nick":"devsnek","message":"we can't do that","date":"2018-11-08T06:59:34.119Z","type":"message"}
{"nick":"devsnek","message":"well we might be able to","date":"2018-11-08T06:59:46.505Z","type":"message"}
{"nick":"devsnek","message":"depending on how we structure the safe globals","date":"2018-11-08T06:59:53.793Z","type":"message"}
{"nick":"devsnek","message":"if we do it where we use frozen subclasses, we can't do that","date":"2018-11-08T07:00:00.899Z","type":"message"}
{"nick":"joyee","message":"hmm, anyway it's just a thought, I am essentially proposing to allow embedder to do Genesis","date":"2018-11-08T07:01:48.138Z","type":"message"}
{"nick":"joyee","message":"So this probably need to end up as a V8 thing first","date":"2018-11-08T07:02:17.257Z","type":"message"}
{"nick":"devsnek","message":"joyee: what is genesis","date":"2018-11-08T07:04:26.888Z","type":"message"}
{"nick":"joyee","message":"devsnek: see bootstrapper.cc in v8","date":"2018-11-08T07:04:38.585Z","type":"message"}
{"nick":"devsnek","message":"i've read it a bunch","date":"2018-11-08T07:04:45.245Z","type":"message"}
{"nick":"joyee","message":"Conceptually we shouldn't do Object::Get to, say, get a Set from global","date":"2018-11-08T07:04:58.369Z","type":"message"}
{"nick":"devsnek","message":"i can take another look","date":"2018-11-08T07:05:05.140Z","type":"message"}
{"nick":"devsnek","message":"oh genesis bootstraps a context","date":"2018-11-08T07:05:31.640Z","type":"message"}
{"nick":"devsnek","message":"why would node use that","date":"2018-11-08T07:05:43.972Z","type":"message"}
{"nick":"joyee","message":"We should be able to just create a Set builtin oursevles, in C++, or just get the original somehow before everything starts","date":"2018-11-08T07:05:53.977Z","type":"message"}
{"nick":"devsnek","message":"well you can create it in c++","date":"2018-11-08T07:06:17.500Z","type":"message"}
{"nick":"devsnek","message":"Set::New","date":"2018-11-08T07:06:20.779Z","type":"message"}
{"nick":"joyee","message":"That's creating a new Set instance","date":"2018-11-08T07:06:33.530Z","type":"message"}
{"nick":"joyee","message":"Not creating global.Set","date":"2018-11-08T07:06:38.520Z","type":"message"}
{"nick":"devsnek","message":"why would you want to create a new one","date":"2018-11-08T07:06:54.210Z","type":"message"}
{"nick":"joyee","message":"So that you don't need SafeSet","date":"2018-11-08T07:07:04.003Z","type":"message"}
{"nick":"devsnek","message":"they should still match up by context though","date":"2018-11-08T07:07:21.779Z","type":"message"}
{"nick":"devsnek","message":"like you don't want two unique sets floating around","date":"2018-11-08T07:08:01.824Z","type":"message"}
{"nick":"devsnek","message":"you just want secure references to the prototype methods","date":"2018-11-08T07:08:14.460Z","type":"message"}
{"nick":"devsnek","message":"and the constructor","date":"2018-11-08T07:08:17.490Z","type":"message"}
{"nick":"joyee","message":"Isn't that what SafeSet is about in the first place","date":"2018-11-08T07:08:19.023Z","type":"message"}
{"nick":"devsnek","message":"which is why i'm not a huge fan of the SafeSubclass pattern","date":"2018-11-08T07:08:30.788Z","type":"message"}
{"nick":"joyee","message":"Oh you can totally set up a \"proxy\" Set with references to the original methods","date":"2018-11-08T07:08:52.861Z","type":"message"}
{"nick":"joyee","message":"Not JS proxy","date":"2018-11-08T07:09:01.309Z","type":"message"}
{"nick":"devsnek","message":"thats what i've been considering for a while","date":"2018-11-08T07:09:03.338Z","type":"message"}
{"nick":"joyee","message":"That's what your primordials is doing right?","date":"2018-11-08T07:09:22.131Z","type":"message"}
{"nick":"devsnek","message":"an object where the constructor is the original constructor but its not wired up the same way","date":"2018-11-08T07:09:29.071Z","type":"message"}
{"nick":"devsnek","message":"eh","date":"2018-11-08T07:09:30.477Z","type":"message"}
{"nick":"devsnek","message":"primordials is a big flat map","date":"2018-11-08T07:09:39.689Z","type":"message"}
{"nick":"joyee","message":"But you can also do that in C++, with macros","date":"2018-11-08T07:09:55.262Z","type":"message"}
{"nick":"devsnek","message":"{ Set, SetAdd, SetDelete, etc }","date":"2018-11-08T07:09:56.764Z","type":"message"}
{"nick":"devsnek","message":"this pattern makes a lot of sense because then you can kinda do `SetAdd(setThatWasPassedFromUser, 5)`","date":"2018-11-08T07:10:48.175Z","type":"message"}
{"nick":"devsnek","message":"stuff like that","date":"2018-11-08T07:10:57.391Z","type":"message"}
{"nick":"joyee","message":"It should still work if SetAdd is created in C++, because JavaScript","date":"2018-11-08T07:11:56.515Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2018-11-08T07:12:08.936Z","type":"message"}
{"nick":"devsnek","message":"in the context of our implementation though, i don't see a reason to create SetAdd in c++","date":"2018-11-08T07:12:36.012Z","type":"message"}
{"nick":"devsnek","message":"i don't even know if you could","date":"2018-11-08T07:12:39.762Z","type":"message"}
{"nick":"devsnek","message":"i guess you could do Function->Get(\"call\")->Get(\"bind\")->Call({ Set->Get(\"prototype\")->Get(\"add\") })","date":"2018-11-08T07:13:21.070Z","type":"message"}
{"nick":"joyee","message":"If it has to be convoluted like that, it's a matter of adding new APIs in V8","date":"2018-11-08T07:13:48.826Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2018-11-08T07:13:53.209Z","type":"message"}
{"nick":"devsnek","message":"that one line would probably take the same amount of time as the entire loop in js","date":"2018-11-08T07:14:13.552Z","type":"message"}
{"nick":"devsnek","message":"joyee: i'm still missing the context on why this needs to be in c++","date":"2018-11-08T07:15:07.192Z","type":"message"}
{"nick":"devsnek","message":"and not just like at the top of our nativemodule setup","date":"2018-11-08T07:15:25.150Z","type":"message"}
{"nick":"joyee","message":"If V8 can install globals in C++, and be sure that their JS implementation is not using tainted ones while being performant, why can't we?","date":"2018-11-08T07:15:25.476Z","type":"message"}
{"nick":"joyee","message":"Because you are relying on JS code to make a safe JS context, that somehow seems wrong to me","date":"2018-11-08T07:16:27.519Z","type":"message"}
{"nick":"devsnek","message":"well v8 has natives syntax for their js code","date":"2018-11-08T07:16:27.689Z","type":"message"}
{"nick":"devsnek","message":"which basically inlines calls to builtins","date":"2018-11-08T07:16:38.783Z","type":"message"}
{"nick":"devsnek","message":"which is something we could also do, but the chakra people would get mad","date":"2018-11-08T07:16:53.049Z","type":"message"}
{"nick":"joyee","message":"I know, we just need them to expose the machinenary  that they use to install builtins to us in a \"we are not demanding you to expose your internals\" way","date":"2018-11-08T07:18:13.322Z","type":"message"}
{"nick":"devsnek","message":"shrug","date":"2018-11-08T07:18:53.021Z","type":"message"}
{"nick":"joyee","message":"I don't see how it's going to be bad for chakra, they can totally shim this..","date":"2018-11-08T07:18:54.192Z","type":"message"}
{"nick":"devsnek","message":"no i was saying","date":"2018-11-08T07:19:11.579Z","type":"message"}
{"nick":"devsnek","message":"natives syntax is bad for chakra","date":"2018-11-08T07:19:15.596Z","type":"message"}
{"nick":"devsnek","message":"%SetAdd()","date":"2018-11-08T07:19:19.163Z","type":"message"}
{"nick":"joyee","message":"Oh, sorry, I was not talking about using %","date":"2018-11-08T07:19:37.020Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-11-08T07:19:40.772Z","type":"message"}
{"nick":"devsnek","message":"anyway my viewpoint is basically","date":"2018-11-08T07:20:00.402Z","type":"message"}
{"nick":"joyee","message":"But something that allows us to do % that's not possible in user land","date":"2018-11-08T07:20:07.086Z","type":"message"}
{"nick":"devsnek","message":"we can do a bunch of work and make new apis and whatnot to do this in c++","date":"2018-11-08T07:20:16.460Z","type":"message"}
{"nick":"devsnek","message":"or we can add a couple of lines to our native loader bootstrap","date":"2018-11-08T07:20:24.441Z","type":"message"}
{"nick":"joyee","message":"That can be a prototype, sure, but since we are an embedder, we should be able to do that in C++, this also makes it easier to snapshot them because you'll know exactly when to snapshot","date":"2018-11-08T07:21:41.275Z","type":"message"}
{"nick":"joyee","message":"Whereas if you have a bunch of C++ <-> JS calls back and forth during bootstrap, it would be hard to tell when is safe to snapshot, since JS has access to NativeModule which can introduce many environment-dependent stuff","date":"2018-11-08T07:24:22.665Z","type":"message"}
{"nick":"TimothyGu","message":"joyee: are you still based in hangzhou?","date":"2018-11-08T07:24:30.903Z","type":"message"}
{"nick":"joyee","message":"TimothyGu: yeah","date":"2018-11-08T07:24:38.393Z","type":"message"}
{"nick":"TimothyGu","message":"ah nice","date":"2018-11-08T07:24:45.295Z","type":"message"}
{"nick":"devsnek","message":"hello timothy","date":"2018-11-08T07:24:56.997Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: hi snek","date":"2018-11-08T07:25:44.406Z","type":"message"}
{"nick":"devsnek","message":"joyee: snapshot should happen right before we find/evaluate user code, no?","date":"2018-11-08T07:26:11.258Z","type":"message"}
{"nick":"joyee","message":"TimothyGu: (should I expect to see you soon if you asked about something like that?)","date":"2018-11-08T07:26:14.697Z","type":"message"}
{"nick":"joyee","message":"devsnek: I don't think so, because there are a bunch of stuff depending on environment variables and command line options during bootstrap.","date":"2018-11-08T07:27:04.827Z","type":"message"}
{"nick":"joyee","message":"We need to pick out the environment-independent parts","date":"2018-11-08T07:27:38.123Z","type":"message"}
{"nick":"TimothyGu","message":"joyee: nah, will be back in Shanghai around Christmastime though","date":"2018-11-08T07:27:48.162Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 252 seconds","date":"2018-11-08T07:28:00.100Z","type":"quit"}
{"nick":"joyee","message":"Maybe you'll be interested in going to D2 on 6th January","date":"2018-11-08T07:28:31.480Z","type":"message"}
{"nick":"TimothyGu","message":"lol I fly out the day before that","date":"2018-11-08T07:28:44.403Z","type":"message"}
{"nick":"joyee","message":"So sad","date":"2018-11-08T07:28:57.415Z","type":"message"}
{"nick":"TimothyGu","message":"yeah, jan 6th is also my mom's birthday which makes it even worse every year","date":"2018-11-08T07:29:23.590Z","type":"message"}
{"nick":"joyee","message":"devsnek: essentially, snapshot is deserializing an isolate - but if there are if-else thingy that depend on environment variables and stuff, you will serialize to an isolate that is setup according to whoever snapshotted the isolate.","date":"2018-11-08T07:35:36.657Z","type":"message"}
{"nick":"devsnek","message":"makes sense","date":"2018-11-08T07:35:50.511Z","type":"message"}
{"nick":"joyee","message":"devsnek: For example, I believe if you snapshot after you load the command line options, then unless you call into C++ and reparse all the argv every time you need options, the instance will get the options of the what you get when building the snapshot, and that's not going to work","date":"2018-11-08T07:36:25.333Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-11-08T07:36:40.726Z","type":"message"}
{"nick":"joyee","message":"So we need to postpone the caching of options *after* the snapshot is built, then you'll need to know exactly the first time these options are needed, and disentangle all that from the core of bootstrap","date":"2018-11-08T07:38:11.778Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T07:38:15.902Z","type":"join"}
{"nick":"joyee","message":"Now, it would be much easier if you don't even need to call into C++ to get the options if the `if some options are set` part is entirely in C++, because you can get the options from env and that's not serialized by v8 since that's not even on the v8 heap","date":"2018-11-08T07:39:42.173Z","type":"message"}
{"nick":"joyee","message":"So there is benefit of keeping data in C++ land, so that they don't get serialized into the v8 heap and cause inconsistencies","date":"2018-11-08T07:40:30.460Z","type":"message"}
{"nick":"devsnek","message":"well all our options live in c++ land","date":"2018-11-08T07:41:40.482Z","type":"message"}
{"nick":"devsnek","message":"until js asks for them","date":"2018-11-08T07:41:45.178Z","type":"message"}
{"nick":"joyee","message":"Depends on \"what kind of JS\", I guess. It's totally fine to put more post-core-bootstrap things in JS","date":"2018-11-08T07:42:28.727Z","type":"message"}
{"nick":"joyee","message":"But if there's too much bootstrap done in JS, then they'll get serialized into the snapshot and cause troubles and block the whole snapshot effort","date":"2018-11-08T07:43:22.266Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2018-11-08T07:43:34.360Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-11-08T07:45:04.848Z","type":"quit"}
{"nick":"joyee","message":"Also funny enough, the JS part of the bootstrap that's environment-dependent are basically caused by caching results in C++","date":"2018-11-08T07:48:57.300Z","type":"message"}
{"nick":"joyee","message":"For example, we use process.env.SOMETHING instead of process.getEnv('SOMETHING') so that we don't have to call into C++, and that caused process.env to be serialized if the snapshot is done after process.env is set up - but why would the bootstrap need to retrieve that from the snapshot if the source of truth is not even on the v8 heap?","date":"2018-11-08T07:49:16.083Z","type":"message"}
{"nick":"devsnek","message":"joyee: process.env is actually a weird native proxy","date":"2018-11-08T07:51:59.012Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T07:51:59.234Z","type":"join"}
{"nick":"devsnek","message":"which calls into c++ on access","date":"2018-11-08T07:52:15.878Z","type":"message"}
{"nick":"joyee","message":"If the bootstrap that needs to know about process.env.SOMETHING is in C++ in the first place, it can just get the result from C++, and doesn't even need the bogus process.env that comes from the snapshot. The post-bootstrap can cache process.env the first time it need it","date":"2018-11-08T07:52:21.802Z","type":"message"}
{"nick":"joyee","message":"devsnek: yes, and that proxy should only be necessary post-core-bootstrap/post-snapshot if the core bootstrap has direct access to C++ and don't depend on serializable v8 heap","date":"2018-11-08T07:54:16.983Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 245 seconds","date":"2018-11-08T07:56:18.351Z","type":"quit"}
{"nick":"joyee","message":"devsnek: BTW, V8 cannot serialize handles","date":"2018-11-08T07:57:46.939Z","type":"message"}
{"nick":"joyee","message":"(OK, maybe process.env is a bad example, I'll stick to options)","date":"2018-11-08T07:59:23.299Z","type":"message"}
{"nick":"m00dy","date":"2018-11-08T08:36:31.037Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T08:36:38.208Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T08:38:26.247Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 252 seconds","date":"2018-11-08T08:43:21.098Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T08:48:32.441Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T09:02:08.986Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T09:08:57.945Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T10:51:09.523Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T10:54:33.997Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T11:02:15.697Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T11:02:49.714Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 245 seconds","date":"2018-11-08T11:07:08.416Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T11:31:35.581Z","type":"join"}
{"nick":"doodadjs","date":"2018-11-08T12:25:50.334Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T13:05:31.456Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T13:12:24.817Z","type":"join"}
{"nick":"RNM","date":"2018-11-08T13:55:28.436Z","type":"join"}
{"nick":"richardlau","reason":"*.net *.split","date":"2018-11-08T14:02:02.170Z","type":"quit"}
{"nick":"sgimeno","reason":"*.net *.split","date":"2018-11-08T14:02:02.396Z","type":"quit"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-11-08T14:02:22.723Z","type":"quit"}
{"nick":"sgimeno","date":"2018-11-08T14:02:47.250Z","type":"join"}
{"nick":"richardlau","date":"2018-11-08T14:03:16.988Z","type":"join"}
{"nick":"marthinal","date":"2018-11-08T14:47:12.913Z","type":"join"}
{"nick":"marthina_","date":"2018-11-08T14:49:41.156Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 252 seconds","date":"2018-11-08T14:51:51.823Z","type":"quit"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T14:52:08.122Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T14:52:27.054Z","type":"join"}
{"nick":"bradleymeck","message":"joyee: thats not entirely true","date":"2018-11-08T14:53:46.311Z","type":"message"}
{"nick":"bradleymeck","message":"{Des,S}erializeInternalFieldsCallback can be implemented properly to do things","date":"2018-11-08T14:55:21.863Z","type":"message"}
{"nick":"bradleymeck","message":"however, for a lot of things like cwd/fds etc it doesn't make sense to serialize them","date":"2018-11-08T14:55:51.834Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: true","date":"2018-11-08T15:08:50.808Z","type":"message"}
{"nick":"bradleymeck","message":"honestly just marking all the handles as fatal would work for a snapshot to see if anything is currently available to JS that is dangerous","date":"2018-11-08T15:10:37.398Z","type":"message"}
{"nick":"joyee","message":"But for the bootstrap, there are two kinds of things that can be serialized: the compiled code, and the result of executing some code. If the core of the bootstrap is mostly done in C++, then the first ones are serialized into the binary already (C++) - the second one probably shouldn't be in the snapshot in the first place as they are supposedly the environment-dependent part.","date":"2018-11-08T15:10:44.466Z","type":"message"}
{"nick":"bradleymeck","message":"mmmm not sure I agree","date":"2018-11-08T15:11:03.148Z","type":"message"}
{"nick":"joyee","message":"Then, the rest of the bootstrap should be put into the startup data blob to warm up the instance, but they should not be in the snapshot","date":"2018-11-08T15:11:09.548Z","type":"message"}
{"nick":"bradleymeck","message":"you can serialize bindings for example, and swap the C++ fn being called by changing it during deserialize","date":"2018-11-08T15:11:23.127Z","type":"message"}
{"nick":"devsnek","message":"won't any heap state contained by a child isolate of a SnapshotCreator (and the external references) be in the snapshot","date":"2018-11-08T15:12:11.905Z","type":"message"}
{"nick":"bradleymeck","message":"child isolate?","date":"2018-11-08T15:12:23.811Z","type":"message"}
{"nick":"devsnek","message":"SnapshotCreator owns an isolate","date":"2018-11-08T15:12:34.666Z","type":"message"}
{"nick":"bradleymeck","message":"yes","date":"2018-11-08T15:12:44.209Z","type":"message"}
{"nick":"devsnek","message":"so if you eval a script in that isolate","date":"2018-11-08T15:12:55.909Z","type":"message"}
{"nick":"devsnek","message":"it is my understanding that the snapshot of that isolate would include the completion of that script","date":"2018-11-08T15:13:10.076Z","type":"message"}
{"nick":"bradleymeck","message":"only if it is still in the heap","date":"2018-11-08T15:13:20.281Z","type":"message"}
{"nick":"bradleymeck","action":"digs about","date":"2018-11-08T15:13:36.908Z","type":"action"}
{"nick":"joyee","message":"bradleymeck: how much the return will be by serializing the bindings? I imagine there will be some, for sure","date":"2018-11-08T15:13:40.939Z","type":"message"}
{"nick":"devsnek","message":"i wish v8 wasn't such a pain to embed","date":"2018-11-08T15:14:25.469Z","type":"message"}
{"nick":"devsnek","message":"it would be nice to experiment with all this stuff","date":"2018-11-08T15:14:32.495Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: what are you trying to measure?","date":"2018-11-08T15:14:52.876Z","type":"message"}
{"nick":"bradleymeck","message":"you can get further in the snapshot and warm up more of it","date":"2018-11-08T15:15:10.328Z","type":"message"}
{"nick":"bradleymeck","message":"can't find my old PoC...","date":"2018-11-08T15:15:34.723Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: were you talking about serializing whatever SomeThing::Initialize installs?","date":"2018-11-08T15:16:03.479Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: basically, unless you AddData or make something attached to the global somehow it won't be in the snapshot","date":"2018-11-08T15:16:08.146Z","type":"message"}
{"nick":"bradleymeck","message":"not for C++ addons though I do have an ancient gist on how to make it work for C++ addons","date":"2018-11-08T15:16:35.292Z","type":"message"}
{"nick":"bradleymeck","message":"joyee^","date":"2018-11-08T15:16:47.628Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: I meant the `SomeThing::Initialize` in src/*.cc","date":"2018-11-08T15:16:59.574Z","type":"message"}
{"nick":"bradleymeck","message":"yea, thats what I'm talking about","date":"2018-11-08T15:17:15.833Z","type":"message"}
{"nick":"bradleymeck","message":"in particular since my previous look into this was about snapshotting applications rather than just core","date":"2018-11-08T15:17:30.260Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: yes, I was asking how much return would serializing the core bindings bring","date":"2018-11-08T15:18:32.366Z","type":"message"}
{"nick":"joyee","message":"For one, not all of them are needed by every application","date":"2018-11-08T15:19:20.844Z","type":"message"}
{"nick":"bradleymeck","message":"not too much the big diff is just if you are doing it lazy vs up front","date":"2018-11-08T15:19:24.180Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: if the binding isn't on the heap it wouldn't be in the snapshot ;p","date":"2018-11-08T15:19:46.999Z","type":"message"}
{"nick":"bradleymeck","message":"so it becomes lazy again","date":"2018-11-08T15:19:55.390Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: right...what I had in mind was more like, no binding is even loaded during the core of the boostrap if the core is all in C++","date":"2018-11-08T15:21:23.297Z","type":"message"}
{"nick":"bradleymeck","message":"why does it need to all be in C++ to get that?","date":"2018-11-08T15:21:50.349Z","type":"message"}
{"nick":"bradleymeck","message":"just disable loading bindings until some fn gets called","date":"2018-11-08T15:21:59.152Z","type":"message"}
{"nick":"bradleymeck","message":"then you can assert that no bindings are used before that","date":"2018-11-08T15:22:12.280Z","type":"message"}
{"nick":"joyee","message":"My starting point was \"what if the core is all in C++\"","date":"2018-11-08T15:22:16.474Z","type":"message"}
{"nick":"joyee","message":"Well, the core of the boostrap","date":"2018-11-08T15:22:34.337Z","type":"message"}
{"nick":"bradleymeck","message":"thats a rather big rewrite isn't it?","date":"2018-11-08T15:22:48.943Z","type":"message"}
{"nick":"joyee","message":"(Hmm, wait, then what's left to snapshot about...?)","date":"2018-11-08T15:23:02.097Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: well since it is all in C++ you can't get that lovely app state unless you are using C++ to generate the JS heap","date":"2018-11-08T15:23:39.657Z","type":"message"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T15:23:56.733Z","type":"quit"}
{"nick":"joyee","message":"bradleymeck: what's the lovely app state?","date":"2018-11-08T15:24:07.389Z","type":"message"}
{"nick":"devsnek","message":"the part where all our js bootstrapping is magically loaded instead of evaluating","date":"2018-11-08T15:24:27.802Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: hot JIT functions + all the globals already setup and just dumped from memory","date":"2018-11-08T15:24:32.065Z","type":"message"}
{"nick":"bradleymeck","message":"1.8GB heap took around 20-30ms to dump from mem in my non-node PoC","date":"2018-11-08T15:24:55.596Z","type":"message"}
{"nick":"bradleymeck","message":"you can save lots of time vs C++ manually reconstructing heap","date":"2018-11-08T15:25:14.013Z","type":"message"}
{"nick":"bradleymeck","message":"but thats with a hot disk cache","date":"2018-11-08T15:25:44.350Z","type":"message"}
{"nick":"bradleymeck","message":"Ryan Day also has been playing with SnapshotCreator in Node","date":"2018-11-08T15:26:00.790Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: so you were talking about application snapshot, not core snapshot?","date":"2018-11-08T15:26:11.815Z","type":"message"}
{"nick":"bradleymeck","message":"the problem for startup speed can often end up being if the disk cache is hot or not","date":"2018-11-08T15:26:22.237Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: I've played with both, but application snapshot is bigger gains","date":"2018-11-08T15:26:34.564Z","type":"message"}
{"nick":"bradleymeck","message":"i couldn't make it work with how complicated the bootstrap for node is","date":"2018-11-08T15:26:51.898Z","type":"message"}
{"nick":"bradleymeck","message":"i think hashseed tried after i did a while back","date":"2018-11-08T15:26:59.571Z","type":"message"}
{"nick":"bradleymeck","message":"but node's core is a bit circular","date":"2018-11-08T15:27:05.341Z","type":"message"}
{"nick":"joyee","message":"Yeah, I am taking a third attempt I guess (but I am more like, just trying to refactor them all - if that helps with the core snapshot effort, then great)","date":"2018-11-08T15:27:46.876Z","type":"message"}
{"nick":"bradleymeck","message":"with an application snapshot you can get much better perf than pnp or tink but in reality it gets hard with the disk cache","date":"2018-11-08T15:28:00.490Z","type":"message"}
{"nick":"bradleymeck","message":"yea, just cleaning up handles with the Worker effort made it much easier to attempt","date":"2018-11-08T15:28:31.893Z","type":"message"}
{"nick":"bradleymeck","message":"talk to @soldair maybe?","date":"2018-11-08T15:28:37.484Z","type":"message"}
{"nick":"bradleymeck","message":"he had some stuff but idk if it could be released","date":"2018-11-08T15:28:47.802Z","type":"message"}
{"nick":"joyee","message":"The core snapshot effort is mostly held back by how spaghetti the bootstrap code is","date":"2018-11-08T15:29:08.711Z","type":"message"}
{"nick":"bradleymeck","message":"i think most of core is that way","date":"2018-11-08T15:29:24.187Z","type":"message"}
{"nick":"bradleymeck","message":"i tried to fix some bugs in the repl and gave up after a couple weeks","date":"2018-11-08T15:29:35.193Z","type":"message"}
{"nick":"devsnek","message":"we should just rewrite node c++ from the ground up","date":"2018-11-08T15:29:38.296Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: What did they do exactly?","date":"2018-11-08T15:29:45.246Z","type":"message"}
{"nick":"bradleymeck","message":"they were snapshotting full applications","date":"2018-11-08T15:30:02.128Z","type":"message"}
{"nick":"bradleymeck","message":"idk how recently, but last 6 months or more recent?","date":"2018-11-08T15:30:23.781Z","type":"message"}
{"nick":"joyee","message":"So if I understand correctly - you tend not to need the application snapshot to be environment-independent?","date":"2018-11-08T15:32:00.177Z","type":"message"}
{"nick":"m00dy","date":"2018-11-08T15:32:49.996Z","type":"join"}
{"nick":"bradleymeck","message":"joyee: correct","date":"2018-11-08T15:33:13.761Z","type":"message"}
{"nick":"joyee","message":"As I don't quite understand how you can build a snapshot with some flags off, and then load them with the flag on and expect them all to adjust? (Unless the code is refactored in a way that these are lazy-loaded, which is what we are struggling with)","date":"2018-11-08T15:33:32.281Z","type":"message"}
{"nick":"bradleymeck","message":"you don't let the flags change","date":"2018-11-08T15:33:47.798Z","type":"message"}
{"nick":"bradleymeck","message":"some things can get weird here","date":"2018-11-08T15:33:59.402Z","type":"message"}
{"nick":"joyee","message":"Hmm, yeah, the most difficult part about core snapshot is we need to make it environment-independent","date":"2018-11-08T15:34:12.961Z","type":"message"}
{"nick":"bradleymeck","message":"some things like --inspect are fine to allow since they aren't really changing the VM","date":"2018-11-08T15:34:23.360Z","type":"message"}
{"nick":"joyee","message":"Since we ship to everyone","date":"2018-11-08T15:34:27.235Z","type":"message"}
{"nick":"devsnek","message":"make a build of node for each possible combination of option state","date":"2018-11-08T15:35:11.968Z","type":"message"}
{"nick":"bradleymeck","message":"yup, but if you don't use any flags it works the same as chrome does right?","date":"2018-11-08T15:35:19.888Z","type":"message"}
{"nick":"devsnek","message":"does chrome have any js source","date":"2018-11-08T15:35:51.560Z","type":"message"}
{"nick":"bradleymeck","message":"they setup the flags, then load the snapshot (which is safe under all flags since it doesn't use any fancy things)","date":"2018-11-08T15:35:53.312Z","type":"message"}
{"nick":"devsnek","message":"besides v8 extensions","date":"2018-11-08T15:35:56.269Z","type":"message"}
{"nick":"bradleymeck","message":"yes chrome does","date":"2018-11-08T15:35:56.417Z","type":"message"}
{"nick":"lundibundi","date":"2018-11-08T15:36:09.496Z","type":"join"}
{"nick":"devsnek","message":"i've only seen js in the devtools part","date":"2018-11-08T15:36:29.791Z","type":"message"}
{"nick":"bradleymeck","message":"in particular they have a specialized snapshot for loading frames so they don't have to generate all that cruft","date":"2018-11-08T15:36:31.000Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: well..there is NODE_OPTIONS","date":"2018-11-08T15:36:54.913Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: yes, and chrome also lets you configure v8 flags via CLI","date":"2018-11-08T15:37:12.805Z","type":"message"}
{"nick":"joyee","message":"NODE_OPTIONS is the environment variable that includes CLI flags","date":"2018-11-08T15:37:33.522Z","type":"message"}
{"nick":"bradleymeck","message":"you just enforce that; for core snapshots you don't use any flagged features, for application snapshots the container format forces flags to match","date":"2018-11-08T15:37:56.603Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: I don't see the issue","date":"2018-11-08T15:38:05.001Z","type":"message"}
{"nick":"bradleymeck","message":"when v8 is initialized you setup flags separate from isolate initialization","date":"2018-11-08T15:38:35.248Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: it's not an issue if \"for core snapshots don't use any flagged features\", true","date":"2018-11-08T15:38:37.061Z","type":"message"}
{"nick":"joyee","message":"But I doubt if that's possible..hmm","date":"2018-11-08T15:38:53.865Z","type":"message"}
{"nick":"bradleymeck","message":"why not?","date":"2018-11-08T15:39:01.491Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: mostly because how many times I see process.env and options in if-else paths when I refactor bootstrap so it's a hunch","date":"2018-11-08T15:40:31.952Z","type":"message"}
{"nick":"bradleymeck","message":"the core not using flags doesn't mean the application can't use flags","date":"2018-11-08T15:41:50.079Z","type":"message"}
{"nick":"bradleymeck","message":"code loaded after the snapshot is taken can differ","date":"2018-11-08T15:41:59.325Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: conceptually (setting the spaghetti aside), yes","date":"2018-11-08T15:43:02.830Z","type":"message"}
{"nick":"bradleymeck","message":"i don't see how it is conceptual","date":"2018-11-08T15:43:15.967Z","type":"message"}
{"nick":"bradleymeck","message":"what is preventing flags from being different?","date":"2018-11-08T15:43:26.473Z","type":"message"}
{"nick":"joyee","message":"spaghetti","date":"2018-11-08T15:43:31.959Z","type":"message"}
{"nick":"bradleymeck","message":"i don't understand that comment","date":"2018-11-08T15:43:39.765Z","type":"message"}
{"nick":"devsnek","message":"like currently our core state is so wrapped around environment state it wouldn't be possible","date":"2018-11-08T15:43:59.825Z","type":"message"}
{"nick":"bradleymeck","message":"but env state != vm flags","date":"2018-11-08T15:44:10.942Z","type":"message"}
{"nick":"devsnek","message":"there just needs to be lots of refactoring","date":"2018-11-08T15:44:31.395Z","type":"message"}
{"nick":"bradleymeck","message":"if your snapshot/node startup didn't use flags how does using env during bootstrap affect thigns","date":"2018-11-08T15:44:43.180Z","type":"message"}
{"nick":"joyee","message":"because \"your snapshot/node startup didn't use flags\" is made impossible by spaghetti","date":"2018-11-08T15:45:09.802Z","type":"message"}
{"nick":"joyee","message":"To make that possible, one has to refactor the spaghetti","date":"2018-11-08T15:45:26.766Z","type":"message"}
{"nick":"joyee","message":"So that there is a clear blob of code that don't use flags","date":"2018-11-08T15:45:42.345Z","type":"message"}
{"nick":"bradleymeck","message":"i'm confused but i will think on this","date":"2018-11-08T15:46:04.317Z","type":"message"}
{"nick":"joyee","message":"So it's like, I hate basil, and the question would be: \"if your spaghetti doesn't contain basil, why won't you eat it?\" But one has to pick all the basil out first","date":"2018-11-08T15:47:11.927Z","type":"message"}
{"nick":"joyee","message":"Conceptually, the basil is not part of the spaghetti, you can pick them out","date":"2018-11-08T15:48:47.438Z","type":"message"}
{"nick":"bradleymeck","message":"i don't know of any parts of our bootstrap that are using flagged features, so i'm asking where is the basil basically","date":"2018-11-08T15:48:58.230Z","type":"message"}
{"nick":"joyee","message":"That depends on the definition of bootstrap","date":"2018-11-08T15:49:59.777Z","type":"message"}
{"nick":"joyee","message":"If it's the code being run before loading a user script, then they are everywhere I guess","date":"2018-11-08T15:50:22.622Z","type":"message"}
{"nick":"joyee","message":"For example, search for process.env and getOptions in lib/bootstrap","date":"2018-11-08T15:50:49.770Z","type":"message"}
{"nick":"bradleymeck","message":"what flagged features are we using before loading user code","date":"2018-11-08T15:50:57.582Z","type":"message"}
{"nick":"bradleymeck","message":"we don't have syntax flags etc","date":"2018-11-08T15:51:02.805Z","type":"message"}
{"nick":"joyee","message":"But lib/bootstrap also loads other modules that uses flags","date":"2018-11-08T15:51:04.837Z","type":"message"}
{"nick":"bradleymeck","message":"flags or vm flags","date":"2018-11-08T15:51:17.438Z","type":"message"}
{"nick":"joyee","message":"\"what flagged features are we using before loading user code\", truth be told, I don't even know","date":"2018-11-08T15:51:22.081Z","type":"message"}
{"nick":"joyee","message":"--experimental ones","date":"2018-11-08T15:51:32.657Z","type":"message"}
{"nick":"joyee","message":"Also some env vars","date":"2018-11-08T15:51:43.069Z","type":"message"}
{"nick":"devsnek","message":"process.env.NODE_UNIQUE_ID","date":"2018-11-08T15:51:52.427Z","type":"message"}
{"nick":"devsnek","message":"NODE_V8_COVERAGE","date":"2018-11-08T15:52:03.054Z","type":"message"}
{"nick":"devsnek","message":"NODE_NO_WARNINGS","date":"2018-11-08T15:52:13.783Z","type":"message"}
{"nick":"joyee","message":"I guess one can set a proxy in the code to find out","date":"2018-11-08T15:52:31.558Z","type":"message"}
{"nick":"devsnek","message":"good idea lol","date":"2018-11-08T15:52:42.204Z","type":"message"}
{"nick":"joyee","message":"But there is no guarantee that there wouldn't be any new one","date":"2018-11-08T15:52:52.292Z","type":"message"}
{"nick":"devsnek","message":"add a printf to EnvGetter and a console.log to getOption","date":"2018-11-08T15:53:01.018Z","type":"message"}
{"nick":"joyee","message":"Since we also use NativeModule to load more","date":"2018-11-08T15:53:04.603Z","type":"message"}
{"nick":"devsnek","message":"snapshot has a way to invalidate snapshots if certain things are accessed or called","date":"2018-11-08T15:53:35.680Z","type":"message"}
{"nick":"joyee","message":"So you can easily introduce a new one in a seeminly unrelated module","date":"2018-11-08T15:53:37.921Z","type":"message"}
{"nick":"devsnek","message":"i don't remember how it works","date":"2018-11-08T15:54:14.846Z","type":"message"}
{"nick":"joyee","message":"There are ~70 native modules loaded during bootstrap according to the test","date":"2018-11-08T15:54:34.651Z","type":"message"}
{"nick":"devsnek","message":"loaded before user code","date":"2018-11-08T15:54:51.888Z","type":"message"}
{"nick":"joyee","message":"yeah..the bigger bootstrap!","date":"2018-11-08T15:55:21.942Z","type":"message"}
