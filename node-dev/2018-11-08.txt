{"nick":"antsmartian","date":"2018-11-08T01:26:03.081Z","type":"join"}
{"nick":"indutny","message":"Hey y'all","date":"2018-11-08T01:26:20.322Z","type":"message"}
{"nick":"indutny","message":"Anyone wants to give a feedback on https://github.com/nodejs/node/pull/24059 ?","date":"2018-11-08T01:26:28.259Z","type":"message"}
{"nick":"indutny","message":"This is quite a serious change, so any extra check counts!","date":"2018-11-08T01:26:44.790Z","type":"message"}
{"nick":"indutny","message":"s/any/every/","date":"2018-11-08T01:45:07.508Z","type":"message"}
{"nick":"zeds1","date":"2018-11-08T01:45:11.927Z","type":"join"}
{"nick":"devsnek","message":"indutny: i see a bug","date":"2018-11-08T01:45:38.011Z","type":"message"}
{"nick":"indutny","message":"devsnek: nice catch!","date":"2018-11-08T01:45:45.610Z","type":"message"}
{"nick":"indutny","message":"what is it?","date":"2018-11-08T01:45:48.666Z","type":"message"}
{"nick":"devsnek","message":"it isn't merged yet!","date":"2018-11-08T01:45:51.117Z","type":"message"}
{"nick":"indutny","message":":D","date":"2018-11-08T01:46:21.999Z","type":"message"}
{"nick":"indutny","message":"You got me on this","date":"2018-11-08T01:46:28.917Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-11-08T01:46:33.856Z","type":"message"}
{"nick":"indutny","message":"Just want to make sure that everyone is on board with this change, many contributors are at NodeConf EU","date":"2018-11-08T01:47:01.247Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2018-11-08T01:47:07.706Z","type":"message"}
{"nick":"indutny","message":"Will probably land it in a couple of days, once everyone are back","date":"2018-11-08T01:47:16.967Z","type":"message"}
{"nick":"indutny","message":"Maybe even at Saturday","date":"2018-11-08T01:47:31.417Z","type":"message"}
{"nick":"zeds1","date":"2018-11-08T01:47:36.234Z","type":"part"}
{"nick":"doodadjs","reason":"Ping timeout: 244 seconds","date":"2018-11-08T02:05:03.565Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T02:17:16.089Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 252 seconds","date":"2018-11-08T02:21:33.945Z","type":"quit"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2018-11-08T02:56:35.974Z","type":"quit"}
{"nick":"t0dd1v","date":"2018-11-08T02:57:49.875Z","type":"join"}
{"nick":"doodadjs","date":"2018-11-08T03:26:30.384Z","type":"join"}
{"nick":"bradleymeck","message":"indutny: i'm trying to grok if this is generating C code or just a JS parser output from TS","date":"2018-11-08T03:31:05.616Z","type":"message"}
{"nick":"bradleymeck","message":"right now I'm not too keen on making a huge chunk of new JS code land if it could get into weird mutation problems","date":"2018-11-08T03:31:58.466Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: it generates the c code","date":"2018-11-08T03:33:53.966Z","type":"message"}
{"nick":"devsnek","message":"llhttp.c","date":"2018-11-08T03:33:57.102Z","type":"message"}
{"nick":"devsnek","message":"in theory it could also generate js","date":"2018-11-08T03:34:19.106Z","type":"message"}
{"nick":"doodadjs","reason":"Ping timeout: 245 seconds","date":"2018-11-08T03:34:38.363Z","type":"quit"}
{"nick":"indutny","message":"bradleymeck: it is C code that lands","date":"2018-11-08T04:12:36.414Z","type":"message"}
{"nick":"indutny","message":"just as devsnek described","date":"2018-11-08T04:12:49.438Z","type":"message"}
{"nick":"marthinal","date":"2018-11-08T04:31:44.441Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 246 seconds","date":"2018-11-08T04:36:07.251Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T05:05:04.050Z","type":"join"}
{"nick":"t0dd1v","reason":"Quit: Connection closed for inactivity","date":"2018-11-08T05:07:06.726Z","type":"quit"}
{"nick":"al-damiri","reason":"Quit: Connection closed for inactivity","date":"2018-11-08T06:01:19.279Z","type":"quit"}
{"nick":"lpin","date":"2018-11-08T06:16:00.527Z","type":"join"}
{"nick":"joyee","message":"Does anyone know if we still need to apply dont-land-on-6.x labels now that 6.x is in maintanence mode?","date":"2018-11-08T06:22:48.261Z","type":"message"}
{"nick":"joyee","message":"bradleymeck, devsnek: I am thinking about merging safe_globals and per_context - if the modified globals is returned back to C++, the C++ side can pass it back into every other native module to use, and that can be done as early as possible","date":"2018-11-08T06:29:56.504Z","type":"message"}
{"nick":"devsnek","message":"sgtm","date":"2018-11-08T06:30:37.127Z","type":"message"}
{"nick":"devsnek","message":"what will your scheme be for the globals","date":"2018-11-08T06:30:56.322Z","type":"message"}
{"nick":"devsnek","message":"i have a gist somewhere that builds it programmatically","date":"2018-11-08T06:31:13.637Z","type":"message"}
{"nick":"joyee","message":"What do you mean by programmatically?","date":"2018-11-08T06:31:25.390Z","type":"message"}
{"nick":"devsnek","message":"like you don't specify the globals","date":"2018-11-08T06:31:38.088Z","type":"message"}
{"nick":"devsnek","message":"it just scans over them and uses a set naming system","date":"2018-11-08T06:31:46.883Z","type":"message"}
{"nick":"joyee","message":"ummm...still don't quite understand, maybe it will be easier to see the gist","date":"2018-11-08T06:32:06.044Z","type":"message"}
{"nick":"joyee","message":"I am thinking about putting safe globals in the native module wrapeprs","date":"2018-11-08T06:32:38.074Z","type":"message"}
{"nick":"joyee","message":"Although, BTW, conceptually I don't see why safe_globals and per_context have to be done in JS?","date":"2018-11-08T06:33:22.519Z","type":"message"}
{"nick":"devsnek","message":"i guess they don't","date":"2018-11-08T06:33:34.324Z","type":"message"}
{"nick":"devsnek","message":"but its faster","date":"2018-11-08T06:33:42.139Z","type":"message"}
{"nick":"joyee","message":"Aren't those similar to Genesis in V8?","date":"2018-11-08T06:33:50.783Z","type":"message"}
{"nick":"joyee","message":"How though? You have to call into JS to set them up","date":"2018-11-08T06:34:02.785Z","type":"message"}
{"nick":"devsnek","message":"i don't recognize the name genesis with regard to v8","date":"2018-11-08T06:34:10.057Z","type":"message"}
{"nick":"devsnek","message":"https://gist.github.com/devsnek/76aab1dcd169c96b952fbe8c74404475","date":"2018-11-08T06:34:17.880Z","type":"message"}
{"nick":"joyee","message":"And essentially it is setting up dictionary mode objects because there is no way the globals can be in fast mode","date":"2018-11-08T06:34:24.618Z","type":"message"}
{"nick":"devsnek","message":"faster assuming snapshots","date":"2018-11-08T06:35:15.160Z","type":"message"}
{"nick":"joyee","message":"(potentially dumb question: what is primordials?)","date":"2018-11-08T06:35:19.058Z","type":"message"}
{"nick":"devsnek","message":"primordials is just a name for all the things that exist in js before user code runs","date":"2018-11-08T06:35:40.166Z","type":"message"}
{"nick":"devsnek","message":"i would use the name intrinsics but it isn't a 1:1 mapping","date":"2018-11-08T06:35:57.747Z","type":"message"}
{"nick":"joyee","message":"devsnek: I don't think there is a problem wrt. snapshots? v8 also set the builtins up in C++ and snapshot them just fine","date":"2018-11-08T06:36:01.622Z","type":"message"}
{"nick":"devsnek","message":"yeah but v8 isn't going through the api.cc apis","date":"2018-11-08T06:36:19.301Z","type":"message"}
{"nick":"devsnek","message":"they're setting raw pointers","date":"2018-11-08T06:36:29.015Z","type":"message"}
{"nick":"joyee","message":"the API calls also translate to those essentially?","date":"2018-11-08T06:36:57.827Z","type":"message"}
{"nick":"devsnek","message":"builtin setup in v8 is like \"the code for Array.prototype.push exists at this address\"","date":"2018-11-08T06:37:07.964Z","type":"message"}
{"nick":"devsnek","message":"we would need to do like","date":"2018-11-08T06:37:17.889Z","type":"message"}
{"nick":"devsnek","message":"global->Get(\"array\")","date":"2018-11-08T06:37:25.445Z","type":"message"}
{"nick":"joyee","message":"It's more about when you push the pause button and snapshot, less about how you set up this before you push the button","date":"2018-11-08T06:37:28.473Z","type":"message"}
{"nick":"devsnek","message":"array->Get(\"prototype\")","date":"2018-11-08T06:37:32.037Z","type":"message"}
{"nick":"devsnek","message":"then iterate over both of those","date":"2018-11-08T06:37:40.149Z","type":"message"}
{"nick":"devsnek","message":"and the same for every other intrinsic","date":"2018-11-08T06:37:46.739Z","type":"message"}
{"nick":"devsnek","message":"its just slow af","date":"2018-11-08T06:37:54.273Z","type":"message"}
{"nick":"joyee","message":"How is it slower compared to doing this in JS?","date":"2018-11-08T06:38:09.874Z","type":"message"}
{"nick":"devsnek","message":"the c++ api is always slower than doing x in js","date":"2018-11-08T06:38:40.292Z","type":"message"}
{"nick":"devsnek","message":"thats why we write core in js","date":"2018-11-08T06:38:50.906Z","type":"message"}
{"nick":"joyee","message":"We can totally implement APIs in v8 for this if there is a problem - that's what I did for the push values to array","date":"2018-11-08T06:38:56.198Z","type":"message"}
{"nick":"joyee","message":"I thought they are moving more things to C++?","date":"2018-11-08T06:39:23.781Z","type":"message"}
{"nick":"devsnek","message":"only if they need to be","date":"2018-11-08T06:39:39.042Z","type":"message"}
{"nick":"devsnek","message":"i like core using a lot of js","date":"2018-11-08T06:39:51.187Z","type":"message"}
{"nick":"joyee","message":"I think they do things in JS to avoid calling into JS","date":"2018-11-08T06:40:02.802Z","type":"message"}
{"nick":"devsnek","message":"yeah cuz its slow","date":"2018-11-08T06:40:17.738Z","type":"message"}
{"nick":"joyee","message":"Especially Array things that takes callbacks","date":"2018-11-08T06:40:19.015Z","type":"message"}
{"nick":"devsnek","message":"like i keep sayhing","date":"2018-11-08T06:40:24.846Z","type":"message"}
{"nick":"devsnek","message":"saying*","date":"2018-11-08T06:40:27.663Z","type":"message"}
{"nick":"joyee","message":"But there is no callbacks in our globals","date":"2018-11-08T06:40:28.267Z","type":"message"}
{"nick":"devsnek","message":"Object::Get is calling into js","date":"2018-11-08T06:40:41.759Z","type":"message"}
{"nick":"joyee","message":"We don't need to call into JS","date":"2018-11-08T06:40:42.450Z","type":"message"}
{"nick":"devsnek","message":"its not just function calls","date":"2018-11-08T06:41:21.211Z","type":"message"}
{"nick":"devsnek","message":"its interacting with the vm at all","date":"2018-11-08T06:41:26.252Z","type":"message"}
{"nick":"joyee","message":"Oh, I see what you mean, but that can be totally avoided if there is another API for manipulating globals","date":"2018-11-08T06:41:31.008Z","type":"message"}
{"nick":"joyee","message":"Since we are not manipulating some random object","date":"2018-11-08T06:41:49.506Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2018-11-08T06:41:55.622Z","type":"message"}
{"nick":"devsnek","message":"i don't see the reason that this needs to take place in c++ though","date":"2018-11-08T06:42:10.482Z","type":"message"}
{"nick":"joyee","message":"And conceptually, the whole point of hijacking globals is so that you should avoid to call into any user land JS when setting them up","date":"2018-11-08T06:42:43.696Z","type":"message"}
{"nick":"devsnek","message":"we aren't calling into any userland js though","date":"2018-11-08T06:42:58.810Z","type":"message"}
{"nick":"joyee","message":"Yes, because we hijack them, so you don't \"get\" an global.Set","date":"2018-11-08T06:43:33.733Z","type":"message"}
{"nick":"joyee","message":"You dictate them during startup","date":"2018-11-08T06:44:02.673Z","type":"message"}
{"nick":"devsnek","message":"i'm not sure what you're saying","date":"2018-11-08T06:44:09.290Z","type":"message"}
{"nick":"joyee","message":"umm, so I mean, if the .js bootstrapper you are calling do not accept any JS callback, there is little benefit to do them in JS","date":"2018-11-08T06:45:17.713Z","type":"message"}
{"nick":"joyee","message":"In the case of setting up array, there is benefit since Array.p.forEach and friends take callbacks","date":"2018-11-08T06:45:59.416Z","type":"message"}
{"nick":"devsnek","message":"well there's the speed benefit","date":"2018-11-08T06:46:11.268Z","type":"message"}
{"nick":"devsnek","message":"the maintainability benefit","date":"2018-11-08T06:46:15.522Z","type":"message"}
{"nick":"devsnek","message":"(since js is more accessible to people contributing to node)","date":"2018-11-08T06:46:31.618Z","type":"message"}
{"nick":"joyee","message":"I fail to see the maintainability benefit for doing this in JS TBH. There is benefit to do normal native modules in JS, but not really wrt. bootstrap","date":"2018-11-08T06:47:42.039Z","type":"message"}
{"nick":"devsnek","message":"bootstrap is a large concept","date":"2018-11-08T06:48:12.286Z","type":"message"}
{"nick":"devsnek","message":"there are parts of it i would expect to be in c++ and parts i would expect to be in js","date":"2018-11-08T06:48:25.402Z","type":"message"}
{"nick":"joyee","message":"The bootstrap is doing very high priest JS things in the first place, so you cannot attract normal JS devs, you only attract language enthusiasts","date":"2018-11-08T06:48:33.537Z","type":"message"}
{"nick":"devsnek","message":"if i were going to add the safe globals","date":"2018-11-08T06:49:55.081Z","type":"message"}
{"nick":"devsnek","message":"i would put my big loop above inside per_context, return the resulting object","date":"2018-11-08T06:50:15.381Z","type":"message"}
{"nick":"devsnek","message":"and then put that object on an internal slot of the context or something","date":"2018-11-08T06:50:24.270Z","type":"message"}
{"nick":"devsnek","message":"or just pass it straight to bootstrap/loader","date":"2018-11-08T06:50:53.245Z","type":"message"}
{"nick":"devsnek","message":"my memory of when contexts are created is hazy","date":"2018-11-08T06:51:02.327Z","type":"message"}
{"nick":"joyee","message":"What is the code doing exactly?","date":"2018-11-08T06:52:39.502Z","type":"message"}
{"nick":"joyee","message":"This is probably a bit too high priest JS for me..","date":"2018-11-08T06:53:08.764Z","type":"message"}
{"nick":"devsnek","message":"it loops through the global object","date":"2018-11-08T06:53:18.372Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T06:53:29.992Z","type":"join"}
{"nick":"devsnek","message":"takes all the methods of the prototypes of the constructors","date":"2018-11-08T06:53:33.777Z","type":"message"}
{"nick":"devsnek","message":"uncurries them","date":"2018-11-08T06:53:39.282Z","type":"message"}
{"nick":"devsnek","message":"saves them to a new object","date":"2018-11-08T06:53:48.642Z","type":"message"}
{"nick":"devsnek","message":"so you could do `primodials.ArrayMap(array, fn)`","date":"2018-11-08T06:54:02.358Z","type":"message"}
{"nick":"devsnek","message":"x = new primordials.Set(); primordials.SetAdd(x, 5)","date":"2018-11-08T06:54:48.111Z","type":"message"}
{"nick":"devsnek","message":"i was also considering doing what our current safe_globals does where it makes the frozen subclasses","date":"2018-11-08T06:55:10.292Z","type":"message"}
{"nick":"joyee","message":"But why can't you make a set of new globals anyway?","date":"2018-11-08T06:55:14.823Z","type":"message"}
{"nick":"devsnek","message":"but i never got around to it","date":"2018-11-08T06:55:15.392Z","type":"message"}
{"nick":"devsnek","message":"wdym","date":"2018-11-08T06:55:20.291Z","type":"message"}
{"nick":"joyee","message":"Separate the globals our builtins use and the ones that user land uses","date":"2018-11-08T06:55:48.132Z","type":"message"}
{"nick":"devsnek","message":"well they should be the same builtins","date":"2018-11-08T06:56:06.791Z","type":"message"}
{"nick":"devsnek","message":"the difference is just that we always have access to the originals","date":"2018-11-08T06:56:16.637Z","type":"message"}
{"nick":"devsnek","message":"like how in spec land, %Promise% is global.Promise","date":"2018-11-08T06:56:24.986Z","type":"message"}
{"nick":"devsnek","message":"but await always uses %Promise%","date":"2018-11-08T06:56:33.692Z","type":"message"}
{"nick":"devsnek","message":"its not a different promise, just an internal pointer to the original","date":"2018-11-08T06:56:42.179Z","type":"message"}
{"nick":"devsnek","message":"thats what the safe globals are for, constant references to the original globals and their original prototype methods","date":"2018-11-08T06:57:53.571Z","type":"message"}
{"nick":"joyee","message":"But our C++ code creating the promises are not creating global.Promise","date":"2018-11-08T06:57:57.234Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2018-11-08T06:58:07.088Z","type":"message"}
{"nick":"joyee","message":"They are using v8 APIs","date":"2018-11-08T06:58:07.236Z","type":"message"}
{"nick":"devsnek","message":"in C++ we don't really need to worry about it","date":"2018-11-08T06:58:18.267Z","type":"message"}
{"nick":"joyee","message":"That's my point","date":"2018-11-08T06:58:27.101Z","type":"message"}
{"nick":"devsnek","message":"safe globals are for our js core","date":"2018-11-08T06:58:36.445Z","type":"message"}
{"nick":"joyee","message":"We move \"the don't worry about it bit\" into one giant blob and pass it into native JS modules","date":"2018-11-08T06:58:56.673Z","type":"message"}
{"nick":"devsnek","message":"like patch the scope of our internals?","date":"2018-11-08T06:59:22.356Z","type":"message"}
{"nick":"devsnek","message":"we can't do that","date":"2018-11-08T06:59:34.119Z","type":"message"}
{"nick":"devsnek","message":"well we might be able to","date":"2018-11-08T06:59:46.505Z","type":"message"}
{"nick":"devsnek","message":"depending on how we structure the safe globals","date":"2018-11-08T06:59:53.793Z","type":"message"}
{"nick":"devsnek","message":"if we do it where we use frozen subclasses, we can't do that","date":"2018-11-08T07:00:00.899Z","type":"message"}
{"nick":"joyee","message":"hmm, anyway it's just a thought, I am essentially proposing to allow embedder to do Genesis","date":"2018-11-08T07:01:48.138Z","type":"message"}
{"nick":"joyee","message":"So this probably need to end up as a V8 thing first","date":"2018-11-08T07:02:17.257Z","type":"message"}
{"nick":"devsnek","message":"joyee: what is genesis","date":"2018-11-08T07:04:26.888Z","type":"message"}
{"nick":"joyee","message":"devsnek: see bootstrapper.cc in v8","date":"2018-11-08T07:04:38.585Z","type":"message"}
{"nick":"devsnek","message":"i've read it a bunch","date":"2018-11-08T07:04:45.245Z","type":"message"}
{"nick":"joyee","message":"Conceptually we shouldn't do Object::Get to, say, get a Set from global","date":"2018-11-08T07:04:58.369Z","type":"message"}
{"nick":"devsnek","message":"i can take another look","date":"2018-11-08T07:05:05.140Z","type":"message"}
{"nick":"devsnek","message":"oh genesis bootstraps a context","date":"2018-11-08T07:05:31.640Z","type":"message"}
{"nick":"devsnek","message":"why would node use that","date":"2018-11-08T07:05:43.972Z","type":"message"}
{"nick":"joyee","message":"We should be able to just create a Set builtin oursevles, in C++, or just get the original somehow before everything starts","date":"2018-11-08T07:05:53.977Z","type":"message"}
{"nick":"devsnek","message":"well you can create it in c++","date":"2018-11-08T07:06:17.500Z","type":"message"}
{"nick":"devsnek","message":"Set::New","date":"2018-11-08T07:06:20.779Z","type":"message"}
{"nick":"joyee","message":"That's creating a new Set instance","date":"2018-11-08T07:06:33.530Z","type":"message"}
{"nick":"joyee","message":"Not creating global.Set","date":"2018-11-08T07:06:38.520Z","type":"message"}
{"nick":"devsnek","message":"why would you want to create a new one","date":"2018-11-08T07:06:54.210Z","type":"message"}
{"nick":"joyee","message":"So that you don't need SafeSet","date":"2018-11-08T07:07:04.003Z","type":"message"}
{"nick":"devsnek","message":"they should still match up by context though","date":"2018-11-08T07:07:21.779Z","type":"message"}
{"nick":"devsnek","message":"like you don't want two unique sets floating around","date":"2018-11-08T07:08:01.824Z","type":"message"}
{"nick":"devsnek","message":"you just want secure references to the prototype methods","date":"2018-11-08T07:08:14.460Z","type":"message"}
{"nick":"devsnek","message":"and the constructor","date":"2018-11-08T07:08:17.490Z","type":"message"}
{"nick":"joyee","message":"Isn't that what SafeSet is about in the first place","date":"2018-11-08T07:08:19.023Z","type":"message"}
{"nick":"devsnek","message":"which is why i'm not a huge fan of the SafeSubclass pattern","date":"2018-11-08T07:08:30.788Z","type":"message"}
{"nick":"joyee","message":"Oh you can totally set up a \"proxy\" Set with references to the original methods","date":"2018-11-08T07:08:52.861Z","type":"message"}
{"nick":"joyee","message":"Not JS proxy","date":"2018-11-08T07:09:01.309Z","type":"message"}
{"nick":"devsnek","message":"thats what i've been considering for a while","date":"2018-11-08T07:09:03.338Z","type":"message"}
{"nick":"joyee","message":"That's what your primordials is doing right?","date":"2018-11-08T07:09:22.131Z","type":"message"}
{"nick":"devsnek","message":"an object where the constructor is the original constructor but its not wired up the same way","date":"2018-11-08T07:09:29.071Z","type":"message"}
{"nick":"devsnek","message":"eh","date":"2018-11-08T07:09:30.477Z","type":"message"}
{"nick":"devsnek","message":"primordials is a big flat map","date":"2018-11-08T07:09:39.689Z","type":"message"}
{"nick":"joyee","message":"But you can also do that in C++, with macros","date":"2018-11-08T07:09:55.262Z","type":"message"}
{"nick":"devsnek","message":"{ Set, SetAdd, SetDelete, etc }","date":"2018-11-08T07:09:56.764Z","type":"message"}
{"nick":"devsnek","message":"this pattern makes a lot of sense because then you can kinda do `SetAdd(setThatWasPassedFromUser, 5)`","date":"2018-11-08T07:10:48.175Z","type":"message"}
{"nick":"devsnek","message":"stuff like that","date":"2018-11-08T07:10:57.391Z","type":"message"}
{"nick":"joyee","message":"It should still work if SetAdd is created in C++, because JavaScript","date":"2018-11-08T07:11:56.515Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2018-11-08T07:12:08.936Z","type":"message"}
{"nick":"devsnek","message":"in the context of our implementation though, i don't see a reason to create SetAdd in c++","date":"2018-11-08T07:12:36.012Z","type":"message"}
{"nick":"devsnek","message":"i don't even know if you could","date":"2018-11-08T07:12:39.762Z","type":"message"}
{"nick":"devsnek","message":"i guess you could do Function->Get(\"call\")->Get(\"bind\")->Call({ Set->Get(\"prototype\")->Get(\"add\") })","date":"2018-11-08T07:13:21.070Z","type":"message"}
{"nick":"joyee","message":"If it has to be convoluted like that, it's a matter of adding new APIs in V8","date":"2018-11-08T07:13:48.826Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2018-11-08T07:13:53.209Z","type":"message"}
{"nick":"devsnek","message":"that one line would probably take the same amount of time as the entire loop in js","date":"2018-11-08T07:14:13.552Z","type":"message"}
{"nick":"devsnek","message":"joyee: i'm still missing the context on why this needs to be in c++","date":"2018-11-08T07:15:07.192Z","type":"message"}
{"nick":"devsnek","message":"and not just like at the top of our nativemodule setup","date":"2018-11-08T07:15:25.150Z","type":"message"}
{"nick":"joyee","message":"If V8 can install globals in C++, and be sure that their JS implementation is not using tainted ones while being performant, why can't we?","date":"2018-11-08T07:15:25.476Z","type":"message"}
{"nick":"joyee","message":"Because you are relying on JS code to make a safe JS context, that somehow seems wrong to me","date":"2018-11-08T07:16:27.519Z","type":"message"}
{"nick":"devsnek","message":"well v8 has natives syntax for their js code","date":"2018-11-08T07:16:27.689Z","type":"message"}
{"nick":"devsnek","message":"which basically inlines calls to builtins","date":"2018-11-08T07:16:38.783Z","type":"message"}
{"nick":"devsnek","message":"which is something we could also do, but the chakra people would get mad","date":"2018-11-08T07:16:53.049Z","type":"message"}
{"nick":"joyee","message":"I know, we just need them to expose the machinenary  that they use to install builtins to us in a \"we are not demanding you to expose your internals\" way","date":"2018-11-08T07:18:13.322Z","type":"message"}
{"nick":"devsnek","message":"shrug","date":"2018-11-08T07:18:53.021Z","type":"message"}
{"nick":"joyee","message":"I don't see how it's going to be bad for chakra, they can totally shim this..","date":"2018-11-08T07:18:54.192Z","type":"message"}
{"nick":"devsnek","message":"no i was saying","date":"2018-11-08T07:19:11.579Z","type":"message"}
{"nick":"devsnek","message":"natives syntax is bad for chakra","date":"2018-11-08T07:19:15.596Z","type":"message"}
{"nick":"devsnek","message":"%SetAdd()","date":"2018-11-08T07:19:19.163Z","type":"message"}
{"nick":"joyee","message":"Oh, sorry, I was not talking about using %","date":"2018-11-08T07:19:37.020Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-11-08T07:19:40.772Z","type":"message"}
{"nick":"devsnek","message":"anyway my viewpoint is basically","date":"2018-11-08T07:20:00.402Z","type":"message"}
{"nick":"joyee","message":"But something that allows us to do % that's not possible in user land","date":"2018-11-08T07:20:07.086Z","type":"message"}
{"nick":"devsnek","message":"we can do a bunch of work and make new apis and whatnot to do this in c++","date":"2018-11-08T07:20:16.460Z","type":"message"}
{"nick":"devsnek","message":"or we can add a couple of lines to our native loader bootstrap","date":"2018-11-08T07:20:24.441Z","type":"message"}
{"nick":"joyee","message":"That can be a prototype, sure, but since we are an embedder, we should be able to do that in C++, this also makes it easier to snapshot them because you'll know exactly when to snapshot","date":"2018-11-08T07:21:41.275Z","type":"message"}
{"nick":"joyee","message":"Whereas if you have a bunch of C++ <-> JS calls back and forth during bootstrap, it would be hard to tell when is safe to snapshot, since JS has access to NativeModule which can introduce many environment-dependent stuff","date":"2018-11-08T07:24:22.665Z","type":"message"}
{"nick":"TimothyGu","message":"joyee: are you still based in hangzhou?","date":"2018-11-08T07:24:30.903Z","type":"message"}
{"nick":"joyee","message":"TimothyGu: yeah","date":"2018-11-08T07:24:38.393Z","type":"message"}
{"nick":"TimothyGu","message":"ah nice","date":"2018-11-08T07:24:45.295Z","type":"message"}
{"nick":"devsnek","message":"hello timothy","date":"2018-11-08T07:24:56.997Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: hi snek","date":"2018-11-08T07:25:44.406Z","type":"message"}
{"nick":"devsnek","message":"joyee: snapshot should happen right before we find/evaluate user code, no?","date":"2018-11-08T07:26:11.258Z","type":"message"}
{"nick":"joyee","message":"TimothyGu: (should I expect to see you soon if you asked about something like that?)","date":"2018-11-08T07:26:14.697Z","type":"message"}
{"nick":"joyee","message":"devsnek: I don't think so, because there are a bunch of stuff depending on environment variables and command line options during bootstrap.","date":"2018-11-08T07:27:04.827Z","type":"message"}
{"nick":"joyee","message":"We need to pick out the environment-independent parts","date":"2018-11-08T07:27:38.123Z","type":"message"}
{"nick":"TimothyGu","message":"joyee: nah, will be back in Shanghai around Christmastime though","date":"2018-11-08T07:27:48.162Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 252 seconds","date":"2018-11-08T07:28:00.100Z","type":"quit"}
{"nick":"joyee","message":"Maybe you'll be interested in going to D2 on 6th January","date":"2018-11-08T07:28:31.480Z","type":"message"}
{"nick":"TimothyGu","message":"lol I fly out the day before that","date":"2018-11-08T07:28:44.403Z","type":"message"}
{"nick":"joyee","message":"So sad","date":"2018-11-08T07:28:57.415Z","type":"message"}
{"nick":"TimothyGu","message":"yeah, jan 6th is also my mom's birthday which makes it even worse every year","date":"2018-11-08T07:29:23.590Z","type":"message"}
{"nick":"joyee","message":"devsnek: essentially, snapshot is deserializing an isolate - but if there are if-else thingy that depend on environment variables and stuff, you will serialize to an isolate that is setup according to whoever snapshotted the isolate.","date":"2018-11-08T07:35:36.657Z","type":"message"}
{"nick":"devsnek","message":"makes sense","date":"2018-11-08T07:35:50.511Z","type":"message"}
{"nick":"joyee","message":"devsnek: For example, I believe if you snapshot after you load the command line options, then unless you call into C++ and reparse all the argv every time you need options, the instance will get the options of the what you get when building the snapshot, and that's not going to work","date":"2018-11-08T07:36:25.333Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-11-08T07:36:40.726Z","type":"message"}
{"nick":"joyee","message":"So we need to postpone the caching of options *after* the snapshot is built, then you'll need to know exactly the first time these options are needed, and disentangle all that from the core of bootstrap","date":"2018-11-08T07:38:11.778Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T07:38:15.902Z","type":"join"}
{"nick":"joyee","message":"Now, it would be much easier if you don't even need to call into C++ to get the options if the `if some options are set` part is entirely in C++, because you can get the options from env and that's not serialized by v8 since that's not even on the v8 heap","date":"2018-11-08T07:39:42.173Z","type":"message"}
{"nick":"joyee","message":"So there is benefit of keeping data in C++ land, so that they don't get serialized into the v8 heap and cause inconsistencies","date":"2018-11-08T07:40:30.460Z","type":"message"}
{"nick":"devsnek","message":"well all our options live in c++ land","date":"2018-11-08T07:41:40.482Z","type":"message"}
{"nick":"devsnek","message":"until js asks for them","date":"2018-11-08T07:41:45.178Z","type":"message"}
{"nick":"joyee","message":"Depends on \"what kind of JS\", I guess. It's totally fine to put more post-core-bootstrap things in JS","date":"2018-11-08T07:42:28.727Z","type":"message"}
{"nick":"joyee","message":"But if there's too much bootstrap done in JS, then they'll get serialized into the snapshot and cause troubles and block the whole snapshot effort","date":"2018-11-08T07:43:22.266Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2018-11-08T07:43:34.360Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-11-08T07:45:04.848Z","type":"quit"}
{"nick":"joyee","message":"Also funny enough, the JS part of the bootstrap that's environment-dependent are basically caused by caching results in C++","date":"2018-11-08T07:48:57.300Z","type":"message"}
{"nick":"joyee","message":"For example, we use process.env.SOMETHING instead of process.getEnv('SOMETHING') so that we don't have to call into C++, and that caused process.env to be serialized if the snapshot is done after process.env is set up - but why would the bootstrap need to retrieve that from the snapshot if the source of truth is not even on the v8 heap?","date":"2018-11-08T07:49:16.083Z","type":"message"}
{"nick":"devsnek","message":"joyee: process.env is actually a weird native proxy","date":"2018-11-08T07:51:59.012Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T07:51:59.234Z","type":"join"}
{"nick":"devsnek","message":"which calls into c++ on access","date":"2018-11-08T07:52:15.878Z","type":"message"}
{"nick":"joyee","message":"If the bootstrap that needs to know about process.env.SOMETHING is in C++ in the first place, it can just get the result from C++, and doesn't even need the bogus process.env that comes from the snapshot. The post-bootstrap can cache process.env the first time it need it","date":"2018-11-08T07:52:21.802Z","type":"message"}
{"nick":"joyee","message":"devsnek: yes, and that proxy should only be necessary post-core-bootstrap/post-snapshot if the core bootstrap has direct access to C++ and don't depend on serializable v8 heap","date":"2018-11-08T07:54:16.983Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 245 seconds","date":"2018-11-08T07:56:18.351Z","type":"quit"}
{"nick":"joyee","message":"devsnek: BTW, V8 cannot serialize handles","date":"2018-11-08T07:57:46.939Z","type":"message"}
{"nick":"joyee","message":"(OK, maybe process.env is a bad example, I'll stick to options)","date":"2018-11-08T07:59:23.299Z","type":"message"}
{"nick":"m00dy","date":"2018-11-08T08:36:31.037Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T08:36:38.208Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T08:38:26.247Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 252 seconds","date":"2018-11-08T08:43:21.098Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T08:48:32.441Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T09:02:08.986Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T09:08:57.945Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T10:51:09.523Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T10:54:33.997Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T11:02:15.697Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T11:02:49.714Z","type":"join"}
{"nick":"m00dy","reason":"Ping timeout: 245 seconds","date":"2018-11-08T11:07:08.416Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T11:31:35.581Z","type":"join"}
{"nick":"doodadjs","date":"2018-11-08T12:25:50.334Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T13:05:31.456Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T13:12:24.817Z","type":"join"}
{"nick":"RNM","date":"2018-11-08T13:55:28.436Z","type":"join"}
{"nick":"richardlau","reason":"*.net *.split","date":"2018-11-08T14:02:02.170Z","type":"quit"}
{"nick":"sgimeno","reason":"*.net *.split","date":"2018-11-08T14:02:02.396Z","type":"quit"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-11-08T14:02:22.723Z","type":"quit"}
{"nick":"sgimeno","date":"2018-11-08T14:02:47.250Z","type":"join"}
{"nick":"richardlau","date":"2018-11-08T14:03:16.988Z","type":"join"}
{"nick":"marthinal","date":"2018-11-08T14:47:12.913Z","type":"join"}
{"nick":"marthina_","date":"2018-11-08T14:49:41.156Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 252 seconds","date":"2018-11-08T14:51:51.823Z","type":"quit"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T14:52:08.122Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T14:52:27.054Z","type":"join"}
{"nick":"bradleymeck","message":"joyee: thats not entirely true","date":"2018-11-08T14:53:46.311Z","type":"message"}
{"nick":"bradleymeck","message":"{Des,S}erializeInternalFieldsCallback can be implemented properly to do things","date":"2018-11-08T14:55:21.863Z","type":"message"}
{"nick":"bradleymeck","message":"however, for a lot of things like cwd/fds etc it doesn't make sense to serialize them","date":"2018-11-08T14:55:51.834Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: true","date":"2018-11-08T15:08:50.808Z","type":"message"}
{"nick":"bradleymeck","message":"honestly just marking all the handles as fatal would work for a snapshot to see if anything is currently available to JS that is dangerous","date":"2018-11-08T15:10:37.398Z","type":"message"}
{"nick":"joyee","message":"But for the bootstrap, there are two kinds of things that can be serialized: the compiled code, and the result of executing some code. If the core of the bootstrap is mostly done in C++, then the first ones are serialized into the binary already (C++) - the second one probably shouldn't be in the snapshot in the first place as they are supposedly the environment-dependent part.","date":"2018-11-08T15:10:44.466Z","type":"message"}
{"nick":"bradleymeck","message":"mmmm not sure I agree","date":"2018-11-08T15:11:03.148Z","type":"message"}
{"nick":"joyee","message":"Then, the rest of the bootstrap should be put into the startup data blob to warm up the instance, but they should not be in the snapshot","date":"2018-11-08T15:11:09.548Z","type":"message"}
{"nick":"bradleymeck","message":"you can serialize bindings for example, and swap the C++ fn being called by changing it during deserialize","date":"2018-11-08T15:11:23.127Z","type":"message"}
{"nick":"devsnek","message":"won't any heap state contained by a child isolate of a SnapshotCreator (and the external references) be in the snapshot","date":"2018-11-08T15:12:11.905Z","type":"message"}
{"nick":"bradleymeck","message":"child isolate?","date":"2018-11-08T15:12:23.811Z","type":"message"}
{"nick":"devsnek","message":"SnapshotCreator owns an isolate","date":"2018-11-08T15:12:34.666Z","type":"message"}
{"nick":"bradleymeck","message":"yes","date":"2018-11-08T15:12:44.209Z","type":"message"}
{"nick":"devsnek","message":"so if you eval a script in that isolate","date":"2018-11-08T15:12:55.909Z","type":"message"}
{"nick":"devsnek","message":"it is my understanding that the snapshot of that isolate would include the completion of that script","date":"2018-11-08T15:13:10.076Z","type":"message"}
{"nick":"bradleymeck","message":"only if it is still in the heap","date":"2018-11-08T15:13:20.281Z","type":"message"}
{"nick":"bradleymeck","action":"digs about","date":"2018-11-08T15:13:36.908Z","type":"action"}
{"nick":"joyee","message":"bradleymeck: how much the return will be by serializing the bindings? I imagine there will be some, for sure","date":"2018-11-08T15:13:40.939Z","type":"message"}
{"nick":"devsnek","message":"i wish v8 wasn't such a pain to embed","date":"2018-11-08T15:14:25.469Z","type":"message"}
{"nick":"devsnek","message":"it would be nice to experiment with all this stuff","date":"2018-11-08T15:14:32.495Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: what are you trying to measure?","date":"2018-11-08T15:14:52.876Z","type":"message"}
{"nick":"bradleymeck","message":"you can get further in the snapshot and warm up more of it","date":"2018-11-08T15:15:10.328Z","type":"message"}
{"nick":"bradleymeck","message":"can't find my old PoC...","date":"2018-11-08T15:15:34.723Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: were you talking about serializing whatever SomeThing::Initialize installs?","date":"2018-11-08T15:16:03.479Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: basically, unless you AddData or make something attached to the global somehow it won't be in the snapshot","date":"2018-11-08T15:16:08.146Z","type":"message"}
{"nick":"bradleymeck","message":"not for C++ addons though I do have an ancient gist on how to make it work for C++ addons","date":"2018-11-08T15:16:35.292Z","type":"message"}
{"nick":"bradleymeck","message":"joyee^","date":"2018-11-08T15:16:47.628Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: I meant the `SomeThing::Initialize` in src/*.cc","date":"2018-11-08T15:16:59.574Z","type":"message"}
{"nick":"bradleymeck","message":"yea, thats what I'm talking about","date":"2018-11-08T15:17:15.833Z","type":"message"}
{"nick":"bradleymeck","message":"in particular since my previous look into this was about snapshotting applications rather than just core","date":"2018-11-08T15:17:30.260Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: yes, I was asking how much return would serializing the core bindings bring","date":"2018-11-08T15:18:32.366Z","type":"message"}
{"nick":"joyee","message":"For one, not all of them are needed by every application","date":"2018-11-08T15:19:20.844Z","type":"message"}
{"nick":"bradleymeck","message":"not too much the big diff is just if you are doing it lazy vs up front","date":"2018-11-08T15:19:24.180Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: if the binding isn't on the heap it wouldn't be in the snapshot ;p","date":"2018-11-08T15:19:46.999Z","type":"message"}
{"nick":"bradleymeck","message":"so it becomes lazy again","date":"2018-11-08T15:19:55.390Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: right...what I had in mind was more like, no binding is even loaded during the core of the boostrap if the core is all in C++","date":"2018-11-08T15:21:23.297Z","type":"message"}
{"nick":"bradleymeck","message":"why does it need to all be in C++ to get that?","date":"2018-11-08T15:21:50.349Z","type":"message"}
{"nick":"bradleymeck","message":"just disable loading bindings until some fn gets called","date":"2018-11-08T15:21:59.152Z","type":"message"}
{"nick":"bradleymeck","message":"then you can assert that no bindings are used before that","date":"2018-11-08T15:22:12.280Z","type":"message"}
{"nick":"joyee","message":"My starting point was \"what if the core is all in C++\"","date":"2018-11-08T15:22:16.474Z","type":"message"}
{"nick":"joyee","message":"Well, the core of the boostrap","date":"2018-11-08T15:22:34.337Z","type":"message"}
{"nick":"bradleymeck","message":"thats a rather big rewrite isn't it?","date":"2018-11-08T15:22:48.943Z","type":"message"}
{"nick":"joyee","message":"(Hmm, wait, then what's left to snapshot about...?)","date":"2018-11-08T15:23:02.097Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: well since it is all in C++ you can't get that lovely app state unless you are using C++ to generate the JS heap","date":"2018-11-08T15:23:39.657Z","type":"message"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T15:23:56.733Z","type":"quit"}
{"nick":"joyee","message":"bradleymeck: what's the lovely app state?","date":"2018-11-08T15:24:07.389Z","type":"message"}
{"nick":"devsnek","message":"the part where all our js bootstrapping is magically loaded instead of evaluating","date":"2018-11-08T15:24:27.802Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: hot JIT functions + all the globals already setup and just dumped from memory","date":"2018-11-08T15:24:32.065Z","type":"message"}
{"nick":"bradleymeck","message":"1.8GB heap took around 20-30ms to dump from mem in my non-node PoC","date":"2018-11-08T15:24:55.596Z","type":"message"}
{"nick":"bradleymeck","message":"you can save lots of time vs C++ manually reconstructing heap","date":"2018-11-08T15:25:14.013Z","type":"message"}
{"nick":"bradleymeck","message":"but thats with a hot disk cache","date":"2018-11-08T15:25:44.350Z","type":"message"}
{"nick":"bradleymeck","message":"Ryan Day also has been playing with SnapshotCreator in Node","date":"2018-11-08T15:26:00.790Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: so you were talking about application snapshot, not core snapshot?","date":"2018-11-08T15:26:11.815Z","type":"message"}
{"nick":"bradleymeck","message":"the problem for startup speed can often end up being if the disk cache is hot or not","date":"2018-11-08T15:26:22.237Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: I've played with both, but application snapshot is bigger gains","date":"2018-11-08T15:26:34.564Z","type":"message"}
{"nick":"bradleymeck","message":"i couldn't make it work with how complicated the bootstrap for node is","date":"2018-11-08T15:26:51.898Z","type":"message"}
{"nick":"bradleymeck","message":"i think hashseed tried after i did a while back","date":"2018-11-08T15:26:59.571Z","type":"message"}
{"nick":"bradleymeck","message":"but node's core is a bit circular","date":"2018-11-08T15:27:05.341Z","type":"message"}
{"nick":"joyee","message":"Yeah, I am taking a third attempt I guess (but I am more like, just trying to refactor them all - if that helps with the core snapshot effort, then great)","date":"2018-11-08T15:27:46.876Z","type":"message"}
{"nick":"bradleymeck","message":"with an application snapshot you can get much better perf than pnp or tink but in reality it gets hard with the disk cache","date":"2018-11-08T15:28:00.490Z","type":"message"}
{"nick":"bradleymeck","message":"yea, just cleaning up handles with the Worker effort made it much easier to attempt","date":"2018-11-08T15:28:31.893Z","type":"message"}
{"nick":"bradleymeck","message":"talk to @soldair maybe?","date":"2018-11-08T15:28:37.484Z","type":"message"}
{"nick":"bradleymeck","message":"he had some stuff but idk if it could be released","date":"2018-11-08T15:28:47.802Z","type":"message"}
{"nick":"joyee","message":"The core snapshot effort is mostly held back by how spaghetti the bootstrap code is","date":"2018-11-08T15:29:08.711Z","type":"message"}
{"nick":"bradleymeck","message":"i think most of core is that way","date":"2018-11-08T15:29:24.187Z","type":"message"}
{"nick":"bradleymeck","message":"i tried to fix some bugs in the repl and gave up after a couple weeks","date":"2018-11-08T15:29:35.193Z","type":"message"}
{"nick":"devsnek","message":"we should just rewrite node c++ from the ground up","date":"2018-11-08T15:29:38.296Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: What did they do exactly?","date":"2018-11-08T15:29:45.246Z","type":"message"}
{"nick":"bradleymeck","message":"they were snapshotting full applications","date":"2018-11-08T15:30:02.128Z","type":"message"}
{"nick":"bradleymeck","message":"idk how recently, but last 6 months or more recent?","date":"2018-11-08T15:30:23.781Z","type":"message"}
{"nick":"joyee","message":"So if I understand correctly - you tend not to need the application snapshot to be environment-independent?","date":"2018-11-08T15:32:00.177Z","type":"message"}
{"nick":"m00dy","date":"2018-11-08T15:32:49.996Z","type":"join"}
{"nick":"bradleymeck","message":"joyee: correct","date":"2018-11-08T15:33:13.761Z","type":"message"}
{"nick":"joyee","message":"As I don't quite understand how you can build a snapshot with some flags off, and then load them with the flag on and expect them all to adjust? (Unless the code is refactored in a way that these are lazy-loaded, which is what we are struggling with)","date":"2018-11-08T15:33:32.281Z","type":"message"}
{"nick":"bradleymeck","message":"you don't let the flags change","date":"2018-11-08T15:33:47.798Z","type":"message"}
{"nick":"bradleymeck","message":"some things can get weird here","date":"2018-11-08T15:33:59.402Z","type":"message"}
{"nick":"joyee","message":"Hmm, yeah, the most difficult part about core snapshot is we need to make it environment-independent","date":"2018-11-08T15:34:12.961Z","type":"message"}
{"nick":"bradleymeck","message":"some things like --inspect are fine to allow since they aren't really changing the VM","date":"2018-11-08T15:34:23.360Z","type":"message"}
{"nick":"joyee","message":"Since we ship to everyone","date":"2018-11-08T15:34:27.235Z","type":"message"}
{"nick":"devsnek","message":"make a build of node for each possible combination of option state","date":"2018-11-08T15:35:11.968Z","type":"message"}
{"nick":"bradleymeck","message":"yup, but if you don't use any flags it works the same as chrome does right?","date":"2018-11-08T15:35:19.888Z","type":"message"}
{"nick":"devsnek","message":"does chrome have any js source","date":"2018-11-08T15:35:51.560Z","type":"message"}
{"nick":"bradleymeck","message":"they setup the flags, then load the snapshot (which is safe under all flags since it doesn't use any fancy things)","date":"2018-11-08T15:35:53.312Z","type":"message"}
{"nick":"devsnek","message":"besides v8 extensions","date":"2018-11-08T15:35:56.269Z","type":"message"}
{"nick":"bradleymeck","message":"yes chrome does","date":"2018-11-08T15:35:56.417Z","type":"message"}
{"nick":"lundibundi","date":"2018-11-08T15:36:09.496Z","type":"join"}
{"nick":"devsnek","message":"i've only seen js in the devtools part","date":"2018-11-08T15:36:29.791Z","type":"message"}
{"nick":"bradleymeck","message":"in particular they have a specialized snapshot for loading frames so they don't have to generate all that cruft","date":"2018-11-08T15:36:31.000Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: well..there is NODE_OPTIONS","date":"2018-11-08T15:36:54.913Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: yes, and chrome also lets you configure v8 flags via CLI","date":"2018-11-08T15:37:12.805Z","type":"message"}
{"nick":"joyee","message":"NODE_OPTIONS is the environment variable that includes CLI flags","date":"2018-11-08T15:37:33.522Z","type":"message"}
{"nick":"bradleymeck","message":"you just enforce that; for core snapshots you don't use any flagged features, for application snapshots the container format forces flags to match","date":"2018-11-08T15:37:56.603Z","type":"message"}
{"nick":"bradleymeck","message":"joyee: I don't see the issue","date":"2018-11-08T15:38:05.001Z","type":"message"}
{"nick":"bradleymeck","message":"when v8 is initialized you setup flags separate from isolate initialization","date":"2018-11-08T15:38:35.248Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: it's not an issue if \"for core snapshots don't use any flagged features\", true","date":"2018-11-08T15:38:37.061Z","type":"message"}
{"nick":"joyee","message":"But I doubt if that's possible..hmm","date":"2018-11-08T15:38:53.865Z","type":"message"}
{"nick":"bradleymeck","message":"why not?","date":"2018-11-08T15:39:01.491Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: mostly because how many times I see process.env and options in if-else paths when I refactor bootstrap so it's a hunch","date":"2018-11-08T15:40:31.952Z","type":"message"}
{"nick":"bradleymeck","message":"the core not using flags doesn't mean the application can't use flags","date":"2018-11-08T15:41:50.079Z","type":"message"}
{"nick":"bradleymeck","message":"code loaded after the snapshot is taken can differ","date":"2018-11-08T15:41:59.325Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: conceptually (setting the spaghetti aside), yes","date":"2018-11-08T15:43:02.830Z","type":"message"}
{"nick":"bradleymeck","message":"i don't see how it is conceptual","date":"2018-11-08T15:43:15.967Z","type":"message"}
{"nick":"bradleymeck","message":"what is preventing flags from being different?","date":"2018-11-08T15:43:26.473Z","type":"message"}
{"nick":"joyee","message":"spaghetti","date":"2018-11-08T15:43:31.959Z","type":"message"}
{"nick":"bradleymeck","message":"i don't understand that comment","date":"2018-11-08T15:43:39.765Z","type":"message"}
{"nick":"devsnek","message":"like currently our core state is so wrapped around environment state it wouldn't be possible","date":"2018-11-08T15:43:59.825Z","type":"message"}
{"nick":"bradleymeck","message":"but env state != vm flags","date":"2018-11-08T15:44:10.942Z","type":"message"}
{"nick":"devsnek","message":"there just needs to be lots of refactoring","date":"2018-11-08T15:44:31.395Z","type":"message"}
{"nick":"bradleymeck","message":"if your snapshot/node startup didn't use flags how does using env during bootstrap affect thigns","date":"2018-11-08T15:44:43.180Z","type":"message"}
{"nick":"joyee","message":"because \"your snapshot/node startup didn't use flags\" is made impossible by spaghetti","date":"2018-11-08T15:45:09.802Z","type":"message"}
{"nick":"joyee","message":"To make that possible, one has to refactor the spaghetti","date":"2018-11-08T15:45:26.766Z","type":"message"}
{"nick":"joyee","message":"So that there is a clear blob of code that don't use flags","date":"2018-11-08T15:45:42.345Z","type":"message"}
{"nick":"bradleymeck","message":"i'm confused but i will think on this","date":"2018-11-08T15:46:04.317Z","type":"message"}
{"nick":"joyee","message":"So it's like, I hate basil, and the question would be: \"if your spaghetti doesn't contain basil, why won't you eat it?\" But one has to pick all the basil out first","date":"2018-11-08T15:47:11.927Z","type":"message"}
{"nick":"joyee","message":"Conceptually, the basil is not part of the spaghetti, you can pick them out","date":"2018-11-08T15:48:47.438Z","type":"message"}
{"nick":"bradleymeck","message":"i don't know of any parts of our bootstrap that are using flagged features, so i'm asking where is the basil basically","date":"2018-11-08T15:48:58.230Z","type":"message"}
{"nick":"joyee","message":"That depends on the definition of bootstrap","date":"2018-11-08T15:49:59.777Z","type":"message"}
{"nick":"joyee","message":"If it's the code being run before loading a user script, then they are everywhere I guess","date":"2018-11-08T15:50:22.622Z","type":"message"}
{"nick":"joyee","message":"For example, search for process.env and getOptions in lib/bootstrap","date":"2018-11-08T15:50:49.770Z","type":"message"}
{"nick":"bradleymeck","message":"what flagged features are we using before loading user code","date":"2018-11-08T15:50:57.582Z","type":"message"}
{"nick":"bradleymeck","message":"we don't have syntax flags etc","date":"2018-11-08T15:51:02.805Z","type":"message"}
{"nick":"joyee","message":"But lib/bootstrap also loads other modules that uses flags","date":"2018-11-08T15:51:04.837Z","type":"message"}
{"nick":"bradleymeck","message":"flags or vm flags","date":"2018-11-08T15:51:17.438Z","type":"message"}
{"nick":"joyee","message":"\"what flagged features are we using before loading user code\", truth be told, I don't even know","date":"2018-11-08T15:51:22.081Z","type":"message"}
{"nick":"joyee","message":"--experimental ones","date":"2018-11-08T15:51:32.657Z","type":"message"}
{"nick":"joyee","message":"Also some env vars","date":"2018-11-08T15:51:43.069Z","type":"message"}
{"nick":"devsnek","message":"process.env.NODE_UNIQUE_ID","date":"2018-11-08T15:51:52.427Z","type":"message"}
{"nick":"devsnek","message":"NODE_V8_COVERAGE","date":"2018-11-08T15:52:03.054Z","type":"message"}
{"nick":"devsnek","message":"NODE_NO_WARNINGS","date":"2018-11-08T15:52:13.783Z","type":"message"}
{"nick":"joyee","message":"I guess one can set a proxy in the code to find out","date":"2018-11-08T15:52:31.558Z","type":"message"}
{"nick":"devsnek","message":"good idea lol","date":"2018-11-08T15:52:42.204Z","type":"message"}
{"nick":"joyee","message":"But there is no guarantee that there wouldn't be any new one","date":"2018-11-08T15:52:52.292Z","type":"message"}
{"nick":"devsnek","message":"add a printf to EnvGetter and a console.log to getOption","date":"2018-11-08T15:53:01.018Z","type":"message"}
{"nick":"joyee","message":"Since we also use NativeModule to load more","date":"2018-11-08T15:53:04.603Z","type":"message"}
{"nick":"devsnek","message":"snapshot has a way to invalidate snapshots if certain things are accessed or called","date":"2018-11-08T15:53:35.680Z","type":"message"}
{"nick":"joyee","message":"So you can easily introduce a new one in a seeminly unrelated module","date":"2018-11-08T15:53:37.921Z","type":"message"}
{"nick":"devsnek","message":"i don't remember how it works","date":"2018-11-08T15:54:14.846Z","type":"message"}
{"nick":"joyee","message":"There are ~70 native modules loaded during bootstrap according to the test","date":"2018-11-08T15:54:34.651Z","type":"message"}
{"nick":"devsnek","message":"loaded before user code","date":"2018-11-08T15:54:51.888Z","type":"message"}
{"nick":"joyee","message":"yeah..the bigger bootstrap!","date":"2018-11-08T15:55:21.942Z","type":"message"}
{"nick":"lundibundi","reason":"Ping timeout: 245 seconds","date":"2018-11-08T16:00:28.346Z","type":"quit"}
{"nick":"lundibundi","date":"2018-11-08T16:02:05.724Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 252 seconds","date":"2018-11-08T16:20:36.588Z","type":"quit"}
{"nick":"zeds","date":"2018-11-08T16:24:26.907Z","type":"join"}
{"nick":"zeds","reason":"Excess Flood","date":"2018-11-08T16:24:29.152Z","type":"quit"}
{"nick":"zeds","date":"2018-11-08T16:25:31.903Z","type":"join"}
{"nick":"zeds","date":"2018-11-08T16:25:39.034Z","type":"part"}
{"nick":"bradleymeck","message":"perhaps just splitting internal modules into a .initWithoutEnv() .initWithEnv() would make sense","date":"2018-11-08T16:25:54.108Z","type":"message"}
{"nick":"bradleymeck","message":"ensuring all bindings to environment data are not used before some period would just be moving parts between those 2 initialization points","date":"2018-11-08T16:29:26.559Z","type":"message"}
{"nick":"bradleymeck","message":"you could also take a diff approach and instead of having diff fns, just register init functions as things are used","date":"2018-11-08T16:32:54.196Z","type":"message"}
{"nick":"bradleymeck","message":"internalBinding like fn that just enqueues something to run after the snapshot point","date":"2018-11-08T16:33:57.678Z","type":"message"}
{"nick":"bradleymeck","message":"take the same approach devsnek talked about and blow up if an env related binding is used and just keep throwing stuff in that enqueue fn. thought that means more async stuff is likely to be introduced while refactoring","date":"2018-11-08T16:34:55.081Z","type":"message"}
{"nick":"devsnek","message":"deno has <all of bootstrap> and then a function called runMain","date":"2018-11-08T16:35:38.895Z","type":"message"}
{"nick":"devsnek","message":"which is called after bootstrap","date":"2018-11-08T16:35:49.069Z","type":"message"}
{"nick":"bradleymeck","message":"yup","date":"2018-11-08T16:36:16.039Z","type":"message"}
{"nick":"bradleymeck","message":"essentially thats what i did with AddData","date":"2018-11-08T16:36:26.950Z","type":"message"}
{"nick":"srl295","date":"2018-11-08T16:46:21.617Z","type":"join"}
{"nick":"srl295","message":"https://bugs.chromium.org/p/v8/issues/detail?id=8401#c13 OK so v8 would like to require ICU 63 (latest) going forward","date":"2018-11-08T16:46:31.321Z","type":"message"}
{"nick":"devsnek","message":"this sounds like a good thing","date":"2018-11-08T16:47:11.046Z","type":"message"}
{"nick":"srl295","message":"yes-generally, because the requirements are going up as far as ecma i18n","date":"2018-11-08T16:50:38.638Z","type":"message"}
{"nick":"srl295","message":"I need to check whether system-icu checks the minimum required ICU","date":"2018-11-08T16:51:17.517Z","type":"message"}
{"nick":"srl295","message":"would be good to take another poll as to what packagers are using system icu - this bug says \"it's busted, remove it\"","date":"2018-11-08T16:51:52.922Z","type":"message"}
{"nick":"srl295","message":"downside would be if a packager won't take the latest node because it doesn't build on their system","date":"2018-11-08T16:52:24.780Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T16:58:06.624Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T17:00:05.839Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T17:00:52.926Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T17:00:53.874Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T17:01:38.669Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T17:02:10.977Z","type":"quit"}
{"nick":"sgimeno","reason":"Quit: Leaving","date":"2018-11-08T17:02:36.684Z","type":"quit"}
{"nick":"m00dy","date":"2018-11-08T17:02:46.606Z","type":"join"}
{"nick":"m00dy","reason":"Remote host closed the connection","date":"2018-11-08T17:03:35.240Z","type":"quit"}
{"nick":"marthina_","reason":"Remote host closed the connection","date":"2018-11-08T17:06:55.704Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T17:21:39.741Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 252 seconds","date":"2018-11-08T17:26:36.705Z","type":"quit"}
{"nick":"RNM","reason":"Ping timeout: 245 seconds","date":"2018-11-08T17:44:38.382Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T17:45:19.105Z","type":"join"}
{"nick":"lpin","reason":"Ping timeout: 268 seconds","date":"2018-11-08T18:01:07.888Z","type":"quit"}
{"nick":"christop1er","message":"hello node-dev.... Im looking to be able to somehow force a node instance that is held by dev-tools to immediately throw an exception. - for example typing \"throw asdlkj;\" into the console throws some kind of error, but its not in the same universe as the code that is being debugged, afaict","date":"2018-11-08T18:10:16.199Z","type":"message"}
{"nick":"devsnek","message":"christop1er: the console is outside the thing being debugged on purpose","date":"2018-11-08T18:17:30.391Z","type":"message"}
{"nick":"devsnek","message":"a clean environment to deal with the dirty environment","date":"2018-11-08T18:17:41.868Z","type":"message"}
{"nick":"christop1er","message":"devsnek: yes, that is a clear requirement. Is there some kind of vm object I can poke?  i found away around it by allowing the code to run but forceIgnoring any state changes.","date":"2018-11-08T18:18:41.296Z","type":"message"}
{"nick":"devsnek","message":"what do you mean vm object you can poke","date":"2018-11-08T18:19:14.348Z","type":"message"}
{"nick":"christop1er","message":"so an explicit representation of either the current byte code, or the actual virtualMachine state that I could affect to cause the code being debugged to behave as if it had just thrown an error","date":"2018-11-08T18:20:09.994Z","type":"message"}
{"nick":"devsnek","message":"not possible","date":"2018-11-08T18:20:21.830Z","type":"message"}
{"nick":"christop1er","message":"fair enough","date":"2018-11-08T18:20:26.743Z","type":"message"}
{"nick":"devsnek","message":"its an interesting idea though","date":"2018-11-08T18:20:38.121Z","type":"message"}
{"nick":"christop1er","message":"could it be done on purpose?","date":"2018-11-08T18:20:38.461Z","type":"message"}
{"nick":"christop1er","message":"i mean with a pull request","date":"2018-11-08T18:20:51.149Z","type":"message"}
{"nick":"joyee","message":"christop1er: do you just want to see the bytecode?","date":"2018-11-08T18:20:51.375Z","type":"message"}
{"nick":"devsnek","message":"is there a modern equiv to hydrair","date":"2018-11-08T18:21:08.973Z","type":"message"}
{"nick":"devsnek","message":"irhydra","date":"2018-11-08T18:21:17.281Z","type":"message"}
{"nick":"christop1er","message":"joyee: well.. I want to be able to jump completely out of the current runtime context, without terminating the node process","date":"2018-11-08T18:21:26.384Z","type":"message"}
{"nick":"joyee","message":"you mean turbolizer?","date":"2018-11-08T18:21:26.809Z","type":"message"}
{"nick":"devsnek","message":"i dunno","date":"2018-11-08T18:21:33.679Z","type":"message"}
{"nick":"devsnek","message":"oh yes this looks good","date":"2018-11-08T18:21:56.138Z","type":"message"}
{"nick":"lundibundi","date":"2018-11-08T18:22:30.925Z","type":"join"}
{"nick":"christop1er","message":"i can catch the throw from outside, in the meta space of the currently running code","date":"2018-11-08T18:22:39.466Z","type":"message"}
{"nick":"joyee","message":"christop1er: so IIUC, what you want to do is to stop the JS execution at some point and throw an error","date":"2018-11-08T18:22:42.588Z","type":"message"}
{"nick":"joyee","message":"?","date":"2018-11-08T18:22:44.750Z","type":"message"}
{"nick":"joyee","message":"Do you want to do that in the devtools, or just any debugger?","date":"2018-11-08T18:23:02.146Z","type":"message"}
{"nick":"devsnek","message":"you can set a breakpoint","date":"2018-11-08T18:23:14.910Z","type":"message"}
{"nick":"devsnek","message":"you can't actually throw an error from the execution context of the code you're inspecting though","date":"2018-11-08T18:23:37.330Z","type":"message"}
{"nick":"christop1er","message":"joyee: yes, and, imagine you are F10ing through some code (I know you never have any bugs :) ), and you realise something is wrong, and I want to immedieately throw an error so the rest of the currently running function ever actually executes","date":"2018-11-08T18:23:39.958Z","type":"message"}
{"nick":"joyee","message":"hm, I don't know if that's possible in v8","date":"2018-11-08T18:24:22.980Z","type":"message"}
{"nick":"devsnek","message":"you should just stop debugging at that point","date":"2018-11-08T18:24:23.225Z","type":"message"}
{"nick":"christop1er","message":"so \"a\" way of doing it would be to insert: if (somevar === true) throw \"endNow\"; between every statement, and then set the var using the dev-tools","date":"2018-11-08T18:24:33.193Z","type":"message"}
{"nick":"devsnek","message":"joyee: is there an up-to-date extraction of turbolizer","date":"2018-11-08T18:25:00.952Z","type":"message"}
{"nick":"devsnek","message":"or do i have to use the one in v8 tools","date":"2018-11-08T18:25:10.479Z","type":"message"}
{"nick":"christop1er","message":"probably devtools really","date":"2018-11-08T18:25:25.701Z","type":"message"}
{"nick":"joyee","message":"devsnek: IDK, normally people use whatever in the checkout","date":"2018-11-08T18:25:26.870Z","type":"message"}
{"nick":"christop1er","message":"though if I could poke the node process from the command line or something that would do","date":"2018-11-08T18:25:43.676Z","type":"message"}
{"nick":"joyee","message":"It's like our tools, I don't imagine anyone would want to extract them and use them","date":"2018-11-08T18:26:00.248Z","type":"message"}
{"nick":"christop1er","message":"later on in the project, I will be able to rip open the AST and do exactly the if(somevar) thing, but transparently to the user, using our own debugging tool...","date":"2018-11-08T18:26:34.511Z","type":"message"}
{"nick":"devsnek","message":"seems useful for node dev too","date":"2018-11-08T18:26:37.245Z","type":"message"}
{"nick":"devsnek","message":"i'm lucky to have a checkout of v8 handy","date":"2018-11-08T18:26:44.821Z","type":"message"}
{"nick":"joyee","message":"christop1er: if I am in a native debuger, I *might* try to throw an exception from the isolate, but I have never tried that before","date":"2018-11-08T18:27:00.846Z","type":"message"}
{"nick":"christop1er","message":"native meaning what in this context?","date":"2018-11-08T18:27:15.870Z","type":"message"}
{"nick":"joyee","message":"lldb/gdb","date":"2018-11-08T18:27:23.905Z","type":"message"}
{"nick":"christop1er","message":"oh right","date":"2018-11-08T18:27:29.987Z","type":"message"}
{"nick":"christop1er","message":"so... the port that is open for debugging, into the V8 VM, surely I could add a PR that created a new command to send to the VM that did just that?","date":"2018-11-08T18:28:19.524Z","type":"message"}
{"nick":"christop1er","message":"in a similar way that F10 steps through the code?","date":"2018-11-08T18:28:33.469Z","type":"message"}
{"nick":"christop1er","message":"well not \"surely\"...","date":"2018-11-08T18:28:49.387Z","type":"message"}
{"nick":"joyee","message":"Theoratically, I don't even know how to implement \"jumping out without executing the code\", because how would v8 suppose to know where the return address should be if it already patches stuff..?","date":"2018-11-08T18:29:30.509Z","type":"message"}
{"nick":"christop1er","message":"from that context, as in a PR into V8, could the currently running bytecode be deformed at runtime to do that?","date":"2018-11-08T18:30:21.696Z","type":"message"}
{"nick":"christop1er","message":"the return address would literally be a throw, as normal","date":"2018-11-08T18:30:57.481Z","type":"message"}
{"nick":"christop1er","message":"a use case would be debugging a route on a running express server, and be able to jump out without terminating the server","date":"2018-11-08T18:31:24.789Z","type":"message"}
{"nick":"devsnek","message":"there wouldn't be a way to call ThrowException when the debugger is paused","date":"2018-11-08T18:31:32.511Z","type":"message"}
{"nick":"devsnek","message":"whatever thread is executing the js would still be spinning, with the isolate locked","date":"2018-11-08T18:31:49.547Z","type":"message"}
{"nick":"christop1er","message":"could it be inserted into before the next upcoming statement","date":"2018-11-08T18:31:50.590Z","type":"message"}
{"nick":"joyee","message":"christop1er: I don't really know how inspector works, I only know how it normally works, so I can't really answer to that...","date":"2018-11-08T18:32:12.732Z","type":"message"}
{"nick":"christop1er","message":"would have to be the V8 interpreter, and inserted directly into whatever structure is holding the currently executing bytecode","date":"2018-11-08T18:32:45.741Z","type":"message"}
{"nick":"christop1er","message":"ok, thanks for your time anyway. Ive got a whole bunch of workarounds","date":"2018-11-08T18:32:56.147Z","type":"message"}
{"nick":"devsnek","message":"sometimes its the cpu running machine code","date":"2018-11-08T18:32:59.691Z","type":"message"}
{"nick":"devsnek","message":"you would have to deoptimize everything","date":"2018-11-08T18:33:05.088Z","type":"message"}
{"nick":"devsnek","message":"back to ignition","date":"2018-11-08T18:33:12.305Z","type":"message"}
{"nick":"devsnek","message":"where you could then insert/replace nodes in the cst","date":"2018-11-08T18:33:34.430Z","type":"message"}
{"nick":"christop1er","message":"Ive got a kind of meta-vm running anyway, so there's no persistent state change can happen during the code bloack anyway","date":"2018-11-08T18:33:38.384Z","type":"message"}
{"nick":"christop1er","message":"cya :0","date":"2018-11-08T18:33:41.425Z","type":"message"}
{"nick":"joyee","message":"devsnek: is turbofan even turned on when you are using inspector..?","date":"2018-11-08T18:34:16.148Z","type":"message"}
{"nick":"devsnek","message":"no idea lol","date":"2018-11-08T18:34:24.553Z","type":"message"}
{"nick":"devsnek","message":"it would make sense that it would be disabled","date":"2018-11-08T18:34:41.641Z","type":"message"}
{"nick":"devsnek","message":"otherwise stepping would be kinda difficult","date":"2018-11-08T18:34:52.358Z","type":"message"}
{"nick":"seishun","reason":"Disconnected by services","date":"2018-11-08T18:44:20.619Z","type":"quit"}
{"nick":"seishun","date":"2018-11-08T18:44:26.344Z","type":"join"}
{"nick":"srl295","message":"devsnek: MylesBorins: ofrobots:   when v8 is updated to something, the ICU min version will need a bump to 63… what's the best way to track it? https://github.com/nodejs/node/issues/24253#issuecomment-437111806 (Crbug enclosed)","date":"2018-11-08T18:47:05.380Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-11-08T18:52:18.824Z","type":"quit"}
{"nick":"seishun","date":"2018-11-08T18:57:30.552Z","type":"join"}
{"nick":"devsnek","message":"i'm definitely not the person to ask","date":"2018-11-08T18:59:37.048Z","type":"message"}
{"nick":"devsnek","message":"srl295: you could try asking on the canary repo","date":"2018-11-08T19:00:11.382Z","type":"message"}
{"nick":"devsnek","message":"since they would be the first to have the patch","date":"2018-11-08T19:00:24.399Z","type":"message"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-11-08T19:00:45.145Z","type":"quit"}
{"nick":"srl295","message":"devsnek: ok. it will be a hidden failure because node already has v63","date":"2018-11-08T19:01:00.686Z","type":"message"}
{"nick":"srl295","message":"^of ICU","date":"2018-11-08T19:01:05.500Z","type":"message"}
{"nick":"marthinal","date":"2018-11-08T19:01:10.934Z","type":"join"}
{"nick":"devsnek","message":"🤷‍♂️","date":"2018-11-08T19:01:48.501Z","type":"message"}
{"nick":"marthinal","reason":"Ping timeout: 252 seconds","date":"2018-11-08T19:05:24.762Z","type":"quit"}
{"nick":"srl295","message":"looks like v8 doesn't check it's minimum version… just removed the handling for old v ersions.   How do I ask the canary repo?","date":"2018-11-08T19:06:21.958Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/nodejs/node-v8/issues","date":"2018-11-08T19:07:19.218Z","type":"message"}
{"nick":"ryzokuken","message":"Hey srl295","date":"2018-11-08T19:30:29.498Z","type":"message"}
{"nick":"srl295","message":"ryzokuken: hey","date":"2018-11-08T19:30:43.934Z","type":"message"}
{"nick":"ryzokuken","message":"so we'd need to bump ICU version before updating beyond that commit?","date":"2018-11-08T19:31:01.101Z","type":"message"}
{"nick":"srl295","message":"devsnek: https://github.com/nodejs/node-v8/issues/86 thanks","date":"2018-11-08T19:31:05.794Z","type":"message"}
{"nick":"srl295","message":"ryzokuken: ICU is already 63 in master. The _minimum_ needs to be bumped","date":"2018-11-08T19:31:22.046Z","type":"message"}
{"nick":"ryzokuken","message":"Fun fact: none of the people you mentioned look into V8 upgrades :P","date":"2018-11-08T19:31:28.672Z","type":"message"}
{"nick":"srl295","message":"^ else stuff will break.","date":"2018-11-08T19:31:38.232Z","type":"message"}
{"nick":"srl295","message":"Teamwork! Or something!","date":"2018-11-08T19:31:53.856Z","type":"message"}
{"nick":"ryzokuken","message":"I think I don't get what you mean by minimum?","date":"2018-11-08T19:32:01.826Z","type":"message"}
{"nick":"srl295","message":"ICU 63.x is required.  64 is OK too","date":"2018-11-08T19:32:27.830Z","type":"message"}
{"nick":"ryzokuken","message":"and the current master satisfies that?","date":"2018-11-08T19:32:43.438Z","type":"message"}
{"nick":"srl295","message":"configure.py checks the minimum version and fails if it's too old.","date":"2018-11-08T19:32:45.607Z","type":"message"}
{"nick":"srl295","message":"current master is 👍","date":"2018-11-08T19:32:48.726Z","type":"message"}
{"nick":"ryzokuken","message":"then we're good.","date":"2018-11-08T19:32:55.234Z","type":"message"}
{"nick":"srl295","message":"nooo","date":"2018-11-08T19:32:58.822Z","type":"message"}
{"nick":"srl295","message":"not good.","date":"2018-11-08T19:33:00.071Z","type":"message"}
{"nick":"ryzokuken","message":"all new commits in V8 LKGR are rebased on top of the current master?","date":"2018-11-08T19:33:12.677Z","type":"message"}
{"nick":"srl295","message":"because people can run configure against a different ICU than the embedded one","date":"2018-11-08T19:33:22.093Z","type":"message"}
{"nick":"ryzokuken","message":"Oh, I see.","date":"2018-11-08T19:33:32.408Z","type":"message"}
{"nick":"ryzokuken","message":"Is that our problem, though? It won't build if people manually link against the wrong ICU version.","date":"2018-11-08T19:34:04.205Z","type":"message"}
{"nick":"srl295","message":"as of https://github.com/nodejs/node/issues/19657 configure checks a minimum.  This v8 one is particularly bad because  I think it will be data corruption and not a compile failure","date":"2018-11-08T19:34:16.323Z","type":"message"}
{"nick":"ryzokuken","message":"But the way things are, it should work if you don't touch anything, right?","date":"2018-11-08T19:34:28.119Z","type":"message"}
{"nick":"srl295","message":"in this case it might build but get the wrong result","date":"2018-11-08T19:34:41.250Z","type":"message"}
{"nick":"ryzokuken","message":"Oh, that's bad.","date":"2018-11-08T19:34:49.063Z","type":"message"}
{"nick":"srl295","message":"yea","date":"2018-11-08T19:34:54.633Z","type":"message"}
{"nick":"srl295","message":"I'm going to try to get v8 to put in a minimum check too so it'd be a build failure","date":"2018-11-08T19:35:15.444Z","type":"message"}
{"nick":"ryzokuken","message":"So, what do you propose? Should we throw a build failure if people link against the wrong version?","date":"2018-11-08T19:35:33.261Z","type":"message"}
{"nick":"ryzokuken","message":"Yeah, that.","date":"2018-11-08T19:35:36.263Z","type":"message"}
{"nick":"ryzokuken","message":"Why wouldn't they do it themselves? Did you talk to Frank about this?","date":"2018-11-08T19:36:19.733Z","type":"message"}
{"nick":"srl295","message":"ryzokuken: i put the patch in https://github.com/nodejs/node-v8/issues/86#issue-378882513 — just need to increment a number in refack’s nifty JSON file","date":"2018-11-08T19:36:42.334Z","type":"message"}
{"nick":"ryzokuken","message":"so if we push a commit with that line right now, it'll work?","date":"2018-11-08T19:37:24.174Z","type":"message"}
{"nick":"srl295","message":"hm..","date":"2018-11-08T19:37:33.186Z","type":"message"}
{"nick":"ryzokuken","message":"the rebase should probably happen in the next few hours. If it's already landed in V8, then it's just a matter of time...","date":"2018-11-08T19:38:10.311Z","type":"message"}
{"nick":"srl295","message":"that's more strict than necessary. Do you have any idea how far the v8 commit is from … ","date":"2018-11-08T19:38:15.939Z","type":"message"}
{"nick":"ryzokuken","message":"https://github.com/v8/v8/commit/30a350f298732d6622712aa113d72fe3382c7f39","date":"2018-11-08T19:38:29.084Z","type":"message"}
{"nick":"ryzokuken","message":"from landing in master?","date":"2018-11-08T19:38:37.407Z","type":"message"}
{"nick":"refack","message":"😊","date":"2018-11-08T19:38:38.140Z","type":"message"}
{"nick":"ryzokuken","message":"it should land on canary tonight.","date":"2018-11-08T19:39:01.349Z","type":"message"}
{"nick":"srl295","message":"^ okay, like i said teamwork.  if this v8 was going to wait to land in Unununium then I'd say wait on this patch :)","date":"2018-11-08T19:40:13.530Z","type":"message"}
{"nick":"ryzokuken","message":"It'll take time to get this version in a release.","date":"2018-11-08T19:41:01.966Z","type":"message"}
{"nick":"srl295","message":"…but not to get into master","date":"2018-11-08T19:41:14.498Z","type":"message"}
{"nick":"ryzokuken","message":"but it'll land on canary (and node-v8) sooner.","date":"2018-11-08T19:41:19.925Z","type":"message"}
{"nick":"ryzokuken","message":"and master too.","date":"2018-11-08T19:41:27.992Z","type":"message"}
{"nick":"srl295","message":"OK. so let's increment…","date":"2018-11-08T19:41:53.196Z","type":"message"}
{"nick":"ryzokuken","message":"I mean, I build canary personally, so you have yourself an audience :P","date":"2018-11-08T19:42:25.120Z","type":"message"}
{"nick":"ryzokuken","message":"plus we have CI jobs building it, so that shouldn't be a problem.","date":"2018-11-08T19:42:40.923Z","type":"message"}
{"nick":"srl295","message":"ryzokuken: I have to get to some other things, can anyone do the honors of the increment? to 63 as in the issue (± line endings)","date":"2018-11-08T19:43:20.265Z","type":"message"}
{"nick":"ryzokuken","message":"srl295: just checked https://github.com/v8/v8/commit/30a350f298732d6622712aa113d72fe3382c7f39","date":"2018-11-08T19:43:44.876Z","type":"message"}
{"nick":"ryzokuken","message":"It's landed on LKGR.","date":"2018-11-08T19:43:51.425Z","type":"message"}
{"nick":"lundibundi","reason":"Ping timeout: 252 seconds","date":"2018-11-08T19:43:54.765Z","type":"quit"}
{"nick":"ryzokuken","message":"So I'm positive that it's landing on canary tonight.","date":"2018-11-08T19:44:04.142Z","type":"message"}
{"nick":"ryzokuken","message":"srl295: if that's all (the diff on the issue), I could make a patch.","date":"2018-11-08T19:44:26.807Z","type":"message"}
{"nick":"srl295","message":"cool that's alL","date":"2018-11-08T19:44:37.576Z","type":"message"}
{"nick":"ryzokuken","message":"do you have a test in mind that _should_ fail in case it's not done how it's supposed to be?","date":"2018-11-08T19:44:51.495Z","type":"message"}
{"nick":"ryzokuken","message":"srl295: ^","date":"2018-11-08T19:46:33.465Z","type":"message"}
{"nick":"srl295","message":"ryzokuken: I don't (probably a locale mapping test), but you'd have to build with an old ICU. I can give you a command line that will fail for configure…","date":"2018-11-08T19:47:15.583Z","type":"message"}
{"nick":"ryzokuken","message":"that could work.","date":"2018-11-08T19:47:35.238Z","type":"message"}
{"nick":"ryzokuken","message":"I'm thinking that we should add a test for it in master promptly.","date":"2018-11-08T19:47:49.262Z","type":"message"}
{"nick":"ryzokuken","message":"so that we get a CI fail.","date":"2018-11-08T19:48:00.966Z","type":"message"}
{"nick":"ryzokuken","message":"fun fact: test failures aren't counted as CI failures for canary, but they're still better than nothing.","date":"2018-11-08T19:48:29.316Z","type":"message"}
{"nick":"ryzokuken","message":"devsnek: in https://github.com/nodejs/node/pull/21573, when you say \"which tests cover this\", do you mean to talk about the newly introduced behavior?","date":"2018-11-08T19:49:14.255Z","type":"message"}
{"nick":"ryzokuken","message":"i.e. the monkey-patching?","date":"2018-11-08T19:49:21.672Z","type":"message"}
{"nick":"devsnek","message":"ryzokuken: yes","date":"2018-11-08T19:49:23.837Z","type":"message"}
{"nick":"devsnek","message":"since you didn't add any tests","date":"2018-11-08T19:49:28.163Z","type":"message"}
{"nick":"devsnek","message":"i assume some tests somewhere already exist","date":"2018-11-08T19:49:33.617Z","type":"message"}
{"nick":"ryzokuken","message":"Yeah, I noticed that too :P","date":"2018-11-08T19:49:36.944Z","type":"message"}
{"nick":"ryzokuken","message":"They don't, I will.","date":"2018-11-08T19:49:41.517Z","type":"message"}
{"nick":"devsnek","message":"cool","date":"2018-11-08T19:49:45.254Z","type":"message"}
{"nick":"srl295","message":"ryzokuken:  `./configure --with-icu-source=https://sourceforge.net/projects/icu/files/ICU4C/49.1/icu4c-49_1-src.tgz/download` will say '49 is too old, need 57' and when bumped it will say '49 is too old, need 63'","date":"2018-11-08T19:49:51.249Z","type":"message"}
{"nick":"ryzokuken","message":"so, I verify that the offsets are wrong when they're patched and okay when not?","date":"2018-11-08T19:50:07.540Z","type":"message"}
{"nick":"ryzokuken","message":"does that sound like a good test to you, devsnek?","date":"2018-11-08T19:50:19.044Z","type":"message"}
{"nick":"srl295","message":"ryzokuken: but again, master won't fail because master is already on 63","date":"2018-11-08T19:50:27.708Z","type":"message"}
{"nick":"devsnek","message":"ryzokuken: i dunno","date":"2018-11-08T19:50:32.540Z","type":"message"}
{"nick":"srl295","message":"^ ICU 63","date":"2018-11-08T19:50:33.689Z","type":"message"}
{"nick":"ryzokuken","message":"srl295: you mean _after_ the patch?","date":"2018-11-08T19:50:49.293Z","type":"message"}
{"nick":"ryzokuken","message":"I was wondering about before.","date":"2018-11-08T19:50:56.666Z","type":"message"}
{"nick":"ryzokuken","message":"like... you said it won't fail but will have weird issues. So I was wondering if we could just add a test to check if that's the case (messed up ICU version).","date":"2018-11-08T19:51:42.141Z","type":"message"}
{"nick":"srl295","message":"which patch? (α) the v8 change, (β) my change to system-icu to check version, or (γ) the JSON bump to require ICU 63?","date":"2018-11-08T19:52:21.320Z","type":"message"}
{"nick":"ryzokuken","message":"srl295: imagine the v8 patch is in and we didn't make any amends.","date":"2018-11-08T19:53:05.180Z","type":"message"}
{"nick":"ryzokuken","message":"what kind of weird behavior do you expect?","date":"2018-11-08T19:53:15.488Z","type":"message"}
{"nick":"lundibundi","date":"2018-11-08T19:53:22.484Z","type":"join"}
{"nick":"ryzokuken","message":"can we add a test to detect that?","date":"2018-11-08T19:53:23.098Z","type":"message"}
{"nick":"ryzokuken","message":"also, the person has built node using the wrong version of ICU (older than 63).","date":"2018-11-08T19:53:46.920Z","type":"message"}
{"nick":"srl295","message":"okay, actually `  387:   if (unit_enum != UDAT_REL_UNIT_QUARTER) {  // ICU did not implement <63`. this will fail to compile.","date":"2018-11-08T19:53:53.431Z","type":"message"}
{"nick":"srl295","message":"so probably OK test wise","date":"2018-11-08T19:54:04.531Z","type":"message"}
{"nick":"ryzokuken","message":"so this will throw an actual compile-time error?","date":"2018-11-08T19:54:53.017Z","type":"message"}
{"nick":"al-damiri","date":"2018-11-08T19:54:53.987Z","type":"join"}
{"nick":"ryzokuken","message":"but then in that case, it should build, right?","date":"2018-11-08T19:55:16.588Z","type":"message"}
{"nick":"ryzokuken","message":"shouldn't*","date":"2018-11-08T19:56:31.046Z","type":"message"}
{"nick":"ryzokuken","message":"successfully","date":"2018-11-08T19:56:34.470Z","type":"message"}
{"nick":"doodadjs","reason":"Ping timeout: 240 seconds","date":"2018-11-08T19:57:27.331Z","type":"quit"}
{"nick":"srl295","message":"yeah, but that wasn't the patch that landed. so it might still build.   ryzokuken can we bump the JSON to change the requirement, and after it lands add an intl test in a new issue?","date":"2018-11-08T19:57:30.936Z","type":"message"}
{"nick":"ryzokuken","message":"srl295: sounds good. Sorry, I was just weighing in the options.","date":"2018-11-08T19:58:10.716Z","type":"message"}
{"nick":"ryzokuken","message":"srl295: I guess it'll be fine to land the patch on master?","date":"2018-11-08T19:58:31.515Z","type":"message"}
{"nick":"ryzokuken","message":"I'll just request it to be fast-forwarded.","date":"2018-11-08T19:58:50.795Z","type":"message"}
{"nick":"srl295","message":"ryzokuken: no problem. yes, fine to land both the v8 patch and the version number bump patch","date":"2018-11-08T19:58:59.647Z","type":"message"}
{"nick":"ryzokuken","message":"Cool! I'll make a PR and CC you.","date":"2018-11-08T19:59:16.444Z","type":"message"}
{"nick":"ryzokuken","message":"devsnek: should've seen this coming. The merge conflict was because of the dynamic modules thingie.","date":"2018-11-08T20:01:20.270Z","type":"message"}
{"nick":"devsnek","message":"👍","date":"2018-11-08T20:01:35.116Z","type":"message"}
{"nick":"ryzokuken","message":"devsnek: so you've added support for it in `runInThisContext`?","date":"2018-11-08T20:02:02.333Z","type":"message"}
{"nick":"ryzokuken","message":"I guess the same would be required for `compileFunction` in order to keep things working?","date":"2018-11-08T20:02:24.538Z","type":"message"}
{"nick":"devsnek","message":"ryzokuken: support for what","date":"2018-11-08T20:05:36.666Z","type":"message"}
{"nick":"ryzokuken","message":"dynamic modules.","date":"2018-11-08T20:05:51.650Z","type":"message"}
{"nick":"ryzokuken","message":"the `importModuleDynamically` option currently has no equivalent in `compileFunction`.","date":"2018-11-08T20:06:36.560Z","type":"message"}
{"nick":"devsnek","message":"ryzokuken: it wouldn't make any sense in compileFunction","date":"2018-11-08T20:10:42.100Z","type":"message"}
{"nick":"devsnek","message":"a function runs inside a script","date":"2018-11-08T20:10:53.122Z","type":"message"}
{"nick":"ryzokuken","message":"I was thinking along those lines, yes.","date":"2018-11-08T20:11:01.071Z","type":"message"}
{"nick":"ryzokuken","message":"aaand, nothing would break?","date":"2018-11-08T20:11:07.318Z","type":"message"}
{"nick":"ryzokuken","message":"in which case, I could just remove that.","date":"2018-11-08T20:11:29.219Z","type":"message"}
{"nick":"marthinal","date":"2018-11-08T20:12:14.473Z","type":"join"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-11-08T20:12:46.680Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T20:12:53.492Z","type":"join"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-11-08T20:14:15.312Z","type":"quit"}
{"nick":"seishun","reason":"Ping timeout: 240 seconds","date":"2018-11-08T20:27:27.323Z","type":"quit"}
{"nick":"refack","message":"ryzokuken: why target https://github.com/nodejs/node/pull/24258 to `master` and not `canary-base`?","date":"2018-11-08T20:33:06.809Z","type":"message"}
{"nick":"ryzokuken","message":"because canary-base will be rebased on top of master anyway?","date":"2018-11-08T20:33:31.079Z","type":"message"}
{"nick":"refack","message":"We have time until we get to 7.2.274","date":"2018-11-08T20:33:42.420Z","type":"message"}
{"nick":"ryzokuken","message":"hmm, true that. Won't really hurt to impose this on master though, would it?","date":"2018-11-08T20:34:11.556Z","type":"message"}
{"nick":"refack","message":"Yeah, but `master` is on V8 7.0 and we will only consider then 7.2 gets to beta","date":"2018-11-08T20:34:13.899Z","type":"message"}
{"nick":"ryzokuken","message":"considering that it already contains ICU 63","date":"2018-11-08T20:34:30.579Z","type":"message"}
{"nick":"refack","message":"Well if it gets to 11, it's semver-major","date":"2018-11-08T20:34:35.461Z","type":"message"}
{"nick":"ryzokuken","message":"I get your point though, will make this change to canary-base.","date":"2018-11-08T20:34:55.657Z","type":"message"}
{"nick":"refack","message":"i.e. someone building node11 with `./configure --with-icu-source=57` will break","date":"2018-11-08T20:35:29.312Z","type":"message"}
{"nick":"ryzokuken","message":"I was trying to keep the number of floating patches minimal.","date":"2018-11-08T20:35:31.644Z","type":"message"}
{"nick":"ryzokuken","message":"😅","date":"2018-11-08T20:35:34.689Z","type":"message"}
{"nick":"refack","message":"YEah, I get it","date":"2018-11-08T20:37:02.603Z","type":"message"}
{"nick":"refack","message":"But I think in _this_ case it will be easier to track for the releasers","date":"2018-11-08T20:37:32.395Z","type":"message"}
{"nick":"ryzokuken","message":"refack: will rebase.","date":"2018-11-08T20:39:36.239Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T20:42:45.393Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 252 seconds","date":"2018-11-08T20:48:09.884Z","type":"quit"}
{"nick":"seishun","date":"2018-11-08T21:09:08.055Z","type":"join"}
{"nick":"doodadjs","date":"2018-11-08T21:14:23.391Z","type":"join"}
{"nick":"seishun","reason":"Ping timeout: 246 seconds","date":"2018-11-08T21:18:10.250Z","type":"quit"}
{"nick":"zeds","date":"2018-11-08T21:31:12.029Z","type":"join"}
