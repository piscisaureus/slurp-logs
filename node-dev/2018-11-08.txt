{"nick":"antsmartian","date":"2018-11-08T01:26:03.081Z","type":"join"}
{"nick":"indutny","message":"Hey y'all","date":"2018-11-08T01:26:20.322Z","type":"message"}
{"nick":"indutny","message":"Anyone wants to give a feedback on https://github.com/nodejs/node/pull/24059 ?","date":"2018-11-08T01:26:28.259Z","type":"message"}
{"nick":"indutny","message":"This is quite a serious change, so any extra check counts!","date":"2018-11-08T01:26:44.790Z","type":"message"}
{"nick":"indutny","message":"s/any/every/","date":"2018-11-08T01:45:07.508Z","type":"message"}
{"nick":"zeds1","date":"2018-11-08T01:45:11.927Z","type":"join"}
{"nick":"devsnek","message":"indutny: i see a bug","date":"2018-11-08T01:45:38.011Z","type":"message"}
{"nick":"indutny","message":"devsnek: nice catch!","date":"2018-11-08T01:45:45.610Z","type":"message"}
{"nick":"indutny","message":"what is it?","date":"2018-11-08T01:45:48.666Z","type":"message"}
{"nick":"devsnek","message":"it isn't merged yet!","date":"2018-11-08T01:45:51.117Z","type":"message"}
{"nick":"indutny","message":":D","date":"2018-11-08T01:46:21.999Z","type":"message"}
{"nick":"indutny","message":"You got me on this","date":"2018-11-08T01:46:28.917Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-11-08T01:46:33.856Z","type":"message"}
{"nick":"indutny","message":"Just want to make sure that everyone is on board with this change, many contributors are at NodeConf EU","date":"2018-11-08T01:47:01.247Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2018-11-08T01:47:07.706Z","type":"message"}
{"nick":"indutny","message":"Will probably land it in a couple of days, once everyone are back","date":"2018-11-08T01:47:16.967Z","type":"message"}
{"nick":"indutny","message":"Maybe even at Saturday","date":"2018-11-08T01:47:31.417Z","type":"message"}
{"nick":"zeds1","date":"2018-11-08T01:47:36.234Z","type":"part"}
{"nick":"doodadjs","reason":"Ping timeout: 244 seconds","date":"2018-11-08T02:05:03.565Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T02:17:16.089Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 252 seconds","date":"2018-11-08T02:21:33.945Z","type":"quit"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2018-11-08T02:56:35.974Z","type":"quit"}
{"nick":"t0dd1v","date":"2018-11-08T02:57:49.875Z","type":"join"}
{"nick":"doodadjs","date":"2018-11-08T03:26:30.384Z","type":"join"}
{"nick":"bradleymeck","message":"indutny: i'm trying to grok if this is generating C code or just a JS parser output from TS","date":"2018-11-08T03:31:05.616Z","type":"message"}
{"nick":"bradleymeck","message":"right now I'm not too keen on making a huge chunk of new JS code land if it could get into weird mutation problems","date":"2018-11-08T03:31:58.466Z","type":"message"}
{"nick":"devsnek","message":"bradleymeck: it generates the c code","date":"2018-11-08T03:33:53.966Z","type":"message"}
{"nick":"devsnek","message":"llhttp.c","date":"2018-11-08T03:33:57.102Z","type":"message"}
{"nick":"devsnek","message":"in theory it could also generate js","date":"2018-11-08T03:34:19.106Z","type":"message"}
{"nick":"doodadjs","reason":"Ping timeout: 245 seconds","date":"2018-11-08T03:34:38.363Z","type":"quit"}
{"nick":"indutny","message":"bradleymeck: it is C code that lands","date":"2018-11-08T04:12:36.414Z","type":"message"}
{"nick":"indutny","message":"just as devsnek described","date":"2018-11-08T04:12:49.438Z","type":"message"}
{"nick":"marthinal","date":"2018-11-08T04:31:44.441Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 246 seconds","date":"2018-11-08T04:36:07.251Z","type":"quit"}
{"nick":"marthinal","date":"2018-11-08T05:05:04.050Z","type":"join"}
{"nick":"t0dd1v","reason":"Quit: Connection closed for inactivity","date":"2018-11-08T05:07:06.726Z","type":"quit"}
{"nick":"al-damiri","reason":"Quit: Connection closed for inactivity","date":"2018-11-08T06:01:19.279Z","type":"quit"}
{"nick":"lpin","date":"2018-11-08T06:16:00.527Z","type":"join"}
{"nick":"joyee","message":"Does anyone know if we still need to apply dont-land-on-6.x labels now that 6.x is in maintanence mode?","date":"2018-11-08T06:22:48.261Z","type":"message"}
{"nick":"joyee","message":"bradleymeck, devsnek: I am thinking about merging safe_globals and per_context - if the modified globals is returned back to C++, the C++ side can pass it back into every other native module to use, and that can be done as early as possible","date":"2018-11-08T06:29:56.504Z","type":"message"}
{"nick":"devsnek","message":"sgtm","date":"2018-11-08T06:30:37.127Z","type":"message"}
{"nick":"devsnek","message":"what will your scheme be for the globals","date":"2018-11-08T06:30:56.322Z","type":"message"}
{"nick":"devsnek","message":"i have a gist somewhere that builds it programmatically","date":"2018-11-08T06:31:13.637Z","type":"message"}
{"nick":"joyee","message":"What do you mean by programmatically?","date":"2018-11-08T06:31:25.390Z","type":"message"}
{"nick":"devsnek","message":"like you don't specify the globals","date":"2018-11-08T06:31:38.088Z","type":"message"}
{"nick":"devsnek","message":"it just scans over them and uses a set naming system","date":"2018-11-08T06:31:46.883Z","type":"message"}
{"nick":"joyee","message":"ummm...still don't quite understand, maybe it will be easier to see the gist","date":"2018-11-08T06:32:06.044Z","type":"message"}
{"nick":"joyee","message":"I am thinking about putting safe globals in the native module wrapeprs","date":"2018-11-08T06:32:38.074Z","type":"message"}
{"nick":"joyee","message":"Although, BTW, conceptually I don't see why safe_globals and per_context have to be done in JS?","date":"2018-11-08T06:33:22.519Z","type":"message"}
{"nick":"devsnek","message":"i guess they don't","date":"2018-11-08T06:33:34.324Z","type":"message"}
{"nick":"devsnek","message":"but its faster","date":"2018-11-08T06:33:42.139Z","type":"message"}
{"nick":"joyee","message":"Aren't those similar to Genesis in V8?","date":"2018-11-08T06:33:50.783Z","type":"message"}
{"nick":"joyee","message":"How though? You have to call into JS to set them up","date":"2018-11-08T06:34:02.785Z","type":"message"}
{"nick":"devsnek","message":"i don't recognize the name genesis with regard to v8","date":"2018-11-08T06:34:10.057Z","type":"message"}
{"nick":"devsnek","message":"https://gist.github.com/devsnek/76aab1dcd169c96b952fbe8c74404475","date":"2018-11-08T06:34:17.880Z","type":"message"}
{"nick":"joyee","message":"And essentially it is setting up dictionary mode objects because there is no way the globals can be in fast mode","date":"2018-11-08T06:34:24.618Z","type":"message"}
{"nick":"devsnek","message":"faster assuming snapshots","date":"2018-11-08T06:35:15.160Z","type":"message"}
{"nick":"joyee","message":"(potentially dumb question: what is primordials?)","date":"2018-11-08T06:35:19.058Z","type":"message"}
{"nick":"devsnek","message":"primordials is just a name for all the things that exist in js before user code runs","date":"2018-11-08T06:35:40.166Z","type":"message"}
{"nick":"devsnek","message":"i would use the name intrinsics but it isn't a 1:1 mapping","date":"2018-11-08T06:35:57.747Z","type":"message"}
{"nick":"joyee","message":"devsnek: I don't think there is a problem wrt. snapshots? v8 also set the builtins up in C++ and snapshot them just fine","date":"2018-11-08T06:36:01.622Z","type":"message"}
{"nick":"devsnek","message":"yeah but v8 isn't going through the api.cc apis","date":"2018-11-08T06:36:19.301Z","type":"message"}
{"nick":"devsnek","message":"they're setting raw pointers","date":"2018-11-08T06:36:29.015Z","type":"message"}
{"nick":"joyee","message":"the API calls also translate to those essentially?","date":"2018-11-08T06:36:57.827Z","type":"message"}
{"nick":"devsnek","message":"builtin setup in v8 is like \"the code for Array.prototype.push exists at this address\"","date":"2018-11-08T06:37:07.964Z","type":"message"}
{"nick":"devsnek","message":"we would need to do like","date":"2018-11-08T06:37:17.889Z","type":"message"}
{"nick":"devsnek","message":"global->Get(\"array\")","date":"2018-11-08T06:37:25.445Z","type":"message"}
{"nick":"joyee","message":"It's more about when you push the pause button and snapshot, less about how you set up this before you push the button","date":"2018-11-08T06:37:28.473Z","type":"message"}
{"nick":"devsnek","message":"array->Get(\"prototype\")","date":"2018-11-08T06:37:32.037Z","type":"message"}
{"nick":"devsnek","message":"then iterate over both of those","date":"2018-11-08T06:37:40.149Z","type":"message"}
{"nick":"devsnek","message":"and the same for every other intrinsic","date":"2018-11-08T06:37:46.739Z","type":"message"}
{"nick":"devsnek","message":"its just slow af","date":"2018-11-08T06:37:54.273Z","type":"message"}
{"nick":"joyee","message":"How is it slower compared to doing this in JS?","date":"2018-11-08T06:38:09.874Z","type":"message"}
{"nick":"devsnek","message":"the c++ api is always slower than doing x in js","date":"2018-11-08T06:38:40.292Z","type":"message"}
{"nick":"devsnek","message":"thats why we write core in js","date":"2018-11-08T06:38:50.906Z","type":"message"}
{"nick":"joyee","message":"We can totally implement APIs in v8 for this if there is a problem - that's what I did for the push values to array","date":"2018-11-08T06:38:56.198Z","type":"message"}
{"nick":"joyee","message":"I thought they are moving more things to C++?","date":"2018-11-08T06:39:23.781Z","type":"message"}
{"nick":"devsnek","message":"only if they need to be","date":"2018-11-08T06:39:39.042Z","type":"message"}
{"nick":"devsnek","message":"i like core using a lot of js","date":"2018-11-08T06:39:51.187Z","type":"message"}
{"nick":"joyee","message":"I think they do things in JS to avoid calling into JS","date":"2018-11-08T06:40:02.802Z","type":"message"}
{"nick":"devsnek","message":"yeah cuz its slow","date":"2018-11-08T06:40:17.738Z","type":"message"}
{"nick":"joyee","message":"Especially Array things that takes callbacks","date":"2018-11-08T06:40:19.015Z","type":"message"}
{"nick":"devsnek","message":"like i keep sayhing","date":"2018-11-08T06:40:24.846Z","type":"message"}
{"nick":"devsnek","message":"saying*","date":"2018-11-08T06:40:27.663Z","type":"message"}
{"nick":"joyee","message":"But there is no callbacks in our globals","date":"2018-11-08T06:40:28.267Z","type":"message"}
{"nick":"devsnek","message":"Object::Get is calling into js","date":"2018-11-08T06:40:41.759Z","type":"message"}
{"nick":"joyee","message":"We don't need to call into JS","date":"2018-11-08T06:40:42.450Z","type":"message"}
{"nick":"devsnek","message":"its not just function calls","date":"2018-11-08T06:41:21.211Z","type":"message"}
{"nick":"devsnek","message":"its interacting with the vm at all","date":"2018-11-08T06:41:26.252Z","type":"message"}
{"nick":"joyee","message":"Oh, I see what you mean, but that can be totally avoided if there is another API for manipulating globals","date":"2018-11-08T06:41:31.008Z","type":"message"}
{"nick":"joyee","message":"Since we are not manipulating some random object","date":"2018-11-08T06:41:49.506Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2018-11-08T06:41:55.622Z","type":"message"}
{"nick":"devsnek","message":"i don't see the reason that this needs to take place in c++ though","date":"2018-11-08T06:42:10.482Z","type":"message"}
{"nick":"joyee","message":"And conceptually, the whole point of hijacking globals is so that you should avoid to call into any user land JS when setting them up","date":"2018-11-08T06:42:43.696Z","type":"message"}
{"nick":"devsnek","message":"we aren't calling into any userland js though","date":"2018-11-08T06:42:58.810Z","type":"message"}
{"nick":"joyee","message":"Yes, because we hijack them, so you don't \"get\" an global.Set","date":"2018-11-08T06:43:33.733Z","type":"message"}
{"nick":"joyee","message":"You dictate them during startup","date":"2018-11-08T06:44:02.673Z","type":"message"}
{"nick":"devsnek","message":"i'm not sure what you're saying","date":"2018-11-08T06:44:09.290Z","type":"message"}
{"nick":"joyee","message":"umm, so I mean, if the .js bootstrapper you are calling do not accept any JS callback, there is little benefit to do them in JS","date":"2018-11-08T06:45:17.713Z","type":"message"}
{"nick":"joyee","message":"In the case of setting up array, there is benefit since Array.p.forEach and friends take callbacks","date":"2018-11-08T06:45:59.416Z","type":"message"}
{"nick":"devsnek","message":"well there's the speed benefit","date":"2018-11-08T06:46:11.268Z","type":"message"}
{"nick":"devsnek","message":"the maintainability benefit","date":"2018-11-08T06:46:15.522Z","type":"message"}
{"nick":"devsnek","message":"(since js is more accessible to people contributing to node)","date":"2018-11-08T06:46:31.618Z","type":"message"}
{"nick":"joyee","message":"I fail to see the maintainability benefit for doing this in JS TBH. There is benefit to do normal native modules in JS, but not really wrt. bootstrap","date":"2018-11-08T06:47:42.039Z","type":"message"}
{"nick":"devsnek","message":"bootstrap is a large concept","date":"2018-11-08T06:48:12.286Z","type":"message"}
{"nick":"devsnek","message":"there are parts of it i would expect to be in c++ and parts i would expect to be in js","date":"2018-11-08T06:48:25.402Z","type":"message"}
{"nick":"joyee","message":"The bootstrap is doing very high priest JS things in the first place, so you cannot attract normal JS devs, you only attract language enthusiasts","date":"2018-11-08T06:48:33.537Z","type":"message"}
{"nick":"devsnek","message":"if i were going to add the safe globals","date":"2018-11-08T06:49:55.081Z","type":"message"}
{"nick":"devsnek","message":"i would put my big loop above inside per_context, return the resulting object","date":"2018-11-08T06:50:15.381Z","type":"message"}
{"nick":"devsnek","message":"and then put that object on an internal slot of the context or something","date":"2018-11-08T06:50:24.270Z","type":"message"}
{"nick":"devsnek","message":"or just pass it straight to bootstrap/loader","date":"2018-11-08T06:50:53.245Z","type":"message"}
{"nick":"devsnek","message":"my memory of when contexts are created is hazy","date":"2018-11-08T06:51:02.327Z","type":"message"}
{"nick":"joyee","message":"What is the code doing exactly?","date":"2018-11-08T06:52:39.502Z","type":"message"}
{"nick":"joyee","message":"This is probably a bit too high priest JS for me..","date":"2018-11-08T06:53:08.764Z","type":"message"}
{"nick":"devsnek","message":"it loops through the global object","date":"2018-11-08T06:53:18.372Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T06:53:29.992Z","type":"join"}
{"nick":"devsnek","message":"takes all the methods of the prototypes of the constructors","date":"2018-11-08T06:53:33.777Z","type":"message"}
{"nick":"devsnek","message":"uncurries them","date":"2018-11-08T06:53:39.282Z","type":"message"}
{"nick":"devsnek","message":"saves them to a new object","date":"2018-11-08T06:53:48.642Z","type":"message"}
{"nick":"devsnek","message":"so you could do `primodials.ArrayMap(array, fn)`","date":"2018-11-08T06:54:02.358Z","type":"message"}
{"nick":"devsnek","message":"x = new primordials.Set(); primordials.SetAdd(x, 5)","date":"2018-11-08T06:54:48.111Z","type":"message"}
{"nick":"devsnek","message":"i was also considering doing what our current safe_globals does where it makes the frozen subclasses","date":"2018-11-08T06:55:10.292Z","type":"message"}
{"nick":"joyee","message":"But why can't you make a set of new globals anyway?","date":"2018-11-08T06:55:14.823Z","type":"message"}
{"nick":"devsnek","message":"but i never got around to it","date":"2018-11-08T06:55:15.392Z","type":"message"}
{"nick":"devsnek","message":"wdym","date":"2018-11-08T06:55:20.291Z","type":"message"}
{"nick":"joyee","message":"Separate the globals our builtins use and the ones that user land uses","date":"2018-11-08T06:55:48.132Z","type":"message"}
{"nick":"devsnek","message":"well they should be the same builtins","date":"2018-11-08T06:56:06.791Z","type":"message"}
{"nick":"devsnek","message":"the difference is just that we always have access to the originals","date":"2018-11-08T06:56:16.637Z","type":"message"}
{"nick":"devsnek","message":"like how in spec land, %Promise% is global.Promise","date":"2018-11-08T06:56:24.986Z","type":"message"}
{"nick":"devsnek","message":"but await always uses %Promise%","date":"2018-11-08T06:56:33.692Z","type":"message"}
{"nick":"devsnek","message":"its not a different promise, just an internal pointer to the original","date":"2018-11-08T06:56:42.179Z","type":"message"}
{"nick":"devsnek","message":"thats what the safe globals are for, constant references to the original globals and their original prototype methods","date":"2018-11-08T06:57:53.571Z","type":"message"}
{"nick":"joyee","message":"But our C++ code creating the promises are not creating global.Promise","date":"2018-11-08T06:57:57.234Z","type":"message"}
{"nick":"devsnek","message":"right","date":"2018-11-08T06:58:07.088Z","type":"message"}
{"nick":"joyee","message":"They are using v8 APIs","date":"2018-11-08T06:58:07.236Z","type":"message"}
{"nick":"devsnek","message":"in C++ we don't really need to worry about it","date":"2018-11-08T06:58:18.267Z","type":"message"}
{"nick":"joyee","message":"That's my point","date":"2018-11-08T06:58:27.101Z","type":"message"}
{"nick":"devsnek","message":"safe globals are for our js core","date":"2018-11-08T06:58:36.445Z","type":"message"}
{"nick":"joyee","message":"We move \"the don't worry about it bit\" into one giant blob and pass it into native JS modules","date":"2018-11-08T06:58:56.673Z","type":"message"}
{"nick":"devsnek","message":"like patch the scope of our internals?","date":"2018-11-08T06:59:22.356Z","type":"message"}
{"nick":"devsnek","message":"we can't do that","date":"2018-11-08T06:59:34.119Z","type":"message"}
{"nick":"devsnek","message":"well we might be able to","date":"2018-11-08T06:59:46.505Z","type":"message"}
{"nick":"devsnek","message":"depending on how we structure the safe globals","date":"2018-11-08T06:59:53.793Z","type":"message"}
{"nick":"devsnek","message":"if we do it where we use frozen subclasses, we can't do that","date":"2018-11-08T07:00:00.899Z","type":"message"}
{"nick":"joyee","message":"hmm, anyway it's just a thought, I am essentially proposing to allow embedder to do Genesis","date":"2018-11-08T07:01:48.138Z","type":"message"}
{"nick":"joyee","message":"So this probably need to end up as a V8 thing first","date":"2018-11-08T07:02:17.257Z","type":"message"}
{"nick":"devsnek","message":"joyee: what is genesis","date":"2018-11-08T07:04:26.888Z","type":"message"}
{"nick":"joyee","message":"devsnek: see bootstrapper.cc in v8","date":"2018-11-08T07:04:38.585Z","type":"message"}
{"nick":"devsnek","message":"i've read it a bunch","date":"2018-11-08T07:04:45.245Z","type":"message"}
{"nick":"joyee","message":"Conceptually we shouldn't do Object::Get to, say, get a Set from global","date":"2018-11-08T07:04:58.369Z","type":"message"}
{"nick":"devsnek","message":"i can take another look","date":"2018-11-08T07:05:05.140Z","type":"message"}
{"nick":"devsnek","message":"oh genesis bootstraps a context","date":"2018-11-08T07:05:31.640Z","type":"message"}
{"nick":"devsnek","message":"why would node use that","date":"2018-11-08T07:05:43.972Z","type":"message"}
{"nick":"joyee","message":"We should be able to just create a Set builtin oursevles, in C++, or just get the original somehow before everything starts","date":"2018-11-08T07:05:53.977Z","type":"message"}
{"nick":"devsnek","message":"well you can create it in c++","date":"2018-11-08T07:06:17.500Z","type":"message"}
{"nick":"devsnek","message":"Set::New","date":"2018-11-08T07:06:20.779Z","type":"message"}
{"nick":"joyee","message":"That's creating a new Set instance","date":"2018-11-08T07:06:33.530Z","type":"message"}
{"nick":"joyee","message":"Not creating global.Set","date":"2018-11-08T07:06:38.520Z","type":"message"}
{"nick":"devsnek","message":"why would you want to create a new one","date":"2018-11-08T07:06:54.210Z","type":"message"}
{"nick":"joyee","message":"So that you don't need SafeSet","date":"2018-11-08T07:07:04.003Z","type":"message"}
{"nick":"devsnek","message":"they should still match up by context though","date":"2018-11-08T07:07:21.779Z","type":"message"}
{"nick":"devsnek","message":"like you don't want two unique sets floating around","date":"2018-11-08T07:08:01.824Z","type":"message"}
{"nick":"devsnek","message":"you just want secure references to the prototype methods","date":"2018-11-08T07:08:14.460Z","type":"message"}
{"nick":"devsnek","message":"and the constructor","date":"2018-11-08T07:08:17.490Z","type":"message"}
{"nick":"joyee","message":"Isn't that what SafeSet is about in the first place","date":"2018-11-08T07:08:19.023Z","type":"message"}
{"nick":"devsnek","message":"which is why i'm not a huge fan of the SafeSubclass pattern","date":"2018-11-08T07:08:30.788Z","type":"message"}
{"nick":"joyee","message":"Oh you can totally set up a \"proxy\" Set with references to the original methods","date":"2018-11-08T07:08:52.861Z","type":"message"}
{"nick":"joyee","message":"Not JS proxy","date":"2018-11-08T07:09:01.309Z","type":"message"}
{"nick":"devsnek","message":"thats what i've been considering for a while","date":"2018-11-08T07:09:03.338Z","type":"message"}
{"nick":"joyee","message":"That's what your primordials is doing right?","date":"2018-11-08T07:09:22.131Z","type":"message"}
{"nick":"devsnek","message":"an object where the constructor is the original constructor but its not wired up the same way","date":"2018-11-08T07:09:29.071Z","type":"message"}
{"nick":"devsnek","message":"eh","date":"2018-11-08T07:09:30.477Z","type":"message"}
{"nick":"devsnek","message":"primordials is a big flat map","date":"2018-11-08T07:09:39.689Z","type":"message"}
{"nick":"joyee","message":"But you can also do that in C++, with macros","date":"2018-11-08T07:09:55.262Z","type":"message"}
{"nick":"devsnek","message":"{ Set, SetAdd, SetDelete, etc }","date":"2018-11-08T07:09:56.764Z","type":"message"}
{"nick":"devsnek","message":"this pattern makes a lot of sense because then you can kinda do `SetAdd(setThatWasPassedFromUser, 5)`","date":"2018-11-08T07:10:48.175Z","type":"message"}
{"nick":"devsnek","message":"stuff like that","date":"2018-11-08T07:10:57.391Z","type":"message"}
{"nick":"joyee","message":"It should still work if SetAdd is created in C++, because JavaScript","date":"2018-11-08T07:11:56.515Z","type":"message"}
{"nick":"devsnek","message":"sure","date":"2018-11-08T07:12:08.936Z","type":"message"}
{"nick":"devsnek","message":"in the context of our implementation though, i don't see a reason to create SetAdd in c++","date":"2018-11-08T07:12:36.012Z","type":"message"}
{"nick":"devsnek","message":"i don't even know if you could","date":"2018-11-08T07:12:39.762Z","type":"message"}
{"nick":"devsnek","message":"i guess you could do Function->Get(\"call\")->Get(\"bind\")->Call({ Set->Get(\"prototype\")->Get(\"add\") })","date":"2018-11-08T07:13:21.070Z","type":"message"}
{"nick":"joyee","message":"If it has to be convoluted like that, it's a matter of adding new APIs in V8","date":"2018-11-08T07:13:48.826Z","type":"message"}
{"nick":"devsnek","message":"yeah","date":"2018-11-08T07:13:53.209Z","type":"message"}
{"nick":"devsnek","message":"that one line would probably take the same amount of time as the entire loop in js","date":"2018-11-08T07:14:13.552Z","type":"message"}
{"nick":"devsnek","message":"joyee: i'm still missing the context on why this needs to be in c++","date":"2018-11-08T07:15:07.192Z","type":"message"}
{"nick":"devsnek","message":"and not just like at the top of our nativemodule setup","date":"2018-11-08T07:15:25.150Z","type":"message"}
{"nick":"joyee","message":"If V8 can install globals in C++, and be sure that their JS implementation is not using tainted ones while being performant, why can't we?","date":"2018-11-08T07:15:25.476Z","type":"message"}
{"nick":"joyee","message":"Because you are relying on JS code to make a safe JS context, that somehow seems wrong to me","date":"2018-11-08T07:16:27.519Z","type":"message"}
{"nick":"devsnek","message":"well v8 has natives syntax for their js code","date":"2018-11-08T07:16:27.689Z","type":"message"}
{"nick":"devsnek","message":"which basically inlines calls to builtins","date":"2018-11-08T07:16:38.783Z","type":"message"}
{"nick":"devsnek","message":"which is something we could also do, but the chakra people would get mad","date":"2018-11-08T07:16:53.049Z","type":"message"}
{"nick":"joyee","message":"I know, we just need them to expose the machinenary  that they use to install builtins to us in a \"we are not demanding you to expose your internals\" way","date":"2018-11-08T07:18:13.322Z","type":"message"}
{"nick":"devsnek","message":"shrug","date":"2018-11-08T07:18:53.021Z","type":"message"}
{"nick":"joyee","message":"I don't see how it's going to be bad for chakra, they can totally shim this..","date":"2018-11-08T07:18:54.192Z","type":"message"}
{"nick":"devsnek","message":"no i was saying","date":"2018-11-08T07:19:11.579Z","type":"message"}
{"nick":"devsnek","message":"natives syntax is bad for chakra","date":"2018-11-08T07:19:15.596Z","type":"message"}
{"nick":"devsnek","message":"%SetAdd()","date":"2018-11-08T07:19:19.163Z","type":"message"}
{"nick":"joyee","message":"Oh, sorry, I was not talking about using %","date":"2018-11-08T07:19:37.020Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-11-08T07:19:40.772Z","type":"message"}
{"nick":"devsnek","message":"anyway my viewpoint is basically","date":"2018-11-08T07:20:00.402Z","type":"message"}
{"nick":"joyee","message":"But something that allows us to do % that's not possible in user land","date":"2018-11-08T07:20:07.086Z","type":"message"}
{"nick":"devsnek","message":"we can do a bunch of work and make new apis and whatnot to do this in c++","date":"2018-11-08T07:20:16.460Z","type":"message"}
{"nick":"devsnek","message":"or we can add a couple of lines to our native loader bootstrap","date":"2018-11-08T07:20:24.441Z","type":"message"}
{"nick":"joyee","message":"That can be a prototype, sure, but since we are an embedder, we should be able to do that in C++, this also makes it easier to snapshot them because you'll know exactly when to snapshot","date":"2018-11-08T07:21:41.275Z","type":"message"}
{"nick":"joyee","message":"Whereas if you have a bunch of C++ <-> JS calls back and forth during bootstrap, it would be hard to tell when is safe to snapshot, since JS has access to NativeModule which can introduce many environment-dependent stuff","date":"2018-11-08T07:24:22.665Z","type":"message"}
{"nick":"TimothyGu","message":"joyee: are you still based in hangzhou?","date":"2018-11-08T07:24:30.903Z","type":"message"}
{"nick":"joyee","message":"TimothyGu: yeah","date":"2018-11-08T07:24:38.393Z","type":"message"}
{"nick":"TimothyGu","message":"ah nice","date":"2018-11-08T07:24:45.295Z","type":"message"}
{"nick":"devsnek","message":"hello timothy","date":"2018-11-08T07:24:56.997Z","type":"message"}
{"nick":"TimothyGu","message":"devsnek: hi snek","date":"2018-11-08T07:25:44.406Z","type":"message"}
{"nick":"devsnek","message":"joyee: snapshot should happen right before we find/evaluate user code, no?","date":"2018-11-08T07:26:11.258Z","type":"message"}
{"nick":"joyee","message":"TimothyGu: (should I expect to see you soon if you asked about something like that?)","date":"2018-11-08T07:26:14.697Z","type":"message"}
{"nick":"joyee","message":"devsnek: I don't think so, because there are a bunch of stuff depending on environment variables and command line options during bootstrap.","date":"2018-11-08T07:27:04.827Z","type":"message"}
{"nick":"joyee","message":"We need to pick out the environment-independent parts","date":"2018-11-08T07:27:38.123Z","type":"message"}
{"nick":"TimothyGu","message":"joyee: nah, will be back in Shanghai around Christmastime though","date":"2018-11-08T07:27:48.162Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 252 seconds","date":"2018-11-08T07:28:00.100Z","type":"quit"}
{"nick":"joyee","message":"Maybe you'll be interested in going to D2 on 6th January","date":"2018-11-08T07:28:31.480Z","type":"message"}
{"nick":"TimothyGu","message":"lol I fly out the day before that","date":"2018-11-08T07:28:44.403Z","type":"message"}
{"nick":"joyee","message":"So sad","date":"2018-11-08T07:28:57.415Z","type":"message"}
{"nick":"TimothyGu","message":"yeah, jan 6th is also my mom's birthday which makes it even worse every year","date":"2018-11-08T07:29:23.590Z","type":"message"}
{"nick":"joyee","message":"devsnek: essentially, snapshot is deserializing an isolate - but if there are if-else thingy that depend on environment variables and stuff, you will serialize to an isolate that is setup according to whoever snapshotted the isolate.","date":"2018-11-08T07:35:36.657Z","type":"message"}
{"nick":"devsnek","message":"makes sense","date":"2018-11-08T07:35:50.511Z","type":"message"}
{"nick":"joyee","message":"devsnek: For example, I believe if you snapshot after you load the command line options, then unless you call into C++ and reparse all the argv every time you need options, the instance will get the options of the what you get when building the snapshot, and that's not going to work","date":"2018-11-08T07:36:25.333Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-11-08T07:36:40.726Z","type":"message"}
{"nick":"joyee","message":"So we need to postpone the caching of options *after* the snapshot is built, then you'll need to know exactly the first time these options are needed, and disentangle all that from the core of bootstrap","date":"2018-11-08T07:38:11.778Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T07:38:15.902Z","type":"join"}
{"nick":"joyee","message":"Now, it would be much easier if you don't even need to call into C++ to get the options if the `if some options are set` part is entirely in C++, because you can get the options from env and that's not serialized by v8 since that's not even on the v8 heap","date":"2018-11-08T07:39:42.173Z","type":"message"}
{"nick":"joyee","message":"So there is benefit of keeping data in C++ land, so that they don't get serialized into the v8 heap and cause inconsistencies","date":"2018-11-08T07:40:30.460Z","type":"message"}
{"nick":"devsnek","message":"well all our options live in c++ land","date":"2018-11-08T07:41:40.482Z","type":"message"}
{"nick":"devsnek","message":"until js asks for them","date":"2018-11-08T07:41:45.178Z","type":"message"}
{"nick":"joyee","message":"Depends on \"what kind of JS\", I guess. It's totally fine to put more post-core-bootstrap things in JS","date":"2018-11-08T07:42:28.727Z","type":"message"}
{"nick":"joyee","message":"But if there's too much bootstrap done in JS, then they'll get serialized into the snapshot and cause troubles and block the whole snapshot effort","date":"2018-11-08T07:43:22.266Z","type":"message"}
{"nick":"devsnek","message":"indeed","date":"2018-11-08T07:43:34.360Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 268 seconds","date":"2018-11-08T07:45:04.848Z","type":"quit"}
{"nick":"joyee","message":"Also funny enough, the JS part of the bootstrap that's environment-dependent are basically caused by caching results in C++","date":"2018-11-08T07:48:57.300Z","type":"message"}
{"nick":"joyee","message":"For example, we use process.env.SOMETHING instead of process.getEnv('SOMETHING') so that we don't have to call into C++, and that caused process.env to be serialized if the snapshot is done after process.env is set up - but why would the bootstrap need to retrieve that from the snapshot if the source of truth is not even on the v8 heap?","date":"2018-11-08T07:49:16.083Z","type":"message"}
{"nick":"devsnek","message":"joyee: process.env is actually a weird native proxy","date":"2018-11-08T07:51:59.012Z","type":"message"}
{"nick":"seishun","date":"2018-11-08T07:51:59.234Z","type":"join"}
{"nick":"devsnek","message":"which calls into c++ on access","date":"2018-11-08T07:52:15.878Z","type":"message"}
{"nick":"joyee","message":"If the bootstrap that needs to know about process.env.SOMETHING is in C++ in the first place, it can just get the result from C++, and doesn't even need the bogus process.env that comes from the snapshot. The post-bootstrap can cache process.env the first time it need it","date":"2018-11-08T07:52:21.802Z","type":"message"}
{"nick":"joyee","message":"devsnek: yes, and that proxy should only be necessary post-core-bootstrap/post-snapshot if the core bootstrap has direct access to C++ and don't depend on serializable v8 heap","date":"2018-11-08T07:54:16.983Z","type":"message"}
{"nick":"seishun","reason":"Ping timeout: 245 seconds","date":"2018-11-08T07:56:18.351Z","type":"quit"}
{"nick":"joyee","message":"devsnek: BTW, V8 cannot serialize handles","date":"2018-11-08T07:57:46.939Z","type":"message"}
{"nick":"joyee","message":"(OK, maybe process.env is a bad example, I'll stick to options)","date":"2018-11-08T07:59:23.299Z","type":"message"}
