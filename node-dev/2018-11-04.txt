{"nick":"devsnek","message":"Trott: your force push broke my smart fridge","date":"2018-11-04T00:22:28.892Z","type":"message"}
{"nick":"Trott","message":"Part of me hopes you're not actually joking just because that would be INCREDIBLE!!!","date":"2018-11-04T00:23:07.053Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-11-04T00:26:21.783Z","type":"message"}
{"nick":"indutny","message":"Pushing straight to the fridge'","date":"2018-11-04T00:26:32.796Z","type":"message"}
{"nick":"devsnek","message":"indutny: i'm really enjoying the generated files in llhttp","date":"2018-11-04T00:27:18.306Z","type":"message"}
{"nick":"indutny","message":"thanks! There're still ways to improve them","date":"2018-11-04T00:27:37.754Z","type":"message"}
{"nick":"devsnek","message":"verbose is fast i geuss","date":"2018-11-04T00:27:49.983Z","type":"message"}
{"nick":"devsnek","message":"guess*","date":"2018-11-04T00:27:51.954Z","type":"message"}
{"nick":"indutny","message":"I plan to move the `blob` declarations to the places that use them","date":"2018-11-04T00:28:01.840Z","type":"message"}
{"nick":"devsnek","message":"wasn't the other component that it would be able to just generate a binary directly using llvm ir","date":"2018-11-04T00:29:48.133Z","type":"message"}
{"nick":"indutny","message":"yeah, it does that","date":"2018-11-04T00:34:13.177Z","type":"message"}
{"nick":"indutny","message":"what's funny is that LLVM IR is slower than plain C","date":"2018-11-04T00:34:26.560Z","type":"message"}
{"nick":"indutny","message":"I have no idea why, and no time to investigate properly","date":"2018-11-04T00:34:39.423Z","type":"message"}
{"nick":"doodadjs","reason":"Ping timeout: 252 seconds","date":"2018-11-04T00:35:21.225Z","type":"quit"}
{"nick":"devsnek","message":"indutny: does it use the same logical output as the c?","date":"2018-11-04T00:37:13.261Z","type":"message"}
{"nick":"indutny","message":"yep","date":"2018-11-04T00:37:20.827Z","type":"message"}
{"nick":"devsnek","message":"i'm seeing a lot of stuff that gcc would optimize out","date":"2018-11-04T00:37:24.170Z","type":"message"}
{"nick":"indutny","message":"well, LLVM IR bitcode can be optimized too","date":"2018-11-04T00:37:34.834Z","type":"message"}
{"nick":"indutny","message":"What likely happens is that the tail calls that I use heavily in the bitcode are preventing the optimizations that work fine on C code","date":"2018-11-04T00:38:11.346Z","type":"message"}
{"nick":"indutny","message":"In fact, I had to disable a couple of optimizations in llvm so that it wouldn't crash during compilation","date":"2018-11-04T00:38:38.409Z","type":"message"}
{"nick":"indutny","message":"These changes are only in llvm 6.0.1 and newer","date":"2018-11-04T00:38:51.505Z","type":"message"}
{"nick":"devsnek","message":"especially those http_parser__c_test_flags methods","date":"2018-11-04T00:39:05.154Z","type":"message"}
{"nick":"indutny","message":"I'm sure that this is inlined at -O3","date":"2018-11-04T00:41:08.989Z","type":"message"}
{"nick":"indutny","message":"hell, llhttp is 2x times faster than http_parser :D","date":"2018-11-04T00:41:20.235Z","type":"message"}
{"nick":"devsnek","message":"definitely","date":"2018-11-04T00:41:23.343Z","type":"message"}
{"nick":"devsnek","message":"maybe llvm-link catches those things too","date":"2018-11-04T00:41:39.739Z","type":"message"}
{"nick":"devsnek","message":"i don't have a good sense of llvm-link behavior though","date":"2018-11-04T00:41:57.206Z","type":"message"}
{"nick":"devsnek","message":"i assume you know more than i do","date":"2018-11-04T00:42:00.708Z","type":"message"}
{"nick":"indutny","message":"I don't","date":"2018-11-04T00:42:04.265Z","type":"message"}
{"nick":"indutny","message":":)","date":"2018-11-04T00:42:05.492Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2018-11-04T00:42:06.956Z","type":"message"}
{"nick":"indutny","message":"`-flto` does some magic","date":"2018-11-04T00:42:12.205Z","type":"message"}
{"nick":"indutny","message":"but it is beyond my understanding right now","date":"2018-11-04T00:42:23.560Z","type":"message"}
{"nick":"indutny","message":"I think it might be just concatenating the bitcode from individual object files","date":"2018-11-04T00:42:41.303Z","type":"message"}
{"nick":"devsnek","message":"how come you emit those flag methods instead of just putting that single line at the location where it happens","date":"2018-11-04T00:42:42.184Z","type":"message"}
{"nick":"indutny","message":"and optimizing it all together","date":"2018-11-04T00:42:44.647Z","type":"message"}
{"nick":"indutny","message":"devsnek: that's the price for a simple API","date":"2018-11-04T00:43:06.658Z","type":"message"}
{"nick":"indutny","message":"API-wise they're similar to external function calls","date":"2018-11-04T00:43:17.406Z","type":"message"}
{"nick":"indutny","message":"so it is easier to emit the functions separately and call them","date":"2018-11-04T00:43:32.486Z","type":"message"}
{"nick":"indutny","message":"plus I don't have to limit the output to single-expression action","date":"2018-11-04T00:43:49.558Z","type":"message"}
{"nick":"indutny","message":"see `mul_add` functions","date":"2018-11-04T00:43:56.228Z","type":"message"}
{"nick":"devsnek","message":"this is setFlag right?","date":"2018-11-04T00:44:12.631Z","type":"message"}
{"nick":"indutny","message":"no, it is `llhttp__c_mul_add_content_length` ?","date":"2018-11-04T00:44:27.272Z","type":"message"}
{"nick":"indutny","message":"multiplication and addition with overflow checks","date":"2018-11-04T00:44:45.947Z","type":"message"}
{"nick":"devsnek","message":"i mean for like http_parser__c_test_flags_1","date":"2018-11-04T00:45:00.094Z","type":"message"}
{"nick":"indutny","message":"ah","date":"2018-11-04T00:45:12.427Z","type":"message"}
{"nick":"indutny","message":"`testFlags`, I guess","date":"2018-11-04T00:45:24.799Z","type":"message"}
{"nick":"devsnek","message":"oh i'm seeing it now","date":"2018-11-04T00:45:51.672Z","type":"message"}
{"nick":"indutny","message":"I should write documentation for llparse","date":"2018-11-04T00:46:18.897Z","type":"message"}
{"nick":"devsnek","message":"oh wait here we go like `http_parser__c_or_flags_3`","date":"2018-11-04T00:46:28.807Z","type":"message"}
{"nick":"devsnek","message":"that looks like the output of setFlag","date":"2018-11-04T00:46:46.902Z","type":"message"}
{"nick":"indutny","message":"yep","date":"2018-11-04T00:46:51.266Z","type":"message"}
{"nick":"indutny","message":"it is `p.code.or('flags')`","date":"2018-11-04T00:47:04.534Z","type":"message"}
{"nick":"devsnek","message":"ye","date":"2018-11-04T00:47:07.086Z","type":"message"}
{"nick":"devsnek","message":"but somewhere between the ts and the output an entire method is introduced","date":"2018-11-04T00:47:37.185Z","type":"message"}
{"nick":"indutny","message":"in llparse","date":"2018-11-04T00:47:46.182Z","type":"message"}
{"nick":"indutny","message":"https://github.com/indutny/llparse/blob/master/src/implementation/c/code/or.ts","date":"2018-11-04T00:48:00.428Z","type":"message"}
{"nick":"indutny","message":"https://github.com/indutny/llparse/blob/master/src/implementation/c/compilation.ts#L184-L192","date":"2018-11-04T00:48:23.386Z","type":"message"}
{"nick":"devsnek","message":"is that like a safety for the fact that you're generating strings of C","date":"2018-11-04T00:48:36.126Z","type":"message"}
{"nick":"indutny","message":"https://github.com/indutny/llparse/blob/master/src/implementation/c/code/field.ts#L7-L21","date":"2018-11-04T00:48:50.884Z","type":"message"}
{"nick":"indutny","message":"what is exactly is a safety?","date":"2018-11-04T00:49:03.894Z","type":"message"}
{"nick":"devsnek","message":"i would expect it to just put the |= at the actual site where its being used","date":"2018-11-04T00:49:03.973Z","type":"message"}
{"nick":"indutny","message":"what do you mean","date":"2018-11-04T00:49:08.772Z","type":"message"}
{"nick":"indutny","message":"ah","date":"2018-11-04T00:49:11.238Z","type":"message"}
{"nick":"indutny","message":"I see","date":"2018-11-04T00:49:13.345Z","type":"message"}
{"nick":"devsnek","message":"yeah i don't get why you do that whole method building thing","date":"2018-11-04T00:49:26.213Z","type":"message"}
{"nick":"indutny","message":"well, because it calls external methods in the same way","date":"2018-11-04T00:49:45.483Z","type":"message"}
{"nick":"indutny","message":"`p.invoke(p.code.match())` and so on","date":"2018-11-04T00:50:10.546Z","type":"message"}
{"nick":"indutny","message":"it was just easier to do it this way","date":"2018-11-04T00:50:19.173Z","type":"message"}
{"nick":"devsnek","message":"so its another place for optimization","date":"2018-11-04T00:50:31.664Z","type":"message"}
{"nick":"indutny","message":"possibly, but not necessarily","date":"2018-11-04T00:50:44.457Z","type":"message"}
{"nick":"indutny","message":"compiler optimizes it away at -O3","date":"2018-11-04T00:50:51.628Z","type":"message"}
{"nick":"devsnek","message":"that doesn't mean you need to give it more to chew :P","date":"2018-11-04T00:51:29.548Z","type":"message"}
{"nick":"indutny","message":"it doesn't :)","date":"2018-11-04T00:51:51.256Z","type":"message"}
{"nick":"indutny","message":"It doesn't mean that I should churn the code base for improving something that doesn't cause problems yet :D","date":"2018-11-04T00:52:08.169Z","type":"message"}
{"nick":"devsnek","message":"heh","date":"2018-11-04T00:52:13.174Z","type":"message"}
{"nick":"indutny","message":"I'm more than happy with performance of that thing. I expected it to be a bit worse than http_parser","date":"2018-11-04T00:52:44.313Z","type":"message"}
{"nick":"indutny","message":"It would be painful to convince everyone to move to llhttp in such case","date":"2018-11-04T00:52:57.649Z","type":"message"}
{"nick":"devsnek","message":"it would be kinda interesting to see what a llparse js target would look like","date":"2018-11-04T00:53:38.780Z","type":"message"}
{"nick":"devsnek","message":"maybe i'll experiment with that at some point","date":"2018-11-04T00:53:45.732Z","type":"message"}
{"nick":"indutny","message":"it should look very similar to the C","date":"2018-11-04T00:54:35.702Z","type":"message"}
{"nick":"indutny","message":"`goto ...` and big `switch`","date":"2018-11-04T00:54:47.224Z","type":"message"}
{"nick":"devsnek","message":"but js has different optimization patterns","date":"2018-11-04T00:55:08.773Z","type":"message"}
{"nick":"indutny","message":"llparse has all necessary abstractions in place for generating another outputs","date":"2018-11-04T00:55:09.369Z","type":"message"}
{"nick":"indutny","message":"true","date":"2018-11-04T00:55:13.855Z","type":"message"}
{"nick":"marthinal","date":"2018-11-04T02:19:51.521Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 245 seconds","date":"2018-11-04T02:24:13.315Z","type":"quit"}
{"nick":"antsmartian","date":"2018-11-04T03:17:10.958Z","type":"join"}
{"nick":"mritunjay_12","reason":"Ping timeout: 256 seconds","date":"2018-11-04T03:22:13.164Z","type":"quit"}
{"nick":"t0dd1v","date":"2018-11-04T03:56:09.692Z","type":"join"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2018-11-04T04:12:37.174Z","type":"quit"}
{"nick":"antsmartian","date":"2018-11-04T04:13:24.078Z","type":"join"}
{"nick":"marthinal","date":"2018-11-04T05:16:54.621Z","type":"join"}
{"nick":"marthinal","reason":"Ping timeout: 240 seconds","date":"2018-11-04T05:21:07.320Z","type":"quit"}
{"nick":"lpin","date":"2018-11-04T06:12:42.625Z","type":"join"}
{"nick":"t0dd1v","reason":"Quit: Connection closed for inactivity","date":"2018-11-04T06:15:28.471Z","type":"quit"}
{"nick":"joyee","message":"I am wondering...if node core is ever going to use ESM internally, that would not be lazy-loadable at all, right? (unless import(), but I suspect we would break a lot of things if the internal loading is async)","date":"2018-11-04T07:08:48.648Z","type":"message"}
{"nick":"marthinal","date":"2018-11-04T07:21:22.381Z","type":"join"}
{"nick":"marthinal","reason":"Remote host closed the connection","date":"2018-11-04T07:21:54.952Z","type":"quit"}
