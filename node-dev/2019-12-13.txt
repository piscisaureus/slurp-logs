{"nick":"wwigham","date":"2019-12-13T00:25:06.223Z","type":"join"}
{"nick":"wwigham","message":"Is anyone here familiar with the v8 changes that went into node 13.2? I'm seeing massive slowdowns in the debug protocol between 13.1 and 13.2. We opened https://github.com/nodejs/node/issues/30926 to track the problem; given how little node mucks with it, though, it's probably an issue with v8's own inspector/debugger APIs","date":"2019-12-13T00:26:44.387Z","type":"message"}
{"nick":"mgol","date":"2019-12-13T00:49:58.967Z","type":"join"}
{"nick":"shree","date":"2019-12-13T00:59:38.699Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T01:10:55.874Z","type":"quit"}
{"nick":"AbedB_","date":"2019-12-13T01:34:45.511Z","type":"join"}
{"nick":"AbedB","reason":"Ping timeout: 252 seconds","date":"2019-12-13T01:37:18.188Z","type":"quit"}
{"nick":"shree","reason":"Read error: Connection reset by peer","date":"2019-12-13T02:09:37.611Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T02:10:20.712Z","type":"join"}
{"nick":"Deacyde","reason":"Read error: Connection reset by peer","date":"2019-12-13T03:46:13.188Z","type":"quit"}
{"nick":"port1024","reason":"Quit: Leaving","date":"2019-12-13T04:13:30.179Z","type":"quit"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T05:08:07.575Z","type":"quit"}
{"nick":"AbedB_","reason":"Read error: Connection reset by peer","date":"2019-12-13T05:22:21.684Z","type":"quit"}
{"nick":"AbedB","date":"2019-12-13T05:24:16.875Z","type":"join"}
{"nick":"devsnek","message":"should fs.readSync(0, buffer) work","date":"2019-12-13T05:29:29.767Z","type":"message"}
{"nick":"mgol","date":"2019-12-13T08:00:22.734Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-12-13T08:10:28.298Z","type":"quit"}
{"nick":"AbedB","reason":"Read error: Connection reset by peer","date":"2019-12-13T08:21:47.443Z","type":"quit"}
{"nick":"AbedB","date":"2019-12-13T08:23:11.008Z","type":"join"}
{"nick":"lundibundi","date":"2019-12-13T08:45:38.681Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T08:47:11.198Z","type":"quit"}
{"nick":"kriskrop1","date":"2019-12-13T10:01:40.492Z","type":"join"}
{"nick":"kriskropd","reason":"Ping timeout: 268 seconds","date":"2019-12-13T10:03:47.892Z","type":"quit"}
{"nick":"mgol","date":"2019-12-13T10:21:26.537Z","type":"join"}
{"nick":"AbedB","reason":"Read error: Connection reset by peer","date":"2019-12-13T11:41:32.593Z","type":"quit"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T11:41:59.318Z","type":"quit"}
{"nick":"mgol","date":"2019-12-13T11:42:54.667Z","type":"join"}
{"nick":"AbedB","date":"2019-12-13T13:36:28.537Z","type":"join"}
{"nick":"AbedB_","date":"2019-12-13T13:37:35.511Z","type":"join"}
{"nick":"AbedB","reason":"Ping timeout: 252 seconds","date":"2019-12-13T13:41:28.053Z","type":"quit"}
{"nick":"lineus","reason":"Remote host closed the connection","date":"2019-12-13T13:53:07.679Z","type":"quit"}
{"nick":"lineus","date":"2019-12-13T13:54:47.873Z","type":"join"}
{"nick":"AbedB_","reason":"Read error: Connection reset by peer","date":"2019-12-13T14:21:16.119Z","type":"quit"}
{"nick":"zsoc","reason":"Read error: Connection reset by peer","date":"2019-12-13T14:31:25.406Z","type":"quit"}
{"nick":"zsoc","date":"2019-12-13T14:31:45.619Z","type":"join"}
{"nick":"zsoc","reason":"Changing host","date":"2019-12-13T14:31:45.620Z","type":"quit"}
{"nick":"zsoc","date":"2019-12-13T14:31:45.620Z","type":"join"}
{"nick":"mgol","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T15:21:44.077Z","type":"quit"}
{"nick":"targos","message":"It's interesting. I am trying to add Promise to the primordials object, but it doesn't work with static methods","date":"2019-12-13T15:22:04.202Z","type":"message"}
{"nick":"targos","message":"`Promise.all` cannot be called if extracted as `PromiseAll = Promise.all`","date":"2019-12-13T15:22:38.080Z","type":"message"}
{"nick":"shree","date":"2019-12-13T15:59:54.693Z","type":"join"}
{"nick":"shree","reason":"Client Quit","date":"2019-12-13T16:01:09.279Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T16:03:32.060Z","type":"join"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T16:24:29.684Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T16:26:56.162Z","type":"join"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T16:33:19.760Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T16:35:08.028Z","type":"join"}
{"nick":"shree","reason":"Client Quit","date":"2019-12-13T16:37:03.731Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T16:37:46.773Z","type":"join"}
{"nick":"AbedB","date":"2019-12-13T16:46:58.301Z","type":"join"}
{"nick":"BridgeAR","message":"bradleymeck: about lazily formating debuglog args - we have a similar issue with user defined `assert` messages. They are something heavy computational wise and I would like to have a lazy message as well","date":"2019-12-13T16:59:47.214Z","type":"message"}
{"nick":"BridgeAR","message":"We could use custom inspect but it would not be a nice notation / intuitive","date":"2019-12-13T17:00:39.592Z","type":"message"}
{"nick":"BridgeAR","message":"So far the only thing I could come up that was relatively straight forward was pretty much your debug.lazy() suggestion","date":"2019-12-13T17:01:17.627Z","type":"message"}
{"nick":"joyee","message":"Why not just use...ifs?","date":"2019-12-13T17:01:29.660Z","type":"message"}
{"nick":"BridgeAR","message":"That would not work for assert","date":"2019-12-13T17:01:51.185Z","type":"message"}
{"nick":"BridgeAR","message":"E.g., having a complex deep equal comparison.","date":"2019-12-13T17:02:16.334Z","type":"message"}
{"nick":"joyee","message":"if (...) { throw .. } ?","date":"2019-12-13T17:02:19.524Z","type":"message"}
{"nick":"BridgeAR","message":"You mean try { assert.deepStrictEqual(a, b); } catch { throw new Error(ownMessage); } ?","date":"2019-12-13T17:03:02.210Z","type":"message"}
{"nick":"joyee","message":"Then we could just expose the comparator","date":"2019-12-13T17:03:14.040Z","type":"message"}
{"nick":"BridgeAR","message":"We did","date":"2019-12-13T17:03:20.257Z","type":"message"}
{"nick":"BridgeAR","message":"But it's not user friendly","date":"2019-12-13T17:03:23.637Z","type":"message"}
{"nick":"BridgeAR","message":"It's not intuitive to use `util.isDeepStrictEqual()` when you want to assert","date":"2019-12-13T17:03:45.297Z","type":"message"}
{"nick":"BridgeAR","message":"The purpose is somewhat gone in those cases.","date":"2019-12-13T17:04:59.785Z","type":"message"}
{"nick":"BridgeAR","message":"The nicest UI I could come up with was: `assert.deepStrictEqual(a, b, assert.lazy(() => doStuff()))`","date":"2019-12-13T17:06:07.358Z","type":"message"}
{"nick":"BridgeAR","message":"But it's still not great","date":"2019-12-13T17:06:14.806Z","type":"message"}
{"nick":"joyee","message":"I can’t see how it’s not user friendly to just compare and throw..compared to adding a new overload that you need to look at the doc to understand?","date":"2019-12-13T17:07:21.927Z","type":"message"}
{"nick":"BridgeAR","message":"At least in my experience mostly do not think about these things at all. In fact, we had trouble with things like these in our tests","date":"2019-12-13T17:10:47.423Z","type":"message"}
{"nick":"BridgeAR","message":"And reading the code is a bit less intuitive because it does not contain the \"expected\" function names","date":"2019-12-13T17:11:58.894Z","type":"message"}
{"nick":"joyee","message":"I think some of our tests would be even easier to understand if we do throw.... because assertion error almost always lose the source line","date":"2019-12-13T17:12:03.114Z","type":"message"}
{"nick":"howdoi","date":"2019-12-13T17:13:20.047Z","type":"join"}
{"nick":"lineus","reason":"Quit: leaving","date":"2019-12-13T17:13:23.189Z","type":"quit"}
{"nick":"BridgeAR","message":"Hm, how come they loose the source line? You mean when using `assert.throws()`?","date":"2019-12-13T17:14:53.171Z","type":"message"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T17:15:19.571Z","type":"quit"}
{"nick":"joyee","message":"It always shows the throw statement inside assert.js, not where the assert is called","date":"2019-12-13T17:15:31.393Z","type":"message"}
{"nick":"joyee","message":"It would be much more immediately obvious for debugging if in the logs the line where the expectation is set is shown","date":"2019-12-13T17:17:09.160Z","type":"message"}
{"nick":"joyee","message":"No matter it’s a throw or an assert wrapping a throw - but with assert it’s only possible to show with hacks(reading the stack trace and get the line from some file)","date":"2019-12-13T17:18:16.583Z","type":"message"}
{"nick":"shree","date":"2019-12-13T17:20:35.164Z","type":"join"}
{"nick":"bradleymeck","message":"joyee: maybe function hiding proposal would help that?","date":"2019-12-13T17:21:18.394Z","type":"message"}
{"nick":"joyee","message":"That proposal hides stack traces that are already accessible as opposed to making source code of the functions on the frames accessible...in fact that’s exactly what the proposal wants to make impossible so I can’t see how it helps?","date":"2019-12-13T17:22:54.613Z","type":"message"}
{"nick":"joyee","message":"With our current test setup it almost always require reading a line number with your eye and finding that line in the test before you can start digging. The expectation failed is almost always Boolean and knowing that an expected true is a false isn’t really useful information from the first glance...","date":"2019-12-13T17:26:01.931Z","type":"message"}
{"nick":"joyee","message":"I think most of the time when I look at the stderr of a failed test when I first run into it only the first few lines of the stack trace is useful. Others are mostly noise...(it’s almost always an expected true being false and the error is thrown in assert.js with a throw AssetionError statement as the source line)","date":"2019-12-13T17:29:12.717Z","type":"message"}
{"nick":"joyee","message":"(Which is basically the boilerplate of most of the tests, hence not helpful)","date":"2019-12-13T17:30:17.505Z","type":"message"}
{"nick":"bradleymeck","message":"i must be misunderstanding something as hiding the frames of assert's impl seemed like what was desired","date":"2019-12-13T17:31:10.005Z","type":"message"}
{"nick":"bradleymeck","message":"> . The \"sensitive\" directive hides the source text revealed by Function.prototype.toString and omits the function entirely from Error.prototype.stack.","date":"2019-12-13T17:32:06.442Z","type":"message"}
{"nick":"joyee","message":"I see, in that case it is relavent. But it does not do the job since source line is non-standard","date":"2019-12-13T17:33:02.892Z","type":"message"}
{"nick":"joyee","message":"So the difference is only instead of looking at the second line you look at the first line","date":"2019-12-13T17:33:23.766Z","type":"message"}
{"nick":"bradleymeck","message":"if it isn't standard why can't it be changed?","date":"2019-12-13T17:34:12.391Z","type":"message"}
{"nick":"joyee","message":"maybe, but not this one since you’d need to specify source line first which is out of the scope","date":"2019-12-13T17:34:56.004Z","type":"message"}
{"nick":"bradleymeck","message":"i'm confused","date":"2019-12-13T17:35:08.175Z","type":"message"}
{"nick":"bradleymeck","message":"i don't see what the actual issue is","date":"2019-12-13T17:35:23.354Z","type":"message"}
{"nick":"bradleymeck","message":"source line isn't an API to my knowledge reading off of Error nor off of the stack trace api","date":"2019-12-13T17:35:43.292Z","type":"message"}
{"nick":"bradleymeck","message":"which thing has the incorrect data that needs to be replaced?","date":"2019-12-13T17:36:06.575Z","type":"message"}
{"nick":"joyee","message":"Not incorrect, but not useful - the position of the source line","date":"2019-12-13T17:37:10.089Z","type":"message"}
{"nick":"bradleymeck","message":"of what called the assert?","date":"2019-12-13T17:38:02.053Z","type":"message"}
{"nick":"joyee","message":"Yes","date":"2019-12-13T17:38:09.635Z","type":"message"}
{"nick":"bradleymeck","message":"isn't that exactly what you want?","date":"2019-12-13T17:38:12.206Z","type":"message"}
{"nick":"joyee","message":"e.g. instead of showing the source line of the top frame, showing the source line of the second frame. That's not something the ECMAScript standard can specify right now","date":"2019-12-13T17:38:13.713Z","type":"message"}
{"nick":"joyee","message":"That's not even implemented by V8, V8 only provides the API for us to figure out the source line and print it","date":"2019-12-13T17:38:47.112Z","type":"message"}
{"nick":"bradleymeck","message":"i don't understand/that doesn't seem correct","date":"2019-12-13T17:38:58.627Z","type":"message"}
{"nick":"bradleymeck","message":" foo: assert.fail() // don't you want to see the foo: labeled assert when you read the trace?","date":"2019-12-13T17:39:28.694Z","type":"message"}
{"nick":"devsnek","message":"targos: you need to uncurry them","date":"2019-12-13T17:39:43.459Z","type":"message"}
{"nick":"devsnek","message":"er","date":"2019-12-13T17:39:46.458Z","type":"message"}
{"nick":"devsnek","message":"curry them","date":"2019-12-13T17:39:49.576Z","type":"message"}
{"nick":"targos","message":"devsnek: I opened a PR","date":"2019-12-13T17:39:56.309Z","type":"message"}
{"nick":"targos","message":"just called .bind(Promise) on them","date":"2019-12-13T17:40:03.703Z","type":"message"}
{"nick":"devsnek","message":"they expect their receiver to be Promise","date":"2019-12-13T17:40:05.515Z","type":"message"}
{"nick":"devsnek","message":"ya","date":"2019-12-13T17:40:07.262Z","type":"message"}
{"nick":"joyee","message":"bradleymeck: for example, with `node -e \"assert(process.env.HOME.includes('test'))\"`, currently this is printed","date":"2019-12-13T17:41:17.953Z","type":"message"}
{"nick":"joyee","message":"https://www.irccloud.com/pastebin/runDzjbj/","date":"2019-12-13T17:41:25.176Z","type":"message"}
{"nick":"bradleymeck","message":"you want to see eval:1:1 right?","date":"2019-12-13T17:42:36.319Z","type":"message"}
{"nick":"bradleymeck","message":"not assert.js:383 at the top","date":"2019-12-13T17:43:27.408Z","type":"message"}
{"nick":"bradleymeck","message":"and the source at eval:1","date":"2019-12-13T17:43:36.735Z","type":"message"}
{"nick":"joyee","message":"eval is the red herring I guess. lemme put it into a script","date":"2019-12-13T17:45:35.683Z","type":"message"}
{"nick":"devsnek","message":"it should have [eval] at the top","date":"2019-12-13T17:46:34.297Z","type":"message"}
{"nick":"devsnek","message":"not an actual eval frame","date":"2019-12-13T17:46:38.893Z","type":"message"}
{"nick":"joyee","message":"https://www.irccloud.com/pastebin/OiYSEYNq/","date":"2019-12-13T17:47:49.018Z","type":"message"}
{"nick":"joyee","message":"This is what it looks like by executing `require('assert')(process.env.HOME.includes('test'));`","date":"2019-12-13T17:48:48.479Z","type":"message"}
{"nick":"joyee","message":"The source line (`throw err;`) is not useful. The hacked source line `require('assert')` is inccorect","date":"2019-12-13T17:49:14.570Z","type":"message"}
{"nick":"devsnek","message":"it looks for the first call expression at that location","date":"2019-12-13T17:49:39.474Z","type":"message"}
{"nick":"devsnek","message":"interesting","date":"2019-12-13T17:49:42.090Z","type":"message"}
{"nick":"joyee","message":"However none of these are specified by ES","date":"2019-12-13T17:49:45.104Z","type":"message"}
{"nick":"joyee","message":"Not even the get source line API","date":"2019-12-13T17:49:57.808Z","type":"message"}
{"nick":"joyee","message":"To figure out what's actually going on I still have to read `/Users/joyee/projects/node/test.js:1` by myself","date":"2019-12-13T17:50:48.733Z","type":"message"}
{"nick":"joyee","message":"Now if I fiddle with test-worker.js a bit...","date":"2019-12-13T17:52:02.203Z","type":"message"}
{"nick":"joyee","message":"https://www.irccloud.com/pastebin/0910O6qi/","date":"2019-12-13T17:52:08.259Z","type":"message"}
{"nick":"joyee","message":"Then it does not know where the source is at all","date":"2019-12-13T17:52:52.762Z","type":"message"}
{"nick":"amin","date":"2019-12-13T17:54:45.222Z","type":"join"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T17:57:11.940Z","type":"quit"}
{"nick":"amin","reason":"Remote host closed the connection","date":"2019-12-13T17:58:06.914Z","type":"quit"}
{"nick":"joyee","message":"To me it would be more useful to show me the source line at `/Users/joyee/projects/node/test/parallel/test-worker.js:9` which is `assert.strictEqual(message, 'Hello, world2!')`","date":"2019-12-13T18:00:07.996Z","type":"message"}
{"nick":"joyee","message":"That's something that Node.js's assert hacks to print for certain operators but not others, and that proposal can't really help with these non-standard stuff","date":"2019-12-13T18:03:19.223Z","type":"message"}
{"nick":"targos","message":"joyee: I'm sure many people, including me, would agree with you","date":"2019-12-13T18:24:28.335Z","type":"message"}
{"nick":"targos","message":"but can we do better?","date":"2019-12-13T18:24:32.587Z","type":"message"}
{"nick":"AbedB","reason":"Read error: Connection reset by peer","date":"2019-12-13T19:04:59.645Z","type":"quit"}
{"nick":"devsnek","message":"my old stack trace pr got rid of the weird file reads and still had nice output in most cases","date":"2019-12-13T19:19:16.718Z","type":"message"}
{"nick":"Deacyde","date":"2019-12-13T19:54:41.076Z","type":"join"}
{"nick":"lineus","date":"2019-12-13T20:16:35.788Z","type":"join"}
{"nick":"shree","date":"2019-12-13T20:29:02.833Z","type":"join"}
{"nick":"shree","reason":"Client Quit","date":"2019-12-13T20:31:01.336Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T20:33:23.712Z","type":"join"}
{"nick":"shree","reason":"Client Quit","date":"2019-12-13T20:36:11.796Z","type":"quit"}
{"nick":"mgol","date":"2019-12-13T20:38:29.136Z","type":"join"}
{"nick":"shree","date":"2019-12-13T20:39:33.389Z","type":"join"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T21:08:15.142Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T21:30:59.230Z","type":"join"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T21:59:27.999Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T22:00:38.625Z","type":"join"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T22:10:47.925Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 276 seconds","date":"2019-12-13T22:48:20.650Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T23:12:09.841Z","type":"join"}
{"nick":"shree","reason":"Client Quit","date":"2019-12-13T23:13:50.451Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T23:16:24.728Z","type":"join"}
{"nick":"AbedB","date":"2019-12-13T23:25:42.788Z","type":"join"}
{"nick":"shree","reason":"Quit: My MacBook has gone to sleep. ZZZzzz…","date":"2019-12-13T23:26:40.143Z","type":"quit"}
{"nick":"shree","date":"2019-12-13T23:56:58.341Z","type":"join"}
