{"nick":"dbevenius","date":"2019-02-28T00:03:57.457Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-02-28T00:08:22.162Z","type":"quit"}
{"nick":"devsnek","message":"ljharb: why does dual mode have to exist","date":"2019-02-28T00:10:27.013Z","type":"message"}
{"nick":"devsnek","message":"in case we don't ship cjs interop?","date":"2019-02-28T00:10:40.156Z","type":"message"}
{"nick":"ljharb","message":"devsnek: i must be able to publish a package that uses ESM and also works on old node.","date":"2019-02-28T00:10:42.782Z","type":"message"}
{"nick":"devsnek","message":"why","date":"2019-02-28T00:10:55.777Z","type":"message"}
{"nick":"ljharb","message":"otherwise either a) using ESM is a severe breaking change, fucking with the ecosystem","date":"2019-02-28T00:11:03.171Z","type":"message"}
{"nick":"devsnek","message":"that's a feature not a use case","date":"2019-02-28T00:11:03.797Z","type":"message"}
{"nick":"ljharb","message":"or b) nobody will use ESM, and ESM isn't worth shipping","date":"2019-02-28T00:11:10.188Z","type":"message"}
{"nick":"ljharb","message":"the use case is \"i want to incentivize painless migration to esm\"","date":"2019-02-28T00:11:18.874Z","type":"message"}
{"nick":"devsnek","message":"aight","date":"2019-02-28T00:11:22.816Z","type":"message"}
{"nick":"ljharb","message":"both painless, and migration","date":"2019-02-28T00:11:23.034Z","type":"message"}
{"nick":"ljharb","message":"and that absolutely requires dual mode, full stop","date":"2019-02-28T00:11:28.379Z","type":"message"}
{"nick":"devsnek","message":"dual mode breaks things if not done correctly though","date":"2019-02-28T00:11:34.923Z","type":"message"}
{"nick":"devsnek","message":"where \"correctly\" = re-export cjs","date":"2019-02-28T00:11:44.091Z","type":"message"}
{"nick":"ljharb","message":"lots of things done incorrectly break things, that's a truism, not an argument","date":"2019-02-28T00:12:03.862Z","type":"message"}
{"nick":"devsnek","message":"or at least all your shared stuff has to stay in cjs","date":"2019-02-28T00:12:03.987Z","type":"message"}
{"nick":"ljharb","message":"sure","date":"2019-02-28T00:12:11.060Z","type":"message"}
{"nick":"ljharb","message":"that's a fine requirement","date":"2019-02-28T00:12:13.472Z","type":"message"}
{"nick":"devsnek","message":"but dual mode makes it super duper easy","date":"2019-02-28T00:12:15.850Z","type":"message"}
{"nick":"ljharb","message":"(that also necessitates interop, which i'm also in favor of)","date":"2019-02-28T00:12:20.838Z","type":"message"}
{"nick":"devsnek","message":"didn't this break react for a while","date":"2019-02-28T00:12:25.109Z","type":"message"}
{"nick":"devsnek","message":"even the pros mess this up","date":"2019-02-28T00:12:40.108Z","type":"message"}
{"nick":"ljharb","message":"not that i know of","date":"2019-02-28T00:12:58.550Z","type":"message"}
{"nick":"ljharb","message":"and sure, if it's easy to mess up, then we need to make it harder to do that","date":"2019-02-28T00:13:05.969Z","type":"message"}
{"nick":"ljharb","message":"that's not a fatal flaw of \"dual mode\", altho perhaps it's a fatal flaw of some implementation","date":"2019-02-28T00:13:17.082Z","type":"message"}
{"nick":"devsnek","message":"a mode where a package can have two sources loaded under the same specifier is the fatal flaw","date":"2019-02-28T00:13:40.073Z","type":"message"}
{"nick":"ljharb","message":"i'm not convinced of that","date":"2019-02-28T00:14:40.861Z","type":"message"}
{"nick":"devsnek","message":"the only safe way to balance it is to make sure any shared state comes from one source","date":"2019-02-28T00:15:40.721Z","type":"message"}
{"nick":"devsnek","message":"which will have to be cjs","date":"2019-02-28T00:15:43.271Z","type":"message"}
{"nick":"devsnek","message":"so might as well just use cjs","date":"2019-02-28T00:15:47.875Z","type":"message"}
{"nick":"ljharb","message":"that's only reasonable if we have full interop including named imports.","date":"2019-02-28T00:16:02.882Z","type":"message"}
{"nick":"ljharb","message":"otherwise i'd *have* to include at least something in ESM, to provide that.","date":"2019-02-28T00:16:12.097Z","type":"message"}
{"nick":"ljharb","message":"and we're right back to dual mode","date":"2019-02-28T00:16:16.857Z","type":"message"}
{"nick":"devsnek","message":"i agree there's a problem here","date":"2019-02-28T00:16:18.812Z","type":"message"}
{"nick":"devsnek","message":"the problem where someone thought an imperative module system was a good idea :(","date":"2019-02-28T00:17:20.301Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T00:23:09.477Z","type":"join"}
{"nick":"kumavis","date":"2019-02-28T00:27:37.177Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-02-28T00:27:56.355Z","type":"quit"}
{"nick":"devsnek","message":"ljharb: thinking about this more, i don't think esm needs to have 100% usage to be a success","date":"2019-02-28T00:30:29.212Z","type":"message"}
{"nick":"devsnek","message":"code will always use new features that older versions of browsers/node/etc didn't support","date":"2019-02-28T00:31:30.905Z","type":"message"}
{"nick":"devsnek","message":"if you don't use let/const in your codebase for back compat reasons i wouldn't expect you to use esm in your codebase either","date":"2019-02-28T00:32:09.457Z","type":"message"}
{"nick":"devsnek","message":"🤷","date":"2019-02-28T00:32:11.183Z","type":"message"}
{"nick":"ljharb","message":"it's not syntax, it's modules. it's not the same at all.","date":"2019-02-28T00:37:54.521Z","type":"message"}
{"nick":"ljharb","message":"there's a big difference between \"don't use a few new syntax features\" and \"don't use the module system everyone's been using via babel and typescript anyways\"","date":"2019-02-28T00:38:27.555Z","type":"message"}
{"nick":"devsnek","message":"i'm not sure that difference is worth making","date":"2019-02-28T00:48:41.742Z","type":"message"}
{"nick":"devsnek","message":"\"don't use the new syntax everyone's been using via babel and typescript anyways\"","date":"2019-02-28T00:52:59.623Z","type":"message"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-02-28T00:57:53.260Z","type":"quit"}
{"nick":"ljharb","message":"i think you're underestimating the desire to use `import` and `export` specifically, unrelated to its semantics.","date":"2019-02-28T01:05:30.572Z","type":"message"}
{"nick":"ljharb","message":"that's the reason most people even use babel at all, i'd expect.","date":"2019-02-28T01:05:38.301Z","type":"message"}
{"nick":"ljharb","message":"(for non-old-browser targets)","date":"2019-02-28T01:05:45.206Z","type":"message"}
{"nick":"devsnek","message":"so i think it becomes a question of do you want to use esm more than you want to support old node","date":"2019-02-28T01:07:11.807Z","type":"message"}
{"nick":"devsnek","message":"as with any other addition to js over the last 10 years","date":"2019-02-28T01:07:30.115Z","type":"message"}
{"nick":"ljharb","message":"and i think that the pit of failure would be if it's too easy to not support old node.","date":"2019-02-28T01:07:44.474Z","type":"message"}
{"nick":"ljharb","message":"or, too hard to do so.","date":"2019-02-28T01:07:47.397Z","type":"message"}
{"nick":"ljharb","message":"right now, you just use babel, and you get that. but you wouldn't without a dual mode package, even with babel.","date":"2019-02-28T01:08:01.669Z","type":"message"}
{"nick":"devsnek","message":"can you use jdd's thing on old node","date":"2019-02-28T01:08:09.396Z","type":"message"}
{"nick":"ljharb","message":"probably, but that’s like telling people to use babel-register. It’s not a choice a package should force on people.","date":"2019-02-28T01:10:08.783Z","type":"message"}
{"nick":"devsnek","message":"on a library level i mean","date":"2019-02-28T01:10:22.098Z","type":"message"}
{"nick":"ljharb","message":"hm, possibly, if it could be used without patching anything, and could be made to *only* apply to first-partly library code. But i still don’t think that’s an easy enough interop story to make ESM worth having at all.","date":"2019-02-28T01:11:18.166Z","type":"message"}
{"nick":"devsnek","message":"not unlike using a loader hook with esm","date":"2019-02-28T01:11:43.565Z","type":"message"}
{"nick":"ljharb","message":"i think that requiring a per package loader is not acceptable for back compat","date":"2019-02-28T01:12:00.635Z","type":"message"}
{"nick":"devsnek","message":"there are probably more ideas waiting to be had","date":"2019-02-28T01:12:05.842Z","type":"message"}
{"nick":"ljharb","message":"loaders should be for weird edge Casey things only","date":"2019-02-28T01:12:07.539Z","type":"message"}
{"nick":"devsnek","message":"i kinda thing trying to load two sources for one package is edge casey","date":"2019-02-28T01:12:58.163Z","type":"message"}
{"nick":"devsnek","message":"think*","date":"2019-02-28T01:13:01.943Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T01:24:02.512Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-28T01:28:30.493Z","type":"quit"}
{"nick":"antsmartian","date":"2019-02-28T01:30:01.267Z","type":"join"}
{"nick":"dbevenius","date":"2019-02-28T01:43:18.350Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-02-28T01:47:34.350Z","type":"quit"}
{"nick":"bradleymeck","message":"loaders are useful for a variety of things, not all of them edge casey","date":"2019-02-28T02:01:39.656Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T02:04:48.312Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-02-28T02:09:28.372Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T02:23:15.191Z","type":"join"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-02-28T02:26:15.475Z","type":"quit"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-02-28T02:27:32.126Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T02:44:15.184Z","type":"join"}
{"nick":"antsmartian","date":"2019-02-28T02:47:50.719Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 258 seconds","date":"2019-02-28T02:48:44.145Z","type":"quit"}
{"nick":"antsmartian","reason":"Remote host closed the connection","date":"2019-02-28T02:53:47.271Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T03:04:11.457Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-02-28T03:08:47.166Z","type":"quit"}
{"nick":"ljharb","message":"devsnek: itd only be one at a time, ideally.","date":"2019-02-28T03:11:50.881Z","type":"message"}
{"nick":"devsnek","message":"ljharb: how's that work","date":"2019-02-28T03:12:04.749Z","type":"message"}
{"nick":"ljharb","message":"devsnek: it’s that in an older env, you’d only get the cjs, and in a newer one, only ESM","date":"2019-02-28T03:12:10.128Z","type":"message"}
{"nick":"ljharb","message":"because mjs takes priority over js","date":"2019-02-28T03:12:17.351Z","type":"message"}
{"nick":"devsnek","message":"but...","date":"2019-02-28T03:12:20.742Z","type":"message"}
{"nick":"devsnek","message":"cjs isn't aware of esm","date":"2019-02-28T03:12:24.710Z","type":"message"}
{"nick":"ljharb","message":"so there’s not actually dual things unless you explicitly import them with an extension","date":"2019-02-28T03:12:29.345Z","type":"message"}
{"nick":"ljharb","message":"it doesn’t have to be","date":"2019-02-28T03:12:32.219Z","type":"message"}
{"nick":"ljharb","message":"the .js files operate in an “only CJS exists” world","date":"2019-02-28T03:12:43.802Z","type":"message"}
{"nick":"devsnek","message":"if lodash ships dual mode","date":"2019-02-28T03:12:46.078Z","type":"message"}
{"nick":"devsnek","message":"and some random package does require('lodash')","date":"2019-02-28T03:12:52.029Z","type":"message"}
{"nick":"ljharb","message":"then ESM node will only touch the mjs","date":"2019-02-28T03:12:55.175Z","type":"message"}
{"nick":"ljharb","message":"ohhh","date":"2019-02-28T03:12:57.225Z","type":"message"}
{"nick":"devsnek","message":"and some random package does import 'lodash'","date":"2019-02-28T03:13:01.002Z","type":"message"}
{"nick":"ljharb","message":"right, I was remembering when we had require(‘esm’).","date":"2019-02-28T03:13:12.103Z","type":"message"}
{"nick":"devsnek","message":"eep","date":"2019-02-28T03:13:21.383Z","type":"message"}
{"nick":"ljharb","message":"ok well. I’ll have to put some thought in it. But the necessity remains.","date":"2019-02-28T03:13:24.107Z","type":"message"}
{"nick":"devsnek","message":"what if we just make a third module system to distract people from arguing about the first two","date":"2019-02-28T03:14:35.725Z","type":"message"}
{"nick":"ljharb","message":"it’s super effective","date":"2019-02-28T03:15:31.802Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T03:29:12.354Z","type":"join"}
{"nick":"wawasho","reason":"Remote host closed the connection","date":"2019-02-28T03:33:57.123Z","type":"quit"}
{"nick":"antsmartian","date":"2019-02-28T03:35:06.982Z","type":"join"}
{"nick":"wawasho","date":"2019-02-28T03:35:34.728Z","type":"join"}
{"nick":"antsmartian","reason":"Ping timeout: 250 seconds","date":"2019-02-28T03:39:48.843Z","type":"quit"}
{"nick":"neo4","date":"2019-02-28T03:59:11.612Z","type":"join"}
{"nick":"antsmartian","date":"2019-02-28T04:10:48.393Z","type":"join"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-28T04:13:05.898Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T04:13:22.172Z","type":"join"}
{"nick":"wawasho","reason":"Remote host closed the connection","date":"2019-02-28T04:13:43.114Z","type":"quit"}
{"nick":"wawasho","date":"2019-02-28T04:14:14.716Z","type":"join"}
{"nick":"antsmartian","reason":"Ping timeout: 246 seconds","date":"2019-02-28T04:15:07.271Z","type":"quit"}
{"nick":"howdoi","date":"2019-02-28T05:40:51.770Z","type":"join"}
{"nick":"neo4","reason":"Quit: neo4","date":"2019-02-28T05:43:16.313Z","type":"quit"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-28T06:00:53.267Z","type":"quit"}
{"nick":"lpin","date":"2019-02-28T06:06:02.270Z","type":"join"}
{"nick":"dbevenius","date":"2019-02-28T06:15:08.195Z","type":"join"}
{"nick":"lundibundi","date":"2019-02-28T07:38:12.962Z","type":"join"}
{"nick":"lundibundi","reason":"Ping timeout: 250 seconds","date":"2019-02-28T08:11:56.789Z","type":"quit"}
{"nick":"lundibundi","date":"2019-02-28T09:24:26.938Z","type":"join"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-02-28T13:35:38.758Z","type":"quit"}
{"nick":"antsmartian","date":"2019-02-28T13:58:17.436Z","type":"join"}
{"nick":"antsmartian","reason":"Ping timeout: 255 seconds","date":"2019-02-28T14:02:53.341Z","type":"quit"}
{"nick":"kumavis","reason":"Quit: Connection closed for inactivity","date":"2019-02-28T14:03:27.473Z","type":"quit"}
{"nick":"howdoi","date":"2019-02-28T14:08:30.320Z","type":"join"}
{"nick":"zeds","date":"2019-02-28T15:05:04.349Z","type":"join"}
{"nick":"zeds","date":"2019-02-28T15:05:11.349Z","type":"part"}
{"nick":"julianduque","reason":"Ping timeout: 246 seconds","date":"2019-02-28T15:13:28.283Z","type":"quit"}
{"nick":"julianduque","date":"2019-02-28T15:21:52.758Z","type":"join"}
{"nick":"julianduque","reason":"Ping timeout: 268 seconds","date":"2019-02-28T15:26:52.910Z","type":"quit"}
{"nick":"bradleymeck","message":"devsnek: just wait til we talk about webpackage support","date":"2019-02-28T15:29:01.021Z","type":"message"}
{"nick":"dbevenius","reason":"Read error: Connection reset by peer","date":"2019-02-28T15:29:01.109Z","type":"quit"}
{"nick":"devsnek","message":"bradleymeck: I'm a fan tbh","date":"2019-02-28T15:29:55.472Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: also the identity problem you describe of pulling in 2 diff wrappers/formats is super real if you look at what happened with GraphQL a while ago","date":"2019-02-28T15:30:12.330Z","type":"message"}
{"nick":"devsnek","message":"aha graphql","date":"2019-02-28T15:30:24.266Z","type":"message"}
{"nick":"bradleymeck","message":"it was hard enough to fix they just pulled support for real dual mode packages","date":"2019-02-28T15:30:24.899Z","type":"message"}
{"nick":"devsnek","message":"I knew it happened to a large package","date":"2019-02-28T15:30:32.922Z","type":"message"}
{"nick":"devsnek","message":"I couldn't remember which one","date":"2019-02-28T15:30:37.074Z","type":"message"}
{"nick":"bradleymeck","message":"there were a few in the react space","date":"2019-02-28T15:30:48.439Z","type":"message"}
{"nick":"bradleymeck","message":"graphql was the biggest","date":"2019-02-28T15:30:54.226Z","type":"message"}
{"nick":"devsnek","message":"it's such an easy mistake to make :(","date":"2019-02-28T15:31:15.551Z","type":"message"}
{"nick":"bradleymeck","message":"dual mode is *very* hard to do right, and still requires a transpiler if you are trying to support browsers","date":"2019-02-28T15:31:18.675Z","type":"message"}
{"nick":"bradleymeck","message":"the \"still requires a transpiler\" made it kind of not useful","date":"2019-02-28T15:31:40.572Z","type":"message"}
{"nick":"devsnek","message":"lol","date":"2019-02-28T15:31:47.203Z","type":"message"}
{"nick":"bradleymeck","message":"cause ESM needs to consume CJS to expose the same identities","date":"2019-02-28T15:32:05.470Z","type":"message"}
{"nick":"devsnek","message":"yep","date":"2019-02-28T15:32:13.784Z","type":"message"}
{"nick":"bradleymeck","message":"CJS can't really consume ESM without moving to a Promise","date":"2019-02-28T15:32:18.831Z","type":"message"}
{"nick":"bradleymeck","message":"so f' it was the answer heard all around the ecosystem","date":"2019-02-28T15:32:36.426Z","type":"message"}
{"nick":"julianduque","date":"2019-02-28T15:32:40.862Z","type":"join"}
{"nick":"devsnek","message":"has webpackage been moving forward","date":"2019-02-28T15:34:11.339Z","type":"message"}
{"nick":"bradleymeck","message":"transpilers are interesting here because they don't generally support dual mode packages, they tend to always select 1 mode","date":"2019-02-28T15:34:13.072Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: intent to ship was out i thought?","date":"2019-02-28T15:34:26.168Z","type":"message"}
{"nick":"devsnek","message":"last I heard it had a secret implementation only facebook had the source for","date":"2019-02-28T15:34:33.675Z","type":"message"}
{"nick":"bradleymeck","message":"https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/gPH_BcOBEtc/Z41GR0mwEQAJ","date":"2019-02-28T15:34:44.142Z","type":"message"}
{"nick":"bradleymeck","message":"nah, its public","date":"2019-02-28T15:34:53.505Z","type":"message"}
{"nick":"devsnek","message":"oh nice","date":"2019-02-28T15:35:05.182Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/WICG/webpackage , written in go if i remember","date":"2019-02-28T15:35:11.987Z","type":"message"}
{"nick":"devsnek","message":"hey it still uses 🌐📦 lol","date":"2019-02-28T15:35:54.712Z","type":"message"}
{"nick":"devsnek","message":"why do people believe that there is some situation where node_modules will be browser compatible","date":"2019-02-28T15:39:15.362Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T15:43:17.273Z","type":"join"}
{"nick":"bradleymeck","message":"cause servers do transformations all the time","date":"2019-02-28T15:44:02.756Z","type":"message"}
{"nick":"bradleymeck","message":"also because the possibility of generating those transforms ahead of time","date":"2019-02-28T15:44:58.483Z","type":"message"}
{"nick":"bradleymeck","message":"plenty of build/deploy steps are done in most prod servers","date":"2019-02-28T15:45:29.979Z","type":"message"}
{"nick":"bradleymeck","message":"so it is just another part of that","date":"2019-02-28T15:45:35.605Z","type":"message"}
{"nick":"bradleymeck","message":"extremely few servers are purely static w/o any action","date":"2019-02-28T15:45:51.183Z","type":"message"}
{"nick":"bradleymeck","message":"when you push data up it often does actions even if the actual response doesn't require actions","date":"2019-02-28T15:46:15.242Z","type":"message"}
{"nick":"AtumT","date":"2019-02-28T16:03:35.395Z","type":"join"}
{"nick":"devsnek","message":"bradleymeck: if browsers do transforms why can't they transform extensions","date":"2019-02-28T16:36:37.461Z","type":"message"}
{"nick":"bradleymeck","message":"cause of how their resolver works","date":"2019-02-28T16:36:49.618Z","type":"message"}
{"nick":"devsnek","message":"s/browsers/servers","date":"2019-02-28T16:36:51.123Z","type":"message"}
{"nick":"bradleymeck","message":"you kind of can do it if you do 3 MITM requests?","date":"2019-02-28T16:37:06.192Z","type":"message"}
{"nick":"bradleymeck","action":"digs","date":"2019-02-28T16:37:09.144Z","type":"action"}
{"nick":"devsnek","message":"this theoretical server already has to resolve package.json and whatnot","date":"2019-02-28T16:37:16.568Z","type":"message"}
{"nick":"devsnek","message":"why are extensions such a massive next step","date":"2019-02-28T16:37:27.637Z","type":"message"}
{"nick":"bradleymeck","message":"https://bmeck.github.io/node-sw-compat-loader-test/dist/","date":"2019-02-28T16:37:29.681Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: because they are divergence without clear browser path","date":"2019-02-28T16:37:51.735Z","type":"message"}
{"nick":"bradleymeck","message":"bare imports have a clear path currently","date":"2019-02-28T16:37:57.779Z","type":"message"}
{"nick":"devsnek","message":"package.json is currently targeted with more than just a main field","date":"2019-02-28T16:38:16.495Z","type":"message"}
{"nick":"devsnek","message":"more things a resolver would have to account for","date":"2019-02-28T16:38:26.309Z","type":"message"}
{"nick":"bradleymeck","message":"can you go into detail on what that means","date":"2019-02-28T16:38:35.506Z","type":"message"}
{"nick":"devsnek","message":"like","date":"2019-02-28T16:38:50.331Z","type":"message"}
{"nick":"bradleymeck","message":"we don't control the browser resolver","date":"2019-02-28T16:38:50.433Z","type":"message"}
{"nick":"devsnek","message":"there's this assumption that you just generate an import map for your node_modules","date":"2019-02-28T16:39:03.531Z","type":"message"}
{"nick":"devsnek","message":"i don't think that will be as easy as it sounds","date":"2019-02-28T16:39:28.681Z","type":"message"}
{"nick":"devsnek","message":"you'll have to make sure no deps are using loaders","date":"2019-02-28T16:39:38.705Z","type":"message"}
{"nick":"devsnek","message":"or using .node files","date":"2019-02-28T16:39:41.227Z","type":"message"}
{"nick":"devsnek","message":"etc","date":"2019-02-28T16:39:41.978Z","type":"message"}
{"nick":"devsnek","message":"or loading cjs","date":"2019-02-28T16:39:45.544Z","type":"message"}
{"nick":"bradleymeck","message":"i'm not sure how that means we must support extensions?","date":"2019-02-28T16:40:05.809Z","type":"message"}
{"nick":"bradleymeck","message":"thats about loading certain file formats","date":"2019-02-28T16:40:11.113Z","type":"message"}
{"nick":"devsnek","message":"it means supporting extensions doesn't make the situation worse","date":"2019-02-28T16:40:18.301Z","type":"message"}
{"nick":"devsnek","message":"it makes the situation the same","date":"2019-02-28T16:40:25.729Z","type":"message"}
{"nick":"bradleymeck","message":"it does since it is a different concern","date":"2019-02-28T16:40:28.038Z","type":"message"}
{"nick":"devsnek","message":"??","date":"2019-02-28T16:40:34.487Z","type":"message"}
{"nick":"bradleymeck","message":"removing concerns makes things better","date":"2019-02-28T16:40:37.748Z","type":"message"}
{"nick":"devsnek","message":"if you have to use a node specific resolver in every case","date":"2019-02-28T16:40:47.654Z","type":"message"}
{"nick":"bradleymeck","message":"keeping all concerns due to 1 concern is non-sense","date":"2019-02-28T16:40:51.330Z","type":"message"}
{"nick":"devsnek","message":"why does adding or removing things from that node resolver make using the resolver better or worse","date":"2019-02-28T16:41:00.970Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: sure, but the overlap is much larger","date":"2019-02-28T16:41:05.993Z","type":"message"}
{"nick":"devsnek","message":"?","date":"2019-02-28T16:41:18.418Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: it doesn't mean anything about our resolver","date":"2019-02-28T16:41:19.727Z","type":"message"}
{"nick":"bradleymeck","message":"it just says that ESM is less useful if we cannot use it consistently","date":"2019-02-28T16:41:30.488Z","type":"message"}
{"nick":"bradleymeck","message":"the more consistent ESM is, the more reason there is to use it","date":"2019-02-28T16:41:40.091Z","type":"message"}
{"nick":"devsnek","message":"i don't think any of the esm i've written can be run in a browser","date":"2019-02-28T16:41:55.885Z","type":"message"}
{"nick":"devsnek","message":"not for extension resolution reasons","date":"2019-02-28T16:42:04.258Z","type":"message"}
{"nick":"bradleymeck","message":"i've written a decent amount","date":"2019-02-28T16:42:14.553Z","type":"message"}
{"nick":"devsnek","message":"not for any sort of resolution reason","date":"2019-02-28T16:42:16.957Z","type":"message"}
{"nick":"devsnek","message":"so if my code cannot run in browser anyway","date":"2019-02-28T16:42:27.830Z","type":"message"}
{"nick":"bradleymeck","message":"mostly just entrypoints differ","date":"2019-02-28T16:42:30.293Z","type":"message"}
{"nick":"devsnek","message":"and i love feature x","date":"2019-02-28T16:42:34.505Z","type":"message"}
{"nick":"devsnek","message":"why not leave feature x in","date":"2019-02-28T16:42:39.906Z","type":"message"}
{"nick":"devsnek","message":"you can't use my package in browsers anyway","date":"2019-02-28T16:42:56.051Z","type":"message"}
{"nick":"bradleymeck","message":"because it means less overlap, liking a feature doesn't mean it necessarily makes there be no downsides","date":"2019-02-28T16:43:05.780Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: then make your package opt-out of the overlap :)","date":"2019-02-28T16:43:15.787Z","type":"message"}
{"nick":"devsnek","message":"you can't have less than 0","date":"2019-02-28T16:43:20.733Z","type":"message"}
{"nick":"bradleymeck","message":"the overlap isn't zero though","date":"2019-02-28T16:43:30.453Z","type":"message"}
{"nick":"devsnek","message":"it's already at 100% not compatible","date":"2019-02-28T16:43:32.920Z","type":"message"}
{"nick":"bradleymeck","message":"you can write code that runs in both","date":"2019-02-28T16:43:35.109Z","type":"message"}
{"nick":"bradleymeck","message":"just because *some* code cannot run in both, doesn't mean we should make less code run in both","date":"2019-02-28T16:43:51.655Z","type":"message"}
{"nick":"devsnek","message":"so you think if we allow this","date":"2019-02-28T16:44:06.172Z","type":"message"}
{"nick":"devsnek","message":"there will be code that could run on both","date":"2019-02-28T16:44:12.721Z","type":"message"}
{"nick":"devsnek","message":"but the authors will make this mistake of using resolution","date":"2019-02-28T16:44:23.522Z","type":"message"}
{"nick":"bradleymeck","message":"less code will be written that runs in both yes","date":"2019-02-28T16:44:24.921Z","type":"message"}
{"nick":"devsnek","message":"because they only intended to run it in node","date":"2019-02-28T16:44:33.997Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: then they can opt into some form of specialized resolution and state they don't want to run in all envs","date":"2019-02-28T16:44:57.627Z","type":"message"}
{"nick":"devsnek","message":"i dunno","date":"2019-02-28T16:44:58.063Z","type":"message"}
{"nick":"bradleymeck","message":"otherwise people will try to load their code and it will fail","date":"2019-02-28T16:45:11.257Z","type":"message"}
{"nick":"bradleymeck","message":"you just need to opt out of the safer form","date":"2019-02-28T16:45:23.320Z","type":"message"}
{"nick":"bradleymeck","message":"which is fine :)","date":"2019-02-28T16:45:35.361Z","type":"message"}
{"nick":"devsnek","message":"i'm not convinced tbh","date":"2019-02-28T16:45:56.304Z","type":"message"}
{"nick":"devsnek","message":"if you're generating an import map","date":"2019-02-28T16:46:13.271Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: even if you generate an import map, it doesn't cover all possible resolution cases. it really is just tailored for bare specifiers","date":"2019-02-28T16:46:41.214Z","type":"message"}
{"nick":"devsnek","message":"it can absolutely cover extension and folder resolution","date":"2019-02-28T16:46:55.726Z","type":"message"}
{"nick":"bradleymeck","message":"for bare specifiers ya, not absolute or relative","date":"2019-02-28T16:47:08.979Z","type":"message"}
{"nick":"devsnek","message":"why not absolute","date":"2019-02-28T16:47:20.163Z","type":"message"}
{"nick":"bradleymeck","message":"also it would explode in size which in general is no-bueno for web","date":"2019-02-28T16:47:29.098Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: because import maps cannot overload absolute, and redirects generate 2 modules instead of letting you point to another","date":"2019-02-28T16:47:55.516Z","type":"message"}
{"nick":"devsnek","message":"you can't map `/x/y` to `/x/y.js`?","date":"2019-02-28T16:48:18.940Z","type":"message"}
{"nick":"bradleymeck","message":"nope","date":"2019-02-28T16:48:59.196Z","type":"message"}
{"nick":"devsnek","message":"butwhy","date":"2019-02-28T16:49:12.970Z","type":"message"}
{"nick":"devsnek","message":"wait","date":"2019-02-28T16:49:37.266Z","type":"message"}
{"nick":"devsnek","message":"it has scopes","date":"2019-02-28T16:49:39.027Z","type":"message"}
{"nick":"bradleymeck","message":"I don't really care at this point / we don't control the web","date":"2019-02-28T16:49:41.066Z","type":"message"}
{"nick":"devsnek","message":"it does support this","date":"2019-02-28T16:49:48.460Z","type":"message"}
{"nick":"devsnek","message":"yeah import maps can handle this","date":"2019-02-28T16:50:16.732Z","type":"message"}
{"nick":"bradleymeck","message":"how?","date":"2019-02-28T16:50:46.801Z","type":"message"}
{"nick":"devsnek","message":"https://github.com/WICG/import-maps#scope-inheritance","date":"2019-02-28T16:50:53.722Z","type":"message"}
{"nick":"devsnek","message":"it's kind of an inside out system","date":"2019-02-28T16:51:00.480Z","type":"message"}
{"nick":"bradleymeck","message":"https://github.com/WICG/import-maps#the-import-map only allows bare import specifiers to be intercepted","date":"2019-02-28T16:51:02.223Z","type":"message"}
{"nick":"devsnek","message":"oh yeah it still can't map the ./","date":"2019-02-28T16:51:37.912Z","type":"message"}
{"nick":"devsnek","message":"ugh","date":"2019-02-28T16:51:40.037Z","type":"message"}
{"nick":"devsnek","message":"so close yet so far","date":"2019-02-28T16:51:46.449Z","type":"message"}
{"nick":"bradleymeck","message":"devsnek: scopes won't allow the above either","date":"2019-02-28T16:51:46.645Z","type":"message"}
{"nick":"bradleymeck","message":"it just states that modules with URLs inside of /scope2/ resolve `import \"a\"` => \"/a-2.mjs\"","date":"2019-02-28T16:52:31.512Z","type":"message"}
{"nick":"bradleymeck","message":"it doesn't let you overload /scope2/a","date":"2019-02-28T16:53:00.539Z","type":"message"}
{"nick":"devsnek","message":"Domenic: what's the reasoning on import maps only taking bare specifiers on the lhs","date":"2019-02-28T16:53:03.361Z","type":"message"}
{"nick":"devsnek","message":"i tried searching through the repo a bit but couldn't find anything on it","date":"2019-02-28T16:53:31.086Z","type":"message"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-28T16:58:55.768Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T17:00:13.958Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-02-28T17:04:37.167Z","type":"quit"}
{"nick":"Domenic","message":"devsnek: I don't think that restriction exists?","date":"2019-02-28T17:04:57.632Z","type":"message"}
{"nick":"devsnek","message":"Domenic: so i could map `/node_modules/x/y` to `/node_modules/x/y.js`?","date":"2019-02-28T17:05:39.196Z","type":"message"}
{"nick":"Domenic","message":"Yes, there are examples that do that.","date":"2019-02-28T17:05:49.492Z","type":"message"}
{"nick":"devsnek","message":"assuming a file imports `'./y'`","date":"2019-02-28T17:05:56.766Z","type":"message"}
{"nick":"devsnek","message":"not `'y'`","date":"2019-02-28T17:05:59.685Z","type":"message"}
{"nick":"Domenic","message":"Correct.","date":"2019-02-28T17:07:29.309Z","type":"message"}
{"nick":"devsnek","message":"excellent","date":"2019-02-28T17:07:34.642Z","type":"message"}
{"nick":"Domenic","message":"I guess there is no explicit example of that","date":"2019-02-28T17:08:12.673Z","type":"message"}
{"nick":"Domenic","message":"It's implicit in https://github.com/WICG/import-maps#for-built-in-modules-in-browsers-without-import-maps","date":"2019-02-28T17:08:15.088Z","type":"message"}
{"nick":"Domenic","message":"Adding one, especially a realistic one, would be a welcome PR.","date":"2019-02-28T17:08:23.488Z","type":"message"}
{"nick":"Hu0p","date":"2019-02-28T17:08:39.426Z","type":"join"}
{"nick":"devsnek","message":"Domenic: there is \"Note how unlike some Node.js usages, we include the ending .js here. File extensions are required in browsers; unlike in Node, we do not have the luxury of trying multiple file extensions until we find a good match. Fortunately, including file extensions also works in Node.js; that is, if everyone uses file extensions for submodules, their code will work in both environments.\"","date":"2019-02-28T17:10:41.921Z","type":"message"}
{"nick":"devsnek","message":"would you call it a good usage of import maps to map relative imports without extensions","date":"2019-02-28T17:11:20.014Z","type":"message"}
{"nick":"howdoi","reason":"Quit: Connection closed for inactivity","date":"2019-02-28T17:15:39.595Z","type":"quit"}
{"nick":"lundibundi","reason":"Ping timeout: 250 seconds","date":"2019-02-28T17:17:56.859Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T17:19:10.141Z","type":"join"}
{"nick":"bradleymeck","message":"TIL","date":"2019-02-28T17:23:28.719Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 258 seconds","date":"2019-02-28T17:23:53.146Z","type":"quit"}
{"nick":"devsnek","message":"bradleymeck: i agree with you that it would make the maps bloated though :P","date":"2019-02-28T17:29:30.700Z","type":"message"}
{"nick":"devsnek","message":"although maps might already be bloated","date":"2019-02-28T17:29:36.254Z","type":"message"}
{"nick":"bradleymeck","message":"there is a lot of X might happen/be bad, therefore Y relying on X shouldn't be any worse. Which seems odd to me","date":"2019-02-28T17:32:00.647Z","type":"message"}
{"nick":"bradleymeck","message":"Y relying on X which might be bad, still means ideally we shouldn't rely on X?","date":"2019-02-28T17:32:13.740Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T17:34:35.320Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 246 seconds","date":"2019-02-28T17:39:04.280Z","type":"quit"}
{"nick":"Domenic","message":"devsnek: I would call it a bad usage, but I'm unsure how much to put my foot on the scale vs. let the ecosystem decide.","date":"2019-02-28T17:50:57.937Z","type":"message"}
{"nick":"Domenic","message":"As such I am indeed unsure whether to accept that PR","date":"2019-02-28T17:51:29.249Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T17:53:37.622Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-28T17:58:14.481Z","type":"quit"}
{"nick":"devsnek","message":"Domenic: hopefully my response to myles answered you too","date":"2019-02-28T17:59:00.991Z","type":"message"}
{"nick":"Domenic","message":"It seems like some folks still don't get it that that remaps arbitrary URL references though, including ./","date":"2019-02-28T17:59:56.094Z","type":"message"}
{"nick":"devsnek","message":"i could also add the example i posted for jkrems","date":"2019-02-28T18:01:08.552Z","type":"message"}
{"nick":"howdoi","date":"2019-02-28T18:13:31.803Z","type":"join"}
{"nick":"dbevenius","date":"2019-02-28T18:13:44.380Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-02-28T18:18:29.338Z","type":"quit"}
{"nick":"lpin","reason":"Quit: Textual IRC Client: www.textualapp.com","date":"2019-02-28T18:48:03.908Z","type":"quit"}
{"nick":"bradleymeck","message":"Domenic: if i understand this, you can arbitrarily rewrite even file:// ?","date":"2019-02-28T18:51:19.776Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T18:53:52.504Z","type":"join"}
{"nick":"Domenic","message":"It would allow you to change the meaning of any import specifier string that corresponds to fetchable URL, yes.","date":"2019-02-28T18:57:34.033Z","type":"message"}
{"nick":"bradleymeck","message":"kk","date":"2019-02-28T18:57:58.513Z","type":"message"}
{"nick":"dbevenius","reason":"Ping timeout: 240 seconds","date":"2019-02-28T18:58:07.394Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T18:58:47.536Z","type":"join"}
{"nick":"Yann2","date":"2019-02-28T20:15:25.671Z","type":"join"}
{"nick":"Yann2","message":"Hello o/ I submitted a PR a few hours ago that (I believe) fixes a race condition in node's handling of incorrect user requests ( https://github.com/nodejs/node/pull/26356 )  a contributor asked me if I could submit a regression test... I would love to but am a bit out of my comfort zone. Being a race condition, it feels quite challenging to test without mocking / severe code alterations. Could someone","date":"2019-02-28T20:16:20.380Z","type":"message"}
{"nick":"Yann2","message":"provide me some guidance?  (Cross post from #nodejs)","date":"2019-02-28T20:16:22.812Z","type":"message"}
{"nick":"Yann2","message":"Also: I would love to discuss this https://github.com/nodejs/node/blob/1d397423ef0c12becb9f6f0e8e23728081270053/lib/_http_server.js#L510  line. There is some issue with this causing a 502 behind an AWS ELB - and I believe the reason might be that under HTTP 1.1, the default behaviour would be Connection: keep-alive . I ve had some success specifying a Connection: Close, but a HTTP/1.0 might work too. Would","date":"2019-02-28T20:20:27.631Z","type":"message"}
{"nick":"Yann2","message":"love some more thoughts on this!","date":"2019-02-28T20:20:29.741Z","type":"message"}
{"nick":"dbevenius","reason":"Remote host closed the connection","date":"2019-02-28T20:21:48.866Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T20:33:55.628Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 244 seconds","date":"2019-02-28T20:38:02.350Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T20:53:57.761Z","type":"join"}
{"nick":"ljharb","message":"is node v11.0.1 released? nobody pinged here","date":"2019-02-28T20:56:48.509Z","type":"message"}
{"nick":"ljharb","topic":"Get registered on freenode ( https://git.io/vaTS2 ) | Node.js Current: v11.10.1 | LTS: Dubnium v10.15.1, Carbon v8.15.0, Boron v6.16.0; EOL: Argon v4.9.1, v9, v7, <= v5 | -- https://nodejs.org/ -- IRC Logs: http://logs.libuv.org/node-dev/latest -- Newcomers welcome: http://nodeschool.io/ -- dev channel for all things node core","date":"2019-02-28T20:57:00.885Z","type":"topic"}
{"nick":"ljharb","topic":"Get registered on freenode ( https://git.io/vaTS2 ) | Node.js Current: v11.10.1 | LTS: Dubnium v10.15.2, Carbon v8.15.1, Boron v6.17.0; EOL: Argon v4.9.1, v9, v7, <= v5 | -- https://nodejs.org/ -- IRC Logs: http://logs.libuv.org/node-dev/latest -- Newcomers welcome: http://nodeschool.io/ -- dev channel for all things node core","date":"2019-02-28T20:57:57.274Z","type":"topic"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-28T20:58:30.475Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T21:13:56.101Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-28T21:18:26.837Z","type":"quit"}
{"nick":"devsnek","message":"i didn't even notice","date":"2019-02-28T21:23:38.021Z","type":"message"}
{"nick":"boneskull","message":"has node ever bumped a major _without_ breaking changes?  if, for some reason, the project went without a breaking change for 6 months, would the version be bumped anyway?","date":"2019-02-28T21:23:49.164Z","type":"message"}
{"nick":"devsnek","message":"it bumps for tracking release lines","date":"2019-02-28T21:24:09.759Z","type":"message"}
{"nick":"devsnek","message":"so yes","date":"2019-02-28T21:24:15.216Z","type":"message"}
{"nick":"devsnek","message":"but i doubt we could go six months without a breaking change lol","date":"2019-02-28T21:24:25.438Z","type":"message"}
{"nick":"julianduque","reason":"Quit: leaving","date":"2019-02-28T21:24:25.805Z","type":"quit"}
{"nick":"boneskull","message":"yes","date":"2019-02-28T21:24:29.241Z","type":"message"}
{"nick":"julianduque","date":"2019-02-28T21:24:45.414Z","type":"join"}
{"nick":"devsnek","message":"man the security bugs are always http","date":"2019-02-28T21:25:44.849Z","type":"message"}
{"nick":"dbevenius","date":"2019-02-28T21:33:57.528Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 245 seconds","date":"2019-02-28T21:38:22.250Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T22:13:57.629Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-28T22:18:40.563Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T22:43:57.150Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 258 seconds","date":"2019-02-28T22:48:34.148Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T23:04:02.603Z","type":"join"}
{"nick":"dbevenius","reason":"Ping timeout: 250 seconds","date":"2019-02-28T23:08:30.488Z","type":"quit"}
{"nick":"julianduque","reason":"Ping timeout: 255 seconds","date":"2019-02-28T23:19:32.367Z","type":"quit"}
{"nick":"AtumT","reason":"Quit: AtumT","date":"2019-02-28T23:28:57.067Z","type":"quit"}
{"nick":"dbevenius","date":"2019-02-28T23:34:09.357Z","type":"join"}
{"nick":"Hu0p","reason":"Quit: Do Macbooks Dream of Electric Sheep?","date":"2019-02-28T23:37:01.975Z","type":"quit"}
{"nick":"dbevenius","reason":"Ping timeout: 255 seconds","date":"2019-02-28T23:38:53.300Z","type":"quit"}
{"nick":"Hu0p","date":"2019-02-28T23:49:16.418Z","type":"join"}
{"nick":"Hu0p","reason":"Quit: Do Macbooks Dream of Electric Sheep?","date":"2019-02-28T23:54:42.355Z","type":"quit"}
